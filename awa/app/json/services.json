[{"comment": null, "homepage_links": [], "_id": {"$oid": "51434da193546d52388cab3a"}, "classifications": [{"type": "mobyle1", "classification": "display"}], "description": "Display the trace in an ABI sequencer file", "title": "abiview", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "Abi sequencing trace file", "name": "e_infile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -infile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Binary", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "First base to report or display (value greater than or equal to 0)", "name": "e_startbase", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -startbase=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Last sequence base to report or display. If the default is set to zero then the value of this is taken as the maximum number  of bases.", "prompt": "Last base to report or display", "name": "e_endbase", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -endbase=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Separate the trace graphs for the 4 bases", "name": "e_separate", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -separate\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display y-axis ticks", "name": "e_yticks", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -yticks\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display the sequence on the graph", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\" -nosequence\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequence display window size", "name": "e_window", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -window=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Base graphs to be displayed", "name": "e_bases", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -bases=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "abiview"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/abiview.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "abiview"}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\">This tool reorders the entries of an MSA according to a reference set of sequences.</html:div>", "homepage_links": [], "_id": {"$oid": "51434da193546d52388cab3b"}, "classifications": [{"type": "mobyle1", "classification": "alignment:formatter"}], "description": "Reorders the entries of an MSA", "title": "alignment entries reordering", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "reordered alignment", "name": "reordered_alignment", "simple": null, "filenames": {"python": "\"align_reorder.out\"", "perl": "\"align_reorder.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "alignment", "name": "fasta_align", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -a \" + str( value )", "perl": "\" -a $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "sequences", "name": "fasta_sequences", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -s \" + str( value )", "perl": "\" -s $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": "N\u00e9ron, B.", "command": {"path": null, "value": "align_reorder"}, "documentation_links": [], "type": "program", "name": "align_reorder"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da193546d52388cab3c"}, "classifications": [{"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:Peak Annotation"}, {"type": "mobyle1", "classification": "Genomic Analysis:Multi-Purpose Tools"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Annotation and Alignment"}, {"type": "mobyle1", "classification": "Sequence Analysis and Comparison:Comparative Genomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Variant Analysis"}, {"type": "mobyle1", "classification": "Utilities and Tools:File Format Conversion"}, {"type": "mobyle1", "classification": "Omics:Genomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:Variant calling"}], "description": "annotateBed annotates a BED/VCF/GFF file with the coverage and number of overlaps observed from multiple other BED/VCF/GFF files. In this way, it allows one to ask to what degree one feature coincides with multiple other feature types with a single command.", "title": "BEDtools: Annotate BED files", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output", "name": "output_para", "children": [{"comment": null, "prompt": "GenomeAnnotation", "name": "annotateBed_out", "simple": null, "filenames": {"python": "(\"annotated_data\",output_file)[output_file is not None] + \".bed\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input", "name": "input_para", "children": [{"comment": "BED/VCF/GFF format file that should be used as the basis of comparing the annotation", "prompt": "BED/VCF/GFF data that needs annotation (-i)", "name": "input_file", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "\" -i \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Data should be BED/VCF/GFF format file. If multiple files are to be compared then upload a zip file or tar.gz file using the upload option.", "prompt": "Data used for comparison", "name": "input_other_files", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "\" -files \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "options_para", "children": [{"comment": "List of names (one per file uploaded). These names will be printed as a header line.", "prompt": "List of names that corresponds to the uploaded files (-names)", "name": "file_names", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -names \" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default option: overlaps are counted without respect to strand.Same strandedness option: only counts overlaps on the _same_ strand.Different strandedness option: only count overlaps \ton the _opposite_ strand.", "prompt": "Strandedness (-s or -S)", "name": "force_strand_option", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" \" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output", "name": "output_para", "children": [{"comment": null, "prompt": "Enter output file prefix:", "name": "output_file", "ctrl": null, "simple": null, "argpos": "52", "format": {"python": "(\" > \" + str(vdef) , \" > \" + str(value))[value is not None] + \".bed\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Report options (-counts or -both)", "name": "report_options", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \"  \" +  str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "2.15.0", "references": [], "source_links": [], "env": [], "authors": "Quinlan A.R. & Hall I.M.", "command": {"path": null, "value": "annotateBed"}, "documentation_links": [], "type": "program", "name": "annotateBed"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da193546d52388cab3d"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:motifs"}], "description": "Finds antigenic sites in proteins", "title": "antigenic", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Minimum length of antigenic region (value from 1 to 50)", "name": "e_minlen", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -minlen=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "antigenic"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/antigenic.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "antigenic"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da193546d52388cab3e"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:translation"}, {"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Back-translate a protein sequence to ambiguous nucleotide sequence", "title": "backtranambig", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Genetic codes", "name": "e_table", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -table=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "backtranambig"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/backtranambig.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "backtranambig"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da193546d52388cab3f"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:translation"}, {"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Back-translate a protein sequence to a nucleotide sequence", "title": "backtranseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "cfile option", "name": "e_cfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -cfile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "backtranseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/backtranseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "backtranseq"}, {"comment": null, "homepage_links": ["http://www.stat.wisc.edu/~larget/"], "_id": {"$oid": "51434da193546d52388cab40"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:bayesian"}], "description": "Bayesian Analysis in Molecular Biology and Evolution", "title": "BAMBE", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Results files", "name": "results_files", "simple": null, "filenames": {"python": "\"bambe_results.out\"", "perl": "\"bambe_results.lpd\" and  \"bambe_results.par\" and  \"bambe_results.out\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Tree file", "name": "result_tree", "simple": null, "filenames": {"python": "\"bambe_results.tre\"", "perl": "\"bambe_results.tre\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "test", "#children": ["NEWICK"], "@eq": "1", "@param": "newick_format"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Topology file", "name": "top_file", "simple": null, "filenames": {"python": "\"bambe_results.top\"", "perl": "\"bambe_results.top\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "bambe", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"bambe <bambe.params\"", "perl": "\"bambe <bambe.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment file (data-file)", "name": "data_file", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\"data-file=\"+str(value)+\"\\n\"", "perl": "\"data-file=$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["CLUSTAL"], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "precond": null, "prompt": "Run characteristics", "name": "run_options", "children": [{"comment": null, "prompt": "Seed for random number generator (seed)", "name": "seed", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"seed=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"seed=$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Number of cycles to run the main algorithm (cycles)", "name": "cycles", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"cycles=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ?\"cycles=$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "Also used for updating the window size during burn-in.", "prompt": "Number of cycles between printing trees to output (window-interval)", "name": "window_interval", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"window-interval=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"window-interval=$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Algorithm to run during production cycles (main-algorithm)", "name": "main_algorithm", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"main-algorithm=\"+str(value)+\"\\n\")[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \"main-algorithm=$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "Parameter values are not updated during burn. User should discard these cycles and the initial cycles of the main algorithm before inference.", "prompt": "Number of cycles to run the burn algorithm (burn)", "name": "burn", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"burn=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"burn=$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Algorithm to run during burn (burn-algorithm)", "name": "burn_algorithm", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\"burn-algorithm=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"burn-algorithm=$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Use scaled beta distribution modification of the local algorithm (use-beta)", "name": "use_beta", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"use-beta=true\\n\")[ value ]", "perl": "($value) ? \"use-beta=true\\\\n\" : \"\""}, "command": false, "precond": {"python": "main_algorithm == \"local\" or burn_algorithm == \"local\"", "perl": "$main_algorithm eq \"local\" or $burn_algorithm eq \"local\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}]}, {"comment": null, "precond": null, "prompt": "Model specification", "name": "model_options", "children": [{"comment": null, "prompt": "Use a molecular clock (molecular-clock)", "name": "molecular_clock", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"molecular-clock=false\\n\", \"\")[ value ]", "perl": "($value) ? \"\" :\"molecular-clock=false\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Likelihood model (likelihood-model)", "name": "likelihood_model", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"likelihood-model=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"likelihood-model=$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "Each category has its own set of parameters. Each category is denoted by a positive integer between 1 and 10. A comma-separated list gives the categories of the sites in order, e.g., 1,2,3,1,3 means that the first site is in category 1, the second in 2, the third in 3, the fourth in 1, and the fifth site is in category 3.A repeat count is indicated by a caret (^). For example, 1^20,2^5,3^2 means that the first twenty sites are in category 1, the next five sites are in 2, and the next two sites are in category 3.Parentheses may be used to group sites together with a common repeat count, i.e., (1,2)^5 is the same as 1,2,1,2,1,2,1,2,1,2. Repeat counts may be nested, e.g., (1^3,2)^2 is the same as 1,1,1,2,1,1,1,2.Repetition to the end of the list of sites is indicated by an asterisk (*). For example, 1^5,2* means that the first five sites are in category 1, and all the remaining sites are in category 2. Parentheses may also be used in conjunction with the asterisk, e.g., (1,2)* is the same as 1,2,1,2,1,2,.... The category list may contain at most one asterisk and it must be associated with the last category or group in the list. In other words, an asterisk may appear only at the end of the list.Examples1* - all sites are the same category. (default)(1,2,3)* - all sites are partitioned by codon position.1^99,2^50,3^9 - the sites are divided over three genes. Each gene has its own set of parameters used by all sites in that gene. The first gene is composed of the first ninety-nine sites, the next by the next fifty sites, and the last by nine sites.", "prompt": "A valid category list (category-list)", "name": "category_list", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"category-list=\"+str(value)+\"\\n\" )[value is not None]", "perl": "(defined $value) ? \"category-list=$value\\\\n\" :\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "If true, the same kappa parameter is used for all site categories. If false, there are different values for different site categories. It has no effect if there is only one rate category.", "prompt": "Single kappa (single-kappa)", "name": "single_kappa", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"single-kappa=true\\n\")[ value ]", "perl": "($value) ? \"single-kappa=true\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "If single-kappa is true, a warning is given if more than one value is specified. The first value will be used. If single-kappa is false, a value must be specified for each category in use.", "prompt": "Comma separated list of positive kappa values for each site category (initial-kappa)", "name": "initial_kappa", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"initial-kappa=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"initial-kappa=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "likelihood_model==\"HKY85\" or likelihood_model==\"F84\"", "perl": "$likelihood_model eq \"HKY85\" or $likelihood_model eq \"F84\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "The weighted average of these values should be 1, with weights given by the proportion of sites in each site category. (Renormalization is automatic and a warning given if the condition fails.) If there are an equal number of sites in each category, for example, the numbers should average to 1.", "prompt": "Comma separated list of positive theta values for each site category (initial-theta)", "name": "initial_theta", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"initial-theta=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"initial-theta=$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "If true, the initial stationary probabilities for each base in each category are estimated by the relative frequencies with which they appear in the data.", "prompt": "Use empirical relative frequencies (estimate-pi)", "name": "estimate_pi", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"estimate-pi=false\\n\",\"\")[ value ]", "perl": "($value) ? \"\" : \"estimate-pi=false\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Comma separated list of initial pi value of base A (initial-pia)", "name": "initial_pia", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"initial-pia=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"initial-pia=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "not estimate_pi", "perl": "not $estimate_pi"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Comma separated list of initial pi value of base G (initial-pig)", "name": "initial_pig", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"initial-pig=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"initial-pig=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "not estimate_pi", "perl": "not $estimate_pi"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Comma separated list of initial pi value of base C (initial-pic)", "name": "initial_pic", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"initial-pic=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"initial-pic=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "not estimate_pi", "perl": "not $estimate_pi"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Comma separated list of initial pi value of base T (initial-pit)", "name": "initial_pit", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\"initial-pit=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"initial-pit=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "not estimate_pi", "perl": "not $estimate_pi"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is used only with TN93. There must be a value specified for each site-category used if TN93 is the chosen model.", "prompt": "Comma separated list of positive transition/transversion parameter values (TN93 model) (initial-ttp)", "name": "initial_ttp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"initial-ttp=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"initial-ttp=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "likelihood_model  == \"TN93\"", "perl": "$likelihood_model eq \"TN93\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "This is used only with TN93. There must be a value specified for each site-category used if TN93 is the chosen model.", "prompt": "Comma separated list of positive gamma values (TN93 model) (initial-gamma)", "name": "initial_gamma", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"initial-gamma=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"initial-gamma=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "likelihood_model  == \"TN93\"", "perl": "$likelihood_model eq \"TN93\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "This is used only with GREV model.", "prompt": "Comma separated list of positive r values for AC bases(GREV model) (initial-rac)", "name": "initial_Rac", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"initial-rac=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"initial-rac=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "likelihood_model  == \"GREV\"", "perl": "$likelihood_model eq \"GREV\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "This is used only with GREV model.", "prompt": "Comma separated list of positive r values for AG  (GREV model) (initial-rag)", "name": "initial_Rag", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"initial-rag=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"initial-rag=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "likelihood_model  == \"GREV\"", "perl": "$likelihood_model eq \"GREV\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "This is used only with GREV model.", "prompt": "Comma separated list of positive r values for AT (GREV model) (initial-rat)", "name": "initial_Rat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"initial-rat=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"initial-rat=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "likelihood_model  == \"GREV\"", "perl": "$likelihood_model eq \"GREV\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "This is used only with GREV model.", "prompt": "Comma separated list of positive r values for CG (GREV model) (initial-rcg)", "name": "initial_Rcg", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"initial-rcg=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"initial-rcg=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "likelihood_model  == \"GREV\"", "perl": "$likelihood_model eq \"GREV\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "This is used only with GREV model.", "prompt": "Comma separated list of positive r values for CT (GREV model) (initial-rct)", "name": "initial_Rct", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"initial-rct=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"initial-rct=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "likelihood_model  == \"GREV\"", "perl": "$likelihood_model eq \"GREV\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "This is used only with GREV model.", "prompt": "Comma separated list of positive r values for GT  (GREV model) (initial-rct)", "name": "initial_Rgt", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"initial-rgt=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \"initial-rgt=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "likelihood_model  == \"GREV\"", "perl": "$likelihood_model eq \"GREV\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}]}, {"comment": null, "precond": null, "prompt": "Parameter updating", "name": "param_update", "children": [{"comment": "During the main algorithm, any 'on' parameters are updated at each cycle divisible by this value. Use zero for no parameter updating.", "prompt": "Parameter update interval (parameter-update-interval)", "name": "parameter_update_interval", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"parameter-update-interval=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"parameter-update-interval=$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Update kappa value (update-kappa)", "name": "update_kappa", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"update-kappa=false\\n\", \"\")[ value ]", "perl": "($value) ? \"\" : \"update-kappa=false\\\\n\""}, "command": false, "precond": {"python": "likelihood_model==\"HKY85\" or likelihood_model==\"F84\"", "perl": "$likelihood_model eq \"HKY85\" or $likelihood_model eq \"F84\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Update theta value (update-theta)", "name": "update_theta", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"update-theta=false\\n\", \"\")[ value ]", "perl": "($value) ? \"\" : \"update-theta=false\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Update pi value (update-pi)", "name": "update_pi", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"update-pi=false\\n\", \"\")[ value ]", "perl": "($value) ? \"\" : \"update-pi=false\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Update ttp value (TN93 model) (update-ttp)", "name": "update_ttp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"update-ttp=false\\n\", \"\")[ value ]", "perl": "($value) ? \"\" : \"update-ttp=false\\\\n\""}, "command": false, "precond": {"python": "likelihood_model == \"TN93\"", "perl": "$likelihood_model eq \"TN93\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Update gamma value for (TN93 model) (update-gamma)", "name": "update_gamma", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"update-gamma=false\\n\", \"\")[ value ]", "perl": "($value) ? \"\" : \"update-gamma=false\\\\n\""}, "command": false, "precond": {"python": "likelihood_model == \"TN93\"", "perl": "$likelihood_model eq \"TN93\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Update grev (GREV model) (update-grev)", "name": "update_grev", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"update-grev=false\\n\", \"\")[ value ]", "perl": "($value) ? \"\" : \"update-grev=false\\\\n\""}, "command": false, "precond": {"python": "likelihood_model == \"GREV\"", "perl": "$likelihood_model eq \"GREV\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Update invariant probability (update-invariant-prob)", "name": "update_invariant_prob", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"update-invariant-prob=true\\n\")[ value ]", "perl": "($value) ? \"update-invariant-prob=true\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "This tuning parameter is only used with the local algorithm. It modulates the size of a maximal stretch. The smaller the value, the greater the tree acceptance rate will be.", "prompt": "Stretch parameter for local (local-tune)", "name": "local_tune", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"local-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"local-tune=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "burn_algorithm == \"local\" or main_algorithm == \"local\"", "perl": "$burn_algorithm eq \"local\" or $main_algorithm eq \"local\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "Tuning parameter used during update of theta value(s). The larger its value, the more likely proposals are to be accepted.", "prompt": "Dirichlet parameter for theta update (theta-tune)", "name": "theta_tune", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\"theta-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"theta-tune=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "parameter_update_interval != 0 and update_theta", "perl": "$parameter_update_interval != 0 and $update_theta"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "Tuning parameter used during update of pi values. The larger its value, the more likely proposals are to be accepted.", "prompt": "Dirichlet parameter for pi update (pi-tune)", "name": "pi_tune", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"pi-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"pi-tune=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "parameter_update_interval != 0 and update_pi", "perl": "$parameter_update_interval != 0 and $update_pi"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "This tuning parameter is only used when 'parameter-update-interval' is positive and 'update-kappa' is true. The smaller its value, the greater the parameter acceptance rate will be.", "prompt": "Halft the size of the window for uniform updates of kappa (kappa-tune)", "name": "kappa_tune", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\"kappa-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"kappa-tune=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "parameter_update_interval != 0 and update_kappa and (likelihood_model == \"HKY85\" or likelihood_model == \"F84\")", "perl": "$parameter_update_interval != 0 and $update_kappa and ($likelihood_model eq \"HKY85\" or $likelihood_model eq \"F84\")"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "This tuning parameter is only used when 'parameter-update-interval' is positive and 'update-ttp' is true. The smaller its value, the greater the parameter acceptance rate will be.", "prompt": "Halft window width for ttp update (TN93 model) (ttp-tune)", "name": "ttp_tune", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\"ttp-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"ttp-tune=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "parameter_update_interval != 0 and update_ttp and likelihood_model == \"TN93\"", "perl": "$parameter_update_interval != 0 and $update_ttp and $likelihood_model eq \"TN93\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "This tuning parameter is only used when 'parameter-update-interval' is positive and 'update-gamma' is true. The smaller its value, the greater the parameter acceptance rate will be.", "prompt": "Half window width for gamma update (TN93 model) (gamma-tune)", "name": "gamma_tune", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\"gamma-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"gamma-tune=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "parameter_update_interval != 0 and update_gamma and likelihood_model == \"TN93\"", "perl": "$parameter_update_interval != 0 and $update_gamma and $likelihood_model eq \"TN93\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Halft window width for grev update (grev-tune)", "name": "grev_tune", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\"grev-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"grev-tune=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "parameter_update_interval != 0 and update_grev and likelihood_model==\"GREV\"", "perl": "$parameter_update_interval != 0 and $update_grev and $likelihood_model eq \"GREV\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Beta parameter for local update (beta-tune)", "name": "beta_tune", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\"beta-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"beta-tune=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "use_beta", "perl": "$use_beta"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Halft window width for invariant probability update (invariant-prob-tune)", "name": "invariant_prob_tune", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\"invariant-prob-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"invariant-prob-tune=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "parameter_update_interval != 0 and update_invariant_prob", "perl": "$parameter_update_interval != 0 and $update_invariant_prob"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": "During burn and main algorithms, the tree topology, log likelihoods, and parameters are written to files at each cycle divisible by this value.", "prompt": "Sample interval (sample-interval)", "name": "sample_interval", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\"sample-interval=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"sample-interval=$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "Indicates the format of the tree to read (if not random) and the format of the tree to print after the run.", "prompt": "Newick format of tree file (newick-format)", "name": "newick_format", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"newick-format=false\\n\", \"\")[ value ]", "perl": "($value) ? \"newick-format=false\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}]}, {"comment": null, "prompt": null, "name": "file_root", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\"file-root=bambe_results\\n\"", "perl": "\"file-root=bambe_results\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "precond": null, "prompt": "Input options", "name": "input_options", "children": [{"comment": "This is ignored if a molecular clock is assumed. In the absence of a clock, trees and tree topologies are printed with the outgroup emerging directly from the root.", "prompt": "Number of the outgroup (outgroup)", "name": "outgroup", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"outgroup=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"outgroup=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "molecular_clock", "perl": "$molecular_clock"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "If no tree file is given, the program generates a random tree from a flat distribution where each labeled history is equally likely.", "prompt": "Tree file (tree-file)", "name": "tree_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"tree-file=\"+str(value)+\"\\n\")[value is not None]", "perl": "(defined $value) ? \"tree-file=$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "initial_tree_type==\"bambe\" or initial_tree_type==\"newick\"", "perl": "$initial_tree_type eq \"bambe\" or $initial_tree_type eq \"newick\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "test", "#children": ["NEWICK"], "@eq": "newick", "@param": "initial_tree_type"}], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": ". random select a tree from the prior. upgma sets the initial clock tree to the UPGMA tree using maximum likelihood distances with the specified model and initial parameter values.. neighbor-joining sets the initial nonclock tree to the neigbor joining tree using maximum likelihood distances with the specified model and initial parameter values.. newick reads in an initial tree in Newick format from a file.. bambe reads in an initial tree in BAMBE format from a file.", "prompt": "Initial tree type (initial-tree-type)", "name": "initial_tree_type", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"initial-tree-type=\"+str(value)+\"\\n\")[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \"initial-tree-type=$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": null, "prompt": "Print all trees?(print-all-trees)", "name": "print_all_trees", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"print-all-trees=false\\n\", \"\")[value ]", "perl": "($value) ? \"\" : \"print-all-trees=false\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}, {"comment": "This parameter is only used to generate an initial random tree.", "prompt": "Initial tree height used to generate an initial random tree (max-initial-tree-height)", "name": "max_initial_tree_height", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"max-initial-tree-height=\"+str(value)+\"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"max-initial-tree-height=$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "bambe.params"}]}]}, "version": "4.01", "references": [{"url": null, "doi": null, "label": "Larget, B. and D. Simon (1999). Markov chain Monte\n\tCarlo algorithms for the Bayesian analysis of phylogenetic\n\ttrees. Molecular Biology and Evolution 16:750-759."}, {"url": null, "doi": null, "label": "Simon, D. and B. Larget. 1998. Bayesian analysis in\n\tmolecular biology and evolution (BAMBE), version 1.01\n\tbeta. Department of Mathematics and Computer Science, Duquesne\n\tUniversity."}], "source_links": ["http://www.stat.wisc.edu/~larget/"], "env": [], "authors": "Simon, Larget", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "bambe"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da193546d52388cab41"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:composition"}], "description": "Plot bending and curvature data for B-DNA", "title": "banana", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BananaReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "Dna base trimer roll angles data file", "name": "e_anglesfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -anglesfile=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "BaseTrimerRollAngles", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "e_goutfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of residues to be displayed on each line", "name": "e_residuesperline", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -residuesperline=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "banana"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/banana.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "banana"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da193546d52388cab42"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "extract sequences with the largest ORF from a sequence translated with EMBOSS transseq and checktrans", "title": "bigorf_extract", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Sequence", "name": "protein_sequence_out", "simple": null, "filenames": {"python": "\"bigorf_extract.out\"", "perl": "\"bigorf_extract.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "This is where you should enter the list of candidate ORFs for each gene", "prompt": "Protein sequences to filter", "name": "protein_sequences", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \" + value"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Number of characters that should be stripped. Default value is 4 because transseq adds 2 characters (_[frame index]) and checktrans another 2 (_[candidate index])", "prompt": "Integer", "name": "characters_to_strip", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -s %d\" % value"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.0", "references": [], "source_links": [], "env": [], "authors": "E. Deveaud", "command": {"path": null, "value": "bigorf_extract.py"}, "documentation_links": [], "type": "program", "name": "bigorf_extract"}, {"comment": null, "homepage_links": ["http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/"], "_id": {"$oid": "51434da193546d52388cab43"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:distance"}], "description": "Neighbor Joining algorithm improved for molecular sequences", "title": "BIONJ", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Tree File", "name": "treefile", "simple": null, "filenames": {"python": "str(treefile_name)", "perl": "$treefile_name"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "Enter a matrix in Phylip format.This algorithm is adapted to evolutive\n\t  distances calculated from molecular data sequences (O. Gascuel,\n\t  1997, MBE 14(7), 685-695).If only one data matrix is given, then BIONJ\n\t    returns one tree. When the input file contains several matrices\n\t    given one after the other, as obtained when combining PHYLIP's\n\t    SEQBOOT and DNADIST to perform a bootstrap, BIONJ returns the\n\t    same number of trees, written one after the other in the output\n\t    file; this file may be given to PHYLIP's CONSENSE to obtain the\n\t    bootstrap tree.", "prompt": "Distances matrix File", "name": "infile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipDistanceMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of Tree File", "name": "treefile_name", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [{"url": null, "doi": null, "label": "Gascuel O., 1997, BIONJ: an improved version of the NJ algorithm based on a simple model of sequence data, Molecular Biology and Evolution 14(7):685-695"}], "source_links": ["http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/"], "env": [], "authors": "O. Gascuel", "command": {"path": null, "value": "bionj"}, "documentation_links": [], "type": "program", "name": "bionj"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da193546d52388cab44"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Replace or delete sequence sections", "title": "biosed", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Sequence section to match", "name": "e_targetregion", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -targetregion=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Delete the target sequence sections", "name": "e_delete", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -delete\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Replacement sequence section", "name": "e_replace", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -replace=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "not e_delete"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Sequence position to match (value greater than or equal to 0)", "name": "e_position", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -position=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "biosed"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/biosed.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "biosed"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da193546d52388cab45"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise"}], "description": "Comparison between two sequences with Blast (NCBI)", "title": "BL2SEQ", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": []}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Blast initiation", "name": "blast_init", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\"bl2seq\"", "perl": "\"bl2seq\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "- Blastp compares amino acid query sequences- Blastn compares nucleotide query sequences- tBlastx compares translated a nucleotide sequence and an amino acid sequence- tBlastn compares an amino acid sequence translated and a nucleotide sequence- tBlastx compares translated nucleotide sequences", "prompt": "Blast program (-p)", "name": "bl2seq", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -p \" + str(value)", "perl": "\" -p $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "First sequence (-i)", "name": "first_sequence", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" -i \" + str( value )", "perl": "\" -i $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein", "DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Location on query sequence", "prompt": "Start of required region in first query sequence (-I)", "name": "first_start_region", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "End of required region in first sequence (-I)", "name": "first_end_region", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( ' -I \"%s \"' % (str(first_start_region)), ' -I \"%s %s\"' % (str(first_start_region), str(value)))[value is not None]", "perl": "(defined $value) ? \" -I \\\"$first_start_region $value\\\"\" : \" -I \\\"$first_start_region\\\"\""}, "command": false, "precond": {"python": "first_start_region is not None", "perl": "defined $first_start_region"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Second sequence (-j)", "name": "second_sequence", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\" -j \" + str(value)", "perl": "\" -j $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein", "DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Start of required region in second sequence (-J)", "name": "second_start_region", "ctrl": null, "simple": null, "argpos": "4", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "End of required region in second sequence (-J)", "name": "second_end_region", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "( ' -J \"%s \"' % (str(second_start_region)), ' -J \"%s %s\"' % (str(second_start_region), str(value)))[value is not None]", "perl": "(defined $value) ? \" -J \\\"$second_start_region $value\\\"\" : \" -J \\\"$second_region\\\"\""}, "command": false, "precond": {"python": "second_start_region is not None", "perl": "defined $second_start_region"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Scoring options", "name": "scoring_opt", "children": [{"comment": "Default: 5 for blastn; 10 for blastp, blastx and 11 for tblastn", "prompt": "Cost to open a gap (-G)", "name": "open_a_gap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -G \"+str(value) )[value is not None]", "perl": "(defined $value) ? \" -G $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default: 2 for blastn; 1 for blastp, blastx and tblastnLimited values for gap existence and extension are supported for these programs.Existence -- Extension:BLOSUM909 -- 2, 8 -- 2, 7 -- 2, 6 -- 211 -- 1, 10 -- 1, 9 -- 1BLOSUM8025 -- 2, 13 -- 2, 9 -- 2, 8 -- 2, 7 -- 2, 6 -- 211 -- 1, 10 -- 1, 9 -- 1BLOSUM6211 -- 2, 10 -- 2, 9 -- 2, 8 -- 2, 7 -- 2, 6 -- 213 -- 1, 12 -- 1, 11 -- 1, 10 -- 1, 9 -- 1BLOSUM4513 -- 3, 12 -- 3, 11 -- 3, 10 -- 316 -- 2, 15 -- 2, 14 -- 2, 13 -- 2, 12 -- 219 -- 1, 18 -- 1, 17 -- 1, 16 -- 1PAM307 -- 2, 6 -- 2, 5 -- 210 -- 1, 9 -- 1, 8 -- 1PAM708 -- 2, 7 -- 2, 6 -- 211 -- 1, 10 -- 1, 9 -- 1", "prompt": "Cost to extend a gap (-E)", "name": "extend_a_gap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -E \"+str(value) )[value is not None]", "perl": "(defined $value) ? \" -E $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "bl2seq != \"blastn\"", "perl": "$bl2seq ne \"blastn\""}, "prompt": "Protein penalty (not for blastn)", "name": "scoring_blast", "children": [{"comment": null, "prompt": "Similarity matrix (-M)", "name": "matrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -M \"+str(value) )[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -M $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "bl2seq == \"blastn\"", "perl": "$bl2seq eq \"blastn\""}, "prompt": "Blastn penalty", "name": "scoring_blastn", "children": [{"comment": null, "prompt": "Penalty for a nucleotide mismatch (-q)", "name": "mismatch", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -q \"+str(value) )[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -q $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Reward for a nucleotide match (-r)", "name": "match", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -r \"+str(value) )[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -r $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": "Mask off segments of the query sequence that have low compositional complexity, as determined by the SEG program of Wootton & Federhen (Computers and Chemistry, 1993) or, for BLASTN, by the DUST program of Tatusov and Lipman (in preparation). Filtering can eliminate statistically significant but biologically uninteresting reports from the blast output (e.g., hits against common acidic-, basic- or proline-rich regions), leaving the more biologically interesting regions of the query\n          sequence available for specific matching against database sequences.Filtering is only applied to the query sequence (or its translation products), not to database sequences. Default filtering is DUST for BLASTN, SEG for other programs. It is not unusual for nothing at all to be masked by SEG, when applied to sequences in SWISS-PROT, so filtering should not be expected to always yield an effect. Furthermore, in some cases, sequences are masked in their entirety, indicating that the statistical significance of any matches reported against the unfiltered\n          query sequence should be suspect.", "precond": null, "prompt": "Filtering and masking options", "name": "filter_opt", "children": [{"comment": null, "prompt": "Filter or Masking query sequence (DUST with blastn, SEG with others) (-F)", "name": "filter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\" -F F\" , \"\")[ value ]", "perl": "($value) ? \"\" : \" -F F\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A coiled-coiled filter, based on the work of Lupas et al. (Science, vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al., J Gen Virol, vol. 76, pp. 2923-32 (1995))", "prompt": "Filtering options (Filter must be true)", "name": "other_filters", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "filter and other_masking is None", "perl": "$filter and not defined $other_masking"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A coiled-coiled filter, based on the work of Lupas et al. (Science, vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al., J Gen Virol, vol. 76, pp. 2923-32 (1995)).It is possible to specify that the masking should only be done during the process of building the initial words .If the -U option (to mask any lower-case sequence in the input FASTA file) is used and one does not wish any other filtering, but does wish to mask when building the lookup tables then one should specify: -F 'm'", "prompt": "Masking options (Filter must be true)", "name": "other_masking", "ctrl": {"python": "value in ['null', 'maskSEG', 'maskCoil', 'maskDust'] or (value == 'lowerMask' and lower_case)", "perl": "($value eq 'null' or $value eq 'maskSEG' or $value eq 'maskCoil' or $value eq 'maskDust']) or ($value eq 'lowerMask' and $lower_case)"}, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "filter == 1 and other_filters is None", "perl": "$filter == 1 and not defined $other_filters"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option specifies that any lower-case letters in the input FASTA file should be masked.", "prompt": "Use lower case filtering (-U)", "name": "lower_case", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -U T\")[value]", "perl": "($value) ? \" -U T\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Selectivity options", "name": "selectivity_opt", "children": [{"comment": "The statistical significance threshold for reporting matches against database sequences; the default value is 10, such that 10 matches are expected to be found merely by chance, according to the stochastic model of Karlin and Altschul (1990). If the statistical significance ascribed to a match is greater than the EXPECT threshold, the match will not be reported. Lower EXPECT thresholds are more stringent, leading to fewer chance matches being reported. Fractional values are\n              acceptable.", "prompt": "Expected value (-e)", "name": "Expect", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -e \"+str(value) )[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -e $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use words of size N.Zero invokes default behaviorDefault values:- 11 for blastn- 3 for others", "prompt": "Word Size (-W)", "name": "word_size", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -W \"+str(value) )[value is not None]", "perl": "(defined $value) ? \" -W $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is the value that control the path graph region explored by Blast during a gapped extension (Xg in the NAR paper) (default for blastp is 15).Default values:- 30 for blastn- 0 for tblastx- 15 for others", "prompt": "X dropoff value for gapped alignment (-X)", "name": "dropoff_extent", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -X \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -X $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use zero for the real size", "prompt": "Effective length of the search space (-Y)", "name": "eff_len", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -Y \"+str(value) )[value is not None]", "perl": "(defined $value) \" -Y $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Perform or not gapped alignment (not available with tblastx) (-g)", "name": "gapped_alig", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\" -g F \" , \"\")[value]", "perl": "($value) ? \"\" : \" -g F \""}, "command": false, "precond": {"python": "bl2seq != \"tblastx\"", "perl": "$bl2seq ne \"tblastx\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "bl2seq in [ \"blastx\", \"tblastx\", \"tblastn\" ]", "perl": "$bl2seq =~ /^(blastx|tblast[nx])$/"}, "prompt": "Translation options", "name": "translation_opt", "children": [{"comment": null, "prompt": "Query strand to search against second sequence (for blastx, tblastx or tblastn) (-S)", "name": "strand", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -S \" + str(value) )[ value is not None and value!= vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -S $value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output_opt", "children": [{"comment": null, "prompt": "Output format (-D)", "name": "outformat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -D \" + str( value ) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \"\" : \"-D $value\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "bl2seq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da193546d52388cab46"}, "classifications": [{"type": "mobyle1", "classification": "database:search:filter"}], "description": "One-line description of Blast program filtering", "title": "blast2genoclass", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output option", "name": "output", "children": [{"comment": null, "prompt": "Output file", "name": "outfile", "simple": null, "filenames": {"python": "\"blast2genoclass.out\"", "perl": "\"blast2genoclass.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Blast2taxoclassReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graphical output", "name": "pictureout", "simple": null, "filenames": {"python": "\"*.png\"", "perl": "\"*.png\""}, "precond": {"python": "picture", "perl": "defined $picture"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment", "name": "alignout", "simple": null, "filenames": {"python": "\"*.aln\"", "perl": "\"*.aln\""}, "precond": {"python": "align", "perl": "defined $align"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenoClasAln", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Verbose output file for all blast", "name": "verboseoutall", "simple": null, "filenames": {"python": "\"res4individualBlast.txt\"", "perl": "\"res4individualBlast.txt\""}, "precond": {"python": "verboseall", "perl": "defined $verboseall"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "VerboseReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Verbose output file for database sequence(s)", "name": "verboseout", "simple": null, "filenames": {"python": "\"res4allBlast.txt\"", "perl": "\"res4allBlast.txt\""}, "precond": {"python": "verbose", "perl": "defined $verbose"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "VerboseReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Blast output file(s)", "name": "blastoutfile", "simple": null, "filenames": {"python": "\"*.blast\"", "perl": "\"*.blast\""}, "precond": {"python": "blastout", "perl": "defined $blastout"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Query name file", "name": "queryoutfile", "simple": null, "filenames": {"python": "\"*.qry\"", "perl": "\"*.qry\""}, "precond": {"python": "queryout", "perl": "defined $queryout"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "QueryNameReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Database sequence(s) fasta file", "name": "besthitseqfile", "simple": null, "filenames": {"python": "\"*.dbfasta\"", "perl": "\"*.dbfasta\""}, "precond": {"python": "besthitseq", "perl": "defined $besthitseq"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Fasta file", "name": "fastafile", "simple": null, "filenames": {"python": "\"*.fasta\"", "perl": "\"*.fasta\""}, "precond": {"python": "fastaExtract or hspSeq", "perl": "defined $fastaExtract  or defined $hspSeq"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Blast output file", "name": "infile", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "\" -i \" + str(value)", "perl": "\" -i $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "BlastTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Filter the one-line description of Blast program with:", "name": "blastfilter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -\" + str(value))[value != vdef]", "perl": "($value ne vdef) ? \" -$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "0: all hsp", "prompt": "Number of hsp to consider (-x)", "name": "nbofhit", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -x \" + str(value) )[value is not None and value != vdef]", "perl": "(defined $value) ? \" -x $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Filter the one-line description of Blast program with user name (-p)", "name": "genomic_name", "ctrl": {"python": "(blastfilter is not None and (genomic_name is None)) or (genomic_name is not None and (blastfilter is None))", "perl": "(defined $blastfilter and (not defined $genomic_name)) or (defined $genomic_name and (not defined $blastfilter))"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -p \" + str(value).replace(' ','_') )[value is not None]", "perl": "(defined $value) ? \" -p $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Filter the hit of Blast with Taxonomic hierarchy name (-n)", "name": "taxonomic_name", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -n \" + str(value).replace(' ','_') )[value is not None]", "perl": "(defined $value) ? \" -n $value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Output option", "name": "output", "children": [{"comment": "In \"res4individualBlast.txt\" file, for all input blast, are details:For all matching \"Description filter option\":- query name, (query letter): percentage of matching descriptionand for all corresponding hits:- Database sequence's species, accession number and letters- Hsp description", "prompt": "Report detailed results matching \"Description filter option\" for all blast (-v)", "name": "verboseall", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -v\") [value]", "perl": "($value)? \" -v\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In \"res4allBlast.txt\" file, for the best database sequence(s), are details:For database sequence matching \"Description filter option\":- Database sequence's species, accession number, letters and description- Number of query matching this sequence.- Query name, (letters)and for all corresponding hsp:- Hsp description", "prompt": "Detailed report for database sequence(s) matching \"Description filter option\" (-V)", "name": "verbose", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -V\") [value]", "perl": "($value)? \" -V\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Hsp(s) selection (-m)", "name": "option", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -m \" + str(value))[value != vdef]", "perl": "($value ne vdef) ? \" -m $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "For 1,2,3 hsps alignments (Sbjt and Query) are re-aligned on the reference sequence extract from database.For 4,5,6 part of queries corresponding to hsps are re-aligned on the reference sequence extract from database.", "prompt": "Produce alignment: database sequence matching \"Description filter option\" vs queries (-a)", "name": "align", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -a \" +str(value)) [value != vdef]", "perl": "($value  ne vdef)? \" -a $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Produce graphical alignment summary images: database sequence matching \"Description filter option\" vs queries (-g)", "name": "picture", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -g\") [value]", "perl": "($value)? \" -g\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Blast output file(s) sort/split by specific taxonomic hierarchy (-b)", "name": "blastout", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -b\") [value]", "perl": "($value)? \" -b\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Extract Hsp(s) fragment from Query sequence(s) (-Q)", "name": "hspSeq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -Q\") [value]", "perl": "($value)? \" -Q\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Query name write in file(s) sort/split by specific taxonomic hierarchy (-q)", "name": "queryout", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -q\") [value]", "perl": "($value)? \" -q\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Report database sequence(s) matching option in fasta file (-s)", "name": "besthitseq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -s\") [value]", "perl": "($value)? \" -s\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Extract fasta sequence, matching specified taxonomic filter, from file containing query sequences witch are used to made blast.", "prompt": "Extraction of fasta sequences.", "name": "fastaExtract", "ctrl": {"python": "(fastaExtract and (queryout and query_seq is not None)) or (not fastaExtract)", "perl": "$fastaExtract == 1 and $queryout == 1 and defined $query_seq"}, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Query sequences witch are used to made blast.", "name": "query_seq", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Query sequences witch are used to made blast.", "name": "query_seq_run1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\" -f \"+ str(query_seq)) [query_seq is not None]", "perl": "(defined $value)? \" -f $query_seq\": \"\""}, "command": false, "precond": {"python": "hspSeq and query_seq", "perl": "defined $hspSeq and defined $query_seq"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Query sequences witch are used to made blast.", "name": "query_seq_run2", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "(\"\",\" && extractfasta -i \"+ str(query_seq) + \" *.qry\") [query_seq is not None]", "perl": "(defined $value)? \" && extractfasta -i $query_seq *.qry\": \"\""}, "command": false, "precond": {"python": "fastaExtract and queryout and query_seq", "perl": "defined $fastaExtract and defined $queryout and defined $query_seq"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}]}, "version": "1.0", "references": [], "source_links": [], "env": [], "authors": "C. Maufrais", "command": {"path": null, "value": "blast2genoclass"}, "documentation_links": [], "type": "program", "name": "blast2genoclass"}, {"comment": "Extract the Identifier and Data Bank of the hits\n                    from the summary of a blast report ( in text format -m 0-6 ) \n                    The result is in USA list format.", "homepage_links": ["https://projets.pasteur.fr/projects/show/blast2usa"], "_id": {"$oid": "51434da193546d52388cab48"}, "classifications": [{"type": "mobyle1", "classification": "database:search:display"}], "description": "Extract sequence Ids from blast hits (in USA format)", "title": "blast2seqid", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "hits identifier", "name": "id_list", "simple": null, "filenames": {"python": "\"blast2seqid.out\"", "perl": "\"blast2seqid.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "GenesId", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["USAList"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "A blast output in pairwise format ( option -m 0 default ).", "prompt": "BLAST text report", "name": "infile", "ctrl": null, "simple": null, "argpos": "40", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "BlastTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": null, "prompt": "ignore the hits until the hit n (integer)", "name": "From", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" --from \" + str(value) )[value is not None]", "perl": "(defined $value) ? \" --from $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "ignore the hits after the hit n (integer)", "name": "To", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "( \"\" , \" --to \" + str(value) )[value is not None]", "perl": "(defined $value) ? \" --to $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.0", "references": [], "source_links": ["https://projets.pasteur.fr/projects/list_files/blast2usa"], "env": [], "authors": "Bertrand N\u00e9ron", "command": {"path": null, "value": "blast2usa"}, "documentation_links": [], "type": "program", "name": "blast2seqid"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab49"}, "classifications": [{"type": "mobyle1", "classification": "database:search:filter"}], "description": "Blast filtering with taxonomic hierarchy information", "title": "blast2taxoclass", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output option", "name": "output", "children": [{"comment": null, "prompt": "Output file", "name": "outfile", "simple": null, "filenames": {"python": "\"blast2taxoclass.out\"", "perl": "\"blast2taxoclass.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Blast2taxoclassReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Blast output file(s)", "name": "blastoutfile", "simple": null, "filenames": {"python": "\"*.blast\"", "perl": "\"*.blast\""}, "precond": {"python": "blastout", "perl": "defined $blastout"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Query name file", "name": "queryoutfile", "simple": null, "filenames": {"python": "\"*.qry\"", "perl": "\"*.qry\""}, "precond": {"python": "queryout", "perl": "defined $queryout"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "QueryNameReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Fasta file", "name": "fastafile", "simple": null, "filenames": {"python": "\"*.fasta\"", "perl": "\"*.fasta\""}, "precond": {"python": "fastaExtract", "perl": "defined $fastaExtract"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Blast output file", "name": "infile", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "\" -i \" + str(value)", "perl": "\" -i $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "BlastTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Find taxonomic classification of:", "name": "blastfilter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -\" + str(value)", "perl": "($value) ? \" -$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "0: all hsp", "prompt": "Number of hsp to consider (-x)", "name": "nbofhit", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -x \" + str(value) )[value is not None and value != vdef]", "perl": "(defined $value) ? \" -x $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "0: all hsp", "prompt": "Number of hsp to consider (-x)", "name": "nbofhit", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -x \" + str(value) )[value is not None and value != vdef]", "perl": "(defined $value) ? \" -x $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Taxonomic hierarchy filter option", "name": "taxonomicfilter", "children": [{"comment": "zero means: root of taxonomy, higher value: leaf or near", "prompt": "Relative position in taxonomic hierarchy (-p)", "name": "position", "ctrl": {"python": "(position is not None and (taxonomic_name is None and rank is None)) or (taxonomic_name is not None and (position is None and rank is None)) or (rank is not None and (taxonomic_name is None and position is None))", "perl": "(defined $position and (not defined $taxonomic_name and not defined $rank))"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -p \" + str(value) )[value is not None]", "perl": "(defined $value) ? \" -p $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Taxonomic Name (-n)", "name": "taxonomic_name", "ctrl": {"python": "(position is not None and (taxonomic_name is None and rank is None)) or (taxonomic_name is not None and (position is None and rank is None)) or (rank is not None and (taxonomic_name is None and position is None))", "perl": "(defined $position and (not defined $taxonomic_name and not defined $rank))"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -n \" + str(value).replace(' ','_') )[value is not None]", "perl": "(defined $value) ? \" -n $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If Taxonomic rank is not defined for one hit, it is not treated.", "prompt": "Taxonomic rank name (-r)", "name": "rank", "ctrl": {"python": "(position is not None and (taxonomic_name is None and rank is None)) or (taxonomic_name is not None and (position is None and rank is None)) or (rank is not None and (taxonomic_name is None and position is None))", "perl": "(defined $position and (not defined $taxonomic_name and not defined $rank))"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -r \" + str(value) )[value is not None]", "perl": "(defined $value) ? \" -r $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output option", "name": "output", "children": [{"comment": null, "prompt": "Blast output file(s) sort/split by specific taxonomic hierarchy (-b)", "name": "blastout", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -b\") [value]", "perl": "($value)? \" -b\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Query name write in file(s) sort/split by specific taxonomic hierarchy (-q)", "name": "queryout", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -q\") [value]", "perl": "($value)? \" -q\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Extract fasta sequence, matching specified taxonomic filter, from file containing query sequences witch are used to made blast.", "prompt": "Extraction of fasta sequences.", "name": "fastaExtract", "ctrl": {"python": "(fastaExtract and (queryout and query_seq is not None)) or (not fastaExtract)", "perl": "$fastaExtract == 1 and $queryout == 1 and defined $query_seq"}, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Query sequences witch are used to made blast.", "name": "query_seq", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "(\"\",\" && extractfasta -i \"+ str(value) + \" *.qry\") [value is not None]", "perl": "(defined $value)? \" && extractfasta -i $query *.qry\": \"\""}, "command": false, "precond": {"python": "fastaExtract and queryout", "perl": "defined $fastaExtract and defined $queryout"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}]}, "version": "1.0", "references": [], "source_links": [], "env": [], "authors": "C. Maufrais", "command": {"path": null, "value": "blast2taxoclass"}, "documentation_links": [], "type": "program", "name": "blast2taxoclass"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab4a"}, "classifications": [{"type": "mobyle1", "classification": "database:search:display"}], "description": "Blast Taxonomy report", "title": "blast2taxonomy", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output option", "name": "output", "children": [{"comment": null, "prompt": "Output file", "name": "outfile_name", "simple": null, "filenames": {"python": "str(outputfile)", "perl": "$outputfile"}, "precond": {"python": "not htmloutput and outputfile", "perl": "not $htmloutput and $outputfile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Blast2taxonomyReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output file", "name": "outfile", "simple": null, "filenames": {"python": "\"blast2taxonomy.out\"", "perl": "\"blast2taxonomy.out\""}, "precond": {"python": "not (htmloutput and outputfile)", "perl": "not ($htmloutput and $outputfile)"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Blast2taxonomyReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Html output file", "name": "htmloutfile", "simple": null, "filenames": {"python": "(\"blast2taxonomy.html\", str(outputfile)+\".html\")[outputfile is not None]", "perl": "(defined $outputfile)? \"$outputfile.html\": \"blast2taxonomy.html\""}, "precond": {"python": "htmloutput", "perl": "$htmloutput"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Blast2taxonomyHtmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment Html output file", "name": "htmloutfilealn", "simple": null, "filenames": {"python": "\"alignment.html\"", "perl": "\"alignment.html\""}, "precond": {"python": "htmloutput", "perl": "$htmloutput"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "AlnHtmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Newick tree file", "name": "dndoutfile", "simple": null, "filenames": {"python": "(\"blast2taxonomy.dnd\", str(outputfile)+\".dnd\")[outputfile is not None]", "perl": "(defined $outputfile)? \"$outputfile.dnd\": \"blast2taxonomy.dnd\""}, "precond": {"python": "dndoutput", "perl": "$dndoutput"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Blast output file", "name": "infile", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "BlastTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Display options", "name": "display", "children": [{"comment": "All hit are display in tree by default.", "prompt": "Report one branch per organism (-s)", "name": "single", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -s\") [value]", "perl": "($value) ? \" -s\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Report accession number (-a)", "name": "acc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -a\") [value]", "perl": "($value) ? \" -a\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Lowest common ancestor name (-n).", "name": "node_name", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -n \" + str(value)) [value is not None]", "perl": "($value) ? \" -n $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Select hit blast with e-value lower than value (-E).", "name": "filterevalue", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -E \" + str(value)) [value and value != vdef]", "perl": "($value) ? \" - $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Report score and e-value Blast hit (-e).", "name": "evalue", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -e\") [value]", "perl": "($value) ? \" -e\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Report ratio of Blast hit length per query length (-l).", "name": "perlen", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -l\") [value]", "perl": "($value) ? \" -l\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output option", "name": "output", "children": [{"comment": null, "prompt": "Tabular output (-x)", "name": "xlsoutput", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -x\") [value]", "perl": "($value)? \" -x\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Html output (-w)", "name": "htmloutput", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -w\") [value]", "perl": "($value)? \" -w\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Taxonomy report in Newick format (-t)", "name": "dndoutput", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -t\") [value]", "perl": "($value)? \" -t\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output file name (-o)", "name": "outputfile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\"  , \" -o  \" + str(value))  [value is not None ]", "perl": "(defined $value)? \" -o $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "2.0", "references": [], "source_links": [], "env": [], "authors": "C. Maufrais", "command": {"path": null, "value": "blast2taxonomy"}, "documentation_links": [], "type": "program", "name": "blast2taxonomy"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab50"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:composition"}], "description": "Calculate the twisting in a B-DNA sequence", "title": "btwisted", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BtwistedReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "Dna base pair twist angle data file", "name": "e_angledata", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -angledata=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "BasePairTwistAngles", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Dna base pair stacking energies data file", "name": "e_energydata", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -energydata=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "BasePairStackingEnergies", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "btwisted"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/btwisted.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "btwisted"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab51"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:codon_usage"}], "description": "Calculate codon adaptation index", "title": "cai", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "CaiReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "seqall option", "name": "e_seqall", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -seqall=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "cfile option", "name": "e_cfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -cfile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "cai"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/cai.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "cai"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da193546d52388cab47"}, "classifications": [{"type": "mobyle1", "classification": "database:search:homology"}], "description": "NCBI BLAST, with gaps against my sequences database", "title": "BLAST2MYDB", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Blast text report", "name": "txtfile", "simple": null, "filenames": {"python": "\"blast2.txt\"", "perl": "\"blast2.txt\""}, "precond": {"python": "view_alignments != \"7\"", "perl": "$view_alignments ne \"7\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Blast xml report", "name": "xmlfile", "simple": null, "filenames": {"python": "\"blast2.xml\"", "perl": "\"blast2.xml\""}, "precond": {"python": "view_alignments == \"7\"", "perl": "$view_alignments eq \"7\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastXmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Blast html report", "name": "htmlfile", "simple": null, "filenames": {"python": "\"blast2.html\"", "perl": "\"blast2.html\""}, "precond": {"python": "view_alignments not in [ \"7\" , \"8\" ]", "perl": "$view_alignments !~ /^[78]$/"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastHtmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": null, "name": "imgfile", "simple": null, "filenames": {"python": "\"*.gif\"", "perl": "\"*.gif\""}, "precond": {"python": "view_alignments not in [\"7\", \"8\"]", "perl": "$view_alignments !~ /^[78]$/"}, "output_type": "file", "hidden": true, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Create my Database", "name": "db", "children": [{"comment": null, "prompt": null, "name": "formatdb", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\"formatdb \"", "perl": "\"formatdb \""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Create a protein database for blastx", "prompt": "Protein db", "name": "protein_db", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -i \"+ str(value)", "perl": "\" -i $value\""}, "command": false, "precond": {"python": "blast2 in [ \"blastx\" , \"blastp\" ]", "perl": "$blast2 =~ /^blast[px]$/"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "2,n"}, "paramfile": null}, {"comment": "Create a nucleotid database for blastn, tblastn or tblastx", "prompt": "Nucleotid db", "name": "nucleotid_db", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\"-p F -i \"+ str(value)", "perl": "\"-p F -i $value\""}, "command": false, "precond": {"python": "blast2 in [ \"blastn\" , \"tblastx\", \"tblastn\" , \"psitblastn\" ]", "perl": "$blast2 =~ /^(blastn|tblast[nx]|psitblastn)$/"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "2,n"}, "paramfile": null}, {"comment": null, "prompt": "the name of my db", "name": "db_name", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" -n \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Blast initiation", "name": "blast_init", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\" && blastall \"", "perl": "\" && blastall \""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "- Blastp compares an amino acid query sequence against a protein sequence database;- Blastn compares a nucleotide query sequence against a nucleotide sequence database;- Blastx compares the six-frame conceptual translation products of a nucleotide query sequence (both strands) against a protein sequence database;- tBlastn compares a protein query sequence against a nucleotide sequence database dynamically translated in all six reading frames (both strands).- tBlastx compares the six-frame translations of a nucleotide query sequence against the six-frame translations of a nucleotide sequence database.- psitBlastn compares a protein query sequence against a nucleotide sequence database dynamically translated in all six reading frames (both strands) using a position specific matrix created by PSI-BLAST.", "prompt": "Blast program (-p)", "name": "blast2", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -p \"+ str(value)", "perl": "\" -p $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "blastdb", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -d \"+ str( db_name )", "perl": "\" -d $db_name\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Query Sequence", "name": "query", "children": [{"comment": "Read (first, query) sequence or set from file", "prompt": "Query (-i)", "name": "query_seq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -i \"+ str(query_seq)", "perl": "\" -i $query\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "Location on query sequence", "prompt": "Start of required region in query sequence (-L)", "name": "start_region", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Location on query sequence", "prompt": "End of required region in query sequence (-L)", "name": "end_region", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(' -L \"%s\"' % (str(start_region)), ' -L \"%s %s\"' % (str(start_region), str(value)))[value is not None]", "perl": "(defined $value) ? \" -L \\\"$start_region $value\\\"\" : \" -L \\\"$start_region\\\"\""}, "command": false, "precond": {"python": "start_region is not None", "perl": "defined $start_region"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of concatenated queries (blastn or tblastn) (-B)", "name": "concat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -B \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -B $value\" : \"\""}, "command": false, "precond": {"python": "blast2 in [ \"blastn\" , \"tblastn\" ]", "perl": "$blast2 =~ /^t?blastn$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Scoring options", "name": "scoring_opt", "children": [{"comment": "Default: 5 for blastn; 10 for blastp, blastx and tblastn", "prompt": "Cost to open a gap (-G)", "name": "open_a_gap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -G \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -G $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default: 2 for blastn; 1 for blastp, blastx and tblastnLimited values for gap existence and extension are supported for these programs. Some supported and suggested values are:Existence Extension10 -- 110 -- 211 -- 18 -- 29 -- 2", "prompt": "Cost to extend a gap (-E)", "name": "extend_a_gap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -E \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -E $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "blast2 != \"blastn\"", "perl": "$blast2 ne \"blastn\""}, "prompt": "Protein penalty (not for blastn)", "name": "scoring_blast", "children": [{"comment": null, "prompt": "Similarity matrix (-M)", "name": "matrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -M \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -M $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "blast2 == \"blastn\"", "perl": "$blast2 eq \"blastn\""}, "prompt": "Blastn penalty", "name": "scoring_blastn", "children": [{"comment": null, "prompt": "Penalty for a nucleotide mismatch (-q)", "name": "mismatch", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -q \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -q $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Reward for a nucleotide match (-r)", "name": "match", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -r \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -r $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Frame shift penalty (-w)", "name": "frameshift", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -w \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -w $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "BLAST 2.0 uses the dust low-complexity filter for blastn and seg for the other programs.If one uses '-F T' then normal filtering by seg or dust (for blastn) occurs (likewise '-F F' means no filtering whatsoever).", "precond": null, "prompt": "Filtering and masking options", "name": "filter_opt", "children": [{"comment": null, "prompt": "Filter or Masking query sequence (DUST with blastn, SEG with others) (-F)", "name": "filter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\" -F F\" , \"\")[ value ]", "perl": "($value) ? \"\" : \" -F F\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A coiled-coiled filter, based on the work of Lupas et al. (Science, vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al., J Gen Virol, vol. 76, pp. 2923-32 (1995))", "prompt": "Filtering options (Filter must be true)", "name": "other_filters", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "filter and not other_masking", "perl": "$filter and not $other_masking"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A coiled-coiled filter, based on the work of Lupas et al. (Science, vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al., J Gen Virol, vol. 76, pp. 2923-32 (1995)).It is possible to specify that the masking should only be done during the process of building the initial words .If the -U option (to mask any lower-case sequence in the input FASTA file) is used and one does not wish any other filtering, but does wish to mask when building the lookup tables then one should specify: -F 'm'", "prompt": "Masking options (Filter must be true)", "name": "other_masking", "ctrl": {"python": "value in ['null', 'v1', 'v2', 'v3'] or (value == 'v4' and lower_case)", "perl": "($value eq 'null' or $value eq 'v1' or $value eq 'v2' or $value eq 'v3']) or ($value eq 'v4' and $lower_case)"}, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "filter and not other_filters", "perl": "$filter and not $other_filters"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option specifies that any lower-case letters in the input FASTA file should be masked.", "prompt": "Use lower case filtering (-U)", "name": "lower_case", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -U T\")[ bool(value) ]", "perl": "($value) ? \" -U T\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "The programs blastn and blastp offer fully gapped alignments. blastx and tblastn have 'in-frame' gapped alignments and use sum statistics to link alignments from different frames. tblastx provides only ungapped alignments.", "precond": null, "prompt": "Selectivity options", "name": "selectivity_opt", "children": [{"comment": "The statistical significance threshold for reporting matches against database sequences; the default value is 10, such that 10 matches are expected to be found merely by chance, according to the stochastic model of Karlin and Altschul (1990). If the statistical significance ascribed to a match is greater than the EXPECT threshold, the match will not be reported. Lower EXPECT thresholds are more stringent, leading to fewer chance matches being reported. Fractional values are\n              acceptable.", "prompt": "Expected value (-e)", "name": "Expect", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -e \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -e $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use words of size N.Zero invokes default behaviorDefault values:- 11 for blastn- 3 for others", "prompt": "Word Size (-W)", "name": "word_size", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -W \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -W $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default: zero for all programs", "prompt": "Multiple Hits window size (-A)", "name": "dist_hits", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -A \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -A $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Blast seeks first short word pairs whose aligned score reaches at least this value.Default values:- 0 for blastn- 11 for blastp- 12 for blastx- 13 for tblastn and tblastx", "prompt": "Threshold for extending hits (-f)", "name": "extend_hit", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -f \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -f $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is the value that control the path graph region explored by Blast during a gapped extension (Xg in the NAR paper) (default for blastp is 15).Default values:- 30 for blastn- 0 for tblastx- 15 for others", "prompt": "X dropoff value for gapped alignment (-X)", "name": "dropoff_extent", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -X \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -X $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default values:- 50 for blastn- 0 for tblastx- 25 for others", "prompt": "X dropoff value for final alignment gapped alignment (-Z)", "name": "dropoff_final", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -Z \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -Z $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use zero for the real size", "prompt": "Effective length of the search space (-Y)", "name": "eff_len", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -Y \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -Y $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this option is used, a value of 100 is recommended.", "prompt": "Number of best hits from a region to keep (-K)", "name": "keep_hits", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -K \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -K $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Perform or not gapped alignment (not available with tblastx) (-g)", "name": "gapped_alig", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\" -g F \" , \"\")[value]", "perl": "($value) ? \"\" : \" -g F \""}, "command": false, "precond": {"python": "blast2 != \"tblastx\"", "perl": "$blast2 ne \"tblastx\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Single-hit or multiple-hit mode (-P)", "name": "mode", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -P \"+str(value))[value != \"0\"]", "perl": "($value ne \"0\") ? \" -P $value\" : \"\""}, "command": false, "precond": {"python": "blast2 != \"blastn\"", "perl": "$blast2 ne \"blastn\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Translation options", "name": "translation_opt", "children": [{"comment": null, "prompt": "Genetic code used for query translation (-Q)", "name": "gc_query", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -Q \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -Q $value\" : \"\""}, "command": false, "precond": {"python": "blast2 in [ \"blastx\" , \"tblastx\" ]", "perl": "$blast2 =~ /^t?blastx$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Genetic code used for database translation (-D)", "name": "gc_db", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -D \"+str(value))[value != vdef]", "perl": "($value ne $vdef) ? \" -D $value\" : \"\""}, "command": false, "precond": {"python": "blast2 in [ \"tblastn\", \"tblastx\" ]", "perl": "$blast2 =~ /^tblast[nx]$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Query strands to search against database (-S)", "name": "strand", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -S \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -S $value\" : \"\""}, "command": false, "precond": {"python": "blast2 in [ \"blastn\" ,\"blastx\" , \"tblastx\" ]", "perl": "$blast2 =~ /^(blastn|t?blastx)$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Report options", "name": "affichage", "children": [{"comment": "Maximum number of database sequences for which one-line descriptions will be reported.", "prompt": "Number of one-line descriptions to show (-v)", "name": "Descriptions", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -v \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -v $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum number of database sequences for which high-scoring segment pairs will be reported (-b).", "prompt": "Number of database sequences to show alignments (-b)", "name": "Alignments", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -b \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -b $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment view options (-m)", "name": "view_alignments", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -m \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -m $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Text output file", "name": "txtoutput", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "\" -o blast2.txt\"", "perl": "\" -o blast2.txt\""}, "command": false, "precond": {"python": "view_alignments != \"7\"", "perl": "$view_alignments ne \"7\""}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Xml output file", "name": "xmloutput", "ctrl": null, "simple": null, "argpos": "60", "format": {"python": "\" -o blast2.xml\"", "perl": "\" -o blast2.xml\""}, "command": false, "precond": {"python": "view_alignments == \"7\"", "perl": "$view_alignments eq \"7\""}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Html output", "name": "htmloutput", "ctrl": null, "simple": null, "argpos": "61", "format": {"python": "(\"\" , \" && html4blast -g -o blast2.html blast2.txt\")[value]", "perl": "($value) ? \" && html4blast -g -o blast2.html blast2.txt\" : \"\""}, "command": false, "precond": {"python": "view_alignments not in [ \"7\" , \"8\" ]", "perl": "$view_alignments !~ /^[78]$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [{"url": null, "doi": null, "label": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer,Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402."}], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16", "http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html"], "type": "program", "name": "blast2mydb"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab4b"}, "classifications": [{"type": "mobyle1", "classification": "database:search:homology"}], "description": "NCBI BLAST, with gaps", "title": "BLAST2", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Blast text report", "name": "txtfile", "simple": null, "filenames": {"python": "\"blast2.txt\"", "perl": "\"blast2.txt\""}, "precond": {"python": "view_alignments != \"7\"", "perl": "$view_alignments ne \"7\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Blast xml report", "name": "xmlfile", "simple": null, "filenames": {"python": "\"blast2.xml\"", "perl": "\"blast2.xml\""}, "precond": {"python": "view_alignments == \"7\"", "perl": "$view_alignments eq \"7\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastXmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Blast html report", "name": "htmlfile", "simple": null, "filenames": {"python": "\"blast2.html\"", "perl": "\"blast2.html\""}, "precond": {"python": "view_alignments not in [ \"7\" , \"8\" ]", "perl": "$view_alignments !~ /^[78]$/"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastHtmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": null, "name": "imgfile", "simple": null, "filenames": {"python": "\"*.gif\"", "perl": "\"*.gif\""}, "precond": {"python": "view_alignments not in [\"7\", \"8\"]", "perl": "$view_alignments !~ /^[78]$/"}, "output_type": "file", "hidden": true, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Blast initiation", "name": "blast_init", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\"blastall\"", "perl": "\"blastall\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "- Blastp compares an amino acid query sequence against a protein sequence database;- Blastn compares a nucleotide query sequence against a nucleotide sequence database;- Blastx compares the six-frame conceptual translation products of a nucleotide query sequence (both strands) against a protein sequence database;- tBlastn compares a protein query sequence against a nucleotide sequence database dynamically translated in all six reading frames (both strands).- tBlastx compares the six-frame translations of a nucleotide query sequence against the six-frame translations of a nucleotide sequence database.- psitBlastn compares a protein query sequence against a nucleotide sequence database dynamically translated in all six reading frames (both strands) using a position specific matrix created by PSI-BLAST.", "prompt": "Blast program (-p)", "name": "blast2", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -p \"+ str(value)", "perl": "\" -p $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Database", "name": "db", "children": [{"comment": "Choose a protein db for blastp or blastx.Please note that Swissprot usage by and for commercial entities requires a license agreement.", "prompt": "Protein db (-d)", "name": "protein_db", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -d \"+ str(value)", "perl": "\" -d $value\""}, "command": false, "precond": {"python": "blast2 in [ \"blastx\" , \"blastp\" ]", "perl": "$blast2 =~ /^blast[px]$/"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Choose a nucleotide db for blastn, tblastn or tblastx", "prompt": "Nucleotid db (-d)", "name": "nucleotid_db", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -d \"+ str(value)", "perl": "\" -d $value\""}, "command": false, "precond": {"python": "blast2 in [ \"blastn\" , \"tblastx\", \"tblastn\" , \"psitblastn\" ]", "perl": "$blast2 =~ /^(blastn|tblast[nx]|psitblastn)$/"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Query Sequence", "name": "query", "children": [{"comment": "Read (first, query) sequence or set from file", "prompt": "Query (-i)", "name": "query_seq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -i \"+ str(query_seq)", "perl": "\" -i $query\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "Location on query sequence", "prompt": "Start of required region in query sequence (-L)", "name": "start_region", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Location on query sequence", "prompt": "End of required region in query sequence (-L)", "name": "end_region", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(' -L \"%s\"' % (str(start_region)), ' -L \"%s %s\"' % (str(start_region), str(value)))[value is not None]", "perl": "(defined $value) ? \" -L \\\"$start_region $value\\\"\" : \" -L \\\"$start_region\\\"\""}, "command": false, "precond": {"python": "start_region is not None", "perl": "defined $start_region"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of concatenated queries (blastn or tblastn) (-B)", "name": "concat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -B \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -B $value\" : \"\""}, "command": false, "precond": {"python": "blast2 in [ \"blastn\" , \"tblastn\" ]", "perl": "$blast2 =~ /^t?blastn$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Scoring options", "name": "scoring_opt", "children": [{"comment": "-1 invokes default behavior: non-affine\n              if greedy, 5 if using dynamic programming", "prompt": "Cost to open a gap (-G)", "name": "open_a_gap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -G \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -G $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default: 2 for blastn; 1 for blastp, blastx and tblastnLimited values for gap existence and extension are supported for these programs. Some supported and suggested values are:Existence Extension10 -- 110 -- 211 -- 18 -- 29 -- 2", "prompt": "Cost to extend a gap (-E)", "name": "extend_a_gap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -E \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -E $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "blast2 != \"blastn\"", "perl": "$blast2 ne \"blastn\""}, "prompt": "Protein penalty (not for blastn)", "name": "scoring_blast", "children": [{"comment": null, "prompt": "Similarity matrix (-M)", "name": "matrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -M \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -M $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "blast2 == \"blastn\"", "perl": "$blast2 eq \"blastn\""}, "prompt": "Blastn penalty", "name": "scoring_blastn", "children": [{"comment": null, "prompt": "Penalty for a nucleotide mismatch (-q)", "name": "mismatch", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -q \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -q $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Reward for a nucleotide match (-r)", "name": "match", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -r \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -r $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Frame shift penalty (-w)", "name": "frameshift", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -w \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -w $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "BLAST 2.0 uses the dust low-complexity filter for blastn and seg for the other programs.If one uses '-F T' then normal filtering by seg or dust (for blastn) occurs (likewise '-F F' means no filtering whatsoever).", "precond": null, "prompt": "Filtering and masking options", "name": "filter_opt", "children": [{"comment": null, "prompt": "Filter or Masking query sequence (DUST with blastn, SEG with others) (-F)", "name": "filter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\" -F F\" , \"\")[value]", "perl": "($value) ? \"\" : \" -F F\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A coiled-coiled filter, based on the work of Lupas et al. (Science, vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al., J Gen Virol, vol. 76, pp. 2923-32 (1995))", "prompt": "Filtering options (Filter must be true)", "name": "other_filters", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "filter and not other_masking", "perl": "$filter and not $other_masking"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A coiled-coiled filter, based on the work of Lupas et al. (Science, vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al., J Gen Virol, vol. 76, pp. 2923-32 (1995)).It is possible to specify that the masking should only be done during the process of building the initial words .If the -U option (to mask any lower-case sequence in the input FASTA file) is used and one does not wish any other filtering, but does wish to mask when building the lookup tables then one should specify: -F 'm'", "prompt": "Masking options (Filter must be true)", "name": "other_masking", "ctrl": {"python": "value in ['null', 'v1', 'v2', 'v3'] or (value == 'v4' and lower_case)", "perl": "($value eq 'null' or $value eq 'v1' or $value eq 'v2' or $value eq 'v3']) or ($value eq 'v4' and $lower_case)"}, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "filter and not other_filters", "perl": "$filter and not $other_filters"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option specifies that any lower-case letters in the input FASTA file should be masked.", "prompt": "Use lower case filtering (-U)", "name": "lower_case", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -U T\")[value]", "perl": "($value) ? \" -U T\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "The programs blastn and blastp offer fully gapped alignments. blastx and tblastn have 'in-frame' gapped alignments and use sum statistics to link alignments from different frames. tblastx provides only ungapped alignments.", "precond": null, "prompt": "Selectivity options", "name": "selectivity_opt", "children": [{"comment": "The statistical significance threshold for reporting matches against database sequences; the default value is 10, such that 10 matches are expected to be found merely by chance, according to the stochastic model of Karlin and Altschul (1990). If the statistical significance ascribed to a match is greater than the EXPECT threshold, the match will not be reported. Lower EXPECT thresholds are more stringent, leading to fewer chance matches being reported. Fractional values are\n              acceptable.", "prompt": "Expected value (-e)", "name": "Expect", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -e \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -e $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use words of size N.Zero invokes default behaviorDefault values:- 11 for blastn- 3 for others", "prompt": "Word Size (-W)", "name": "word_size", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -W \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -W $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Generally defaults to 0 (for  single-hit  extensions),  but  defaults to 40 when using discontiguous\n              templates.", "prompt": "Multiple Hits window size (-A)", "name": "dist_hits", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -A \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -A $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Blast seeks first short word pairs whose aligned score reaches at least this value.Default values:- 0 for blastn- 11 for blastp- 12 for blastx- 13 for tblastn and tblastx", "prompt": "Threshold for extending hits (-f)", "name": "extend_hit", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -f \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -f $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is the value that control the path graph region explored by Blast during a gapped extension (Xg in the NAR paper) (default for blastp is 15).Default values:- 30 for blastn- 0 for tblastx- 15 for others", "prompt": "X dropoff value for gapped alignment (-X)", "name": "dropoff_extent", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -X \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -X $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "- 0.0: default behavior:- 20 for blastn- 7 for others", "prompt": "X dropoff value for ungapped extention (-y)", "name": "dropoff_extent_ungapped", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -y \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef ) ? \" -y $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default values:- 100 for blastn- 0 for tblastx- 25 for others", "prompt": "X dropoff value for final gapped alignment (-Z)", "name": "dropoff_final", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -Z \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -Z $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use zero for the real size", "prompt": "Effective length of the search space (-Y)", "name": "eff_len", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -Y \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -Y $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this option is used, a value of 100 is recommended.", "prompt": "Number of best hits from a region to keep (-K)", "name": "keep_hits", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -K \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -K $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Perform or not gapped alignment (not available with tblastx) (-g)", "name": "gapped_alig", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\" -g F \" , \"\")[value]", "perl": "($value) ? \"\" : \" -g F \""}, "command": false, "precond": {"python": "blast2 != \"tblastx\"", "perl": "$blast2 ne \"tblastx\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Single-hit or multiple-hit mode (-P)", "name": "mode", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -P \"+str(value))[value != \"0\"]", "perl": "($value ne \"0\") ? \" -P $value\" : \"\""}, "command": false, "precond": {"python": "blast2 != \"blastn\"", "perl": "$blast2 ne \"blastn\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Translation options", "name": "translation_opt", "children": [{"comment": null, "prompt": "Genetic code used for query translation (-Q)", "name": "gc_query", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -Q \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -Q $value\" : \"\""}, "command": false, "precond": {"python": "blast2 in [ \"blastx\" , \"tblastx\" ]", "perl": "$blast2 =~ /^t?blastx$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Genetic code used for database translation (-D)", "name": "gc_db", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -D \"+str(value))[value != vdef]", "perl": "($value ne $vdef) ? \" -D $value\" : \"\""}, "command": false, "precond": {"python": "blast2 in [ \"tblastn\", \"tblastx\" ]", "perl": "$blast2 =~ /^tblast[nx]$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Query strands to search against database (-S)", "name": "strand", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -S \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -S $value\" : \"\""}, "command": false, "precond": {"python": "blast2 in [ \"blastn\" ,\"blastx\" , \"tblastx\" ]", "perl": "$blast2 =~ /^(blastn|t?blastx)$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Report options", "name": "affichage", "children": [{"comment": "Maximum number of database sequences for which one-line descriptions will be reported.", "prompt": "Number of one-line descriptions to show (-v)", "name": "Descriptions", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -v \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -v $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum number of database sequences for which high-scoring segment pairs will be reported (-b).", "prompt": "Number of database sequences to show alignments (-b)", "name": "Alignments", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -b \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -b $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment view options (-m)", "name": "view_alignments", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -m \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -m $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Text output file", "name": "txtoutput", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -o blast2.txt\"", "perl": "\" -o blast2.txt\""}, "command": false, "precond": {"python": "view_alignments != \"7\"", "perl": "$view_alignments ne \"7\""}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Xml output file", "name": "xmloutput", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -o blast2.xml\"", "perl": "\" -o blast2.xml\""}, "command": false, "precond": {"python": "view_alignments == \"7\"", "perl": "$view_alignments eq \"7\""}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Html output", "name": "htmloutput", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\" , \" && html4blast -g -o blast2.html blast2.txt\")[value]", "perl": "($value) ? \" && html4blast -g -o blast2.html blast2.txt\" : \"\""}, "command": false, "precond": {"python": "view_alignments not in [ \"7\" , \"8\" ]", "perl": "$view_alignments !~ /^[78]$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [{"url": null, "doi": null, "label": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer, Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402."}], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16", "http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html"], "type": "program", "name": "blast2"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab4c"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple:information"}], "description": "Block Mapping and Gathering using Entropy", "title": "BMGE", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output format options", "name": "output_option", "children": [{"comment": null, "prompt": "Output in phylip sequential format", "name": "phylipout", "simple": null, "filenames": {"python": "infile.split('.')[0] + \".phy\"", "perl": "\"$infile.phy\""}, "precond": {"python": "phylip", "perl": "$phylip"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["PHYLIPS"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output in phylip sequential format", "name": "phylipout_oppp", "simple": null, "filenames": {"python": "infile.split('.')[0] + \".phyp\"", "perl": "\"$infile.phyp\""}, "precond": {"python": "phylip_oppp", "perl": "$phylip_oppp"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["PHYLIPS"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output in nexus format", "name": "nexusout", "simple": null, "filenames": {"python": "infile.split('.')[0] + \".nex\"", "perl": "\"$infile.nex\""}, "precond": {"python": "nexus", "perl": "$nexus"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEXUS"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output in nexus format", "name": "nexusout_onnn", "simple": null, "filenames": {"python": "infile.split('.')[0] + \".nexn\"", "perl": "\"$infile.nexn\""}, "precond": {"python": "nexus_onnn", "perl": "$nexus_onnn"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEXUS"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output in fasta format", "name": "fastaout", "simple": null, "filenames": {"python": "infile.split('.')[0] + \".fa\"", "perl": "\"$infile.fa\""}, "precond": {"python": "fasta", "perl": "$fasta"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output in html format", "name": "htmlout", "simple": null, "filenames": {"python": "infile.split('.')[0] + \".html\"", "perl": "\"$infile.html\""}, "precond": {"python": "html", "perl": "$html"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input", "name": "input", "children": [{"comment": "BMGE uses FASTA or PHYLIP sequential format for input. These are\n                    plain text files. There is no limit on the length of the\n                    alignment. There is also no limit on the length of the label of\n                    a sequence (i.e. its FASTA annotation line), although a too long\n                    label (e.g. more than 100 letters) will be truncated if the\n                    output format is PHYLIP sequential.", "prompt": "Alignment (-i)", "name": "infile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -i \"+str(value)", "perl": "\" -i $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein", "DNA"], "biomoby_datatypes": [], "formats": ["FASTA", "PHYLIPS"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Both standard single-letter amino acid and nucleotide alphabets\n                          are used by BMGE. When using amino acid sequences, degenerated\n                          character states B and Z are understood by BMGE; similarly,\n                          degenerated nucleotide characters are also understood. The\n                          character state X is understood to be any of the 4 or 20\n                          character states when using as input nucleotide or amino acid\n                          sequences, respectively. Dashes (i.e. '-') are understood as\n                          gaps, whereas dots (i.e. '.'), as any other single letter that\n                          are not inside standard alphabets, are considered as unknown\n                          character state (i.e. '?'). Nucleotide sequences can be set as\n                          codon ones. In this case, each successive nucleotide character\n                          triplet is considered as one codon character.", "prompt": "Type of sequence (-t)", "name": "input_type", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -t \"+str(value))[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -t $value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Control options", "name": "options", "children": [{"comment": "For each character, BMGE computes a score mainly determined by the entropy induced by\n              the respective proportion of each residue. To estimate realistic\n              scores that take into account biologically relevant substitution processes, BMGE weights the\n              entropy estimation with substitution matrices.These option can be used with the 15 estimated BLOSUM matrices. BMGE uses by \n              default the popular BLOSUM62 matrix. The character\n              trimming is progressively more stringent as the BLOSUM index\n              increases (e.g. BLOSUM95); reciprocally, the trimming is\n              progressively more relaxed as the BLOSUM index is lower (e.g.\n              BLOSUM30). In practice, it is recommended to use BLOSUM95 with\n              closely related sequences, and BLOSUM30 with distantly related\n              sequences.If input sequences are set as codons, BMGE performs a conversion\n              into amino acid sequences (following the universal genetic code)\n              and uses BLOSUM matrices to estimate the entropy-like score for\n              each codon character. So, with option -t set as CODON, one can\n              modify the option -m only with BLOSUM matrices.\n              It is also possible to use the identity matrix with any sequence\n              types.", "prompt": "Similarity Matrices for amino acid and codon sequences (-m)", "name": "matrixaa", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -m \"+str(value))[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -m $value\" : \"\""}, "command": false, "precond": {"python": "input_type in ['AA', 'CODON']", "perl": "$input_type eq 'AA' or $input_type eq 'CODON'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "For nucleotide input sequences, BMGE uses PAM matrices with a\n              fixed transition/transition ratio. BMGE can be used with all\n              possible PAM matrices, from the most stringent (i.e. DNAPAM1) to\n              highly relaxed ones (e.g. DNAPAM500). By default with nucleotide\n              sequences, BMGE uses the PAM-100 matrix.It is also possible to use the identity matrix.", "prompt": "Similarity Matrices for nucleotide sequences (-m)", "name": "matrixan", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -m \"+str(value))[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -m $value\" : \"\""}, "command": false, "precond": {"python": "input_type in ['DNA']", "perl": "$input_type eq 'DNA'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "It is possible to indicate a transition/transversion ratio to\n              better define the PAM matrices with nucleotide sequences. By\n              default, BMGE uses a transition/transversion ratio of 2.", "prompt": "Transition/transversion ratio for nucleotide sequences.", "name": "transition", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \":\" +str(value) + \" \")[value is not None]", "perl": "(defined $value) ? \":$value \" : \"\""}, "command": false, "precond": {"python": "input_type in ['DNA'] and (matrixan != 'DNAPAM100' and  matrixan != 'ID' )", "perl": "$input_type eq 'DNA' and ($matrixan ne 'DNAPAM100' and  $matrixan ne 'ID' )"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "BMGE allows characters containing too many gaps to be removed\n                with this option. By default, BMGE removes all characters with a\n                gap frequency greater than 0.2.", "prompt": "Gap Rate Cut-off (-g)", "name": "gap_rate_cutoff", "ctrl": {"python": "value >= 0 and value <= 1", "perl": "$value >= 0 and $value <= 1"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -g \"+str(value))[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -g $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Following the smoothing operation of the entropy-like score\n              values across characters, BMGE selects characters associated with\n              a score value greater than a fixed threshold. This cut-off is set\n              to 0.0 by default.", "prompt": "Minimum entropy Score Cut-off (-h)", "name": "min_entropy", "ctrl": {"python": "value >= 0 and value <= 1", "perl": "$value >= 0 and $value <= 1"}, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -h %s:%s \" % ( value, max_entropy) )[ (max_entropy != 0.5 or value !=vdef) and  (max_entropy > value)  ]", "perl": "(($max_entropy != 0.5 or $value != $vdef) and  ($max_entropy > $value)) ? \" -h $value:$max_entropy\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Following the smoothing operation of the entropy-like score\n              values across characters, BMGE selects characters associated with\n              a score value below a fixed threshold. This cut-off is set to 0.5\n              by default.", "prompt": "Maximum entropy Score Cut-off (-h)", "name": "max_entropy", "ctrl": {"python": "(value >= 0 and value <= 1) and (value > min_entropy)", "perl": "($value >= 0 and $value <= 1) and ($value > $min_entropy)"}, "simple": null, "argpos": "6", "format": null, "command": false, "precond": {"python": "min_entropy is not None", "perl": "defined $min_entropy"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "BMGE only selects regions of size greater than or equal to 5. Use\n              this option to modify this minimum block size parameter.", "prompt": "Minimum Block Size (-b)", "name": "minimun_block_size", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -b \"+str(value) )[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -b $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output format options", "name": "output_option", "children": [{"comment": null, "prompt": "Output in phylip sequential format (-op)", "name": "phylip", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -op \"+ infile.split('.')[0] + \".phy \")[ value ]", "perl": "( $value ) ? \" -op $infile.phy\" : \"\""}, "command": false, "precond": {"python": "infile is not None", "perl": "defined $infile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If input sequences are in FASTA format with NCBI-formatted annotation lines, e.g.\n                      >field1|field2|field3|field4| field5 [field6]\n            the options -oppp allow naming sequences by field6_____field4 ; knowing that field4 is generally\n            an accession number, and field6 a\n            taxon name, this option leads to PHYLIP files where each sequence is labelled as a\n            taxon name and an accession number.", "prompt": "Output in phylip sequential format. Special formating (-oppp)", "name": "phylip_oppp", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -oppp \"+ infile.split('.')[0] + \".phyp \")[ value]", "perl": "( $value ) ? \" -oppp $infile.phyp\" : \"\""}, "command": false, "precond": {"python": "infile is not None", "perl": "defined $infile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output in nexus format (-on)", "name": "nexus", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -on \"+ infile.split('.')[0] + \".nex \")[ value ]", "perl": "( $value ) ? \" -on $infile.nex\" : \"\""}, "command": false, "precond": {"python": "infile is not None", "perl": "defined $infile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If input sequences are in FASTA format with NCBI-formatted\n                 annotation lines,\n               e.g. >field1|field2|field3|field4| field5 [field6]\n               the option -onnn allow naming sequences by field6_____field4 ;\n               knowing that field4 is generally an accession number and field6 a\n              taxon name, this option leads to NEXUS files where each sequence\n              is labelled as a taxon name and an accession number.", "prompt": "Output in nexus format. Special formating (-onnn)", "name": "nexus_onnn", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -onnn \"+ infile.split('.')[0] + \".nexn \")[ value ]", "perl": "( $value ) ? \" -onnn $infile.nexn\" : \"\""}, "command": false, "precond": {"python": "infile is not None", "perl": "defined $infile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output in fasta format (-of)", "name": "fasta", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -of \"+ infile.split('.')[0] + \".fa \")[ value ]", "perl": "( $value ) ? \" -of $infile.fa\" : \"\""}, "command": false, "precond": {"python": "infile is not None", "perl": "defined $infile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output in html format (-oh)", "name": "html", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -oh \"+ infile.split('.')[0] + \".html \")[ value ]", "perl": "( $value ) ? \" -oh $infile.html\" : \"\""}, "command": false, "precond": {"python": "infile is not None", "perl": "defined $infile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "Version 1.0", "references": [{"url": null, "doi": null, "label": "Criscuolo A, Gribaldo S (2010) BMGE (Block Mapping and Gathering with Entropy): selection of phylogenetic informative regions from multiple\nsequence alignments. BMC Evolutionary Biology 10:210."}], "source_links": ["ftp://ftp.pasteur.fr/pub/gensoft/projects/BMGE/"], "env": [], "authors": "Alexis Criscuolo and Simonetta Gribaldo", "command": {"path": null, "value": "BMGE"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/BMGE/BMGE_doc.pdf"], "type": "program", "name": "BMGE"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab4d"}, "classifications": [{"type": "mobyle1", "classification": "Omics:Genomics"}, {"type": "mobyle1", "classification": "Omics:Transcriptomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Annotation and Alignment"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Expression and Regulation"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Prediction"}, {"type": "mobyle1", "classification": "Genomic Analysis:Mapping and Assembly"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:ChIP-seq"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:Bisulfite sequencing"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:RNA-seq"}, {"type": "mobyle1", "classification": "Phylogenetics and Evolution:Alignments"}], "description": "The Bowtie index is based on the FM Index of Ferragina and Manzini, which in turn is based on the Burrows-Wheeler transform. The algorithm used to build the index is based on the [blockwise algorithm] of Karkkainen.", "title": "Bowtie: build", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output", "name": "output_params", "children": [{"comment": null, "prompt": "Report", "name": "Ebwt_file_one", "simple": null, "filenames": {"python": "str(ebwt_base) +\".1.ebwt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Report", "name": "Ebwt_file_two", "simple": null, "filenames": {"python": "str(ebwt_base) +\".2.ebwt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Report", "name": "Ebwt_file_three", "simple": null, "filenames": {"python": "str(ebwt_base) +\".3.ebwt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Report", "name": "Ebwt_file_four", "simple": null, "filenames": {"python": "str(ebwt_base) +\".4.ebwt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Report", "name": "Ebwt_file_rev", "simple": null, "filenames": {"python": "str(ebwt_base) +\".rev.1.ebwt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Report", "name": "Ebwt_file_rev_two", "simple": null, "filenames": {"python": "str(ebwt_base) + \".rev.2.ebwt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input", "name": "input", "children": [{"comment": "comma-separated list of files with ref sequences", "prompt": "Upload reference sequence:", "name": "ref_seqfile", "ctrl": null, "simple": null, "argpos": "25", "format": {"python": "\" \" + str(value)"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "options", "children": [{"comment": "To be queried using bowtie -C.", "prompt": "Build a colorspace index (-C/--color)", "name": "build_colorspace", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' -C ')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Build both letter- and color-space indexes (-B)", "name": "build_both", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' -B ')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Disable use of the difference-cover sample. Suffix sorting becomes quadratic-time in the worst case (where the worst case is an extremely repetitive reference). Default: off.", "prompt": "Disable diff-cover [algorithm becomes quadratic] (--nodc)", "name": "disable_diff_cover", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' --nodc')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Do not build the NAME.3.ebwt and NAME.4.ebwt portions of the index, which contain a bitpacked version of the reference sequences and are used for paired-end alignment.", "prompt": "Don't build .3/.4.ebwt (packed reference) portion (-r/--noref)", "name": "donotbuild_3_4_ebwt", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' -r ')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Build only the NAME.3.ebwt and NAME.4.ebwt portions of the index, which contain a bitpacked version of the reference sequences and are used for paired-end alignment.", "prompt": "Just build .3/.4.ebwt (packed reference) portion (-3/--justref)", "name": "justbuild_3_4_ebwt", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' -3 ')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "SA is sampled every 2^offRate BWT chars [default: 5]. To map alignments back to positions on the reference sequences, it's necessary to annotate (\"mark\") some or all of the Burrows-Wheeler rows with their corresponding location on the genome. -o/--offrate governs how many rows get marked: the indexer will mark every 2^<int> rows. Marking more rows makes reference-position lookups faster, but requires more memory to hold the annotations at runtime. The default is 5 (every 32nd row is marked; for human genome, annotations occupy about 340 megabytes).", "prompt": "SA sample offrate: (-o/--offrate)", "name": "SA_sampled", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -o \" + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The ftab is the lookup table used to calculate an initial Burrows-Wheeler range with respect to the first <int> characters of the query. A larger <int> yields a larger lookup table but faster query times. The ftab has size 4^(<int>+1) bytes. The default setting is 10 (ftab is 4MB).", "prompt": "Number of characters consumed in initial lookup (-t/--ftabchars)", "name": "num_chars_consumed", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -t \" + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Convert Ns in the reference sequence to As before building the index. By default, Ns are simply excluded from the index and bowtie will not report alignments that overlap them.", "prompt": "Convert Ns in reference to As (--ntoa)", "name": "convert_ns_ref_as", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' -n ')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use <int> as the seed for pseudo-random number generator.", "prompt": "Seed for random number generator (--seed)", "name": "seed_random_number", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --seed \" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced Options", "name": "AdvancedOptions", "children": [{"comment": "Disable the default behavior whereby bowtie-build automatically selects values for the --bmax, --dcv and --packed parameters according to available memory. Instead, user may specify values for those parameters. If memory is exhausted during indexing, an error message will be printed; it is up to the user to try new parameters.", "prompt": "Disable automatic -p/--bmax/--dcv memory-fitting (-a/--noauto)", "name": "memory_fitting", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' -a')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use a packed (2-bits-per-nucleotide) representation for DNA strings. This saves memory but makes indexing 2-3 times slower. Default: off. This is configured automatically by default; use -a/--noauto to configure manually.", "prompt": "Use packed strings internally; slower, uses less memory. (-p/--packed)", "name": "packed_strings", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' -p')[value]"}, "command": false, "precond": {"python": "memory_fitting == 1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum number of suffixes allowed in a block. Allowing more suffixes per block makes indexing faster, but increases peak memory usage. Setting this option overrides any previous setting for --bmax, or --bmaxdivn. Default (in terms of the --bmaxdivn parameter) is --bmaxdivn 4. This is configured automatically by default; use -a/--noauto to configure manually.", "prompt": "Max bucket size for blockwise suffix-array builder (--bmax)", "name": "max_bucket_size", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' -bmax ' + str(value))[value is not None]"}, "command": false, "precond": {"python": "memory_fitting == 1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum number of suffixes allowed in a block, expressed as a fraction of the length of the reference. Setting this option overrides any previous setting for --bmax, or --bmaxdivn. Default: --bmaxdivn 4. This is configured automatically by default; use -a/--noauto to configure manually.", "prompt": "Max bucket size as divisor of ref len [default: 4] (--bmaxdivn)", "name": "fraction_reference", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --bmaxdivn \" +str(value) )[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use <int> as the period for the difference-cover sample. A larger period yields less memory overhead, but may make suffix sorting slower, especially if repeats are present. Must be a power of 2 no greater than 4096. Default: 1024. This is configured automatically by default; use -a/--noauto to configure manually.", "prompt": "Diff-cover period for blockwise [default: 1024] (--dcv)", "name": "difference_cover", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' --dcv ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": {"python": "memory_fitting == 1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output", "name": "output_params", "children": [{"comment": "write Ebwt data to files with this basename", "prompt": "Ebwt file name:", "name": "ebwt_base", "ctrl": null, "simple": null, "argpos": "30", "format": {"python": "\" \" + ( str(vdef) ,str(value) )[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "0.12.7", "references": [], "source_links": [], "env": [], "authors": "Langmead B. & Trapnell C.", "command": {"path": null, "value": "bowtie-build"}, "documentation_links": [], "type": "program", "name": "bowtie-build"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab4e"}, "classifications": [{"type": "mobyle1", "classification": "Omics:Genomics"}, {"type": "mobyle1", "classification": "Omics:Transcriptomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Annotation and Alignment"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Expression and Regulation"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Prediction"}, {"type": "mobyle1", "classification": "Genomic Analysis:Mapping and Assembly"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:ChIP-seq"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:Bisulfite sequencing"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:RNA-seq"}, {"type": "mobyle1", "classification": "Phylogenetics and Evolution:Alignments"}], "description": "Bowtie is an ultrafast and memory-efficient alignment of short DNA sequences to the reference genome sequence.", "title": "Bowtie", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output", "name": "output_param", "children": [{"comment": null, "prompt": "Bowtie Alignments", "name": "bamout", "simple": null, "filenames": {"python": "\"*.bam\""}, "precond": {"python": "out_format == \"bam\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAlignment", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Bowtie Alignments - SAM", "name": "samout", "simple": null, "filenames": {"python": "\"*.sam\""}, "precond": {"python": "out_format == \"sam\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAlignment", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Bowtie Alignments - Text output", "name": "text_out", "simple": null, "filenames": {"python": "\"*.txt\""}, "precond": {"python": "out_format == \"txt\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Multiple files - Text output", "name": "mapfiles", "simple": null, "filenames": {"python": "\"*.map\""}, "precond": {"python": "write_alignments == \"1\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Aligned reads", "name": "aligned_reads", "simple": null, "filenames": {"python": "write_aligned + \"_aligned_reads*.fq\""}, "precond": {"python": "write_aligned is not None"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Unaligned reads", "name": "unaligned_reads", "simple": null, "filenames": {"python": "write_unaligned + \"_unaligned_reads*.fq\""}, "precond": {"python": "write_unaligned is not None"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Aligned reads", "name": "reads", "simple": null, "filenames": {"python": "write_align_with_n + \"_aligned_reads*.fq\""}, "precond": {"python": "write_align_with_n is not None"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input", "name": "input_args", "children": [{"comment": "-If the query input files are FASTQ (usually having extension .fq or .fastq), this is the default.If the query input files are FASTA files (usually having extension .fa, .mfa, .fna or similar), all quality values are assumed to be 40 on the Phred quality scale.If the query input files are Raw files (one sequence per line, without quality values or names), all quality values are assumed to be 40 on the Phred quality scale.If the query input file is a comma-separated list of files containing a mix of unpaired and paired-end reads in Tab-delimited format, quality values can be expressed using any of the scales supported in FASTQ files. Tab-delimited format is a 1-read-per-line format where unpaired reads consist of a read name, sequence and quality string each separated by tabs. A paired-end read consists of a read name, sequence of the #1 mate, quality values of the #1 mate, sequence of the #2 mate, and quality values of the #2 mate separated by tabs. Q Reads may be a mix of different lengths and paired-end and unpaired reads may be intermingled in the same file. If - is specified, bowtie will read the Tab-delimited reads from the \"standard in\" filehandle.", "prompt": "Data format (-f or -q or -C or -r or --12) :", "name": "input_data_format", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Select a reference genome", "name": "opt_selrefgen", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "(\"\",\" \" + str( value ))[value != vdef and value != \"upload\"]"}, "command": false, "precond": {"python": "input_data_format != \"-C\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Upload a custom reference genome", "name": "custom_ref_genome", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "(\"\",\" \" + str( value ))[value is not None]"}, "command": false, "precond": {"python": "opt_selrefgen == \"upload\" and input_data_format != \"-C\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If uploading a custom genome, please load a single zip file containing the index and the FASTA file.", "prompt": "Select a reference genome:", "name": "color_ref_genome", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "(\"\",\" \" + str( value ))[value != vdef and value != \"upload\"]"}, "command": false, "precond": {"python": "input_data_format == \"-C\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Upload a custom colorspace reference genome", "name": "custom_color_genome", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "(\"\",\" \" + str( value ))[value is not None]"}, "command": false, "precond": {"python": "color_ref_genome == \"upload\" and input_data_format == \"-C\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The flag is required on the command line when running colorspace.", "prompt": "required flag", "name": "colorspace_flag", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' -f')[color_ref_genome is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Data type", "name": "input_data_type", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "The tab-delimited (--12) format is the only format for the Mixed (mix of unpaired and paired-end reads) data format", "name": "help_string", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Quality score type (only valid for FASTQ format):", "name": "input_quality_score_type", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" \" + str(value))[value != vdef]"}, "command": false, "precond": {"python": "input_data_format== \"-q\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Represent quality values in the read input file as space-separated ASCII integers.Default is to represent quality values as ASCII characters.", "prompt": "Specify qualities as space separated integers? (--integer-quals)", "name": "quality_scores_integer", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --integer-quals\")[value]"}, "command": false, "precond": {"python": "input_data_format== \"-q\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Please upload a zip or tar.gz file containing all the input data", "prompt": "Input data", "name": "first_files", "ctrl": null, "simple": null, "argpos": "101", "format": {"python": "(\" \", \" -1 \")[input_data_type == \"paired_end\"] + str(value)"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Currently multiple files upload is not supported. This will be implemented in future", "prompt": "Second File (for \"paired-end\" library)", "name": "second_files", "ctrl": null, "simple": null, "argpos": "102", "format": {"python": "(\" \", \" -2 \")[input_data_type == \"paired_end\"] + str(value)"}, "command": false, "precond": {"python": "input_data_type== \"paired_end\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "List of files containing quality values for corresponding unpaired CSFASTA reads.", "prompt": "QV file", "name": "first_qual_file", "ctrl": null, "simple": null, "argpos": "110", "format": {"python": "(\" -Q \", \" --Q1 \")[input_data_type == \"paired_end\"] + str(value)"}, "command": false, "precond": {"python": "input_data_format == \"-C\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "File containing quality values for corresponding CSFASTA #2 mates.", "prompt": "Second QV file (for \"paired-end\" library)", "name": "second_qual_file", "ctrl": null, "simple": null, "argpos": "111", "format": {"python": "(\"\", \" --Q2 \")[input_data_type == \"paired_end\"] + str(value)"}, "command": false, "precond": {"python": "input_data_format == \"-C\" and input_data_type== \"paired_end\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Skip the first n reads (-s or --skip)", "name": "skip_first_reads", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -s \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "-1 for off", "prompt": "Only align the first n reads (-u or --qupto)", "name": "align_only_first_reads", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -u \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Trim n bases from high-quality (left) end of each read before alignment (-5 or trim5)", "name": "trim5", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -5 \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Trim n bases from low-quality (right) end of each read before alignment (-3 or --trim3)", "name": "trim3", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -3 \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Alignment Options", "name": "alignment_para", "children": [{"comment": null, "prompt": "Use seed options?", "name": "use_seed_opts", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Seed Options:", "name": "seed_opts_text", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "use_seed_opts == 1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum number of mismatches permitted in the \"seed\", i.e. the first L base pairs of the read (where L is set with -l/--seedlen). This may be 0, 1, 2 or 3 and the default is 2. This option is mutually exclusive with the -v option.", "prompt": "Maximum number of mismatches permitted in the seed: (-n or --seedmms)", "name": "seed_opts_max_mismatches", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -n \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": {"python": "use_seed_opts == 1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum permitted total of quality values at all mismatched read positions throughout the entire alignment, not just in the \"seed\". The default is 70. Like Maq, bowtie rounds quality values to the nearest 10 and saturates at 30; rounding can be disabled with --nomaqround.", "prompt": "Maximum permitted total of quality values: (-e)", "name": "max_quality_across_align", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -e \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": {"python": "use_seed_opts == 1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Seed length: (-l or --seedlen)", "name": "seed_opts_length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -l \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": {"python": "use_seed_opts == 1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maq accepts quality values in the Phred quality scale, but internally rounds values to the nearest 10, with a maximum of 30. By default, bowtie also rounds this way. --nomaqround prevents this rounding in bowtie.", "prompt": "Prevent rounding? (-nomaqround)", "name": "prevent_quality_score_rounding", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --nomaqround\" )[value]"}, "command": false, "precond": {"python": "use_seed_opts == 1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "If not using seed options, specify v:", "name": "v_option_text", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "use_seed_opts == 0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of mismatches allowed: (-v)", "name": "mismatches", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -v \" + str(value))[value is not None]"}, "command": false, "precond": {"python": "use_seed_opts == 0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If --nofw is specified, bowtie will not attempt to align against the forward reference strand. If --norc is specified, bowtie will not attempt to align against the reverse-complement reference strand. For paired-end reads using --fr or --rf modes, --nofw and --norc apply to the forward and reverse-complement pair orientations. I.e. specifying --nofw and --fr will only find reads in the R/F orientation where mate 2 occurs upstream of mate 1 with respect to the forward reference strand.", "prompt": "Reference strand alignment options: (-nofw, -norc)", "name": "reference_strand_options", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum number of backtracks permitted when aligning a read in -n 2 or -n 3 mode (default: 125 without --best, 800 with --best). A \"backtrack\" is the introduction of a speculative substitution into the alignment. Without this limit, the default parameters will sometimes require that bowtie try 100s or 1,000s of backtracks to align a read, especially if the read has many low-quality bases and/or has no valid alignments, slowing bowtie down significantly. However, this limit may cause some valid alignments to be missed. Higher limits yield greater sensitivity at the expensive of longer running times.", "prompt": "Maximum number of backtracks: (--maxbts)", "name": "max_backtracks", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --maxbts \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": {"python": "use_seed_opts == 1 and seed_opts_max_mismatches >=2 and best_opts == 1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Try as hard as possible to find valid alignments when they exist, including paired-end alignments. This is equivalent to specifying very high values for the --maxbts and --pairtries options. This mode is generally much slower than the default settings, but can be useful for certain problems. This mode is slower when (a) the reference is very repetitive, (b) the reads are low quality, or (c) not many reads have valid alignments.", "prompt": "Try as hard as possible to find valid alignments? (-y or --tryhard)", "name": "try_hard", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\" -y \")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The number of megabytes of memory a given thread is given to store path descriptors in --best mode. Best-first search must keep track of many paths at once to ensure it is always extending the path with the lowest cumulative cost. Bowtie tries to minimize the memory impact of the descriptors, but they can still grow very large in some cases. If you receive an error message saying that chunk memory has been exhausted in --best mode, try adjusting this parameter up to dedicate more memory to the descriptors. Default: 64.", "prompt": "Number of megabytes of memory a given thread is given to store path descriptors: (--chunkmbs)", "name": "chunk_megabytes", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --chunkmbs \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "input_data_type == \"paired_end\""}, "prompt": "Paired-end Options", "name": "paired_end_para", "children": [{"comment": "The upstream/downstream mate orientations for a valid paired-end alignment against the forward reference strand. E.g., if --fr is specified and there is a candidate paired-end alignment where mate1 appears upstream of the reverse complement of mate2 and the insert length constraints are met, that alignment is valid. Also, if mate2 appears upstream of the reverse complement of mate1 and all other constraints are met, that too is valid. --rf likewise requires that an upstream mate1 be reverse-complemented and a downstream mate2 be forward-oriented. --ff requires both an upstream mate1 and a downstream mate2 to be forward-oriented. Default: --fr when -C (colorspace alignment) is not specified, --ff when -C is specified.", "prompt": "Paired-end alignment options: (-fr, -rf, -ff, -nofr)", "name": "paired_end_align_options", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The minimum insert size for valid paired-end alignments. E.g. if -I 60 is specified and a paired-end alignment consists of two 20-bp alignments in the appropriate orientation with a 20-bp gap between them, that alignment is considered valid (as long as -X is also satisfied). A 19-bp gap would not be valid in that case. If trimming options -3 or -5 are also used, the -I constraint is applied with respect to the untrimmed mates. Default: 0.", "prompt": "Minimum insert size for valid paired-end alignments: (-I or --minins)", "name": "paired_end_min_insert_size", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --minins \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum insert size for valid paired-end alignments. E.g. if -X 100 is specified and a paired-end alignment consists of two 20-bp alignments in the proper orientation with a 60-bp gap between them, that alignment is considered valid (as long as -I is also satisfied). A 61-bp gap would not be valid in that case. If trimming options -3 or -5 are also used, the -X constraint is applied with respect to the untrimmed mates, not the trimmed mates. Default: 250.", "prompt": "Maximum insert size for valid paired-end alignments: (-X or --maxins)", "name": "paired_end_max_insert_size", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --maxins \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "For paired-end alignment, this is the maximum number of attempts bowtie will make to match an alignment for one mate up with an alignment for the opposite mate. Most paired-end alignments require only a few such attempts, but pairs where both mates occur in highly repetitive regions of the reference can require significantly more. Setting this to a higher number allows bowtie to find more paired- end alignments for repetitive pairs at the expense of speed. The default is 100.", "prompt": "Maximum number of alignment matching attempts: (--pairtries)", "name": "pair_tries", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --pairtries \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Reporting Options", "name": "reporting_para", "children": [{"comment": "Report up to <int> valid alignments per read or pair. If no value is specified then all the alignments will be reported.Validity of alignments is determined by the alignment policy (combined effects of -n, -v, -l, and -e). If more than one valid alignment exists and the --best and --strata options are specified, then only those alignments belonging to the best alignment \"stratum\" will be reported. Bowtie is designed to be very fast for small -k but bowtie can become significantly slower as -k increases.", "prompt": "Report up to k valid alignments per read or pair: (-k)", "name": "report_upto", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -k \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Suppress all alignments for a particular read or pair if more than <int> reportable alignments exist for it. Reportable alignments are those that would be reported given the -n, -v, -l, -e, -k, -a, --best, and --strata options. Default: no limit. Bowtie is designed to be very fast for small -m but bowtie can become significantly slower for larger values of -m.", "prompt": "Suppress all alignments for a particular read or pair if more than m reportable alignments exist for it: (-m)", "name": "suppress_align_if_contains", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -m \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Behaves like -m except that if a read has more than <int> reportable alignments, one is reported at random. In default output mode, the selected alignment's 7th column is set to <int>+1 to indicate the read has at least <int>+1 valid alignments. In -S/--sam mode, the selected alignment is given a MAPQ (mapping quality) of 0 and the XM:I field is set to <int>+1. This option requires --best; if specified without --best, --best is enabled automatically.", "prompt": "If a read has more than M reportable alignments, report one at random. (-M). By default the \"--best\" option is used", "name": "report_random_align_if_contains", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -M \" + str(value))[value is not None and value != vdef ]"}, "command": false, "precond": {"python": "best_opts == \"1\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Guaranteed best stratum; ties broken by quality.", "prompt": "Report hits guaranteed best stratum (--best)", "name": "best_opts", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --best\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Hits in sub-optimal strata aren't reported (requires --best). If many valid alignments exist and are reportable (e.g. are not disallowed via the -k option) and they fall into more than one alignment \"stratum\", report only those alignments that fall into the best stratum. By default, Bowtie reports all reportable alignments regardless of whether they fall into multiple strata. When --strata is specified, --best must also be specified.", "prompt": "Do not report hits in sub-optimal strata(--strata)", "name": "strate_opts", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --strata\")[value]"}, "command": false, "precond": {"python": "best_opts == \"1\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "input_data_format == \"-c\""}, "prompt": "Colorspace Options", "name": "color_space_para", "children": [{"comment": null, "prompt": "SNP options", "name": "colorspace_snps", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "When decoding colorspace alignments, use <int> as the SNP penalty. This should be set to the user's best guess of the true ratio of SNPs per base in the subject genome, converted to the Phred quality scale. E.g., if the user expects about 1 SNP every 1,000 positions, --snpphred should be set to 30 (which is also the default). To specify the directly, use --snpfrac.", "prompt": "SNP penalty: (-snpphred)", "name": "cs_snps_penalty", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --snpphred \" + str(value))[ value is not None and value != vdef]"}, "command": false, "precond": {"python": "colorspace_snps == \"penalty\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "When decoding colorspace alignments, use <dec> as the estimated ratio of SNPs per base. For best decoding results, this should be set to the user's best guess of the true ratio. bowtie internally converts the ratio to a Phred quality, and behaves as if that quality had been set via the --snpphred option. Default: 0.001.", "prompt": "Estimated fractions of SNP's per base: (-snpfrac)", "name": "cs_snps_fraction", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --snpfrac \" + str(value))[ value is not None and value != vdef]"}, "command": false, "precond": {"python": "colorspace_snps == \"fraction\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If reads are in colorspace and the default output mode is active, --col-cseq causes the reads' color sequence to appear in the read-sequence column (column 5) instead of the decoded nucleotide sequence. See the Decoding colorspace alignments section for details about decoding. This option is ignored in -S/--sam mode.", "prompt": "Do you want the color sequence to appear in the read-sequence column? (-col-cseq)", "name": "print_color_seq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --col-cseq\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If reads are in colorspace and the default output mode is active, --col-cqual causes the reads' original (color) quality sequence to appear in the quality column (column 6) instead of the decoded qualities. See the Colorspace alignment section for details about decoding. This option is ignored in -S/--sam mode.", "prompt": "Do you want the reads to appear in the quality column instead of the decoded qualitites? (-col-cqual)", "name": "print_color_quals", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --col-cqual\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "When decoding colorpsace alignments, bowtie trims off a nucleotide and quality from the left and right edges of the alignment. This is because those nucleotides are supported by only one color, in contrast to the middle nucleotides which are supported by two. Specify --col-keepends to keep the extreme-end nucleotides and qualities.", "prompt": "Do you want to keep extreme-end nucleotides and qualities? (-col-keepends)", "name": "cs_keep_extreme_end_nucl", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --col-keepends\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output", "name": "output_param", "children": [{"comment": "When outputting alignments, number the first base of a reference sequence as 'int'.", "prompt": "Number the first base of a reference sequence as: (-B or --offbase)", "name": "ref_offset_value", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --offbase \" + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Write alignments to a set of files named refXXXXX.map, where XXXXX is the 0-padded index of the reference sequence aligned to. This can be a useful way to break up work for downstream analyses when dealing with, for example, large numbers of reads aligned to the assembled human genome. If <hits> is also specified, it will be ignored.", "prompt": "Write alignments to a set of files named refXXXXX.map? (--refout)", "name": "write_alignments", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --refout\")[value]"}, "command": false, "precond": {"python": "out_format == \"txt\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "When a reference sequence is referred to in a reported alignment, refer to it by 0-based index (its offset into the list of references that were indexed) rather than by name.", "prompt": "Refer reference sequence to a 0-based index if it is referred to in a reported alignment? (-refidx)", "name": "zero_based_idx", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --refidx\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Write all reads for which at least one alignment was reported to a file with name <filename>. Written reads will appear as they did in the input, without any of the trimming or translation of quality values that may have taken place within bowtie. Paired-end reads will be written to two parallel files with _1 and _2 inserted in the filename, e.g., if <filename> is aligned.fq, the #1 and #2 mates that fail to align will be written to aligned_1.fq and aligned_2.fq respectively.", "prompt": "Prefix of the file name to write all reads for which at least one alignment(--al)", "name": "write_aligned", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --al \" + str(value) + \"_aligned_reads.fq\")[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Write all reads that could not be aligned to a file with name <filename>. Written reads will appear as they did in the input, without any of the trimming or translation of quality values that may have taken place within Bowtie. Paired-end reads will be written to two parallel files with _1 and _2 inserted in the filename, e.g., if <filename> is unaligned.fq, the #1 and #2 mates that fail to align will be written to unaligned_1.fq and unaligned_2.fq respectively. Unless --max is also specified, reads with a number of valid alignments exceeding the limit set with the -m option are also written to <filename>.", "prompt": "Write all reads that could not be aligned to a file (--un)?", "name": "write_unaligned", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --un \" + str(value) + \"_unaligned_reads.fq\")[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Write all reads with a number of valid alignments exceeding the limit set with the -m option to a file with name <filename>. Written reads will appear as they did in the input, without any of the trimming or translation of quality values that may have taken place within bowtie. Paired-end reads will be written to two parallel files with _1 and _2 inserted in the filename, e.g., if <filename> is max.fq, the #1 and #2 mates that exceed the -m limit will be written to max_1.fq and max_2.fq respectively. These reads are not written to the file specified with --un.", "prompt": "Write all reads with a number of valid alignments exceeding the limit set with the -m option to a file (--max)", "name": "write_align_with_n", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --max \" + str(value) + \"_aligned_reads.fq\" )[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Suppress columns of output in the default output mode. E.g. if --suppress 1,5,6 is specified, the read name, read sequence, and read quality fields will be omitted. See Default Bowtie output for field descriptions. This option is ignored if the output mode is -S/--sam.", "prompt": "Suppress columns of output in the default output mode? (--suppress)", "name": "columns_to_suppress", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --suppress \" + str(value) )[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Print the full reference sequence name, including whitespace, in alignment output. By default bowtie prints everything up to but not including the first whitespace.", "prompt": "Print full reference sequence name? (--fullref)", "name": "write_full_alignment", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --fullref\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Job description:", "name": "output_file", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default output: One alignment per line. Each line is a collection of 8 fields separated by tabs - refer Bowtie manual for detailsSAM format : Print alignments in SAM format. See the SAM output section of the manual for details. To suppress all SAM headers, use --sam-nohead in addition to -S/--sam. To suppress just the @SQ headers (e.g. if the alignment is against a very large number of reference sequences), use --sam-nosq in addition to -S/--sam. bowtie does not write BAM files directly, but SAM output can be converted to BAM on the fly by piping bowtie's output to samtools view. -S/--sam is not compatible with --refout.BAM format: The bowtie SAM file is converted to sorted BAM file using SAMTools package.", "prompt": "Output formats", "name": "out_format", "ctrl": null, "simple": null, "argpos": "104", "format": {"python": "(\" \" , ( \" -S | samtools view -bS - | samtools sort - \", \" -S \" )[value == \"sam\"] )[value != \"txt\"] + str(output_file)"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "out_format == \"sam\""}, "prompt": "SAM Options", "name": "sam_options_para", "children": [{"comment": null, "prompt": "If an alignment is non-repetitive, set the MAPQ field to this value: (-mapq)", "name": "mapq_quality", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --mapq \" + str(value))[value is not None and value !=vdef]"}, "command": false, "precond": {"python": "out_format == \"sam\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Suppress header lines (starting with @) when output is -S/--sam. This must be specified in addition to -S/--sam. --sam-nohead is ignored unless -S/--sam is also specified.", "prompt": "Suppress @ header lines when output is SAM? (-sam-nohead)", "name": "suppress_header", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --sam-nohead \")[value]"}, "command": false, "precond": {"python": "out_format == \"sam\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Suppress @SQ header lines when output is -S/--sam. This must be specified in addition to -S/--sam. --sam-nosq is ignored unless -S/--sam is also specified.", "prompt": "Supress @SQ header lines when output is SAM? (sam-nosq)", "name": "suppress_sq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --sam-nosq \")[value]"}, "command": false, "precond": {"python": "out_format == \"sam\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Add text (usually of the form TAG:VAL, e.g. ID:IL7LANE2) as a field on the @RG header line. Specify --sam-RG multiple times to set multiple fields. See the SAM Spec for details about what fields are legal. Note that, if any @RG fields are set using this option, the ID and SM fields must both be among them to make the @RG line legal according to the SAM Spec. --sam-RG is ignored unless -S/--sam is also specified.", "prompt": "Add 'text' as a field on the @RG header line: (-sam-RG)", "name": "add_rg", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --sam-RG \" + str(value) )[value is not None]"}, "command": false, "precond": {"python": "out_format == \"sam\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "0.12.7", "references": [], "source_links": [], "env": [], "authors": "Langmead B. & Trapnell C.", "command": {"path": null, "value": "bowtie"}, "documentation_links": [], "type": "program", "name": "bowtie"}, {"comment": null, "homepage_links": ["http://www.ch.embnet.org/software/BOX_form.html"], "_id": {"$oid": "51434da293546d52388cab4f"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple:display"}], "description": "printouts from multiple-aligned protein or DNA sequences", "title": "BOXSHADE", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "outFile", "simple": null, "filenames": {"python": "\"boxshade.result\"", "perl": "\"boxshade.result\""}, "precond": {"python": "output_format != \"1\" and output_format != \"e\" and output_format != \"2\" and output_format != \"d\" and output_format != \"c\" and output_format != \"4\"", "perl": "$output_format ne \"1\" and $output_format ne \"e\" and $output_format ne \"2\" and $output_format ne \"d\" and $output_format ne \"c\" and $output_format ne \"4\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Postscript output file", "name": "psFile", "simple": null, "filenames": {"python": "\"boxshade.ps\"", "perl": "\"boxshade.ps\""}, "precond": {"python": "output_format == \"1\" or output_format == \"2\"", "perl": "$output_format eq \"1\" or $output_format eq \"2\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Html output file", "name": "htmlFile", "simple": null, "filenames": {"python": "\"boxshade.html\"", "perl": "\"boxshade.html\""}, "precond": {"python": "output_format == \"e\"", "perl": "$output_format eq \"e\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BoxshadeHtmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Rich text format output file", "name": "rtfFile", "simple": null, "filenames": {"python": "\"boxshade.rtf\"", "perl": "\"boxshade.rtf\""}, "precond": {"python": "output_format == \"4\"", "perl": "$output_format eq \"4\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BoxshadeRtfReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Xfig output file", "name": "figFile", "simple": null, "filenames": {"python": "\"boxshade.fig\"", "perl": "\"boxshade.fig\""}, "precond": {"python": "output_format == \"c\"", "perl": "$output_format eq \"c\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BoxshadeXfigReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Picture in pict format", "name": "pictFile", "simple": null, "filenames": {"python": "\"boxshade.pict\"", "perl": "\"boxshade.pict\""}, "precond": {"python": "output_format == \"d\"", "perl": "$output_format eq \"d\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output matrix", "name": "matrixFile", "simple": null, "filenames": {"python": "\"boxshade.matrix\"", "perl": "\"boxshade.matrix\""}, "precond": {"python": "matrix", "perl": "$matrix"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "boxshade", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"boxshade <boxshade.params\"", "perl": "\"boxshade <boxshade.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment File", "name": "alignment", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["CLUSTAL"], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": null, "name": "input_format", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\"2\\n\"", "perl": "\"2\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "precond": null, "prompt": "Output parameters", "name": "output_params", "children": [{"comment": null, "prompt": "Output format", "name": "output_format", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Should sequence name be printed", "name": "print_name", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "( \"n\\n\" , \"y\\n\" )[ value ]", "perl": "($value) ? \"y\\\\n\" : \"n\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Display ruler line", "name": "ruler", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "( \"n\\n\" , \"y\\n\" )[ value ]", "perl": "($value) ? \"y\\\\n\" : \"n\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Should position numbers be printed?", "name": "print_position", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "( \"n\\n\" , \"y\\n\" )[ value ]", "perl": "($value) ? \"y\\\\n\" : \"n\\\\n\""}, "command": false, "precond": {"python": "not ruler", "perl": "not $ruler"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "How many sequence characters per line", "name": "sequence_characters", "ctrl": {"python": "value <= 254", "perl": "$value <= 254"}, "simple": null, "argpos": "12", "format": {"python": "str( value ) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "How many lines between two sequence blocks", "name": "lines", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "17", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Character size in Points (except for HTML and ASCII output formats)", "name": "character_size", "ctrl": null, "simple": null, "argpos": "28", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "output_format not in [\"8\",\"9\",\"b\",\"e\"]", "perl": "$output_format !~ /^[89be]$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Save Shading/Text", "name": "save_shading", "ctrl": null, "simple": null, "argpos": "29", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "output_format == \"d\"", "perl": "$output_format eq \"d\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Rotate plot", "name": "rotate", "ctrl": null, "simple": null, "argpos": "31", "format": {"python": "( \"n\\n\" , \"y\\n\" )[ value ]", "perl": "($value) ? \"y\\\\n\" : \"n\\\\n\""}, "command": false, "precond": {"python": "output_format == \"1\" or output_format == \"3\" or output_format == \"d\"", "perl": "$output_format eq \"1\" or $output_format eq \"3\" or $output_format eq \"d\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}]}, {"comment": null, "precond": null, "prompt": "Sequence properties", "name": "sequence_params", "children": [{"comment": null, "prompt": "Special label for similar residues", "name": "label_similar", "ctrl": null, "simple": null, "argpos": "18", "format": {"python": "( \"n\\n\" , \"y\\n\" )[ value ]", "perl": "($value) ? \"y\\\\n\" : \"n\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Special label for identical residues in all sequences", "name": "label_identical", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "( \"n\\n\" , \"y\\n\" )[ value ]", "perl": "($value) ? \"y\\\\n\" : \"n\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Display consensus line", "name": "consensus", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "( \"n\\n\" , \"y\\n .*\\n\" )[ value ]", "perl": "($value) ? \"y\\\\n .*\\\\n\" : \"n\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": "The threshold is the fraction of residues that must be identical or similar for shading to occur.", "prompt": "Identity threshold", "name": "threshold", "ctrl": {"python": "0 <= value <= 1", "perl": "0 <= $value <= 1"}, "simple": null, "argpos": "10", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "output_format != \"b\"", "perl": "$output_format ne \"b\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "precond": null, "prompt": "Letters foreground and background colors", "name": "letters", "children": [{"comment": null, "prompt": "Background for different residues", "name": "different_background", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "output_format != \"b\"", "perl": "$output_format ne \"b\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Foreground for different residues (lowercase choices mean lowercase letters in the sequence)", "name": "different_foreground", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Background for identical residues", "name": "identical_background", "ctrl": null, "simple": null, "argpos": "22", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "output_format != \"b\"", "perl": "$output_format ne \"b\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Foreground for identical residues (lowercase choices mean lowercase letters in the sequence)", "name": "identical_foreground", "ctrl": null, "simple": null, "argpos": "23", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Background for similar residues", "name": "similar_background", "ctrl": null, "simple": null, "argpos": "24", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "label_similar and output_format != \"b\"", "perl": "$label_similar and $output_format ne \"b\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Foreground for similar residues (lowercase choices mean lowercase letters in the sequence)", "name": "similar_foreground", "ctrl": null, "simple": null, "argpos": "25", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "label_similar", "perl": "$label_similar"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Background for conserved residues (if special label for identical residues)", "name": "conserved_background", "ctrl": null, "simple": null, "argpos": "26", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "label_identical and output_format != \"b\"", "perl": "label_identical and output_format ne \"b\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Foreground for conserved residues (lowercase choices mean lowercase letters in the sequence)", "name": "conserved_foreground", "ctrl": null, "simple": null, "argpos": "27", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "label_identical", "perl": "$label_identical"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}]}, {"comment": null, "precond": null, "prompt": "Comparison to a single sequence", "name": "single_comparison", "children": [{"comment": null, "prompt": "Similarity to a single sequence", "name": "single", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "( \"n\\n\" , \"y\\n\" )[ value ]", "perl": "($value) ? \"y\\\\n\" : \"n\\\\n\""}, "command": false, "precond": {"python": "output_format != \"b\"", "perl": "$output_format ne \"b\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Which sequence (give its number)", "name": "seq_no", "ctrl": {"python": "seq_no >= 0", "perl": "$seq_no >= 0"}, "simple": null, "argpos": "40", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "single", "perl": "$single"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Hide this sequence", "name": "hide", "ctrl": null, "simple": null, "argpos": "41", "format": {"python": "( \"n\\n\" , \"y\\n\" )[ value ]", "perl": "($value) ? \"y\\\\n\" : \"n\\\\n\""}, "command": false, "precond": {"python": "single", "perl": "$single"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": "Show this sequence in all-normal rendition", "name": "show_normal", "ctrl": null, "simple": null, "argpos": "42", "format": {"python": "( \"n\\n\" , \"y\\n\" )[ value ]", "perl": "($value) ? \"y\\\\n\" : \"n\\\\n\""}, "command": false, "precond": {"python": "single", "perl": "$single"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}]}, {"comment": null, "prompt": "Create identity / similarity matrix", "name": "matrix", "ctrl": null, "simple": null, "argpos": "34", "format": {"python": "( \"n\\n\" , \"y\\n\" )[ value ]", "perl": "($value) ? \"y\\\\n\" : \"n\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}]}, {"comment": null, "prompt": null, "name": "outfileName", "ctrl": null, "simple": null, "argpos": "32", "format": {"python": "\"boxshade.result\\n\"", "perl": "\"boxshade.result\\\\n\""}, "command": false, "precond": {"python": "output_format != \"1\" and output_format != \"e\" and output_format != \"2\" and output_format != \"d\" and output_format != \"c\" and output_format != \"4\"", "perl": "$output_format ne \"1\" and $output_format ne \"e\" and $output_format ne \"2\" and $output_format ne \"d\" and $output_format ne \"c\" and $output_format ne \"4\""}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": null, "name": "psFileName", "ctrl": null, "simple": null, "argpos": "33", "format": {"python": "\"boxshade.ps\\n\"", "perl": "\"boxshade.ps\\\\n\""}, "command": false, "precond": {"python": "output_format == \"1\" or output_format == \"2\"", "perl": "$output_format eq \"1\" or $output_format eq \"2\""}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": null, "name": "htmlFileName", "ctrl": null, "simple": null, "argpos": "33", "format": {"python": "\"boxshade.html\\n\"", "perl": "\"boxshade.html\\\\n\""}, "command": false, "precond": {"python": "output_format == \"e\"", "perl": "$output_format eq \"e\""}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": null, "name": "rtfFileName", "ctrl": null, "simple": null, "argpos": "33", "format": {"python": "\"boxshade.rtf\\n\"", "perl": "\"boxshade.rtf\\\\n\""}, "command": false, "precond": {"python": "output_format == \"4\"", "perl": "$output_format eq \"4\""}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": null, "name": "figFileName", "ctrl": null, "simple": null, "argpos": "33", "format": {"python": "\"boxshade.fig\\n\"", "perl": "\"boxshade.fig\\\\n\""}, "command": false, "precond": {"python": "output_format == \"c\"", "perl": "$output_format eq \"c\""}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": null, "name": "pictFileName", "ctrl": null, "simple": null, "argpos": "33", "format": {"python": "\"boxshade.pict\\n\"", "perl": "\"boxshade.pict\\\\n\""}, "command": false, "precond": {"python": "output_format == \"d\"", "perl": "$output_format eq \"d\""}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}, {"comment": null, "prompt": null, "name": "matrixFileName", "ctrl": null, "simple": null, "argpos": "35", "format": {"python": "\"boxshade.matrix\\n\"", "perl": "\"boxshade.matrix\\\\n\""}, "command": false, "precond": {"python": "matrix", "perl": "$matrix"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "boxshade.params"}]}, "version": "3.31", "references": [], "source_links": ["ftp://www.isrec.isb-sib.ch/pub/software/unix/boxshade/"], "env": [], "authors": "Hofmann, Baron", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "boxshade"}, {"comment": null, "homepage_links": ["http://seq.cs.iastate.edu/"], "_id": {"$oid": "51434da293546d52388cab52"}, "classifications": [{"type": "mobyle1", "classification": "assembly:assembly"}], "description": "Contig Assembly Program", "title": "CAP3", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Assembly in ace format", "name": "ace", "simple": null, "filenames": {"python": "\"*.cap.ace\"", "perl": "\"*.cap.ace\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "AceAssembly", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["ACE"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Contigs", "name": "contig", "simple": null, "filenames": {"python": "\"*.cap.contigs\"", "perl": "\"*.cap.contigs\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "0,n"}}, {"comment": null, "prompt": "Contig links", "name": "contig_link", "simple": null, "filenames": {"python": "\"*.cap.contigs.links\"", "perl": "\"*.cap.contigs.links\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Quality of contigs", "name": "contig_qual", "simple": null, "filenames": {"python": "\"*.cap.contigs.qual\"", "perl": "\"*.cap.contigs.qual\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Assembly informations", "name": "info", "simple": null, "filenames": {"python": "\"*.cap.info\"", "perl": "\"*.cap.info\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Singlets", "name": "singlet", "simple": null, "filenames": {"python": "\"*.cap.singlets\"", "perl": "\"*.cap.singlets\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": "0,n"}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "File of reads", "name": "seq", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" \" + str( value )", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "2,n"}, "paramfile": null}, {"comment": "CAP3 uses the same format of a quality file as Phrap. \n          The sequence file and the corresponding quality file must be arranged \n          in the same order in terms of reads, where for each read, \n          the same name must be used in both files and the number of bases must \n          be equal to the number of quality values.", "prompt": "Quality value file", "name": "qual_file", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "(\"\" , \"ln -sf %s %s.qual && \" %( value , seq ) )[value is not None and value != seq + \".qual\" ]", "perl": "(defined $value?)\"ln -sf $value $seq.qual\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "BaseQuality", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["PhrapQuality"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Each line of the constraint file specifies one forward-reverse constraint of the form:ReadA   ReadB    MinDistance    MaxDistancewhere ReadA and ReadB are names of two reads, and MinDistance and MaxDistance are \n          distances (integers) in base pairs. The constraint is satisfied if ReadA in forward orientation \n          occurs in a contig before ReadB in reverse orientation, or ReadB in forward orientation occurs in \n          a contig before ReadA in reverse orientation, and their distance is between MinDistance and \n          MaxDistance. CAP3 works better if a lot more constraints are used.", "prompt": "Constraint file", "name": "con_file", "ctrl": null, "simple": null, "argpos": "-5", "format": {"python": "( \"\" , \"ln -sf %s %s.con && \" %( value , seq ) )[value is not None ]", "perl": "(defined $value?)\"ln -sf $value $seq.con\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "CapConstraint", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>CAP3 computes clipping \n    positions of each read using both base quality values and similarity \n    information. Clipping of a poor end region of a read f is controlled by \n    three parameters: quality value cutoff qualcut, clipping range crange, \n    and depth of good coverage gdepth. The value for qualcut can specified \n    with the \"-c\" option, the value for crange with the \"-y\" option, and the \n    value for gdepth with the \"-z\" option.</html:p><html:p>If there are quality values, CAP3 computes two positions qualpos5 and \n    qualpos3 of read f such that the region of read f from position qualpos5 \n    to position qualpos3 consists mostly of quality values greater than \n    qualcut. If there are no quality values, then qualpos5 is set to 1 and \n    qualpos3 is set the length of read f. The range for the left clipping \n    position of read f is from 1 to qualpos5 + crange. The range for the \n    right clipping position of read f is from qualpos3 - crange to the end \n    of read f. The minimum depth of good coverage at the left and right \n    clipping positions of read f is expected to be gdepth.</html:p><html:p>Let realdepth5 be the maximum real depth of coverage for the initial \n    region of read f ending at position qualpos5 + crange. Let depth5 be the \n    smaller of realdepth5 and gdepth. If depth5 is 0, then left clipping \n    position of read f is set to qualpos5 by CAP3. The given value for the \n    parameter crange may be too small for read f. CAP3 reports at the start \n    of a .info file that \"No overlap is found in the given 5' clipping range \n    for read f.\" If there are overlaps beyond the given 5' clipping range \n    for read f, CAP3 reports a new clipping range for each overlap. One of \n    the reported range values can be used as a new value for the parameter \n    crange for read f.</html:p><html:p>If depth5 is greater than 0, the left clipping position of read f is the \n    smallest position x such that x is less than qualpos5 + crange and the \n    region of read f beginning at position x is similar to depth5 other \n    reads. The right clipping position of read f is computed similarly by \n    CAP3. Larger values for the parameters crange and gdepth result in more \n    aggressive clipping of poor end regions. A larger value for crange \n    allows CAP3 to search for the left clipping position in a larger area. A \n    larger value for gdepth may cause CAP3 to clip more bases so that the \n    resulting good portion of read f is similar to more reads.</html:p><html:p>The user may provide specific values for the parameters crange and \n    gdepth for individual reads in a file. Each line in the file has the \n    following format: file has the following format:</html:p><html:pre><html:font face=\"Verdana\" style=\"font-size: 9pt;\">ReadName     crange5     gdepth5      crange3     gdepth3</html:font></html:pre><html:p>where ReadName is the name \n    of a read, crange5 &amp; gdepth5 are values for the 5' end, and crange3 &amp; \n    gdepth3 are for the 3' end.</html:p></html:div>", "precond": null, "prompt": "Clipping of poor regions", "name": "clipping_poor_regions", "children": [{"comment": "Default value: 12", "prompt": "Base quality cutoff for clipping (-c)", "name": "base_qual_cutoff_clipping", "ctrl": {"python": "value > 5", "perl": "$value > 5"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -c \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -c $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default value: 250", "prompt": "Clipping range (-y)", "name": "clipping_range", "ctrl": {"python": "value > 5", "perl": "$value > 5"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -y \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -y $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default value: 3", "prompt": "Minimum number of good reads at clip pos (-z)", "name": "good_reads", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -z \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef)? \" -z $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The user may provide specific values for the parameters crange and gdepth or individual reads in a file.Each line in the file has the following format:ReadName crange5 gdepth5 crange3 gdepth3where ReadName is the name of a read, crange5 and gdepth5 are values for the 5' end, and crange3 and gdepth3 are for the 3' end.", "prompt": "File for clipping information (-w)", "name": "clipping_file", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -w \"+ str( value ) )[ value is not None ]", "perl": "(defined $value)? \" -w $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "ClippingParameters", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "The program determines a minimum band of diagonals for an overlapping alignment between two sequence reads.The band is expanded by a number of bases specified by the user with option \"-a\".", "precond": null, "prompt": "Band of diagonals", "name": "band_diagonals", "children": [{"comment": "The program determines a minimum band of diagonals for an overlapping alignment between two sequence reads.The band is expanded by a number of bases specified by the user with option \"-a\".Default value: 20", "prompt": "Band expansion size (-a)", "name": "band_expansion", "ctrl": {"python": "value > 10", "perl": "$value > 10"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -a \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -a $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Overlaps between reads are evaluated by many measures.The first measure is based on base quality.If an overlap contains lots of differences at bases of high quality, then the overlap is removed.Specifically,let b be the base quality cutoff value and let d be the maximum difference score.The values for the two parameters can be set using the \"-b\" and \"-d\" options.If the overlap contains a difference at bases of quality values q1 and q2, then the score at the difference is max(0, min(q1, q2) - b).The difference score of an overlap is the sum of scores at each difference.For example, an overlap contains two differences,one at bases of quality values 15 and 30 and the other at bases of quality values 40 and 50.With b = 20, the difference score of the overlap is 0 + 20 = 20.If the difference score of an overlap exceeds d, then the overlap is removed. With b = 20,an overlap with 15 differences at bases of quality values 40 or higher has a difference score of at least 300 and is removed if d = 250.", "precond": null, "prompt": "Quality difference score of an overlap", "name": "overlap_score", "children": [{"comment": null, "prompt": "Base quality cutoff for differences (-b)", "name": "base_qual_cutoff", "ctrl": {"python": "value > 15", "perl": "$value > 15"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -b \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"-b $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum qscore sum at differences (-d)", "name": "max_qscore", "ctrl": {"python": "value > 20", "perl": "$value > 20"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -d \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -d $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "The second measure looks at the number of differences in an overlap.If the number of differences in an overlap is higher than expected, than the overlap is removed.Let an integer e be the maximum number of extra differences.Consider an overlap between reads f and g.Let d1 be the estimated number of sequencing errors for the region of f involved in the overlap and let r2 be that forthe region of g involved in the overlap.If the observed number of differences in the overlap is greater than r1 + r2 + e, then the overlap is removed.The value for the parameter e can be changed using the \"-e\" option.The expected number of differences in the overlap is about r1 + r2.Giving a smaller value to e causes more overlaps to be removed.", "precond": null, "prompt": "Number of differences in an overlap", "name": "nb_diff_overlap", "children": [{"comment": null, "prompt": "Clearance between number of diff (-e)", "name": "clearance", "ctrl": {"python": "value > 10", "perl": "$value > 10"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -e \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef)? \" -e $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "The third measure is based on overlap similarity score.The similarity score of an overlapping alignment is defined using base quality values.Let m be the match score factor, let n be the mismatch score factor, and let g be the gap penalty factor.Values for these parameters can be set with the \"-m\", \"-n\", and \"-g\" options.A match at bases of quality values q1 and q2 is given a score of m * min(q1,q2).A mismatch at bases of quality values q1 and q2 is given a score of n * min(q1,q2).A base of quality value q1 in a gap is given a score of -g * min(q1,q2),where q2 is the quality value of the base in the other sequence right before the gap.The score of a gap is the sum of scores of each base in the gap minus a gap open penalty.The similarity score of an overlapping alignment is the sum of scores of each match, each mismatch, and each gap.With m = 2, an overlap that consists of 25 matches at bases of quality value 10 has a score of 500.If the similarity score of an overlap is less than the overlap similarity score cutoff s, then the overlap is removed.", "precond": null, "prompt": "Similarity score of an overlap", "name": "sim_score_overlap", "children": [{"comment": null, "prompt": "Match score factor (-m)", "name": "match_score", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -m \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef)? \" -m $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Mismatch score factor (-n)", "name": "mismatch_score", "ctrl": {"python": "value < 0", "perl": "$value < 0"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -n \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef)? \" -n $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Gap penalty factor (-g)", "name": "gap_penalty", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -g \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef)? \" -g $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "The fourth requirement for an overlap is that the length in bp of the overlap is no less than the value of the minimum overlap length cutoff parameter.The value for this parameter can be changed with the \"-o\" option.The fifth requirement for an overlap is that the percent identity of the overlap is no less than the minimum percent identity cutoff.The value for this parameter can be changed with the \"-p\" option.A value of 75 for p means 0.75 or 75%.", "precond": null, "prompt": "Length and percent identity of an overlap", "name": "percent_id_overlap", "children": [{"comment": null, "prompt": "Overlap length cutoff (-o)", "name": "overlap_length", "ctrl": {"python": "value > 20", "perl": "$value > 20"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -o \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -o $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Overlap percent identity cutoff (-p)", "name": "overlap_identity", "ctrl": {"python": "value > 65", "perl": "$value > 65"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -p \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -p $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "The program provides a parameter (-f option) for the user to reject overlaps with a long gap.Let an integer f be the maximum length of gaps allowed in any overlap. Then any overlap with a gap longer than f is rejected by the program.The value for this parameter can be changed using the \"-f\" option.Note that a small value for this parameter may cause the program to remove true overlaps and to produce incorrect results.The \"-f\" option may be used by the user to split reads from alternative splicing forms into separate contigs.Geo Pertea at TIGR suggested that this option be added to the program.", "precond": null, "prompt": "Maximum length of gaps in an overlap", "name": "max_len_gaps_overlap", "children": [{"comment": null, "prompt": "Maximum gap length in any overlap (-f)", "name": "max_gap_length", "ctrl": {"python": "value > 1", "perl": "$value > 1"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -f \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -f $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "The total length of the different overhang regions in an overlap is controlled with the -h option.TAn overhang region in an overlap is a different terminal region before or after the overlap.TThe overhang percent length of an overlap is 100 times the total length of the different overhang regions in the overlap divided by the length of the overlap.TOverlaps with an overhang percent length greater than the maximum cutoff are rejected.", "precond": null, "prompt": "Overhang percent length of an overlap", "name": "overhang_pcent_len_overlap", "children": [{"comment": null, "prompt": "Maximum overhang percent length (-h)", "name": "max_overhang", "ctrl": {"python": "value > 2", "perl": "$value > 2"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -h \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef)? \" -h $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Overlap similarity score cutoff (-s)", "name": "overlap_similarity", "ctrl": {"python": "value > 400", "perl": "$value > 400"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -s \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -s $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The \"-r\" option is used to let CAP3 know whether to consider reads in reverse orientation for assembly.The default value for the option is 1, meaning that reads in reverse orientation are also considered for assembly.Specifying zero as \"-r 0\" instructs CAP3 to perform assembly of reads in forward orientation only.This option was suggested by Patrick Schnable's lab.", "precond": null, "prompt": "Assembly of reads in forward orientation only", "name": "assembly_fwd", "children": [{"comment": null, "prompt": "Reverse orientation value (-r)", "name": "reverse_orientation", "ctrl": {"python": "value >= 0", "perl": "$value >= 0"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -r \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -r $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "This parameter (option -t) allows the user to trade off the efficiency of the program for its accuracy.For a read f, the program computes overlaps between read f and other reads by considering short word matches between read f and other reads.A word match is examined to see if it can be extended into a long overlap.If read f has overlaps with many other reads, then read f has many short word matches with many other reads.This parameter gives an upper limit, for any word, on the number of word matches between read f and other reads that are considered by the program.Using a large value for this parameter allows the program to consider more word matches between read f and other reads, which can find more overlaps for read f, but slows down the program.Using a small vlaue for this parameter has the opposite effect.A large value may be used if the depth of coverage is high for the data set.For example, a value of 150 is used for a data set with a maximum depth of coverage of 30, and a value of 500 for a data set with a maximum depth of coverage of 100. Using a very large value may cause the program to run forever or run out of memory.", "precond": null, "prompt": "Maximum number of word matches", "name": "max_num_word_matches", "children": [{"comment": null, "prompt": "Maximum number of word matches (-t)", "name": "word_matches", "ctrl": {"python": "value > 30", "perl": "$value > 30"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -t \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -t $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Corrections to an assembly are made using forward-reverse constraints.Let an integer u be the minimum number of constraints for correction.Consider an alternative overlap between two reads f and g.Assume that f is in contig C1 and that g is in contig C2.If the number of unsatisfied constraints that support the overlap between f and g is greater than the value of the u parameter plus the number of satisfied constraints that support the current joins involving f and g, then the current joins involving f and g are disconnected and the overlap between f and g is implemented.The value for this parameter can be changed with the \"-u\" option.Contigs that are linked by forward-reverse constraints are reported.The minimum number of constraints for reporting a link between two contigs is specified with the \"-v\" option.", "precond": null, "prompt": "Forward-reverse constraints", "name": "fwd_rev_const", "children": [{"comment": null, "prompt": "Minimum number of constraints for correction (-u)", "name": "min_constraints_corr", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -u \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -u $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Minimum number of constraints for linking (-v)", "name": "min_constraints_linking", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -v \"+ str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -v $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "3", "references": [{"url": null, "doi": null, "label": "Huang, X. and Madan, A. (1999) CAP3: A DNA Sequence Assembly Program. Genome Research, 9: 868-877."}], "source_links": ["http://seq.cs.iastate.edu/cap3.html"], "env": [], "authors": "Huang, X. and Madan, A. (1999)", "command": {"path": null, "value": "cap3"}, "documentation_links": [], "type": "program", "name": "cap3"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab53"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:composition"}], "description": "Draw a chaos game representation plot for a nucleotide sequence", "title": "chaos", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "e_goutfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "chaos"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/chaos.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "chaos"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab54"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Draw a protein charge plot", "title": "charge", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_plot and e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_plot and e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_plot and e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_plot and e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_plot and e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ChargeReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "seqall option", "name": "e_seqall", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -seqall=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Amino acids properties and molecular weight data file", "name": "e_aadata", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -aadata=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "AminoAcidProperties", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Window length (value greater than or equal to 1)", "name": "e_window", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -window=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Produce graphic", "name": "e_plot", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -plot\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "not e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "charge"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/charge.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "charge"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab55"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Reports STOP codons and ORF statistics of a protein", "title": "checktrans", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ChecktransReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfeat_out option", "name": "e_outfeat_out", "simple": null, "filenames": {"python": "e_outfeat"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Feature", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_offormat_outfeat"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Minimum orf length to report (value greater than or equal to 1)", "name": "e_orfml", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -orfml=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "An asterisk in the protein sequence indicates the position of a STOP codon. Checktrans assumes that all ORFs end in a STOP  codon. Forcing the sequence to end with an asterisk, if there is  not one there already, makes checktrans treat the end as a  potential ORF. If an asterisk is added, it is not included in the  reported count of STOPs.", "prompt": "Force the sequence to end with an asterisk", "name": "e_addlast", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\" -noaddlast\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sequence file to hold output ORF sequences", "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "File for output features", "prompt": "Name of the output feature file (e_outfeat)", "name": "e_outfeat", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -outfeat=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the feature output format", "name": "e_offormat_outfeat", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -offormat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "checktrans"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/checktrans.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "checktrans"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab56"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:codon_usage"}], "description": "Calculates Nc codon usage statistic", "title": "chips", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ChipsReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "seqall option", "name": "e_seqall", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -seqall=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Sum codons over all sequences", "name": "e_sum", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\" -nosum\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "chips"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/chips.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "chips"}, {"comment": "cif (for Cut In Frame) is a tool that works with DNA sequences. It is used to digest\n      your sequences with a pool of restriction enzymes and to search which enzymes cut your\n      sequence keeping your reading frame after ligation without any frame shift produced\n      due to the digestion.This helps users to work with a gene of interest to localize potential region(s) that\n      could be removed from the final protein to check if regions have an impact or not on\n      the final gene product. It can also allow to identify vital region(s) for the gene.", "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab57"}, "classifications": [{"type": "mobyle1", "classification": "sequence:enzyme:analysis"}, {"type": "mobyle1", "classification": "sequence:nucleic:restriction"}, {"type": "mobyle1", "classification": "display:nucleic:restriction"}], "description": "Cut DNA regions in frame", "title": "CIF", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output image", "name": "img", "simple": null, "filenames": {"python": "\"*.png\"", "perl": "*.png"}, "precond": {"python": "outputstyle == 'image'", "perl": "$outputstyle eq 'image'"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": "1,n"}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "input", "children": [{"comment": null, "prompt": "Sequence", "name": "sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -i \" + str( value ) + \" \" )[value is not None]", "perl": "\" -i $value \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "options", "children": [{"comment": "You can choose between:- blunt : Use blunt cutters- cohesive : Use cohesive cutters- klenow  : Use only 5' enzymes for Klenow fill-in.[Default all three]", "prompt": "Type of enzymes (-T)", "name": "enztype", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -T \" + str( value ) )[value != vdef]", "perl": "($value) ?\"-T $value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Cohesive enzyme strand to use:- 5'- 3'- both : 5' and 3' (Default value).(No effect if you choose to use blunt enzymes)", "prompt": "Cohesive enzyme strand (-S)", "name": "strand", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -S \" + str( value ) )[value != vdef]", "perl": "($value) ?\"-S $value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Digestion mode:- double: Report couple of enzymes that digest sequence- simple: Report enzyme name that cut more than one time- both: simple + double (Default value).", "prompt": "Digestion mode (-D)", "name": "digestionmod", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -D \" + str( value ) )[value != vdef]", "perl": "($value) ?\"-D $value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use enzymes with minimum length for DNA recognition site.By default, 6.", "prompt": "Minimum length of recognition site (-L)", "name": "Length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -L \" + str( value ) )[value is not None and value!=vdef]", "perl": "($value) ?\"-L $value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Some cohesive enzymes have variant recognition site like 'GDGCH^C' for Bsp1286I, where:D = not C (A or G or T)H = not G (A or C or T)This option, when set, use of these type of enzymes..By default, this option is off.", "prompt": "Use enzymes with variant recognition site (-V)", "name": "variant", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -V \" )[value]", "perl": "($value) ?\"-V\": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Some cohesive enzymes have variant recognition site like 'GDGCH^C' for Bsp1286I, where:D = not C (A or G or T)H = not G (A or C or T)Thus, using thoses enzymes may produce a cut in frame but the produced ends may not be \n                compatible together regarding DNA sequence.Requires the '[-V | --variant]' option to work. By default, this option is off.", "prompt": "Report digestions in frame without ends compatibilities (-X)", "name": "exotic", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -X \" )[value]", "perl": "($value) ?\"-X\": \"\""}, "command": false, "precond": {"python": "variant == 1", "perl": "$variant == 1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "File with list of compatible cohesive ends.The default list used is given in the program help pages (compatible_cohesive_ends.txt).If you want to give your own list, the format must be as follow:\"Enzyme_name:compatEnz1_name,compatEnz2_name,...\"", "prompt": "List of compatible cohesive ends (-C)", "name": "compat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -C \" + str( value ) )[value is not None]", "perl": "($value) ?\"-C $value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default, the program works with a list of enzymes commonly used in laboratory \n          \t\tgiven in the program help pages (paillasse_liste.txt).If you want to give your own list, the format is one enzyme per line.", "prompt": "Enzyme list to work with (-E)", "name": "enzlist", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -E \" + str( value ) )[value is not None]", "perl": "($value) ?\"-E $value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output parameters", "name": "outputopt", "children": [{"comment": "Sometimes, blunt digestion, after linkage, can produce new codon around the cutting site \n            that leads to stop codon.This option displays such digestions with a tag 'stopCodon' in the output line results.NOTE: This option only works if 'blunt' type is set. By default this option is off, thus \n            if such case happened no results are reported for enzymes digestion.", "prompt": "Show stop codon (-P)", "name": "stop", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" )[value]", "perl": "($value) ?\"-P\": \"\""}, "command": false, "precond": {"python": "enztype == 0 or enztype == 'blunt'", "perl": "$enztype == 0 or $enztype eq 'blunt'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enzymes may cut your sequence more than once.This option \n            reports the number of time enzyme(s) cut your sequence. [Default off]", "prompt": "Show cut positions (-N)", "name": "cut_pos", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -N \" )[value]", "perl": "($value) ?\"-N\": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Experimental option. [Default off]This option allows, for 'blunt' or 'klenow' analysis to\n            show, in such case, the Amino acid that have been changed due to the ligation between \n            the 2 parts of the DNA after the digestion.It will be shown as OldAA>NewAA (e.g.: G>N).", "prompt": "Show new generated amino acid (-A)", "name": "mod_aa", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -A \" )[value]", "perl": "($value) ?\"-A\": \"\""}, "command": false, "precond": {"python": "enztype != 'cohesive'", "perl": "$enztype ne 'cohesive'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Choose the output type that you prefer.- Text output (Default value)- GFF3 output- Image (png): Creates image (png).", "prompt": "Output style format (-F)", "name": "outputstyle", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -F \" + str( value ) )[value != vdef]", "perl": "($value) ?\"-F $value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "0.2.2", "references": [], "source_links": [], "env": [], "authors": "E. Quevillon, B. Boeda", "command": {"path": null, "value": "cif"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/cif/cif.html", "http://bioweb2.pasteur.fr/docs/cif/compatible_cohesive_ends.txt", "http://bioweb2.pasteur.fr/docs/cif/paillasse_liste.txt"], "type": "program", "name": "cif"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab58"}, "classifications": [{"type": "mobyle1", "classification": "display"}], "description": "Draws circular maps of DNA constructs", "title": "cirdna", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graphout == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graphout == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graphout == \"ps\" or e_graphout == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graphout == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graphout == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "Commands to the cirdna drawing program file", "name": "e_infile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -infile=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "cirdnaMappingCommands", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Maximum number of groups (value greater than or equal to 1)", "name": "e_maxgroups", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -maxgroups=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum number of labels (value greater than or equal to 1)", "name": "e_maxlabels", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -maxlabels=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Draw a ruler", "name": "e_ruler", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -noruler\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Type of blocks", "name": "e_blocktype", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -blocktype=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Position in degrees of the molecule's origin on the circle (value from 0 to 360)", "name": "e_originangle", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -originangle=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Ticks inside or outside the circle", "name": "e_posticks", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -posticks=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Text inside or outside the blocks", "name": "e_posblocks", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -posblocks=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Horizontal junctions between blocks", "name": "e_intersymbol", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\" -nointersymbol\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Colour of junctions between blocks (enter a colour number) (value from 0 to 15)", "name": "e_intercolour", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -intercolour=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Horizontal junctions between ticks", "name": "e_interticks", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -interticks\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Interval between ticks in the ruler (value greater than or equal to 0)", "name": "e_gapsize", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -gapsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Vertical lines at the ruler's ticks", "name": "e_ticklines", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -ticklines\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Height of text. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively", "prompt": "Text scale factor (value greater than or equal to 0.0)", "name": "e_textheight", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -textheight=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Length of text. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively", "prompt": "Length of text multiplier (value greater than or equal to 0.0)", "name": "e_textlength", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "15", "format": {"python": "(\"\", \" -textlength=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Height of ticks. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively", "prompt": "Height of ticks multiplier (value greater than or equal to 0.0)", "name": "e_tickheight", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "16", "format": {"python": "(\"\", \" -tickheight=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Height of blocks. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively", "prompt": "Height of blocks multiplier (value greater than or equal to 0.0)", "name": "e_blockheight", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "17", "format": {"python": "(\"\", \" -blockheight=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Height of range ends. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively", "prompt": "Height of range ends multiplier (value greater than or equal to 0.0)", "name": "e_rangeheight", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "18", "format": {"python": "(\"\", \" -rangeheight=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Space between groups. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively", "prompt": "Space between groups multiplier (value greater than or equal to 0.0)", "name": "e_gapgroup", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "19", "format": {"python": "(\"\", \" -gapgroup=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Space between text and ticks, blocks, and ranges. Enter a number <1.0 or >1.0 to decrease or increase the size,  respectively", "prompt": "Space between text and ticks, blocks, and ranges multiplier (value greater than or equal to 0.0)", "name": "e_postext", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "20", "format": {"python": "(\"\", \" -postext=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graphout output format", "name": "e_graphout", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "(\" -graphout=\" + str(vdef), \" -graphout=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "e_goutfile", "ctrl": null, "simple": null, "argpos": "22", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "23", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "cirdna"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/cirdna.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "cirdna"}, {"comment": "This program uses the compatibility method for unrooted two-state characters to obtain the largest cliques of characters and the trees\nwhich they suggest.", "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab59"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:others"}], "description": "Compatibility Program", "title": "clique", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "outfile", "simple": null, "filenames": {"python": "\"clique.outfile\"", "perl": "\"clique.outfile\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output tree", "name": "treefile", "simple": null, "filenames": {"python": "\"clique.outtree\"", "perl": "\"clique.outtree\""}, "precond": {"python": "print_treefile", "perl": "$print_treefile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Consense output file", "name": "consense_outfile", "simple": null, "filenames": {"python": "\"consense.outfile\"", "perl": "\"consense.outfile\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Consense output tree", "name": "consense_treefile", "simple": null, "filenames": {"python": "\"consense.outtree\"", "perl": "\"consense.outtree\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "clique", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"clique < clique.params\"", "perl": "\"clique < clique.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Input File", "name": "infile", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"ln -s \"+ str( infile ) + \" infile && \"", "perl": "\"ln -s $infile infile && \""}, "command": false, "precond": {"python": "infile != \"infile\"", "perl": "$infile ne \"infile\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipDiscreteCharMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Clique options", "name": "clique_opt", "children": [{"comment": "There should also be, in the input file after the numbers of species and characters, an A on the first line of the file. There must also be, before the character data, a line or lines giving the ancestral states for each character. It will look like the data for a species (the ancestor). It must start with the letter A in the first column. There then follow enough characters or blanks to complete the full length of a species name (e. g. ANCESTOR). Then the states which are\n              ancestral for the individual characters follow. These may be 0, 1 or ?, the latter indicating that the ancestral state is unknown.Examples:ANCESTOR 0010011", "prompt": "Use ancestral states in input file (A)", "name": "use_ancestral_state", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"A\\n\" )[ value ]", "perl": "($value) ? \"A\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "clique.params"}, {"comment": null, "prompt": "Specify minimum clique size? (C)", "name": "spec_min_clique_size", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \"C\\n\"+ str( min_clique_size ) + \"\\n\")[ value ]", "perl": "($value) ? \"C\\\\n$min_clique_size\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "clique.params"}, {"comment": "This option indicates that you wish to specify a minimum clique size and print out all cliques (and their associated trees) greater than or equal to than that size.", "prompt": "Minimum clique size", "name": "min_clique_size", "ctrl": {"python": "value >= 0", "perl": "$min_clique_size >= 0"}, "simple": null, "argpos": "2", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "spec_min_clique_size", "perl": "$spec_min_clique_size"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "clique.params"}]}, {"comment": null, "precond": null, "prompt": "Bootstrap options", "name": "bootstrap", "children": [{"comment": null, "prompt": "Analyze multiple data sets (M)", "name": "multiple_dataset", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \"M\\nD\\n\"+ str( datasets_number ) +\"\\n\" )[ value ]", "perl": "($value) ? \"M\\\\nD\\\\n$datasets_number\\\\n\" : \"\""}, "command": false, "precond": {"python": "not multiple_dataweights", "perl": "not $multiple_dataweights"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "clique.params"}, {"comment": null, "prompt": "How many data sets (D)", "name": "datasets_number", "ctrl": {"python": "( value > 0 ) and ( value <= 1000 )", "perl": "$value > 0 and $value <= 1000"}, "simple": null, "argpos": "9", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "multiple_dataset", "perl": "$multiple_dataset"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Compute a consensus tree", "name": "consense", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\", \" && cp infile clique.infile &&  cp clique.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" )[ value ]", "perl": "($value )? \" && cp infile clique.infile &&  cp clique.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" : \"\""}, "command": false, "precond": {"python": "multiple_dataset and print_treefile", "perl": "$multiple_dataset and $print_treefile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Weigth options", "name": "weigths", "children": [{"comment": null, "prompt": "Sites weighted? (W)", "name": "site_weigthed", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "( \"\" , \"W\\n\" )[ value ]", "perl": "( $value ) ? \"W\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "clique.params"}, {"comment": null, "prompt": "Analyze multiple data Weigths (M)", "name": "multiple_dataweights", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "( \"\" , \"M\\nW\\n\"+ str( dataweights_number ) +\"\\n\" )[ value ]", "perl": "($value) ? \"M\\\\nW\\\\n$dataweights_number\\\\n\" : \"\""}, "command": false, "precond": {"python": "not multiple_dataset", "perl": "not $multiple_dataset"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "clique.params"}, {"comment": null, "prompt": "How many sets of weights?", "name": "dataweights_number", "ctrl": {"python": "( value > 0 ) and ( value <= 1000 )", "perl": "$value > 0 and $value <= 1000"}, "simple": null, "argpos": "21", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "multiple_dataweights", "perl": "$multiple_dataweights"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Weight file", "name": "weigth_file", "ctrl": null, "simple": null, "argpos": "-20", "format": {"python": "\" ln -s \" + str( value ) +\" weights && \"", "perl": "\" ln -s $value weights && \""}, "command": false, "precond": {"python": "site_weigthed or multiple_dataweights", "perl": "$site_weigthed or $multiple_dataweights"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipWeight", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": null, "prompt": "Print out compatibility matrix (3)", "name": "print_matrix", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"3\\n\" )[ value ]", "perl": "($value) ? \"3\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "clique.params"}, {"comment": "Tells the program to print a semi-graphical picture of the tree in the outfile.", "prompt": "Print out tree (4)", "name": "print_tree", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"4\\n\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \"4\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "clique.params"}, {"comment": "Tells the program to save the tree in a treefile (a standard representation of trees where the tree is specified by a nested pairs of parentheses, enclosing names and separated by commas).", "prompt": "Write out trees onto tree file (5)", "name": "print_treefile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"5\\n\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \"5\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "clique.params"}, {"comment": null, "prompt": "Print out the data at start of run (1)", "name": "printdata", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"1\\n\" )[ value ]", "perl": "($value) ? \"1\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "clique.params"}]}, {"comment": null, "precond": null, "prompt": "Other options", "name": "other_options", "children": [{"comment": null, "prompt": "Outgroup root (O)", "name": "outgroup", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "1", "format": {"python": "(\"\" , \"O\\\\n%s\\\\n\" % str(value) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"O\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "clique.params"}]}, {"comment": null, "prompt": null, "name": "confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "clique.params"}, {"comment": null, "prompt": null, "name": "terminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "clique.params"}, {"comment": null, "prompt": null, "name": "consense_confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "prompt": null, "name": "consense_terminal_type", "ctrl": null, "simple": null, "argpos": "-2", "format": {"python": "\"T\\n\"", "perl": "\"T\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/phylip/doc/clique.html"], "type": "program", "name": "clique"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab5a"}, "classifications": [{"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:Peak Annotation"}, {"type": "mobyle1", "classification": "Genomic Analysis:Multi-Purpose Tools"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Annotation and Alignment"}, {"type": "mobyle1", "classification": "Sequence Analysis and Comparison:Comparative Genomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Variant Analysis"}, {"type": "mobyle1", "classification": "Utilities and Tools:File Format Conversion"}, {"type": "mobyle1", "classification": "Omics:Genomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:Variant calling"}], "description": "For each feature in A, finds the closest feature (upstream or downstream) in B", "title": "BEDtools: closestBED", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": []}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input", "name": "input_para", "children": [{"comment": null, "prompt": "Genome Annotation data A (BED/GFF/VCF format) [-a]", "name": "input_bed_fileA", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -a \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Genome Annotation data B (BED/GFF/VCF format) [-b]", "name": "input_bed_fileB", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -b \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "options_para", "children": [{"comment": "Default option: overlaps are reported without respect to strand.Same strandedness option: find the closest feature in B that overlaps A on the _same_ strand.Opposite strandedness option: find the closest feature in B that overlaps A on the _opposite_ strand.", "prompt": "Strandedness (-s or -S)", "name": "force_strand_option", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" \" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "How ties for closest feature are handled.  This occurs when two features in B have exactly the same overlap with A. By default, all such features in B are reported.", "prompt": "Tie handling (-t)", "name": "tile_handling_option", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" + str(vdef), \" -t \" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In addition to the closest feature in B, report its distance to A as an extra column.The reported distance for overlapping features will be 0.", "prompt": "Report distance to A as extra column (-d)", "name": "output_distance", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "('',' -d ')[value==1]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Like -d, report the closest feature in B, and its distance to A as an extra column. Unlike -d, use negative distances to report \t\tupstream features. \t\tThe options for defining which orientation is \"upstream\" are: \t\t- \"ref\"   Report distance with respect to the reference genome.  \t\t            B features with a lower (start, stop) are upstream \t\t- \"a\"     Report distance with respect to A. \t\t            When A is on the - strand, \"upstream\" means B has a \t\t            higher (start,stop). \t\t- \"b\"     Report distance with respect to B. \t\t            When B is on the - strand, \"upstream\" means A has a \t\t            higher (start,stop).", "prompt": "Report distance with orientation (-D)", "name": "output_distance_orientation", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "('', ' -D ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "we want close, yet not touching features only.", "prompt": "Ignore features in B that overlap A (-io)", "name": "output_overlap_feature", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "('',' -io ')[value==1]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output", "name": "Output", "children": [{"comment": null, "prompt": "Output file name", "name": "outfile", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\" > \" + str(vdef) , \" > \" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "2.15.0", "references": [], "source_links": [], "env": [], "authors": "Quinlan A.R. & Hall I.M.", "command": {"path": null, "value": "closestBed"}, "documentation_links": [], "type": "program", "name": "closestBed"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab5b"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "Align a set of protein sequences", "title": "Clustal-Omega: Multiple alignment", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Multiple Sequence Alignment", "name": "alignment_output", "simple": null, "filenames": {"python": "\"clustalO-multialign.out\"", "perl": "\"clustalO-multialign.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [{"#tag": "test", "#children": ["FASTA"], "@eq": "fa", "@param": "output_format"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Guide tree output file", "name": "guidetree_outfile", "simple": null, "filenames": {"python": "guidetree_out", "perl": "$guidetree_out"}, "precond": {"python": "guidetree_out is not None", "perl": "defined $guidetree_out"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Pairwise distance matrix output file", "name": "distmat_outfile", "simple": null, "filenames": {"python": "distmat_out", "perl": "$distmat_out"}, "precond": {"python": "distmat_out is not None", "perl": "defined $distmat_out"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "DistanceMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Clustal omega log file", "name": "logfile", "simple": null, "filenames": {"python": "\"clustalO_log\"", "perl": "\"clustalO_log\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ClustalOReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Data Input", "name": "input", "children": [{"comment": "Use this option to make a multiple alignment from a set of\n            sequences. A sequence file must contain more than one sequence (at\n            least two sequences)", "prompt": "Unaligned set of sequences", "name": "sequences_input", "ctrl": {"python": "not alignment_input", "perl": "not $alignment_input"}, "simple": null, "argpos": null, "format": {"python": "\" --infile=\" + str( value )", "perl": "\" --infile=$value\""}, "command": false, "precond": {"python": "not alignment_input or (sequences_input and alignment_input)", "perl": "not $alignment_input or ($sequences_input and $alignment_input)"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA", "SWISSPROT", "PIR"], "edam_types": [], "card": "2,n"}, "paramfile": null}, {"comment": "When the sequences are aligned (all sequences\n              have the same length and at least one sequence has at least one\n              gap), then the alignment is turned into a HMM, the sequences are\n              de-aligned and the now un-aligned sequences are aligned using the\n              HMM as an External Profile for External Profile Alignment (EPA).\n              If no EPA is desired use the dealign Option.Clustal-Omega reads the file of aligned sequences. \n              It converts the alignment into a HMM, de-aligns the sequences and \n              re-aligns them, transferring pseudo-count information to\n              the sequences/profiles during the MSA. The guide tree is constructed\n              using a full distance matrix of Kimura distances.", "prompt": "Aligned sequences", "name": "alignment_input", "ctrl": {"python": "not sequences_input", "perl": "not $sequences_input"}, "simple": null, "argpos": null, "format": {"python": "\" --infile=\" + str( value )", "perl": "\" --infile=$value\""}, "command": false, "precond": {"python": "not sequences_input or (sequences_input and alignment_input)", "perl": "not $sequences_input or ($sequences_input and $alignment_input)"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA", "CLUSTAL", "STOCKHOLM"], "edam_types": [], "card": "1"}, "paramfile": null}, {"comment": "When the sequences are aligned (all sequences\n            have the same length and at least one sequence has at least one\n            gap), then the alignment is turned into a HMM, the sequences are\n            de-aligned and the now un-aligned sequences are aligned using the\n            HMM as an External Profile for External Profile Alignment (EPA).\n            If no EPA is desired use turn on this option.Clustal-Omega reads the file of aligned sequences. \n            It de-aligns the sequences and then re-aligns them. \n            No HMM is produced in the process, no pseudo-count information is transferred. \n            Consequently, the output must be the same as for unaligned output.", "prompt": "Dealign input sequences", "name": "dealign", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --dealign \")[ value is not None and value !=vdef ]", "perl": "(defined $value and $value) \" --dealign \" : \"\""}, "command": false, "precond": {"python": "bool( alignment_input )", "perl": "$alignment_input"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "the\n    un-aligned sequences will be aligned to form a profile, using the\n    HMM as an External Profile. So far only one HMM can be input and\n    only HMMer2 and HMMer3 formats are allowed. The alignment will be\n    written out; the HMM information is discarded. As, at the moment,\n    only one HMM can be used, no HMM is produced if the sequences are\n    already aligned. Use the -i flag in conjunction with the --hmm-in\n    flag for this mode. Multiple HMMs can be inputted, however, in the\n    current version all but the first HMM will be ignored.Use this option to make a new multiple alignment of sequences from\n    the input file and use the HMM as a guide (EPA).Clustal-Omega reads the sequences file and the HMM file \n    (in HMMer2 or HMMer3 format).  It then performs the alignment, \n    transferring pseudo-count information contained in\n    hmm to the sequences/profiles during the MSA.", "prompt": "HMM input files", "name": "hmm-in", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --hmm-in=\" + str( value ))[value is not None ]", "perl": "(defined $value)?\" --hmm-in=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "HmmProfile", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["HMMER2", "HMMER3"], "edam_types": [], "card": "1"}, "paramfile": null}]}, {"comment": "In order to produce a multiple alignment Clustal-Omega requires a\n          guide tree which defines the order in which sequences/profiles are\n          aligned. A guide tree in turn is constructed, based on a distance\n          matrix. Conventionally, this distance matrix is comprised of all the\n          pair-wise distances of the sequences. The distance measure\n          Clustal-Omega uses for pair-wise distances of un-aligned sequences is\n          the k-tuple measure [4], which was also implemented in Clustal 1.83\n          and ClustalW2\n          [5,6]. If the sequences inputted via -i are aligned\n          Clustal-Omega uses the Kimura-corrected pairwise aligned identities\n          [7]. The computational effort (time/memory) to calculate and store a\n          full distance matrix grows quadratically with the number of sequences.\n          Clustal-Omega can improve this scalability to N*log(N) by employing a\n          fast clustering algorithm called mBed [2]; this option is\n          automatically invoked (default). If a full distance matrix evaluation\n          is desired, then the --full flag has to\n          be set. The mBed mode\n          calculates a reduced set of pair-wise distances. These distances are\n          used in a k-means algorithm, that clusters at most 100 sequences. For\n          each cluster a full distance matrix is calculated. No full distance\n          matrix (of all input sequences) is calculated in mBed mode. If there\n          are less than 100 sequences in the input, then in effect a full\n          distance matrix is calculated in mBed mode, however, no distance\n          matrix can be outputted (see below).Clustal-Omega uses Muscle's [8] fast UPGMA implementation to construct\n          its guide trees from the distance matrix. By default, the distance\n          matrix is used internally to construct the guide tree and is then\n          discarded. By specifying --distmat-out the internal distance matrix\n          can be written to file. This is only possible in --full mode. The\n          guide trees by default are used internally to guide the multiple\n          alignment and are then discarded. By specifying the --guidetree-out\n          option these\n          internal guide trees can be written out to\n          file. Conversely, the distance calculation and/or guide tree building\n          stage can be skipped, by reading in a pre-calculated distance matrix\n          and/or pre-calculated guide tree. These options are invoked by\n          specifying the --distmat-in and/or --guidetree-in flags,\n          respectively. However, distance matrix reading is disabled in the\n          current version. By default, distance matrix and guide tree files are\n          not over-written, if a file with the specified name already\n          exists. In\n          this case Clustal-Omega aborts during the command-line processing\n          stage. In mBed mode a full distance matrix cannot\n          be outputted, distance matrix output is only possible in --full mode.\n          mBed or --full distance mode do not affect the ability to write out\n          guide-trees.Guide trees can be iterated to refine the alignment (see section\n          ITERATION). Clustal-Omega takes the alignment, that was produced\n          initially and constructs a new distance matrix from this alignment.\n          The distance measure used at this stage is the Kimura distance [7]. By\n          default, Clustal-Omega constructs a reduced distance matrix at this\n          stage using the mBed algorithm, which will then be used to create an\n          improved (iterated) new guide tree. To turn off mBed-like clustering\n          at this\n          stage the --full-iter flag has to be set. While Kimura\n          distances in general are much faster to calculate than k-tuple\n          distances, time and memory requirements still scale quadratically with\n          the number of sequences and --full-iter clustering should only be\n          considered for smaller cases ( << 10,000 sequences).[2] Blackshields G, Sievers F, Shi W, Wilm A, Higgins DG. Sequence\n          embedding for fast construction of guide trees for multiple\n          sequence alignment. Algorithms Mol Biol. 2010 May 14;5:21.[4] Wilbur and Lipman, 1983; PMID 6572363[5] Thompson JD, Higgins DG, Gibson TJ. (1994). CLUSTAL W: improving\n          the sensitivity of progressive multiple sequence alignment through\n          sequence weighting, position-specific gap penalties and weight\n          matrix choice. Nucleic Acids Res., 22, 4673-4680.[6] Larkin MA, Blackshields G, Brown NP, Chenna R, McGettigan PA,\n          McWilliam H, Valentin F, Wallace IM, Wilm A, Lopez R, Thompson JD,\n          Gibson TJ, Higgins DG. (2007). Clustal W and Clustal X version\n          2.0. Bioinformatics, 23, 2947-2948.[7] Kimura M (1980). \"A simple method for estimating evolutionary\n          rates of base substitutions through comparative studies of\n          nucleotide sequences\". Journal of Molecular Evolution 16: 111\u2013120.", "precond": null, "prompt": "Clustering", "name": "clustering", "children": [{"comment": null, "prompt": "Pairwise distance matrix output file", "name": "distmat_out", "ctrl": {"python": "full", "perl": "$full"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --distmat-out=\"+str(value))[ value is not None ]", "perl": "(defined $value and $value)? \" --distmat-out=$value \":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Guide tree input file (--guidetree-in)", "name": "guidetree_in", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --guidetree-in=\"+str(value))[ value is not None ]", "perl": "(defined $value )? \" --guidetree-in= $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Guide tree output file (--guidetree-out)", "name": "guidetree_out", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --guidetree-out=\"+str(value))[ value is not None ]", "perl": "(defined $value and $value)? \" --guidetree-out=$value \":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use full distance matrix for guide-tree calculation (slow; mBed is default) (--full)", "name": "full", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --full \")[ value is not None and value ]", "perl": "(defined $full and $ full)? \" --full \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use full distance matrix for guide-tree calculation during iteration (mBed is default) (--full-iter)", "name": "full_iter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --full-iter \")[ value is not None and value ]", "perl": "(defined $full and $ full)? \" --full-iter \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Alignment Output", "name": "output_format", "children": [{"comment": null, "prompt": "alignment output format", "name": "output_format", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --outfmt=\" + value )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef)? \" --outfmt=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "By default, Clustal-Omega calculates (or reads in) a guide tree and\n          performs a multiple alignment in the order specified by this guide\n          tree. This alignment is then outputted. Clustal-Omega can 'iterate'\n          its guide tree. The hope is that the (Kimura) distances, that can be\n          derived from the initial alignment, will give rise to a better guide\n          tree, and by extension, to a better alignment.A similar rationale applies to HMM-iteration. MSAs in general are very\n          'vulnerable' at their early stages. Sequences that are aligned at an\n          early stage remain fixed for the rest of the MSA. Another way of\n          putting this is: 'once a gap, always a gap'. This behaviour can be\n          mitigated by HMM iteration. An initial alignment is created and turned\n          into a HMM. This HMM can help in a new round of MSA to 'anticipate'\n          where residues should align. This is using the HMM as an External\n          Profile and carrying out iterative EPA. In practice, individual\n          sequences and profiles are aligned to the External HMM, derived after\n          the initial alignment. Pseudo-count information is then transferred to\n          the (internal) HMM, corresponding to the individual\n          sequence/profile. The now somewhat 'softened' sequences/profiles are\n          then in turn aligned in the order specified by the guide\n          tree. Pseudo-count transfer is reduced with the size of the\n          profile. Individual sequences attain the greatest\n          pseudo-count\n          transfer, larger profiles less so. Pseudo-count transfer to profiles\n          larger than, say, 10 is negligible. The effect of HMM iteration is\n          more pronounced in larger test sets (that is, with more sequences).Both, HMM- and guide tree-iteration come at a cost of increasing the\n          run-time. One round of guide tree iteration adds on (roughly) the time\n          it took to construct the initial alignment. If, for example, the\n          initial alignment took 1min, then it will take (roughly) 2min to\n          iterate the guide tree once, 3min to iterate the guide tree twice, and\n          so on. HMM-iteration is more costly, as each round of iteration adds\n          three times the time required for the alignment stage. For example, if\n          the initial alignment took 1min, then each additional round of HMM\n          iteration will add on 3min; so 4 iterations will take 13min\n          (=1min+4*3min). The factor of 3 stems from the fact that at every\n          stage both intermediate profiles have to be aligned with the\n          background HMM, and finally the (softened) HMMs have to be aligned as\n          well. All times are quoted for single processors.By default, guide tree iteration and HMM-iteration are coupled. This\n          means, at each iteration step both, guide tree and HMM, are\n          re-calculated. This is invoked by setting the --iter flag. For\n          example, if --iter=1, then first an initial alignment is produced\n          (without external HMM background information and using k-tuple\n          distances to calculate the guide tree). This initial alignment is then\n          used to re-calculate a new guide tree (using Kimura distances) and to\n          create a HMM. The new\n          guide tree and the HMM are then used to produce\n          a new MSA.Iteration of guide tree and HMM can be de-coupled. This means that the\n          number of guide tree iterations and HMM iterations can be\n          different. This can be done by combining the --iter flag with the\n          --max-guidetree-iterations and/or the --max-hmm-iterations flag. The\n          number of guide tree iterations is the minimum of --iter and\n          --max-guidetree-iterations, while the number of HMM iterations is the\n          minimum of --iter and --max-hmm-iterations. If, for example, HMM\n          iteration should be\n          performed 5 times but guide tree iteration should\n          be performed only 3 times, then one should set --iter=5 and\n          --max-guidetree-iterations=3. All three flags can be specified at the\n          same time (however, this makes no sense). It is not sufficient just to\n          specify --max-guidetree-iterations and --max-hmm-iterations but not\n          --iter. If any iteration is desired --iter has to be set.", "precond": null, "prompt": "Iteration", "name": "iteration", "children": [{"comment": "if iterations= 2. Clustal-Omega reads the input file, creates a UPGMA guide tree\nbuilt from k-tuple distances, and performs an initial alignment. This\ninitial alignment is converted into a HMM and a new guide tree is\nbuilt from the Kimura distances of the initial alignment. The\nun-aligned sequences are then aligned (for the second time but this\ntime) using pseudo-count information from the HMM created after the\ninitial alignment (and using the new guide tree). This second\nalignment is then again converted into a HMM and a new guide tree is\nconstructed. The un-aligned sequences are then aligned (for a third\ntime), again using pseudo-count information of the HMM from the\nprevious step and the most recent guide tree. The final alignment is\nwritten to screen.", "prompt": "Number of (combined guide-tree/HMM) iterations (--iter)", "name": "iterations", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --iter=\"+str(value) )[ value is not None ]", "perl": "(defined $value)? \" --iter=$value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If iterations= 5 and the \"Maximum number guidetree iterations\" is set to 1. \n            Clustal-Omega reads the input file, creates a UPGMA guide tree\nbuilt from k-tuple distances, and performs an initial alignment. This\ninitial alignment is converted into a HMM and a new guide tree is\nbuilt from the Kimura distances of the initial alignment. The\nun-aligned sequences are then aligned (for the second time but this\ntime) using pseudo-count information from the HMM created after the\ninitial alignment (and using the new guide tree). For the last 4\niterations the guide tree is left unchanged and only HMM iteration is\nperformed. This means that intermediate alignments are converted to\nHMMs, and these intermediate HMMs are used to guide the MSA during\nsubsequent iteration stages.", "prompt": "Maximum number guidetree iterations (--max-guidetree-iterations)", "name": "max_guidetree_iterations", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --max-guidetree-iterations=\"+str(value) )[ value is not None ]", "perl": "(defined $value)? \" --max-guidetree-iterations=$value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum number of HMM iterations (--max-hmm-iterations)", "name": "max_hmm_iterations", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --max-hmm-iterations=\"+str(value) )[ value is not None ]", "perl": "(defined $value)? \" --max-hmm-iterations=$value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Miscellaneous", "name": "miscellaneous", "children": [{"comment": "Users may feel unsure which options are appropriate in certain\n              situations even though using ClustalO without any special options\n              should give you the desired results. The --auto flag tries to\n              alleviate this problem and selects accuracy/speed flags according to\n              the number of sequences. For all cases will use mBed and thereby\n              possibly overwrite the --full option. For more than 1,000 sequences\n              the iteration is turned off as the effect of iteration is more\n              noticeable for 'larger'\n              problems. Otherwise iterations are set to 1 if\n              not already set to a higher value by the user. Expert users may want\n              to avoid this flag and exercise more fine tuned control by selecting\n              the appropriate options manually.", "prompt": "Set options automatically (might overwrite some of your options) (--auto)", "name": "auto", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --auto \")[value is not None and value]", "perl": "(defined $value and $value)? \" --auto \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "verbosity", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\" -v --force --log=clustalO_log\"", "perl": "\" -v --force --log=clustalO_log\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "clustalo"}, "documentation_links": [], "type": "program", "name": "clustalO-multialign"}, {"comment": "Use this interface to align two alignments (profiles) together.The columns in each profile will be kept\n    fixed and the alignment of the two profiles will be written\n    out.", "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab5c"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "Align 2 profiles (alignments)", "title": "Clustal-Omega: Profile alignment", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Multiple Sequence Alignment", "name": "alignment_output", "simple": null, "filenames": {"python": "\"clustalO-profile.out\"", "perl": "\"clustalO-profile.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [{"#tag": "test", "#children": ["FASTA"], "@eq": "fa", "@param": "output_format"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Clustal omega log file", "name": "logfile", "simple": null, "filenames": {"python": "\"clustalO_log\"", "perl": "\"clustalO_log\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ClustalOReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "the columns in each profile will be kept\n    fixed and the alignment of the two profiles will be written\n    out.Use this option to align two alignments (profiles) together.", "precond": null, "prompt": "Data Input", "name": "input", "children": [{"comment": null, "prompt": "Pre-aligned multiple sequence file (aligned columns will be kept fixed)", "name": "profile1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" --profile1=\" + str( value )", "perl": "\" --profile1=$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA", "CLUSTAL", "STOCKHOLM", "MSF"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Pre-aligned multiple sequence file (aligned columns will be kept fixed)", "name": "profile2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" --profile2=\" + str( value )", "perl": "\" --profile2=$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA", "CLUSTAL", "STOCKHOLM", "MSF"], "edam_types": [], "card": "1"}, "paramfile": null}]}, {"comment": "In order to produce a multiple alignment Clustal-Omega requires a\n          guide tree which defines the order in which sequences/profiles are\n          aligned. A guide tree in turn is constructed, based on a distance\n          matrix. Conventionally, this distance matrix is comprised of all the\n          pair-wise distances of the sequences. The distance measure\n          Clustal-Omega uses for pair-wise distances of un-aligned sequences is\n          the k-tuple measure [4], which was also implemented in Clustal 1.83\n          and ClustalW2\n          [5,6]. If the sequences inputted via -i are aligned\n          Clustal-Omega uses the Kimura-corrected pairwise aligned identities\n          [7]. The computational effort (time/memory) to calculate and store a\n          full distance matrix grows quadratically with the number of sequences.\n          Clustal-Omega can improve this scalability to N*log(N) by employing a\n          fast clustering algorithm called mBed [2]; this option is\n          automatically invoked (default). If a full distance matrix evaluation\n          is desired, then the --full flag has to\n          be set. The mBed mode\n          calculates a reduced set of pair-wise distances. These distances are\n          used in a k-means algorithm, that clusters at most 100 sequences. For\n          each cluster a full distance matrix is calculated. No full distance\n          matrix (of all input sequences) is calculated in mBed mode. If there\n          are less than 100 sequences in the input, then in effect a full\n          distance matrix is calculated in mBed mode, however, no distance\n          matrix can be outputted (see below).Clustal-Omega uses Muscle's [8] fast UPGMA implementation to construct\n          its guide trees from the distance matrix. By default, the distance\n          matrix is used internally to construct the guide tree and is then\n          discarded. By specifying --distmat-out the internal distance matrix\n          can be written to file. This is only possible in --full mode. The\n          guide trees by default are used internally to guide the multiple\n          alignment and are then discarded. By specifying the --guidetree-out\n          option these\n          internal guide trees can be written out to\n          file. Conversely, the distance calculation and/or guide tree building\n          stage can be skipped, by reading in a pre-calculated distance matrix\n          and/or pre-calculated guide tree. These options are invoked by\n          specifying the --distmat-in and/or --guidetree-in flags,\n          respectively. However, distance matrix reading is disabled in the\n          current version. By default, distance matrix and guide tree files are\n          not over-written, if a file with the specified name already\n          exists. In\n          this case Clustal-Omega aborts during the command-line processing\n          stage. In mBed mode a full distance matrix cannot\n          be outputted, distance matrix output is only possible in --full mode.\n          mBed or --full distance mode do not affect the ability to write out\n          guide-trees.Guide trees can be iterated to refine the alignment (see section\n          ITERATION). Clustal-Omega takes the alignment, that was produced\n          initially and constructs a new distance matrix from this alignment.\n          The distance measure used at this stage is the Kimura distance [7]. By\n          default, Clustal-Omega constructs a reduced distance matrix at this\n          stage using the mBed algorithm, which will then be used to create an\n          improved (iterated) new guide tree. To turn off mBed-like clustering\n          at this\n          stage the --full-iter flag has to be set. While Kimura\n          distances in general are much faster to calculate than k-tuple\n          distances, time and memory requirements still scale quadratically with\n          the number of sequences and --full-iter clustering should only be\n          considered for smaller cases ( << 10,000 sequences).[2] Blackshields G, Sievers F, Shi W, Wilm A, Higgins DG. Sequence\n          embedding for fast construction of guide trees for multiple\n          sequence alignment. Algorithms Mol Biol. 2010 May 14;5:21.[4] Wilbur and Lipman, 1983; PMID 6572363[5] Thompson JD, Higgins DG, Gibson TJ. (1994). CLUSTAL W: improving\n          the sensitivity of progressive multiple sequence alignment through\n          sequence weighting, position-specific gap penalties and weight\n          matrix choice. Nucleic Acids Res., 22, 4673-4680.[6] Larkin MA, Blackshields G, Brown NP, Chenna R, McGettigan PA,\n          McWilliam H, Valentin F, Wallace IM, Wilm A, Lopez R, Thompson JD,\n          Gibson TJ, Higgins DG. (2007). Clustal W and Clustal X version\n          2.0. Bioinformatics, 23, 2947-2948.[7] Kimura M (1980). \"A simple method for estimating evolutionary\n          rates of base substitutions through comparative studies of\n          nucleotide sequences\". Journal of Molecular Evolution 16: 111\u2013120.", "precond": null, "prompt": "Clustering", "name": "clustering", "children": [{"comment": null, "prompt": "Guide tree input file (--guidetree-in)", "name": "guidetree_in", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --guidetree-in=\"+str(value))[ value is not None ]", "perl": "(defined $value )? \" --guidetree-in= $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use full distance matrix for guide-tree calculation (slow; mBed is default) (--full)", "name": "full", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --full \")[ value is not None and value ]", "perl": "(defined $full and $ full)? \" --full \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use full distance matrix for guide-tree calculation during iteration (mBed is default) (--full-iter)", "name": "full_iter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --full-iter \")[ value is not None and value ]", "perl": "(defined $full and $ full)? \" --full-iter \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Alignment Output", "name": "output_format", "children": [{"comment": null, "prompt": "alignment output format", "name": "output_format", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --outfmt=\" + value )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef)? \" --outfmt=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "By default, Clustal-Omega calculates (or reads in) a guide tree and\n          performs a multiple alignment in the order specified by this guide\n          tree. This alignment is then outputted. Clustal-Omega can 'iterate'\n          its guide tree. The hope is that the (Kimura) distances, that can be\n          derived from the initial alignment, will give rise to a better guide\n          tree, and by extension, to a better alignment.A similar rationale applies to HMM-iteration. MSAs in general are very\n          'vulnerable' at their early stages. Sequences that are aligned at an\n          early stage remain fixed for the rest of the MSA. Another way of\n          putting this is: 'once a gap, always a gap'. This behaviour can be\n          mitigated by HMM iteration. An initial alignment is created and turned\n          into a HMM. This HMM can help in a new round of MSA to 'anticipate'\n          where residues should align. This is using the HMM as an External\n          Profile and carrying out iterative EPA. In practice, individual\n          sequences and profiles are aligned to the External HMM, derived after\n          the initial alignment. Pseudo-count information is then transferred to\n          the (internal) HMM, corresponding to the individual\n          sequence/profile. The now somewhat 'softened' sequences/profiles are\n          then in turn aligned in the order specified by the guide\n          tree. Pseudo-count transfer is reduced with the size of the\n          profile. Individual sequences attain the greatest\n          pseudo-count\n          transfer, larger profiles less so. Pseudo-count transfer to profiles\n          larger than, say, 10 is negligible. The effect of HMM iteration is\n          more pronounced in larger test sets (that is, with more sequences).Both, HMM- and guide tree-iteration come at a cost of increasing the\n          run-time. One round of guide tree iteration adds on (roughly) the time\n          it took to construct the initial alignment. If, for example, the\n          initial alignment took 1min, then it will take (roughly) 2min to\n          iterate the guide tree once, 3min to iterate the guide tree twice, and\n          so on. HMM-iteration is more costly, as each round of iteration adds\n          three times the time required for the alignment stage. For example, if\n          the initial alignment took 1min, then each additional round of HMM\n          iteration will add on 3min; so 4 iterations will take 13min\n          (=1min+4*3min). The factor of 3 stems from the fact that at every\n          stage both intermediate profiles have to be aligned with the\n          background HMM, and finally the (softened) HMMs have to be aligned as\n          well. All times are quoted for single processors.By default, guide tree iteration and HMM-iteration are coupled. This\n          means, at each iteration step both, guide tree and HMM, are\n          re-calculated. This is invoked by setting the --iter flag. For\n          example, if --iter=1, then first an initial alignment is produced\n          (without external HMM background information and using k-tuple\n          distances to calculate the guide tree). This initial alignment is then\n          used to re-calculate a new guide tree (using Kimura distances) and to\n          create a HMM. The new\n          guide tree and the HMM are then used to produce\n          a new MSA.Iteration of guide tree and HMM can be de-coupled. This means that the\n          number of guide tree iterations and HMM iterations can be\n          different. This can be done by combining the --iter flag with the\n          --max-guidetree-iterations and/or the --max-hmm-iterations flag. The\n          number of guide tree iterations is the minimum of --iter and\n          --max-guidetree-iterations, while the number of HMM iterations is the\n          minimum of --iter and --max-hmm-iterations. If, for example, HMM\n          iteration should be\n          performed 5 times but guide tree iteration should\n          be performed only 3 times, then one should set --iter=5 and\n          --max-guidetree-iterations=3. All three flags can be specified at the\n          same time (however, this makes no sense). It is not sufficient just to\n          specify --max-guidetree-iterations and --max-hmm-iterations but not\n          --iter. If any iteration is desired --iter has to be set.", "precond": null, "prompt": "Iteration", "name": "iteration", "children": [{"comment": null, "prompt": "Number of (combined guide-tree/HMM) iterations (--iter)", "name": "iterations", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --iter=\"+str(value) )[ value is not None ]", "perl": "(defined $value)? \" --iter=$value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum number guidetree iterations (--max-guidetree-iterations)", "name": "max_guidetree_iterations", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --max-guidetree-iterations=\"+str(value) )[ value is not None ]", "perl": "(defined $value)? \" --max-guidetree-iterations=$value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum number of HMM iterations (--max-hmm-iterations)", "name": "max_hmm_iterations", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --max-hmm-iterations=\"+str(value) )[ value is not None ]", "perl": "(defined $value)? \" --max-hmm-iterations=$value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Miscellaneous", "name": "miscellaneous", "children": [{"comment": "Users may feel unsure which options are appropriate in certain\n              situations even though using ClustalO without any special options\n              should give you the desired results. The --auto flag tries to\n              alleviate this problem and selects accuracy/speed flags according to\n              the number of sequences. For all cases will use mBed and thereby\n              possibly overwrite the --full option. For more than 1,000 sequences\n              the iteration is turned off as the effect of iteration is more\n              noticeable for 'larger'\n              problems. Otherwise iterations are set to 1 if\n              not already set to a higher value by the user. Expert users may want\n              to avoid this flag and exercise more fine tuned control by selecting\n              the appropriate options manually.", "prompt": "Set options automatically (might overwrite some of your options) (--auto)", "name": "auto", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --auto \")[value is not None and value]", "perl": "(defined $value and $value)? \" --auto \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "verbosity", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\" -v --force --log=clustalO_log\"", "perl": "\" -v --force --log=clustalO_log\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "clustalo"}, "documentation_links": [], "type": "program", "name": "clustalO-profile"}, {"comment": "Use this interface to add new sequences to an existing alignment.The profile is converted into a HMM and the un-aligned sequences will \n        be multiply aligned (using the HMM background information) to form \n        a profile; this constructed profile is aligned with the input\n        profile; the columns in each profile (the original one and the one\n        created from the un-aligned sequences) will be kept fixed and the\n        alignment of the two profiles will be written out.\n        The un/aligned sequences must contain at least two\n        sequences.", "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab5d"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "Add new sequences to an existing alignment.", "title": "Clustal-Omega: Multiple alignment", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Multiple Sequence Alignment", "name": "alignment_output", "simple": null, "filenames": {"python": "\"clustalO-sequence.out\"", "perl": "\"clustalO-sequence.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [{"#tag": "test", "#children": ["FASTA"], "@eq": "fa", "@param": "output_format"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Guide tree output file", "name": "guidetree_outfile", "simple": null, "filenames": {"python": "guidetree_out", "perl": "$guidetree_out"}, "precond": {"python": "guidetree_out is not None", "perl": "defined $guidetree_out"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Pairwise distance matrix output file", "name": "distmat_outfile", "simple": null, "filenames": {"python": "distmat_out", "perl": "$distmat_out"}, "precond": {"python": "distmat_out is not None", "perl": "defined $distmat_out"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "DistanceMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Clustal omega log file", "name": "logfile", "simple": null, "filenames": {"python": "\"clustalO_log\"", "perl": "\"clustalO_log\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ClustalOReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Data Input", "name": "input", "children": [{"comment": null, "prompt": "Unaligned set of sequences", "name": "sequences_input", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" --infile=\" + str( value )", "perl": "\" --infile=$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA", "SWISSPROT", "PIR"], "edam_types": [], "card": "2,n"}, "paramfile": null}, {"comment": null, "prompt": "Profile (Aligned sequences)", "name": "alignment_input", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" --profile1=\" + str( value )", "perl": "\" --profile1=$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA", "CLUSTAL", "STOCKHOLM", "MSF"], "edam_types": [], "card": "1"}, "paramfile": null}, {"comment": "When the sequences are aligned (all sequences\n            have the same length and at least one sequence has at least one\n            gap), then the alignment is turned into a HMM, the sequences are\n            de-aligned and the now un-aligned sequences are aligned using the\n            HMM as an External Profile for External Profile Alignment (EPA).\n            If no EPA is desired use turn on this option.Clustal-Omega reads the file of aligned sequences. \n            It de-aligns the sequences and then re-aligns them. \n            No HMM is produced in the process, no pseudo-count information is transferred. \n            Consequently, the output must be the same as for unaligned output.", "prompt": "Dealign input sequences", "name": "dealign", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --dealign \")[ value is not None and value !=vdef ]", "perl": "(defined $value and $value) \" --dealign \" : \"\""}, "command": false, "precond": {"python": "bool( alignment_input )", "perl": "$alignment_input"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "In order to produce a multiple alignment Clustal-Omega requires a\n          guide tree which defines the order in which sequences/profiles are\n          aligned. A guide tree in turn is constructed, based on a distance\n          matrix. Conventionally, this distance matrix is comprised of all the\n          pair-wise distances of the sequences. The distance measure\n          Clustal-Omega uses for pair-wise distances of un-aligned sequences is\n          the k-tuple measure [4], which was also implemented in Clustal 1.83\n          and ClustalW2\n          [5,6]. If the sequences inputted via -i are aligned\n          Clustal-Omega uses the Kimura-corrected pairwise aligned identities\n          [7]. The computational effort (time/memory) to calculate and store a\n          full distance matrix grows quadratically with the number of sequences.\n          Clustal-Omega can improve this scalability to N*log(N) by employing a\n          fast clustering algorithm called mBed [2]; this option is\n          automatically invoked (default). If a full distance matrix evaluation\n          is desired, then the --full flag has to\n          be set. The mBed mode\n          calculates a reduced set of pair-wise distances. These distances are\n          used in a k-means algorithm, that clusters at most 100 sequences. For\n          each cluster a full distance matrix is calculated. No full distance\n          matrix (of all input sequences) is calculated in mBed mode. If there\n          are less than 100 sequences in the input, then in effect a full\n          distance matrix is calculated in mBed mode, however, no distance\n          matrix can be outputted (see below).Clustal-Omega uses Muscle's [8] fast UPGMA implementation to construct\n          its guide trees from the distance matrix. By default, the distance\n          matrix is used internally to construct the guide tree and is then\n          discarded. By specifying --distmat-out the internal distance matrix\n          can be written to file. This is only possible in --full mode. The\n          guide trees by default are used internally to guide the multiple\n          alignment and are then discarded. By specifying the --guidetree-out\n          option these\n          internal guide trees can be written out to\n          file. Conversely, the distance calculation and/or guide tree building\n          stage can be skipped, by reading in a pre-calculated distance matrix\n          and/or pre-calculated guide tree. These options are invoked by\n          specifying the --distmat-in and/or --guidetree-in flags,\n          respectively. However, distance matrix reading is disabled in the\n          current version. By default, distance matrix and guide tree files are\n          not over-written, if a file with the specified name already\n          exists. In\n          this case Clustal-Omega aborts during the command-line processing\n          stage. In mBed mode a full distance matrix cannot\n          be outputted, distance matrix output is only possible in --full mode.\n          mBed or --full distance mode do not affect the ability to write out\n          guide-trees.Guide trees can be iterated to refine the alignment (see section\n          ITERATION). Clustal-Omega takes the alignment, that was produced\n          initially and constructs a new distance matrix from this alignment.\n          The distance measure used at this stage is the Kimura distance [7]. By\n          default, Clustal-Omega constructs a reduced distance matrix at this\n          stage using the mBed algorithm, which will then be used to create an\n          improved (iterated) new guide tree. To turn off mBed-like clustering\n          at this\n          stage the --full-iter flag has to be set. While Kimura\n          distances in general are much faster to calculate than k-tuple\n          distances, time and memory requirements still scale quadratically with\n          the number of sequences and --full-iter clustering should only be\n          considered for smaller cases ( << 10,000 sequences).[2] Blackshields G, Sievers F, Shi W, Wilm A, Higgins DG. Sequence\n          embedding for fast construction of guide trees for multiple\n          sequence alignment. Algorithms Mol Biol. 2010 May 14;5:21.[4] Wilbur and Lipman, 1983; PMID 6572363[5] Thompson JD, Higgins DG, Gibson TJ. (1994). CLUSTAL W: improving\n          the sensitivity of progressive multiple sequence alignment through\n          sequence weighting, position-specific gap penalties and weight\n          matrix choice. Nucleic Acids Res., 22, 4673-4680.[6] Larkin MA, Blackshields G, Brown NP, Chenna R, McGettigan PA,\n          McWilliam H, Valentin F, Wallace IM, Wilm A, Lopez R, Thompson JD,\n          Gibson TJ, Higgins DG. (2007). Clustal W and Clustal X version\n          2.0. Bioinformatics, 23, 2947-2948.[7] Kimura M (1980). \"A simple method for estimating evolutionary\n          rates of base substitutions through comparative studies of\n          nucleotide sequences\". Journal of Molecular Evolution 16: 111\u2013120.", "precond": null, "prompt": "Clustering", "name": "clustering", "children": [{"comment": null, "prompt": "Pairwise distance matrix output file", "name": "distmat_out", "ctrl": {"python": "full", "perl": "$full"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --distmat-out=\"+str(value))[ value is not None ]", "perl": "(defined $value and $value)? \" --distmat-out=$value \":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Guide tree input file (--guidetree-in)", "name": "guidetree_in", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --guidetree-in=\"+str(value))[ value is not None ]", "perl": "(defined $value )? \" --guidetree-in= $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Guide tree output file (--guidetree-out)", "name": "guidetree_out", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --guidetree-out=\"+str(value))[ value is not None ]", "perl": "(defined $value and $value)? \" --guidetree-out=$value \":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use full distance matrix for guide-tree calculation (slow; mBed is default) (--full)", "name": "full", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --full \")[ value is not None and value ]", "perl": "(defined $full and $ full)? \" --full \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use full distance matrix for guide-tree calculation during iteration (mBed is default) (--full-iter)", "name": "full_iter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --full-iter \")[ value is not None and value ]", "perl": "(defined $full and $ full)? \" --full-iter \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Alignment Output", "name": "output_format", "children": [{"comment": null, "prompt": "alignment output format", "name": "output_format", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --outfmt=\" + value )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef)? \" --outfmt=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "By default, Clustal-Omega calculates (or reads in) a guide tree and\n          performs a multiple alignment in the order specified by this guide\n          tree. This alignment is then outputted. Clustal-Omega can 'iterate'\n          its guide tree. The hope is that the (Kimura) distances, that can be\n          derived from the initial alignment, will give rise to a better guide\n          tree, and by extension, to a better alignment.A similar rationale applies to HMM-iteration. MSAs in general are very\n          'vulnerable' at their early stages. Sequences that are aligned at an\n          early stage remain fixed for the rest of the MSA. Another way of\n          putting this is: 'once a gap, always a gap'. This behaviour can be\n          mitigated by HMM iteration. An initial alignment is created and turned\n          into a HMM. This HMM can help in a new round of MSA to 'anticipate'\n          where residues should align. This is using the HMM as an External\n          Profile and carrying out iterative EPA. In practice, individual\n          sequences and profiles are aligned to the External HMM, derived after\n          the initial alignment. Pseudo-count information is then transferred to\n          the (internal) HMM, corresponding to the individual\n          sequence/profile. The now somewhat 'softened' sequences/profiles are\n          then in turn aligned in the order specified by the guide\n          tree. Pseudo-count transfer is reduced with the size of the\n          profile. Individual sequences attain the greatest\n          pseudo-count\n          transfer, larger profiles less so. Pseudo-count transfer to profiles\n          larger than, say, 10 is negligible. The effect of HMM iteration is\n          more pronounced in larger test sets (that is, with more sequences).Both, HMM- and guide tree-iteration come at a cost of increasing the\n          run-time. One round of guide tree iteration adds on (roughly) the time\n          it took to construct the initial alignment. If, for example, the\n          initial alignment took 1min, then it will take (roughly) 2min to\n          iterate the guide tree once, 3min to iterate the guide tree twice, and\n          so on. HMM-iteration is more costly, as each round of iteration adds\n          three times the time required for the alignment stage. For example, if\n          the initial alignment took 1min, then each additional round of HMM\n          iteration will add on 3min; so 4 iterations will take 13min\n          (=1min+4*3min). The factor of 3 stems from the fact that at every\n          stage both intermediate profiles have to be aligned with the\n          background HMM, and finally the (softened) HMMs have to be aligned as\n          well. All times are quoted for single processors.By default, guide tree iteration and HMM-iteration are coupled. This\n          means, at each iteration step both, guide tree and HMM, are\n          re-calculated. This is invoked by setting the --iter flag. For\n          example, if --iter=1, then first an initial alignment is produced\n          (without external HMM background information and using k-tuple\n          distances to calculate the guide tree). This initial alignment is then\n          used to re-calculate a new guide tree (using Kimura distances) and to\n          create a HMM. The new\n          guide tree and the HMM are then used to produce\n          a new MSA.Iteration of guide tree and HMM can be de-coupled. This means that the\n          number of guide tree iterations and HMM iterations can be\n          different. This can be done by combining the --iter flag with the\n          --max-guidetree-iterations and/or the --max-hmm-iterations flag. The\n          number of guide tree iterations is the minimum of --iter and\n          --max-guidetree-iterations, while the number of HMM iterations is the\n          minimum of --iter and --max-hmm-iterations. If, for example, HMM\n          iteration should be\n          performed 5 times but guide tree iteration should\n          be performed only 3 times, then one should set --iter=5 and\n          --max-guidetree-iterations=3. All three flags can be specified at the\n          same time (however, this makes no sense). It is not sufficient just to\n          specify --max-guidetree-iterations and --max-hmm-iterations but not\n          --iter. If any iteration is desired --iter has to be set.", "precond": null, "prompt": "Iteration", "name": "iteration", "children": [{"comment": "if iterations= 2. Clustal-Omega reads the input file, creates a UPGMA guide tree\nbuilt from k-tuple distances, and performs an initial alignment. This\ninitial alignment is converted into a HMM and a new guide tree is\nbuilt from the Kimura distances of the initial alignment. The\nun-aligned sequences are then aligned (for the second time but this\ntime) using pseudo-count information from the HMM created after the\ninitial alignment (and using the new guide tree). This second\nalignment is then again converted into a HMM and a new guide tree is\nconstructed. The un-aligned sequences are then aligned (for a third\ntime), again using pseudo-count information of the HMM from the\nprevious step and the most recent guide tree. The final alignment is\nwritten to screen.", "prompt": "Number of (combined guide-tree/HMM) iterations (--iter)", "name": "iterations", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --iter=\"+str(value) )[ value is not None ]", "perl": "(defined $value)? \" --iter=$value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If iterations= 5 and the \"Maximum number guidetree iterations\" is set to 1. \n            Clustal-Omega reads the input file, creates a UPGMA guide tree\nbuilt from k-tuple distances, and performs an initial alignment. This\ninitial alignment is converted into a HMM and a new guide tree is\nbuilt from the Kimura distances of the initial alignment. The\nun-aligned sequences are then aligned (for the second time but this\ntime) using pseudo-count information from the HMM created after the\ninitial alignment (and using the new guide tree). For the last 4\niterations the guide tree is left unchanged and only HMM iteration is\nperformed. This means that intermediate alignments are converted to\nHMMs, and these intermediate HMMs are used to guide the MSA during\nsubsequent iteration stages.", "prompt": "Maximum number guidetree iterations (--max-guidetree-iterations)", "name": "max_guidetree_iterations", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --max-guidetree-iterations=\"+str(value) )[ value is not None ]", "perl": "(defined $value)? \" --max-guidetree-iterations=$value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum number of HMM iterations (--max-hmm-iterations)", "name": "max_hmm_iterations", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --max-hmm-iterations=\"+str(value) )[ value is not None ]", "perl": "(defined $value)? \" --max-hmm-iterations=$value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Miscellaneous", "name": "miscellaneous", "children": [{"comment": "Users may feel unsure which options are appropriate in certain\n              situations even though using ClustalO without any special options\n              should give you the desired results. The --auto flag tries to\n              alleviate this problem and selects accuracy/speed flags according to\n              the number of sequences. For all cases will use mBed and thereby\n              possibly overwrite the --full option. For more than 1,000 sequences\n              the iteration is turned off as the effect of iteration is more\n              noticeable for 'larger'\n              problems. Otherwise iterations are set to 1 if\n              not already set to a higher value by the user. Expert users may want\n              to avoid this flag and exercise more fine tuned control by selecting\n              the appropriate options manually.", "prompt": "Set options automatically (might overwrite some of your options) (--auto)", "name": "auto", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --auto \")[value is not None and value]", "perl": "(defined $value and $value)? \" --auto \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "verbosity", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\" -v --force --log=clustalO_log\"", "perl": "\" -v --force --log=clustalO_log\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "clustalo"}, "documentation_links": [], "type": "program", "name": "clustalO-sequence"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab5e"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "Do full multiple alignment", "title": "Clustalw: Multiple alignment", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "Multiple alignments are carried out in 3 stages :1) all sequences are compared to each other (pairwise alignments);2) a dendrogram (like a phylogenetic tree) is constructed, describing the approximate groupings of the sequences by similarity (stored in a file).3) the final multiple alignment is carried out, using the dendrogram as a guide.Pairwise alignment parameters control the speed/sensitivity of the initial alignments.Multiple alignment parameters control the gaps in the final multiple alignments.", "precond": null, "prompt": "Multiple Alignments parameters", "name": "multalign", "children": [{"comment": null, "prompt": "Output tree", "name": "newtreefile", "simple": null, "filenames": {"python": "newtree", "perl": "$newtree"}, "precond": {"python": "newtree is not None", "perl": "defined $newtree"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, {"comment": null, "precond": null, "prompt": "Output parameters", "name": "outputparam", "children": [{"comment": "In the conservation line output in the clustal format alignment file, three characters are used:'*' indicates positions which have a single, fully conserved residue.':' indicates that one of the following 'strong' groups is fully conserved (STA,NEQK,NHQK,NDEQ,QHRK,MILV,MILF,HY,FYW).'.' indicates that one of the following 'weaker' groups is fully conserved (CSA,ATV,SAG,STNK,STPA,SGND,SNDEQK,NDEQHK,NEQHRK,FVLIM,HFY).These are all the positively scoring groups that occur in the Gonnet Pam250\nmatrix. The strong and weak groups are defined as strong score >0.5 and weak\nscore =<0.5 respectively.", "prompt": "Alignment file", "name": "clustalaligfile", "simple": null, "filenames": {"python": "(\"*.aln\", str(outfile))[outfile is not None]", "perl": "(defined $outfile)? \"$outfile\":\"*.aln\""}, "precond": {"python": "outputformat is None", "perl": "not defined $outputformat"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["CLUSTAL"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment file", "name": "aligfile", "simple": null, "filenames": {"python": "{ \"FASTA\":\"*.fasta\", \"NEXUS\": \"*.nxs\", \"PHYLIPI\": \"*.phy\" , 'GCG': '*.msf' }[outputformat ]", "perl": "(defined $outfile)? ( $outputformat eq 'GCG' )? ( $outputformat eq 'PHYLIPI' )?\"$outfile\":\"*.msf\" : \"*.phy\" : \"*.nxs\""}, "precond": {"python": "outputformat in [ \"FASTA\", \"NEXUS\", \"GCG\", \"PHYLIPI\"]", "perl": "$outputformat =~ /^(NEXUS|GCG|PHYLIPI|FASTA)$/"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "outputformat"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Sequences file", "name": "seqfile", "simple": null, "filenames": {"python": "(((\"*.fasta\",\"*.pir\")[outputformat == 'PIR'],\"*.gde\")[outputformat == 'GDE'],str(outfile))[outfile is not None]", "perl": "(defined $outfile)? ( $outputformat eq 'GDE' )? ( $outputformat eq 'PIR' )?\"$outfile\":\"*.gde\" : \"*.pir\" : \"*.fasta\""}, "precond": {"python": "outputformat in [ 'GDE', 'PIR' ]", "perl": "$outputformat =~ /^(GDE|PIR)$/"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Tree file", "name": "dndfile", "simple": null, "filenames": {"python": "\"*.dnd\"", "perl": "\"*.dnd\""}, "precond": {"python": "newtree is None", "perl": "not defined $newtree"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Data Input", "name": "input", "children": [{"comment": null, "prompt": "Sequences File ( a file containing several sequences ) (-infile)", "name": "sequences_input", "ctrl": {"python": "not alignment_input", "perl": "not $alignment_input"}, "simple": null, "argpos": "1", "format": {"python": "\" -infile=\" + str( value )", "perl": "\" -infile=$value\""}, "command": false, "precond": {"python": "not alignment_input or (sequences_input and alignment_input)", "perl": "not $alignment_input or ($sequences_input and $alignment_input)"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA", "NBRF", "EMBL", "GCG", "GDE", "SWISSPROT"], "edam_types": [], "card": "2,n"}, "paramfile": null}, {"comment": "When the sequences are aligned (all sequences\n              have the same length and at least one sequence has at least one\n              gap)", "prompt": "Aligned sequences", "name": "alignment_input", "ctrl": {"python": "not sequences_input", "perl": "not $sequences_input"}, "simple": null, "argpos": null, "format": {"python": "\" -infile=\" + str( value )", "perl": "\" -infile=$value\""}, "command": false, "precond": {"python": "not sequences_input or (sequences_input and alignment_input)", "perl": "not $sequences_input or ($sequences_input and $alignment_input)"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein", "DNA"], "biomoby_datatypes": [], "formats": ["CLUSTAL", "FASTA"], "edam_types": [], "card": "1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "General settings", "name": "general", "children": [{"comment": "slow: by dynamic programming (slow but accurate)fast: method of Wilbur and Lipman (extremely fast but approximate)", "prompt": "Toggle Slow/Fast pairwise alignments (-quicktree)", "name": "quicktree", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -quicktree\")[ value == \"fast\"]", "perl": "($value eq \"fast\") ? \" -quicktree\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Protein or DNA (-type)", "name": "typeseq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -type=\"+str(value))[value is not None]", "perl": "(defined $value) ? \" -type=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Multiple alignments are carried out in 3 stages :1) all sequences are compared to each other (pairwise alignments);2) a dendrogram (like a phylogenetic tree) is constructed, describing the approximate groupings of the sequences by similarity (stored in a file).3) the final multiple alignment is carried out, using the dendrogram as a guide.Pairwise alignment parameters control the speed/sensitivity of the initial alignments.Multiple alignment parameters control the gaps in the final multiple alignments.", "precond": null, "prompt": "Multiple Alignments parameters", "name": "multalign", "children": [{"comment": null, "prompt": "Gap opening penalty (-gapopen)", "name": "gapopen", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gapopen=\" + str( value ))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -gapopen=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Gap extension penalty (-gapext)", "name": "gapext", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gapext=\" + str( value ))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -gapext=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "End gap separation treats end gaps just\n\t\tlike internal gaps for the purposes of avoiding gaps that\n\t\tare too close (set by GAP SEPARATION DISTANCE above). If\n\t\tyou turn this off, end gaps will be ignored for this\n\t\tpurpose. This is useful when you wish to align fragments\n\t\twhere the end gaps are not biologically meaningful.", "prompt": "No end gap separation penalty (-endgaps)", "name": "endgaps", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" ,\" -endgaps\" )[ value ]", "perl": "($value) ? \" -endgaps\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Gap separation distance tries to decrease\n\t\tthe chances of gaps being too close to each other. Gaps\n\t\tthat are less than this distance apart are penalised more\n\t\tthan other gaps. This does not prevent close gaps; it makes\n\t\tthem less frequent, promoting a block-like appearance of\n\t\tthe alignment.", "prompt": "Gap separation penalty range (-gapdist)", "name": "gapdist", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gapdist=\" + str( value ))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -gapdist=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Delays the alignment of the most distantly\n\t\trelated sequences until after the most closely related\n\t\tsequences have been aligned. The setting shows the percent\n\t\tidentity level required to delay the addition of a\n\t\tsequence; sequences that are less identical than this level\n\t\tto any other sequences will be aligned later.", "prompt": "Delay divergent sequences : % ident. for delay (-maxdiv)", "name": "maxdiv", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -maxdiv=\" + str( value ))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -maxdiv=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "File for new guide tree (-newtree)", "name": "newtree", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -newtree=\" + str( value ))[value is not None]", "perl": "(defined $value) ? \" -newtree=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "You can give a previously computed tree (.dnd file) - on the same data", "prompt": "File for old guide tree (-usetree)", "name": "usetree", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" ,\" -usetree=\" + str( value ))[value is not None]", "perl": "(defined $value) ? \" -usetree=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "typeseq == \"protein\"", "perl": "$typeseq eq \"protein\""}, "prompt": "Protein parameters", "name": "multalign_prot", "children": [{"comment": "There are three 'in-built' series of weight\n\t\tmatrices offered. Each consists of several matrices which\n\t\twork differently at different evolutionary distances. To\n\t\tsee the exact details, read the documentation. Crudely, we\n\t\tstore several matrices in memory, spanning the full range\n\t\tof amino acid distance (from almost identical sequences to\n\t\thighly divergent ones). For very similar sequences, it is\n\t\tbest to use a strict weight matrix which only gives a high\n\t\tscore to identities and the most favoured conservative\n\t\tsubstitutions. For more divergent sequences, it is\n\t\tappropriate to use 'softer' matrices which give a high\n\t\tscore to many other frequent substitutions.BLOSUM (Henikoff). These matrices appear to\n\t\tbe the best available for carrying out data base similarity\n\t\t(homology searches). The matrices used are: Blosum80, 62,\n\t\t40 and 30.The Gonnet Pam 250 matrix has been reported\n\t\tas the best single matrix for alignment, if you only choose\n\t\tone matrix. Our experience with profile database searches\n\t\tis that the Gonnet series is unambiguously superior to the\n\t\tBlosum series at high divergence. However, we did not get\n\t\tthe series to perform systematically better than the Blosum\n\t\tseries in Clustal W (communication of the authors).PAM (Dayhoff). These have been extremely\n\t\twidely used since the late '70s. We use the PAM 120, 160,\n\t\t250 and 350 matrices.", "prompt": "Protein weight matrix (-matrix)", "name": "matrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -matrix=\"+str(value))[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -matrix=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Negative values in matrix ? (-negative)", "name": "negative", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -negative\" )[ value ]", "perl": "($value) ? \" -negative\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Residue specific penalties are amino acid\n\t\tspecific gap penalties that reduce or increase the gap\n\t\topening penalties at each position in the alignment or\n\t\tsequence. As an example, positions that are rich in glycine\n\t\tare more likely to have an adjacent gap than positions that\n\t\tare rich in valine.Table of residue specific gap modification\n\t\tfactors:A 1.13 M 1.29C 1.13 N 0.63D 0.96 P 0.74E 1.31 Q 1.07F 1.20 R 0.72G 0.61 S 0.76H 1.00 T 0.89I 1.32 V 1.25K 0.96 Y 1.00L 1.21 W 1.23The values are normalised around a mean value of 1.0 for H. The lower the value, the greater the chance of having an adjacent gap. These are derived from the original table of relative frequencies of gaps adjacent to each residue (12) by subtraction from 2.0.", "prompt": "Residue specific gaps off (-nopgap)", "name": "pgap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -nopgap\" )[ value ]", "perl": "($value) ? \" -nopgap\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Hydrophilic gap penalties are used to\n\t\tincrease the chances of a gap within a run (5 or more\n\t\tresidues) of hydrophilic amino acids; these are likely to\n\t\tbe loop or random coil regions where gaps are more\n\t\tcommon. The residues that are 'considered' to be\n\t\thydrophilic are set by menu item 3.", "prompt": "Hydrophilic gaps off (-nohgap)", "name": "hgap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -nohgap\" )[ value ]", "perl": "($value) ? \" -nohgap\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Hydrophilic residues list (-hgapresidues)", "name": "hgapresidues", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( '' , ' -hgapresidues=\"%s\"' % str(value) )[ value and value != vdef ]", "perl": "($value and $value ne $vdef) ? \" -hgapresidues=\\\\\"$value\\\\\"\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "MultipleChoice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "typeseq == \"dna\"", "perl": "$typeseq eq \"dna\""}, "prompt": "DNA parameters", "name": "multalign_dna", "children": [{"comment": "1) IUB. This is the default scoring matrix\n\t\tused by BESTFIT for the comparison of nucleic acid\n\t\tsequences. X's and N's are treated as matches to any IUB\n\t\tambiguity symbol. All matches score 1.9; all mismatches for\n\t\tIUB symbols score 0.2) CLUSTALW(1.6). The previous system used\n\t\tby ClustalW, in which matches score 1.0 and mismatches\n\t\tscore 0. All matches for IUB symbols also score 0.", "prompt": "DNA weight matrix (-dnamatrix)", "name": "dnamatrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -dnamatrix=\" + str(value))[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -dnamatrix=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A weight of\n\t\tzero means that the transitions are scored as mismatches; a\n\t\tweight of 1 gives transitions the full match score. For\n\t\tdistantly related DNA sequences, the weight should be near\n\t\tto zero; for closely related sequences it can be useful to\n\t\tassign a higher score.", "prompt": "Transitions weight (between 0 and 1) (-transweight)", "name": "transweight", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -transweight=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -transweight=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": "These similarity scores are calculated from fast,\n\t  approximate, global alignments, which are controlled by 4\n\t  parameters. 2 techniques are used to make these alignments very\n\t  fast: 1) only exactly matching fragments (k-tuples) are\n\t  considered; 2) only the 'best' diagonals (the ones with most\n\t  k-tuple matches) are used.", "precond": {"python": "quicktree == \"fast\"", "perl": "$quicktree eq \"fast\""}, "prompt": "Fast Pairwise Alignments parameters", "name": "fastpw", "children": [{"comment": "K-TUPLE SIZE: This is the size of exactly matching fragment that is used. INCREASE for speed (max= 2 for proteins; 4 for DNA), DECREASE for sensitivity. For longer sequences (e.g. >1000 residues) you may need to increase the default.", "prompt": "Word size (-ktuple)", "name": "ktuple", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -ktuple=\" + str( value ) )[value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -ktuple=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The number of k-tuple matches on each\n\t\tdiagonal (in an imaginary dot-matrix plot) is\n\t\tcalculated. Only the best ones (with most matches) are used\n\t\tin the alignment. This parameter specifies how\n\t\tmany. Decrease for speed; increase for sensitivity.", "prompt": "Number of best diagonals (-topdiags)", "name": "topdiags", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -topdiags=\" + str( value ))[value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -topdiags=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "WINDOW SIZE: This is the number of\n\t\tdiagonals around each of the 'best' diagonals that will be\n\t\tused. Decrease for speed; increase for sensitivity", "prompt": "Window around best diags (-window)", "name": "window", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -window=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -window=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is a penalty for each gap in the fast\n\t\talignments. It has little affect on the speed or\n\t\tsensitivity except for extreme values.", "prompt": "Gap penalty (-pairgap)", "name": "pairgap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pairgap=\" + str( value ))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -pairgap=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Percent or absolute score ? (-score)", "name": "score", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -score=\" +str( value ) )[value is not None or value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -score=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "These parameters do not have any affect on the\n\t  speed of the alignments. They are used to give initial alignments\n\t  which are then rescored to give percent identity scores. These %\n\t  scores are the ones which are displayed on the screen. The scores\n\t  are converted to distances for the trees.", "precond": {"python": "quicktree == \"slow\"", "perl": "$quicktree eq \"slow\""}, "prompt": "Slow Pairwise Alignments parameters", "name": "slowpw", "children": [{"comment": null, "prompt": "Gap opening penalty (-pwgapopen)", "name": "pwgapopen", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pwgapopen=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -pwgapopen=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Gap extension penalty (-pwgapext)", "name": "pwgapext", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pwgapext=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -pwgapext=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "typeseq == \"protein\"", "perl": "$typeseq eq \"protein\""}, "prompt": "Protein parameters", "name": "slowpw_prot", "children": [{"comment": "The scoring table which describes the\n\t\tsimilarity of each amino acid to each other. For DNA, an\n\t\tidentity matrix is used.BLOSUM (Henikoff). These matrices appear to\n\t\tbe the best available for carrying out data base similarity\n\t\t(homology searches). The matrices used are: Blosum80, 62,\n\t\t40 and 30.The Gonnet Pam 250 matrix has been reported\n\t\tas the best single matrix for alignment, if you only choose\n\t\tone matrix. Our experience with profile database searches\n\t\tis that the Gonnet series is unambiguously superior to the\n\t\tBlosum series at high divergence. However, we did not get\n\t\tthe series to perform systematically better than the Blosum\n\t\tseries in Clustal W (communication of the authors).PAM (Dayhoff). These have been extremely\n\t\twidely used since the late '70s. We use the PAM 120, 160,\n\t\t250 and 350 matrices.", "prompt": "Protein weight matrix (-pwmatrix)", "name": "pwmatrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pwmatrix=\" + str(value) )[value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -pwmatrix=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "typeseq == \"dna\"", "perl": "$typeseq eq \"dna\""}, "prompt": "DNA parameters", "name": "slowpw_dna", "children": [{"comment": "For DNA, a single matrix (not a series) is\n\t\tused. Two hard-coded matrices are available:1) IUB. This is the default scoring matrix\n\t\tused by BESTFIT for the comparison of nucleic acid\n\t\tsequences. X's and N's are treated as matches to any IUB\n\t\tambiguity symbol. All matches score 1.9; all mismatches for\n\t\tIUB symbols score 0.2) CLUSTALW(1.6). The previous system used\n\t\tby ClustalW, in which matches score 1.0 and mismatches\n\t\tscore 0. All matches for IUB symbols also score 0.", "prompt": "DNA weight matrix (-pwdnamatrix)", "name": "pwdnamatrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pwdnamatrix=\" + str(value) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -pwdnamatrix=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Output parameters", "name": "outputparam", "children": [{"comment": null, "prompt": "Output format (-output)", "name": "outputformat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -output=\" + str( value) )[ value is not None ]", "perl": "(defined $value ) ? \" -output=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output sequence numbers in the output file (for clustalw output only) (-seqnos)", "name": "seqnos", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -seqnos=on\")[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -seqnos=on\" : \"\""}, "command": false, "precond": {"python": "outputformat is None", "perl": "not defined $outputformat"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Result order (-outorder)", "name": "outorder", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -outorder=\" + str(value))[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -outorder=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequence alignment file name (-outfile)", "name": "outfile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -outfile=\" + str( value))[ value is not None ]", "perl": "(defined $value) ? \" -outfile=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Upper case (for GDE output only) (-case)", "name": "gde_lower", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -case=upper\" )[ value ]", "perl": "($value) ? \" -case=upper\" : \"\""}, "command": false, "precond": {"python": "outputformat == \"GDE\"", "perl": "$outputformat eq \"GDE\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "clustalw -align"}, "documentation_links": [], "type": "program", "name": "clustalw-multialign"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab5f"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "Merge two alignments by profile alignment", "title": "Clustalw: Profile alignments", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output parameters", "name": "outputparam", "children": [{"comment": null, "prompt": "Alignment file", "name": "aligfile", "simple": null, "filenames": {"python": "(((\"*.nxs\",\"*.phy\")[outputformat == 'PHYLIPI'],\"*.msf\")[outputformat == 'GCG'],str(outfile))[outfile is not None]", "perl": "(defined $outfile)? ( $outputformat eq 'GCG' )? ( $outputformat eq 'PHYLIPI' )?\"$outfile\":\"*.msf\" : \"*.phy\" : \"*.nxs\""}, "precond": {"python": "outputformat in [ \"NEXUS\", \"GCG\", \"PHYLIPI\"]", "perl": "$outputformat =~ /^(NEXUS|GCG|PHYLIPI)$/"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "outputformat"}], "edam_types": [], "card": null}}, {"comment": "In the conservation line output in the clustal format alignment file, three characters are used:'*' indicates positions which have a single, fully conserved residue.':' indicates that one of the following 'strong' groups is fully conserved (STA,NEQK,NHQK,NDEQ,QHRK,MILV,MILF,HY,FYW).'.' indicates that one of the following 'weaker' groups is fully conserved (CSA,ATV,SAG,STNK,STPA,SGND,SNDEQK,NDEQHK,NEQHRK,FVLIM,HFY).These are all the positively scoring groups that occur in the Gonnet Pam250\nmatrix. The strong and weak groups are defined as strong score >0.5 and weak\nscore =<0.5 respectively.", "prompt": "Alignment file", "name": "clustalaligfile", "simple": null, "filenames": {"python": "(\"*.aln\", str(outfile))[outfile is not None]", "perl": "(defined $outfile)? \"$outfile\":\"*.aln\""}, "precond": {"python": "outputformat is None", "perl": "not defined $outputformat"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["CLUSTAL"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Sequences file", "name": "seqfile", "simple": null, "filenames": {"python": "(((\"*.fasta\",\"*.pir\")[outputformat == 'PIR'],\"*.gde\")[outputformat == 'GDE'],str(outfile))[outfile is not None]", "perl": "(defined $outfile)? ( $outputformat eq 'GDE' )? ( $outputformat eq 'PIR' )?\"$outfile\":\"*.gde\" : \"*.pir\" : \"*.fasta\""}, "precond": {"python": "outputformat in [ 'GDE', 'PIR', 'FASTA' ]", "perl": "$outputformat =~ /^(GDE|PIR|FASTA)$/"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "outputformat"}], "edam_types": [], "card": "2,n"}}, {"comment": null, "prompt": "Tree file", "name": "dndfile", "simple": null, "filenames": {"python": "\"*.dnd\"", "perl": "\"*.dnd\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "By PROFILE ALIGNMENT, we mean alignment using\n\t    existing alignments. Profile alignments allow you to store\n\t    alignments of your favorite sequences and add new sequences to\n\t    them in small bunches at a time.  (e.g. an alignment output\n\t    file from CLUSTAL W). One or both sets of input sequences may\n\t    include secondary structure assignments or gap penalty masks to\n\t    guide the alignment.Merge 2 alignments by profile alignment", "precond": null, "prompt": "Profile Alignments parameters", "name": "profile", "children": [{"comment": null, "prompt": "Profile 1", "name": "profile1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -profile1=\" + str( value ) )[value is not None]", "perl": "(defined $value) ? \" -profile1=$value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["CLUSTAL"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Profile 2", "name": "profile2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -profile2=\" + str( value ) )[value is not None]", "perl": "(defined $value) ? \" -profile2=$value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["CLUSTAL"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "File for old guide tree for profile1 (-usetree1)", "name": "usetree1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -usetree1=\" + str( value ))[value is not None]", "perl": "(defined $value) ? \" -usetree1=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "File for old guide tree for profile2 (-usetree2)", "name": "usetree2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -usetree2=\" + str( value ))[value is not None]", "perl": "(defined $value) ? \" -usetree2=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "General settings", "name": "general_settings", "children": [{"comment": null, "prompt": "Protein or DNA (-type)", "name": "typeseq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -type=\"+str(value))[value is not None]", "perl": "(defined $value) ? \" -type=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "slow: by dynamic programming (slow but accurate)fast: method of Wilbur and Lipman (extremely fast but approximate)", "prompt": "Toggle Slow/Fast pairwise alignments (-quicktree)", "name": "quicktree", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -quicktree\")[ value == \"fast\"]", "perl": "($value eq \"fast\") ? \" -quicktree\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "These similarity scores are calculated from fast,\n\t  approximate, global alignments, which are controlled by 4\n\t  parameters. 2 techniques are used to make these alignments very\n\t  fast: 1) only exactly matching fragments (k-tuples) are\n\t  considered; 2) only the 'best' diagonals (the ones with most\n\t  k-tuple matches) are used.", "precond": {"python": "quicktree == \"fast\"", "perl": "$quicktree eq \"fast\""}, "prompt": "Fast Pairwise Alignments parameters", "name": "fastpw", "children": [{"comment": "K-TUPLE SIZE: This is the size of exactly matching fragment that is used. INCREASE for speed (max= 2 for proteins; 4 for DNA), DECREASE for sensitivity. For longer sequences (e.g. >1000 residues) you may need to increase the default.", "prompt": "Word size (-ktuple)", "name": "ktuple", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -ktuple=\" + str( value ) )[value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -ktuple=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The number of k-tuple matches on each\n\t\tdiagonal (in an imaginary dot-matrix plot) is\n\t\tcalculated. Only the best ones (with most matches) are used\n\t\tin the alignment. This parameter specifies how\n\t\tmany. Decrease for speed; increase for sensitivity.", "prompt": "Number of best diagonals (-topdiags)", "name": "topdiags", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -topdiags=\" + str( value ))[value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -topdiags=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "WINDOW SIZE: This is the number of\n\t\tdiagonals around each of the 'best' diagonals that will be\n\t\tused. Decrease for speed; increase for sensitivity", "prompt": "Window around best diags (-window)", "name": "window", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -window=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -window=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is a penalty for each gap in the fast\n\t\talignments. It has little affect on the speed or\n\t\tsensitivity except for extreme values.", "prompt": "Gap penalty (-pairgap)", "name": "pairgap", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -pairgap=\" + str( value ))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -pairgap=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Percent or absolute score ? (-score)", "name": "score", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -score=\" +str( value ) )[value is not None and value !=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -score=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "These parameters do not have any affect on the\n\t  speed of the alignments. They are used to give initial alignments\n\t  which are then rescored to give percent identity scores. These %\n\t  scores are the ones which are displayed on the screen. The scores\n\t  are converted to distances for the trees.", "precond": {"python": "quicktree == \"slow\"", "perl": "$quicktree eq \"slow\""}, "prompt": "Slow Pairwise Alignments parameters", "name": "slowpw", "children": [{"comment": null, "prompt": "Gap opening penalty (-pwgapopen)", "name": "pwgapopen", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pwgapopen=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -pwgapopen=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Gap extension penalty (-pwgapext)", "name": "pwgapext", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pwgapext=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -pwgapext=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "typeseq == \"protein\"", "perl": "$typeseq eq \"protein\""}, "prompt": "Protein parameters", "name": "slowpw_prot", "children": [{"comment": "The scoring table which describes the\n\t\tsimilarity of each amino acid to each other. For DNA, an\n\t\tidentity matrix is used.BLOSUM (Henikoff). These matrices appear to\n\t\tbe the best available for carrying out data base similarity\n\t\t(homology searches). The matrices used are: Blosum80, 62,\n\t\t40 and 30.The Gonnet Pam 250 matrix has been reported\n\t\tas the best single matrix for alignment, if you only choose\n\t\tone matrix. Our experience with profile database searches\n\t\tis that the Gonnet series is unambiguously superior to the\n\t\tBlosum series at high divergence. However, we did not get\n\t\tthe series to perform systematically better than the Blosum\n\t\tseries in Clustal W (communication of the authors).PAM (Dayhoff). These have been extremely\n\t\twidely used since the late '70s. We use the PAM 120, 160,\n\t\t250 and 350 matrices.", "prompt": "Protein weight matrix (-pwmatrix)", "name": "pwmatrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pwmatrix=\" + str(value) )[value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -pwmatrix=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "typeseq == \"dna\"", "perl": "$typeseq eq \"dna\""}, "prompt": "DNA parameters", "name": "slowpw_dna", "children": [{"comment": "For DNA, a single matrix (not a series) is\n\t\tused. Two hard-coded matrices are available:1) IUB. This is the default scoring matrix\n\t\tused by BESTFIT for the comparison of nucleic acid\n\t\tsequences. X's and N's are treated as matches to any IUB\n\t\tambiguity symbol. All matches score 1.9; all mismatches for\n\t\tIUB symbols score 0.2) CLUSTALW(1.6). The previous system used\n\t\tby ClustalW, in which matches score 1.0 and mismatches\n\t\tscore 0. All matches for IUB symbols also score 0.", "prompt": "DNA weight matrix (-pwdnamatrix)", "name": "pwdnamatrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pwdnamatrix=\" + str(value) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -pwdnamatrix=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": "These options, when doing a profile alignment,\n\t  allow you to set 2D structure parameters. If a solved structure\n\t  is available, it can be used to guide the alignment by raising\n\t  gap penalties within secondary structure elements, so that gaps\n\t  will preferentially be inserted into unstructured surface\n\t  loops. Alternatively, a user-specified gap penalty mask can be\n\t  supplied directly.A gap penalty mask is a series of numbers between\n\t  1 and 9, one per position in the alignment. Each number specifies\n\t  how much the gap opening penalty is to be raised at that position\n\t  (raised by multiplying the basic gap opening penalty by the\n\t  number) i.e. a mask figure of 1 at a position means no change in\n\t  gap opening penalty; a figure of 4 means that the gap opening\n\t  penalty is four times greater at that position, making gaps 4\n\t  times harder to open.Gap penalty masks is to be supplied with the\n\t  input sequences. The masks work by raising gap penalties in\n\t  specified regions (typically secondary structure elements) so\n\t  that gaps are preferentially opened in the less well conserved\n\t  regions (typically surface loops).CLUSTAL W can read the masks from SWISS-PROT,\n\t  CLUSTAL or GDE format input files. For many 3-D protein\n\t  structures, secondary structure information is recorded in the\n\t  feature tables of SWISS-PROT database entries. You should always\n\t  check that the assignments are correct - some are quite\n\t  inaccurate. CLUSTAL W looks for SWISS-PROT HELIX and STRAND\n\t  assignments e.g.FT   HELIX       100    115FT   HELIX       100    115The structure and penalty masks can also be read from CLUSTAL alignment format as comment lines beginning !SS_ or GM_ e.g.!SS_HBA_HUMA    ..aaaAAAAAAAAAAaaa.aaaAAAAAAAAAAaaaaaaAaaa.........aaaAAAAAA!GM_HBA_HUMA    112224444444444222122244444444442222224222111111111222444444HBA_HUMA        VLSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKNote that the mask itself is a set of numbers between 1 and 9 each of which is assigned to the residue(s) in the same column below. In GDE flat file format, the masks are specified as text and the names must begin with SS_ or GM_. Either a structure or penalty mask or both may be used. If both are included in an alignment, the user will be asked which is to be used.", "precond": null, "prompt": "Structure Alignments parameters", "name": "structure", "children": [{"comment": "This option controls whether the input secondary structure information or gap penalty masks will be used.", "prompt": "Do not use secondary structure-gap penalty mask for profile 1 (-nosecstr1)", "name": "nosecstr1", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -nosecstr1\")[ value ]", "perl": "($value) ? \" -nosecstr1\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option controls whether the input secondary structure information or gap penalty masks will be used.", "prompt": "Do not use secondary structure-gap penalty mask for profile 2 (-nosecstr2)", "name": "nosecstr2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -nosecstr2\")[ value ]", "perl": "($value) ? \" -nosecstr2\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option provides the value for raising\n\t\tthe gap penalty at core Alpha Helical (A) residues. In\n\t\tCLUSTAL format, capital residues denote the A and B core\n\t\tstructure notation. The basic gap penalties are multiplied\n\t\tby the amount specified.", "prompt": "Helix gap penalty (-helixgap)", "name": "helixgap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -helixgap=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -helixgap=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option provides the value for raising\n\t\tthe gap penalty at Beta Strand (B) residues. In CLUSTAL\n\t\tformat, capital residues denote the A and B core structure\n\t\tnotation. The basic gap penalties are multiplied by the\n\t\tamount specified.", "prompt": "Strand gap penalty (-strandgap)", "name": "strandgap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -strandgap=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -strandgap=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option provides the value for the gap\n\t\tpenalty in Loops. By default this penalty is not raised. In\n\t\tCLUSTAL format, loops are specified by . in the secondary\n\t\tstructure notation.", "prompt": "Loop gap penalty (-loopgap)", "name": "loopgap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -loopgap=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -loopgap=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option provides the value for setting\n\t\tthe gap penalty at the ends of secondary structures. Ends\n\t\tof secondary structures are observed to grow and-or shrink\n\t\tin related structures. Therefore by default these are given\n\t\tintermediate values, lower than the core penalties. All\n\t\tsecondary structure read in as lower case in CLUSTAL format\n\t\tgets the reduced terminal penalty.", "prompt": "Secondary structure terminal penalty (-terminalgap)", "name": "terminalgap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -terminalgap=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -terminalgap=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option (together with the -helixendin)\n\t\tspecify the range of structure termini for the intermediate\n\t\tpenalties. In the alignment output, these are indicated as\n\t\tlower case. For Alpha Helices, by default, the range spans\n\t\tthe end helical turn.", "prompt": "Helix terminal positions:  number of residues inside helix to be treated as terminal (-helixendin)", "name": "helixendin", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -helixendin=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -helixendin=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option (together with the -helixendin)\n\t\tspecify the range of structure termini for the intermediate\n\t\tpenalties. In the alignment output, these are indicated as\n\t\tlower case. For Alpha Helices, by default, the range spans\n\t\tthe end helical turn.", "prompt": "Helix terminal positions: number of residues outside helix to be treated as terminal (-helixendout)", "name": "helixendout", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -helixendout=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -helixendout=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option (together with the\n\t\t-strandendout option) specify the range of structure\n\t\ttermini for the intermediate penalties. In the alignment\n\t\toutput, these are indicated as lower case. For Beta\n\t\tStrands, the default range spans the end residue and the\n\t\tadjacent loop residue, since sequence conservation often\n\t\textends beyond the actual H-bonded Beta Strand.", "prompt": "Strand terminal positions: number of residues inside strand to be treated as terminal (-strandendin)", "name": "strandendin", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -strandendin=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -strandendin=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option (together with the -strandendin\n\t\toption) specify the range of structure termini for the\n\t\tintermediate penalties. In the alignment output, these are\n\t\tindicated as lower case. For Beta Strands, the default\n\t\trange spans the end residue and the adjacent loop residue,\n\t\tsince sequence conservation often extends beyond the actual\n\t\tH-bonded Beta Strand.", "prompt": "Strand terminal positions: number of residues outside strand to be treated as terminal (-strandendout)", "name": "strandendout", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -strandendout=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -strandendout=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option lets you choose whether or not\n\t\tto include the masks in the CLUSTAL W output\n\t\talignments. Showing both is useful for understanding how\n\t\tthe masks work. The secondary structure information is\n\t\titself very useful in judging the alignment quality and in\n\t\tseeing how residue conservation patterns vary with\n\t\tsecondary structure.", "prompt": "Output in alignment (-secstrout)", "name": "secstrout", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -secstrout=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -secstrout=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output parameters", "name": "outputparam", "children": [{"comment": null, "prompt": "Output format (-output)", "name": "outputformat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -output=\" + str( value) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -output=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output sequence numbers in the output file (for clustalw output only) (-seqnos)", "name": "seqnos", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -seqnos=on\")[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -seqnos=on\" : \"\""}, "command": false, "precond": {"python": "outputformat is None", "perl": "not defined $outputformat"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Result order (-outorder)", "name": "outorder", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -outorder=\" + str(value))[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -outorder=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequence alignment file name (-outfile)", "name": "outfile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -outfile=\" + str( value))[ value is not None ]", "perl": "(defined $value and $value ne $vdef ) ? \" -outfile=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "clustalw -profile"}, "documentation_links": [], "type": "program", "name": "clustalw-profile"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab60"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "Sequentially add profile2 sequences to profile1 alignment", "title": "Clustalw: Sequence to Profile alignments", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output parameters", "name": "outputparam", "children": [{"comment": "In the conservation line output in the clustal format alignment file, three characters are used:'*' indicates positions which have a single, fully conserved residue.':' indicates that one of the following 'strong' groups is fully conserved (STA,NEQK,NHQK,NDEQ,QHRK,MILV,MILF,HY,FYW).'.' indicates that one of the following 'weaker' groups is fully conserved (CSA,ATV,SAG,STNK,STPA,SGND,SNDEQK,NDEQHK,NEQHRK,FVLIM,HFY).These are all the positively scoring groups that occur in the Gonnet Pam250\nmatrix. The strong and weak groups are defined as strong score >0.5 and weak\nscore =<0.5 respectively.", "prompt": "Alignment file", "name": "clustalaligfile", "simple": null, "filenames": {"python": "(\"*.aln\", str(outfile))[outfile is not None]", "perl": "(defined $outfile)? \"$outfile\":\"*.aln\""}, "precond": {"python": "outputformat is None", "perl": "not defined $outputformat"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["CLUSTAL"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment file", "name": "aligfile", "simple": null, "filenames": {"python": "(((\"*.nxs\",\"*.phy\")[outputformat == 'PHYLIPI'],\"*.msf\")[outputformat == 'GCG'],str(outfile))[outfile is not None]", "perl": "(defined $outfile)? ( $outputformat eq 'GCG' )? ( $outputformat eq 'PHYLIPI' )?\"$outfile\":\"*.msf\" : \"*.phy\" : \"*.nxs\""}, "precond": {"python": "outputformat in [ \"NEXUS\", \"GCG\", \"PHYLIPI\" ]", "perl": "$outputformat =~ /^(NEXUS|GCG|PHYLIPI)$/"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "outputformat"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Sequences file", "name": "seqfile", "simple": null, "filenames": {"python": "(((\"*.fasta\",\"*.pir\")[outputformat == 'PIR'],\"*.gde\")[outputformat == 'GDE'],str(outfile))[outfile is not None]", "perl": "(defined $outfile)? ( $outputformat eq 'GDE' )? ( $outputformat eq 'PIR' )?\"$outfile\":\"*.gde\" : \"*.pir\" : \"*.fasta\""}, "precond": {"python": "outputformat in [ 'GDE', 'PIR', 'FASTA' ]", "perl": "$outputformat =~ /^(GDE|PIR|FASTA)$/"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "outputformat"}], "edam_types": [], "card": "3,n"}}, {"comment": null, "prompt": "Tree file", "name": "dndfile", "simple": null, "filenames": {"python": "\"*.dnd\"", "perl": "\"*.dnd\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "By PROFILE ALIGNMENT, we mean alignment using existing alignments. Profile alignments allow you to store alignments of your favorite sequences and add new sequences to them in small bunches at a time. (e.g. an alignment output file from CLUSTAL W). One or both sets of input sequences may include secondary structure assignments or gap penalty masks to guide the alignment.Merge 2 alignments by profile alignment", "precond": null, "prompt": "Profile Alignments parameters", "name": "profile", "children": [{"comment": null, "prompt": "Profile 1", "name": "profile1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -profile1=\" + str( value ) )[value is not None]", "perl": "(defined $value) ? \" -profile1=$value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["CLUSTAL"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Profile 2", "name": "profile2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -profile2=\" + str( value ) )[value is not None]", "perl": "(defined $value) ? \" -profile2=$value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "General settings", "name": "general_settings", "children": [{"comment": null, "prompt": "Protein or DNA (-type)", "name": "typeseq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -type=\"+str(value))[value is not None]", "perl": "(defined $value) ? \" -type=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "slow: by dynamic programming (slow but accurate)fast: method of Wilbur and Lipman (extremely fast but approximate)", "prompt": "Toggle Slow/Fast pairwise alignments (-quicktree)", "name": "quicktree", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -quicktree\")[ value == \"fast\"]", "perl": "($value eq \"fast\") ? \" -quicktree\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "These similarity scores are calculated from fast, approximate, global alignments, which are controlled by 4 parameters. 2 techniques are used to make these alignments very fast: 1) only exactly matching fragments (k-tuples) are considered; 2) only the 'best' diagonals (the ones with most k-tuple matches) are used.", "precond": {"python": "quicktree == \"fast\"", "perl": "$quicktree eq \"fast\""}, "prompt": "Fast Pairwise Alignments parameters", "name": "fastpw", "children": [{"comment": "K-TUPLE SIZE: This is the size of exactly matching fragment that is used. INCREASE for speed (max= 2 for proteins; 4 for DNA), DECREASE for sensitivity. For longer sequences (e.g. >1000 residues) you may need to increase the default.", "prompt": "Word size (-ktuple)", "name": "ktuple", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -ktuple=\" + str( value ) )[value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -ktuple=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The number of k-tuple matches on each diagonal (in an imaginary dot-matrix plot) is calculated. Only the best ones (with most matches) are used in the alignment. This parameter specifies how many. Decrease for speed; increase for sensitivity.", "prompt": "Number of best diagonals (-topdiags)", "name": "topdiags", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -topdiags=\" + str( value ))[value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -topdiags=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "WINDOW SIZE: This is the number of diagonals around each of the 'best' diagonals that will be used. Decrease for speed; increase for sensitivity", "prompt": "Window around best diags (-window)", "name": "window", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -window=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -window=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is a penalty for each gap in the fast alignments. It has little affect on the speed or sensitivity except for extreme values.", "prompt": "Gap penalty (-pairgap)", "name": "pairgap", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -pairgap=\" + str( value ))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -pairgap=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Percent or absolute score ? (-score)", "name": "score", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -score=\" +str( value ) )[value is not None and value !=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -score=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "These parameters do not have any affect on the speed of the alignments. They are used to give initial alignments which are then rescored to give percent identity scores. These % scores are the ones which are displayed on the screen. The scores are converted to distances for the trees.", "precond": {"python": "quicktree == \"slow\"", "perl": "$quicktree eq \"slow\""}, "prompt": "Slow Pairwise Alignments parameters", "name": "slowpw", "children": [{"comment": null, "prompt": "Gap opening penalty (-pwgapopen)", "name": "pwgapopen", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pwgapopen=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -pwgapopen=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Gap extension penalty (-pwgapext)", "name": "pwgapext", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pwgapext=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -pwgapext=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "typeseq == \"protein\"", "perl": "$typeseq eq \"protein\""}, "prompt": "Protein parameters", "name": "slowpw_prot", "children": [{"comment": "The scoring table which describes the similarity of each amino acid to each other. For DNA, an identity matrix is used.BLOSUM (Henikoff). These matrices appear to be the best available for carrying out data base similarity (homology searches). The matrices used are: Blosum80, 62, 40 and 30.The Gonnet Pam 250 matrix has been reported as the best single matrix for alignment, if you only choose one matrix. Our experience with profile database searches is that the Gonnet series is unambiguously superior to the Blosum series at high divergence. However, we did not get the series to perform systematically better than the Blosum series in Clustal W (communication of the authors).PAM (Dayhoff). These have been extremely widely used since the late '70s. We use the PAM 120, 160, 250 and 350 matrices.", "prompt": "Protein weight matrix (-pwmatrix)", "name": "pwmatrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pwmatrix=\" + str(value) )[value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -pwmatrix=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "typeseq == \"dna\"", "perl": "$typeseq eq \"dna\""}, "prompt": "DNA parameters", "name": "slowpw_dna", "children": [{"comment": "For DNA, a single matrix (not a series) is used. Two hard-coded matrices are available:1) IUB. This is the default scoring matrix used by BESTFIT for the comparison of nucleic acid sequences. X's and N's are treated as matches to any IUB ambiguity symbol. All matches score 1.9; all mismatches for IUB symbols score 0.2) CLUSTALW(1.6). The previous system used by ClustalW, in which matches score 1.0 and mismatches score 0. All matches for IUB symbols also score 0.", "prompt": "DNA weight matrix (-pwdnamatrix)", "name": "pwdnamatrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pwdnamatrix=\" + str(value) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -pwdnamatrix=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": "These options, when doing a profile alignment, allow you to set 2D structure parameters. If a solved structure is available, it can be used to guide the alignment by raising gap penalties within secondary structure elements, so that gaps will preferentially be inserted into unstructured surface loops. Alternatively, a user-specified gap penalty mask can be supplied directly.A gap penalty mask is a series of numbers between 1 and 9, one per position in the alignment. Each number specifies how much the gap opening penalty is to be raised at that position (raised by multiplying the basic gap opening penalty by the number) i.e. a mask figure of 1 at a position means no change in gap opening penalty; a figure of 4 means that the gap opening penalty is four times greater at that position, making gaps 4 times harder to open.Gap penalty masks is to be supplied with the input sequences. The masks work by raising gap penalties in specified regions (typically secondary structure elements) so that gaps are preferentially opened in the less well conserved regions (typically surface loops).CLUSTAL W can read the masks from SWISS-PROT, CLUSTAL or GDE format input files. For many 3-D protein structures, secondary structure information is recorded in the feature tables of SWISS-PROT database entries. You should always check that the assignments are correct - some are quite inaccurate. CLUSTAL W looks for SWISS-PROT HELIX and STRAND assignments e.g.FT HELIX 100 115FT HELIX 100 115The structure and penalty masks can also be read from CLUSTAL alignment format as comment lines beginning !SS_ or GM_ e.g.!SS_HBA_HUMA ..aaaAAAAAAAAAAaaa.aaaAAAAAAAAAAaaaaaaAaaa.........aaaAAAAAA!GM_HBA_HUMA 112224444444444222122244444444442222224222111111111222444444HBA_HUMA VLSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKNote that the mask itself is a set of numbers between 1 and 9 each of which is assigned to the residue(s) in the same column below. In GDE flat file format, the masks are specified as text and the names must begin with SS_ or GM_. Either a structure or penalty mask or both may be used. If both are included in an alignment, the user will be asked which is to be used.", "precond": null, "prompt": "Structure Alignments parameters", "name": "structure", "children": [{"comment": "This option controls whether the input secondary structure information or gap penalty masks will be used.", "prompt": "Do not use secondary structure-gap penalty mask for profile 1 (-nosecstr1)", "name": "nosecstr1", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -nosecstr1\")[ value ]", "perl": "($value) ? \" -nosecstr1\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option controls whether the input secondary structure information or gap penalty masks will be used.", "prompt": "Do not use secondary structure-gap penalty mask for profile 2 (-nosecstr2)", "name": "nosecstr2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -nosecstr2\")[ value ]", "perl": "($value) ? \" -nosecstr2\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option provides the value for raising the gap penalty at core Alpha Helical (A) residues. In CLUSTAL format, capital residues denote the A and B core structure notation. The basic gap penalties are multiplied by the amount specified.", "prompt": "Helix gap penalty (-helixgap)", "name": "helixgap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -helixgap=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -helixgap=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option provides the value for raising the gap penalty at Beta Strand (B) residues. In CLUSTAL format, capital residues denote the A and B core structure notation. The basic gap penalties are multiplied by the amount specified.", "prompt": "Strand gap penalty (-strandgap)", "name": "strandgap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -strandgap=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -strandgap=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option provides the value for the gap penalty in Loops. By default this penalty is not raised. In CLUSTAL format, loops are specified by . in the secondary structure notation.", "prompt": "Loop gap penalty (-loopgap)", "name": "loopgap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -loopgap=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -loopgap=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option provides the value for setting the gap penalty at the ends of secondary structures. Ends of secondary structures are observed to grow and-or shrink in related structures. Therefore by default these are given intermediate values, lower than the core penalties. All secondary structure read in as lower case in CLUSTAL format gets the reduced terminal penalty.", "prompt": "Secondary structure terminal penalty (-terminalgap)", "name": "terminalgap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -terminalgap=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -terminalgap=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option (together with the -helixendin) specify the range of structure termini for the intermediate penalties. In the alignment output, these are indicated as lower case. For Alpha Helices, by default, the range spans the end helical turn.", "prompt": "Helix terminal positions: number of residues inside helix to be treated as terminal (-helixendin)", "name": "helixendin", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -helixendin=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -helixendin=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option (together with the -helixendin) specify the range of structure termini for the intermediate penalties. In the alignment output, these are indicated as lower case. For Alpha Helices, by default, the range spans the end helical turn.", "prompt": "Helix terminal positions: number of residues outside helix to be treated as terminal (-helixendout)", "name": "helixendout", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -helixendout=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -helixendout=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option (together with the -strandendout option) specify the range of structure termini for the intermediate penalties. In the alignment output, these are indicated as lower case. For Beta Strands, the default range spans the end residue and the adjacent loop residue, since sequence conservation often extends beyond the actual H-bonded Beta Strand.", "prompt": "Strand terminal positions: number of residues inside strand to be treated as terminal (-strandendin)", "name": "strandendin", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -strandendin=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -strandendin=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option (together with the -strandendin option) specify the range of structure termini for the intermediate penalties. In the alignment output, these are indicated as lower case. For Beta Strands, the default range spans the end residue and the adjacent loop residue, since sequence conservation often extends beyond the actual H-bonded Beta Strand.", "prompt": "Strand terminal positions: number of residues outside strand to be treated as terminal (-strandendout)", "name": "strandendout", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -strandendout=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -strandendout=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option lets you choose whether or not to include the masks in the CLUSTAL W output alignments. Showing both is useful for understanding how the masks work. The secondary structure information is itself very useful in judging the alignment quality and in seeing how residue conservation patterns vary with secondary structure.", "prompt": "Output in alignment (-secstrout)", "name": "secstrout", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -secstrout=\" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -secstrout=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output parameters", "name": "outputparam", "children": [{"comment": null, "prompt": "Output format (-output)", "name": "outputformat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -output=\" + str( value) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -output=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output sequence numbers in the output file (for clustalw output only) (-seqnos)", "name": "seqnos", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -seqnos=on\")[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -seqnos=on\" : \"\""}, "command": false, "precond": {"python": "outputformat is None", "perl": "not defined $outputformat"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Result order (-outorder)", "name": "outorder", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -outorder=\" + str(value))[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -outorder=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequence alignment file name(-outfile)", "name": "outfile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -outfile=\" + str( value))[ value is not None ]", "perl": "(defined $value) ? \" -outfile=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "clustalw -sequences"}, "documentation_links": [], "type": "program", "name": "clustalw-sequence"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab61"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:codon_usage"}], "description": "Codon usage table comparison", "title": "codcmp", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "CodcmpReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "First codon usage file", "prompt": "first option", "name": "e_first", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -first=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Second codon usage file for comparison", "prompt": "second option", "name": "e_second", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -second=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "codcmp"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/codcmp.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "codcmp"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab62"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:edit"}], "description": "Extract CDS, mRNA and translations from feature tables", "title": "coderet", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "CoderetReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "cdsoutseq_out option", "name": "e_cdsoutseq_out", "simple": null, "filenames": {"python": "e_cdsoutseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_cdsoutseq"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "mrnaoutseq_out option", "name": "e_mrnaoutseq_out", "simple": null, "filenames": {"python": "e_mrnaoutseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_mrnaoutseq"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "translationoutseq_out option", "name": "e_translationoutseq_out", "simple": null, "filenames": {"python": "e_translationoutseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_translationoutseq"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "restoutseq_out option", "name": "e_restoutseq_out", "simple": null, "filenames": {"python": "e_restoutseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_restoutseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "coderet was limited to EMBL/GenBank feature tables", "prompt": "seqall option", "name": "e_seqall", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -seqall=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "GENBANK"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output sequence file (e_cdsoutseq)", "name": "e_cdsoutseq", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -cdsoutseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_cdsoutseq", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output sequence file (e_mrnaoutseq)", "name": "e_mrnaoutseq", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -mrnaoutseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_mrnaoutseq", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output sequence file (e_translationoutseq)", "name": "e_translationoutseq", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -translationoutseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_translationoutseq", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output sequence file (e_restoutseq)", "name": "e_restoutseq", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\" , \" -restoutseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_restoutseq", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "coderet"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/coderet.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "coderet"}, {"comment": null, "homepage_links": ["http://codonw.sourceforge.net/"], "_id": {"$oid": "51434da293546d52388cab63"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:codon_usage"}], "description": "Correspondence Analysis of Codon Usage", "title": "codonw", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Results files", "name": "results_files", "simple": null, "filenames": {"python": "\"*.bulk\"", "perl": "\"*.bulk\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "precond": {"python": "COA_option", "perl": "$COA_option"}, "prompt": "Advanced COA options", "name": "coa_advanced", "children": [{"comment": null, "prompt": "Coa file", "name": "coa_files", "simple": null, "filenames": {"python": "\"coa_raw\"", "perl": "\"coa_raw\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "codonw", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"codonw -silent -nomenu -nowarn\"", "perl": "\"codonw -silent -nomenu -nowarn\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "outfiles", "ctrl": null, "simple": null, "argpos": "2000", "format": {"python": "\" \" + str(seqfile) + \".indices \" + str(seqfile) + \".bulk\"", "perl": "\" $seqfile.indices $seqfile.bulk\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequences File", "name": "seqfile", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Defaults settings", "name": "defaults", "children": [{"comment": null, "prompt": "Genetic codes (-code)", "name": "gc", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\"  , \" -code \" + str(value) )[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -code $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Fop/CBI codons (-f_type)", "name": "fop_values", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\"  , \" -f_type \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -f_type $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "CAI fitness values (-c_type)", "name": "cai_values", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\"  , \" -c_type \" + str(value) )[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -c_type $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output Computer readable (-machine)", "name": "output_type", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\"  , \" -machine\" )[ value ]", "perl": "($value) ? \" -machine\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Concatenate all genes instead of individual genes (-totals)", "name": "genes", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\"  , \" -totals\" )[ value ]", "perl": "($value) ? \" -totals\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Codon usage indices", "name": "CU_options", "children": [{"comment": null, "prompt": "All indices (-all_indices)", "name": "all_indices", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -all_indices\" )[ value ]", "perl": "($value) ? \" -all_indices\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "not all_indices", "perl": "not $all_indices"}, "prompt": "Special indices", "name": "sp_indices", "children": [{"comment": null, "prompt": "Codon Adaptation Index (-cai)", "name": "CAI", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -cai\" )[ value ]", "perl": "($value) ? \" -cai\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "User input file of CAI values (-cai_file)", "name": "cai_file", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\"  , \" -cai_file \" + str(value) )[value is not None]", "perl": "(defined $value) ? \" -cai_file $value\" : \"\""}, "command": false, "precond": {"python": "CAI", "perl": "$CAI"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "CaiValues", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Frequency of OPtimal codons index (-fop)", "name": "Fop", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -fop\" )[ value ]", "perl": "($value) ? \" -fop\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "User input file of Fop values (-fop_file)", "name": "fop_file", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\"  , \" -fop_file \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -fop_file $value\" : \"\""}, "command": false, "precond": {"python": "Fop", "perl": "$Fop"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "FopValues", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Codon bias index (-cbi)", "name": "CBI", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -cbi\" )[ value ]", "perl": "($value) ? \" -cbi\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "User input file of CBI values (-cbi_file)", "name": "cbi_file", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\"  , \" -cbi_file \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -cbi_file $value\" : \"\""}, "command": false, "precond": {"python": "CBI", "perl": "$CBI"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "CbiValues", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Effective Number of Codons (-enc)", "name": "ENc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -enc\" )[ value ]", "perl": "($value) ? \" -enc\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "GC content of gene (-gc)", "name": "GC", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -gc\" )[ value ]", "perl": "($value) ? \" -gc\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "GC of silent 3rd codon posit. (-gc3s)", "name": "GC3s", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -gc3s\" )[ value ]", "perl": "($value) ? \" -gc3s\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Base composition at synonymous third codon positions (-sil_base)", "name": "silent_bc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -sil_base\" )[ value ]", "perl": "($value) ? \" -sil_base\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of synonymous codons (-L_sym)", "name": "L_sym", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -L_sym\" )[ value ]", "perl": "( $value) ? \" -L_sym\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Total Number of synonymous and non-synonymous codons (-L_aa)", "name": "L_aa", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -L_aa\" )[ value ]", "perl": "($value) ? \" -L_aa\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Amino acid indices", "name": "AA_options", "children": [{"comment": null, "prompt": "Hydrophobicity of protein (-hyd)", "name": "Hydro", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "( \"\"  , \" -hyd\" )[ value ]", "perl": "($value) ? \" -hyd\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Aromaticity of protein (-aro)", "name": "Aromo", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "( \"\"  , \" -aro\" )[ value ]", "perl": "($value) ? \" -aro\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Bulk output option", "name": "bulk_output_option", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "( \"\"  , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Correspondence analysis options (available for several sequences)", "name": "COA_option", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" %s\" %value)[value is not None]", "perl": "(defined $value) ? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "COA_option", "perl": "$COA_option"}, "prompt": "Advanced COA options", "name": "coa_advanced", "children": [{"comment": null, "prompt": "Generate detailed (expert) statistics on COA (-coa_expert)", "name": "coa_expert", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\"  , \" -coa_expert\" )[ value ]", "perl": "($value) ? \" -coa_expert\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Select number of axis to record (-coa_axes)", "name": "coa_axes", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(  \"\" , \"  -coa_axes \" +  str(value) )[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -coa_axes $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Values can be whole numbers or a percentage (5 or 10%).", "prompt": "Select number of genes to use to identify optimal codons (-coa_num)", "name": "coa_num", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\"  , \" -coa_num \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -coa_num $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.4.4", "references": [], "source_links": ["http://sourceforge.net/projects/codonw/files/"], "env": [], "authors": "J. Peden", "command": {"path": null, "value": null}, "documentation_links": ["http://codonw.sourceforge.net/Readme.html", "http://codonw.sourceforge.net/Tutorial.html"], "type": "program", "name": "codonw"}, {"comment": null, "homepage_links": ["http://www.daimi.au.dk/~ocaprani/ComAlign/ComAlign.html"], "_id": {"$oid": "51434da293546d52388cab64"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "is a program, that given a number of sequences generates a number of heuristic alignments and combines these best possible.", "title": "ComAlign", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": []}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "the sequences must be in the GenAl format", "prompt": "Sequences File (-f)", "name": "seq", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -f\" + str(value)", "perl": "\" -f$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["GenAl"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Random seed number (-s)", "name": "seed", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -s\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -s$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of sequences that are to be aligned (-n)", "name": "seqnb", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -n\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -n$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "On each iteration a new alignment is added to the pool of alignments ComAlign is working on", "prompt": "Number of iterations (-i)", "name": "iterations", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -i\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -i$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Score: ComAlign records the time it took to find a solution as good as this score (-l)", "name": "score", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -l\" + str(value) )[ value is not None]", "perl": "(defined $value) ? \" -l$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "ComAlign marks the best solution found after this number of 1/100 seconds (-t)", "name": "time", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -t\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -t$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Makes ComAlign terminate if the score hasn't changed within the last this number of iterations (-c)", "name": "last_iterations", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -c\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -c$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Print the best found alignment on termination (-a)", "name": "print_best", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -a\" )[ value ]", "perl": "($value) ? \" -a\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": ["http://www.daimi.au.dk/~ocaprani/ComAlign/programs/"], "env": [], "authors": "O. Caprani, K. Bucka-Lassen", "command": {"path": null, "value": "ComAlign"}, "documentation_links": ["http://www.daimi.au.dk/~ocaprani/ComAlign/HowTo.html"], "type": "program", "name": "comalign"}, {"comment": null, "homepage_links": ["http://www.daimi.au.dk/~cstorm/combat/"], "_id": {"$oid": "51434da293546d52388cab65"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise"}], "description": "Comparison of coding DNA", "title": "COMBAT", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "output_aln", "simple": null, "filenames": {"python": "\"combat.aln\"", "perl": "\"combat.aln\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment file", "name": "combat_out", "simple": null, "filenames": {"python": "\"combat.out\"", "perl": "\"combat.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Distance file", "name": "distance_files", "simple": null, "filenames": {"python": "\"distance.out\"", "perl": "\"distance.out\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Postscript file", "name": "ps_files", "simple": null, "filenames": {"python": "\"combat.ps\"", "perl": "\"combat.ps\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "combat", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"cat \" + str(sequence2) + \" \" + str(sequence1) + \" >> sequence.data && combat combat.params > distance.out && combine sequence.data combat.aln\"", "perl": "\"cat $sequence1 $sequence2 >> sequence && combat combat.params >distance.out && combine sequence combat.aln\""}, "command": true, "precond": {"python": "sequence1 is not None and sequence2 is not None", "perl": "defined $sequence1 and defined $sequence2"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sequences must describe an integer number of codon, i.e. the length of sequence must be a multiple of three.", "prompt": "First Sequence", "name": "sequence1", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "'>inputfile\\n\"sequence.data\"\\n'", "perl": "\">inputfile\\n\\\"sequence.data\\\"\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": "combat.params"}, {"comment": "Sequences must describe an integer number of codon, i.e. the length of sequence must be a multiple of three.", "prompt": "Second Sequence", "name": "sequence2", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Amino-acid distance matrix", "name": "protein_distance_matrix", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\">distance matrix\\n\\\"", "perl": "\">distance matrix\\n\\\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "combat.params"}, {"comment": null, "prompt": "Nucleotid distance matrix", "name": "nucleotide_distance_matrix", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\">nucleotide matrix\\n\\\"", "perl": "\">nucleotide matrix\\n\\\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "combat.params"}, {"comment": null, "prompt": "Gap open cost for protein", "name": "protein_gap_open", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\">gap functions\\nprotein:        \" + str(value)", "perl": "\">gap functions\\\\nprotein:        $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "combat.params"}, {"comment": null, "prompt": "Gap extension cost for protein", "name": "protein_gap_ext", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" + \" + str(value) + \"*k\\n\"", "perl": "\" + $value*k\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "combat.params"}, {"comment": null, "prompt": "Gap open cost for dna", "name": "dna_gap_open", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\"dna:        \" + str(value)", "perl": "\"dna:        $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "combat.params"}, {"comment": null, "prompt": "Gap extension cost for dna", "name": "dna_gap_ext", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" + \" + str(value) + \"*k\"", "perl": "\" + $value*k\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "combat.params"}, {"comment": null, "prompt": null, "name": "gnuplot_call", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\" && gnuplot <gnuplot.params\"", "perl": "\" && gnuplot <gnuplot.params\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "gnuplot_commands", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "'set xtics 12,5.,1000\\nset ytics 12,5.,1000\\nset grid\\nset terminal postscript\\nset output \"combat.ps\"\\nplot \"combat.aln\" with lines\\n'", "perl": "\"set xtics 12,5.,1000\\nset ytics 12,5.,1000\\nset grid\\nset terminal postscript\\nset output \\\"combat.ps\\\"\\nplot \\\"combat.aln\\\" with lines\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "gnuplot.params"}]}, "version": "1.0", "references": [{"url": null, "doi": null, "label": "Christian N. S. Pedersen, Rune B. Lyngso and Jotun Hein. Comparison of coding DNA in Proceedings of the 9th Annual Symposium of Combinatorial Pattern Matching (CPM), 1998."}], "source_links": ["http://www.daimi.au.dk/~cstorm/combat/"], "env": [], "authors": "Pedersen, Lyngso,Hein", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "combat"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab66"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:composition"}, {"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Calculate the composition of unique words in sequences", "title": "compseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "CompseqReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "This is a file previously produced by 'compseq' that can be used to set the expected frequencies of words in this analysis. \n  The word size in the current run must be the same as the one in  this results file. Obviously, you should use a file produced from  protein sequences if you are counting protein sequence word  frequencies, and you must use one made from nucleotide frequencies  if you are analysing a nucleotide sequence.", "prompt": "Program compseq output file (optional)", "name": "e_infile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -infile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "CompseqReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "This is the size of word (n-mer) to count. \n Thus if you want to count codon frequencies for a nucleotide  sequence, you should enter 3 here.", "prompt": "Word size to consider (e.g. 2=dimer) (value greater than or equal to 1)", "name": "e_word", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -word=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "The normal behaviour of 'compseq' is to count the frequencies of all words that occur by moving a window of length  'word' up by one each time. \n  This option allows you to move the window up by the length of the  word each time, skipping over the intervening words. \n  You can count only those words that occur in a single frame of the  word by setting this value to a number other than zero. \n  If you set it to 1 it will only count the words in frame 1, 2 will  only count the words in frame 2 and so on.", "prompt": "Frame of word to look at (0=all frames) (value greater than or equal to 0)", "name": "e_frame", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -frame=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The amino acid code B represents Asparagine or Aspartic acid and the code Z represents Glutamine or Glutamic acid. \n  These are not commonly used codes and you may wish not to count  words containing them, just noting them in the count of 'Other'  words.", "prompt": "Ignore the amino acids b and z and just count them as 'other'", "name": "e_ignorebz", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\" -noignorebz\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be true if you also wish to also count words in the reverse complement of a nucleic sequence.", "prompt": "Count words in the forward and reverse sense", "name": "e_reverse", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -reverse\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set true then the expected frequencies of words are calculated from the observed frequency of single bases or  residues in the sequences. \n  If you are reporting a word size of 1 (single bases or residues)  then there is no point in using this option because the calculated  expected frequency will be equal to the observed frequency. \n  Calculating the expected frequencies like this will give an  approximation of the expected frequencies that you might get by  using an input file of frequencies produced by a previous run of  this program. If an input file of expected word frequencies has  been specified then the values from that file will be used instead  of this calculation of expected frequency from the sequence, even  if 'calcfreq' is set to be true.", "prompt": "Calculate expected frequency from sequence", "name": "e_calcfreq", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -calcfreq\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "This is the results file.", "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "You can make the output results file much smaller if you do not display the words with a zero count.", "prompt": "Display the words that have a frequency of zero", "name": "e_zerocount", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\" -nozerocount\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "compseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/compseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "compseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab67"}, "classifications": [{"type": "mobyle1", "classification": "sequence:formatter"}], "description": "Concatenation of sequences from two fasta files with exactly the same sequence identifiers", "title": "concatfasta", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "input", "children": [{"comment": null, "prompt": "Sequence(s) file", "name": "outfile", "simple": null, "filenames": {"python": "\"concatfasta.out\"", "perl": "\"concatfasta.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1,n"}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "input", "children": [{"comment": null, "prompt": "Fasta file", "name": "firstFile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -f \" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "Fasta file", "name": "scdFile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -s \" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}]}, "version": "1.0", "references": [], "source_links": [], "env": [], "authors": "Maufrais Corinne", "command": {"path": null, "value": "concatfasta"}, "documentation_links": [], "type": "program", "name": "concatfasta"}, {"comment": "CONSENSE reads a  file of  computer-readable trees\n\tand prints out (and may also write out onto a file) a consensus tree.", "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab68"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:tree_analyser"}], "description": "Consensus tree program", "title": "consense", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Consense output file", "name": "outfile", "simple": null, "filenames": {"python": "\"consense.outfile\"", "perl": "\"consense.outfile\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Consense tree file", "name": "treefile", "simple": null, "filenames": {"python": "\"consense.outtree\"", "perl": "\"consense.outtree\""}, "precond": {"python": "print_treefile", "perl": "$print_treefile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "consense", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"consense <consense.params\"", "perl": "\"consense <consense.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Input is a tree file which contains a series of trees in the Newick standard form", "prompt": "Series of trees in file (intree)", "name": "infile", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"ln -s \"+ str( infile )+ \" intree &&\"", "perl": "\"ln -s $infile intree && \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Consensus type", "name": "type", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": "Tells the program to print a semi-graphical picture of the tree in the outfile.", "prompt": "Print out tree (3)", "name": "print_tree", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"3\\n\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \"3\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": "Tells the program to save the tree in a treefile (a standard representation of trees where the tree is specified by a nested pairs of parentheses, enclosing names and separated by commas).", "prompt": "Write out trees onto tree file (4)", "name": "print_treefile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"4\\n\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \"4\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "prompt": "Print out the data at start of run (1)", "name": "printdata", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"1\\n\" )[ value ]", "perl": "($value) ? \"1\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}]}, {"comment": null, "precond": null, "prompt": "Other options", "name": "other_options", "children": [{"comment": null, "prompt": "Outgroup species (O)", "name": "outgroup", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"O\\n\"+ str( value ) +\"\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"O\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "prompt": "Trees to be treated as rooted (R)", "name": "rooted", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"R\\n\" )[ value ]", "perl": "($value) ? \"R\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}]}, {"comment": null, "prompt": null, "name": "confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "prompt": null, "name": "terminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"T\\n\"", "perl": "\"T\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/phylip/doc/consense.html"], "type": "program", "name": "consense"}, {"comment": null, "homepage_links": ["http://gzhertz.home.comcast.net/~gzhertz/"], "_id": {"$oid": "51434da293546d52388cab69"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:pattern"}, {"type": "mobyle1", "classification": "sequence:nucleic:pattern"}], "description": "Identification of consensus patterns in unaligned DNA and protein sequences", "title": "CONSENSUS", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Results file", "name": "outfile", "simple": null, "filenames": {"python": "str(prog) + \".results\"", "perl": "\"$prog.results\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "wcons file", "name": "consensus_format", "simple": null, "filenames": {"python": "\"*.wcons\"", "perl": "\"*.wcons\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Program to run", "name": "prog", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"fasta-consensus <\" + str(sequence) + \" >\" + str(sequence) + \".wcons  ; \" + str(prog)", "perl": "\"fasta-consensus <$sequence >$sequence.wcons ; $prog \""}, "command": true, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequences file (-f)", "name": "sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -f \" + str(sequence) + \".wcons\"", "perl": "\" -f $sequence.wcons\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Required parameter", "name": "required", "children": [{"comment": null, "prompt": "Width of pattern for consensus program (-L)", "name": "width", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -L\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -L$value\" : \"\""}, "command": false, "precond": {"python": "prog == \"consensus\"", "perl": "$prog eq \"consensus\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A range of values should be tried.  For example,\n       try values of 0.5, 1, 1.5, and 2.  The overall best alignment is\n       the one having the smallest e-value.", "prompt": "Number of standard deviations to lower the information content at each position before identifying information peaks for wconsensus program (-s)", "name": "standard_deviation", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -s\" + str(value)", "perl": "\" -s$value\""}, "command": false, "precond": {"python": "prog == \"wconsensus\"", "perl": "$prog eq \"wconsensus\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Basic options", "name": "basic_options", "children": [{"comment": null, "precond": null, "prompt": "Alphabet options", "name": "alphabet_options", "children": [{"comment": null, "prompt": "Choose an alphabet", "name": "alphabet", "ctrl": {"python": "(value == \"users\" and ascii_alphabet is not None) or (value in (\"prot-alphabet\",\"dna-alphabet\", \"null\") )", "perl": "($value eq \"users\" and not defined $ascii_alphabet) or ($value eq \"prot-alphabet\" or $value eq \"dna-alphabet\" or $value eq \"null\")"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -a", "perl": "($value eq \"dna-alphabet\" or $value eq \"prot-alphabet\" )? \"\" : \" -a"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Each line contains a letter (a symbol in the alphabet) followed by an optional normalization number (default: 1.0). The normalization is based on the relative prior probabilities of the letters. For nucleic acids, this might be the genomic frequency of the bases; however, if the -d option is not used, the frequencies observed in your own sequence data are used. In nucleic acid alphabets, a letter and its complement appear on the same line, separated by a colon (a letter can be its own complement, e.g. when using a dimer alphabet).Complementary letters may use the same normalization number. Only the standard 26 letters are permissible; however, when the -CS option is used, the alphabet is case sensitive so that a total of 52 different characters are possible.POSSIBLE LINE FORMATS WITHOUT COMPLEMENTARY LETTERS:letterletter normalizationPOSSIBLE LINE FORMATS WITH COMPLEMENTARY LETTERS:letter:complementletter:complement normalizationletter:complement normalization:complement's_normalization", "prompt": "User Alphabet file (-a)", "name": "ascii_alphabet", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -a \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -a $value\" : \"\""}, "command": false, "precond": {"python": "alphabet == \"users\"", "perl": "$alphabet eq \"users\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "ConsensusAlphabet", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default, the program uses the frequencies observed in your own sequence data for the prior probabilities of the letters. However, if the -d option is set, the prior probabilities designated by the alphabet options. If the -d option is not set, they are still used to determine the sequence alphabet, but any prior probability information is ignored.", "prompt": "Use the designated prior probabilities of the letters to override the observed frequencies (-d)", "name": "prior", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -d\" )[ value ]", "perl": "($value) ? \" -d\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Complement of nucleic acid sequences (-c)", "name": "complement", "ctrl": {"python": "(value == \"3\" and prog == \"consensus\") or (value == \"0\" or value == \"1\" or value == \"2\" )", "perl": "($value eq \"3\" and $prog eq \"consensus\") or ($value eq \"0\" or $value eq \"1\" or $value eq \"2\" )"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -c\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -c$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "-n integer: repeat the matrix building cycle a maximum of \"integer\"\n\t      times and allow each sequence to contribute zero or more words\n\t      per matrix.-N integer: repeat the matrix building cycle a maximum of \"integer\"\n\t      times and allow each sequence to contribute one or more words\n\t      per matrix", "prompt": "How many words per matrix for each sequence to contribute", "name": "max_cycle", "ctrl": {"python": "(value == \"-n\" or value ==\"-N\") and max_cycle_nb is not None", "perl": "($value eq \"-n\" or $value eq \"-N\") and defined($max_cycle_nb)"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) + str(max_cycle_nb) )[ value != vdef ]", "perl": "($value ne $vdef) ? \" $value$max_cycle_nb\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum repeat of the matrix building cycle for -n or -N", "name": "max_cycle_nb", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced options", "name": "advenced_options", "children": [{"comment": null, "prompt": "Maximum number of matrices to save between cycles of the program (-q)", "name": "queue", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -q \" + str(value) )[ value is not None ]", "perl": "(defined $value ) ? \" -q $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The minimum distance between the starting points of words within the same matrix pattern; must be a positive integer; can only be used when the \"-n\" or \"-N\" option is also used.For wconsensus, the default value is 1.For consensus, this number is indicated by the width (-L).", "prompt": "Minimum distance between the starting points of words within the same matrix pattern (-m)", "name": "distance", "ctrl": {"python": "value > 0 and (max_cycle == \"-n\" or max_cycle == \"-N\")", "perl": "$value <= 0 and ($max_cycle == \"-n\" or $max_cycle == \"-N\")"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -m\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -m$value \" : \"\""}, "command": false, "precond": {"python": "max_cycle != \"null\"", "perl": "$max_cycle ne \"null\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "default: terminate only when the maximum number of matrix building cycles is completed.", "prompt": "Terminate the program this number of cycles after the current most significant alignment is identified (-t)", "name": "terminate", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -t\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -t$value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "-pr2 option prevents a strong pattern found in only a subset of the sequences from overwhelming the algorithm and eliminating other potential patterns. This undesirable situation can occur when a subset of the sequences share an evolutionary relationship not common to the majority of the sequences.", "prompt": "Save the top progeny matrices", "name": "progeny", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option results in a significant speed up in the program, but the algorithm becomes dependent on the order of the sequence-file names.", "prompt": "Seed with the first sequence and proceed linearly through the list (-l)", "name": "linearly", "ctrl": {"python": "(value == 1 and max_cycle != \"-n\") or value == 0", "perl": "($value == 1 and $max_cycle != \"-n\") or $value == 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -l\" )[ value ]", "perl": "($value) ? \" -l\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Permit terminal gaps for wconsensus program", "name": "terminal_gap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\""}, "command": false, "precond": {"python": "prog == \"wconsensus\"", "perl": "$prog eq \"wconsensus\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": "A negative value means print all the top matrices.", "prompt": "Number of top matrices to print (-pt)", "name": "top_matrices", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -pt\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -pt$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default when NOT using -n or -N option: print 4 matrices; default when using -n or -N option: print no matrices.", "prompt": "Number of final matrices to print (-pf)", "name": "final_matrices", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pf\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -pf$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "6d", "references": [{"url": null, "doi": null, "label": "G.Z. Hertz and G.D. Stormo. Identification of consensus patterns in unaligned DNA and protein sequences: a large-deviation statistical basis for penalizing gaps. In: Proceedings of the Third International Conference on Bioinformatics and Genome Research (H.A. Lim, and C.R. Cantor, editors). World Scientific Publishing Co., Ltd. Singapore, 1995. pages 201--216."}], "source_links": ["http://gzhertz.home.comcast.net/~gzhertz/CONSENSUS_2004-04-14.TAR.gz"], "env": [], "authors": "Gerald Z.Hertz, G.D. Stormo", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "consensus"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab6a"}, "classifications": [{"type": "mobyle1", "classification": "alignment:consensus"}], "description": "Create a consensus sequence from a multiple alignment", "title": "cons", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "File containing a sequence alignment.", "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA", "MSF", "PAIR", "MARKX0", "MARKX1", "MARKX2", "MARKX3", "MARKX10", "SRS", "SRSPAIR", "SCORE", "UNKNOWN", "MULTIPLE", "SIMPLE", "MATCH"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "This is the scoring matrix file used when comparing sequences. By default it is the file 'EBLOSUM62' (for proteins) or  the file 'EDNAFULL' (for nucleic sequences). These files are  found in the 'data' directory of the EMBOSS installation.", "prompt": "Scoring matrix", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "Set a cut-off for the number of positive matches below which there is no consensus. The default plurality is taken as  half the total weight of all the sequences in the alignment.", "prompt": "Plurality check value", "name": "e_plurality", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -plurality=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Provides the facility of setting the required number of identities at a site for it to give a consensus at that position.  Therefore, if this is set to the number of sequences in the  alignment only columns of identities contribute to the consensus.", "prompt": "Required number of identities at a position (value greater than or equal to 0)", "name": "e_identity", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -identity=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the threshold for the positive matches above which the consensus is is upper-case and below which the consensus is in  lower-case.", "prompt": "Define a threshold above which the consensus is given in uppercase", "name": "e_setcase", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -setcase=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the consensus sequence", "name": "e_name", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -name=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "cons"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/cons.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "cons"}, {"comment": "This program gives simple statistics about residue conservation from clustal output files.There is the possibility to redirect the residue frequency at every position of the proteinsequence in the PDB file corresponding to one of the identified sequences of the multiple alignment.This frequency or conservation index is put in place of B-factors and allows spectral coloring according tothe index value in most of pdb structure viewers.", "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab6b"}, "classifications": [{"type": "mobyle1", "classification": "alignment:structure"}, {"type": "mobyle1", "classification": "structure:indexing"}], "description": "Clustal ouput structural analysis", "title": "cosa", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "PDB file format of the structure used as reference with \n        the residue occurrence in place of B-factor", "prompt": "PDB with the residue occurrence", "name": "default_pdbout", "simple": null, "filenames": {"python": "pdbout", "perl": "$pdbout"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "_3DStructure", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["PDB"], "edam_types": [], "card": null}}, {"comment": "Vertical sequence alignment and statistics", "prompt": "Alignment and statistics", "name": "default_txtout", "simple": null, "filenames": {"python": "txtout", "perl": "$txtout"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Alignment", "name": "alig", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["CLUSTAL"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Position in the sequence multialignment of the structure used as reference", "name": "struct_pos", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \" + str( value )", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "PDB entry", "name": "pdbin", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" \" + str( value )", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "_3DStructure", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["PDB"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output PDB file", "name": "pdbout", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" \" + str( value ) )[ value is not None ]", "perl": "(defined $value) ? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output result file", "name": "txtout", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" \" + str( value ) )[ value is not None ]", "perl": "(defined $value) ? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": "T. Rose", "command": {"path": null, "value": "cosa"}, "documentation_links": [], "type": "program", "name": "cosa"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab6c"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:cpg_islands"}], "description": "Identify and plot CpG islands in nucleotide sequence(s)", "title": "cpgplot", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "CpgplotReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_plot and e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_plot and e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_plot and e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_plot and e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_plot and e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfeat_out option", "name": "e_outfeat_out", "simple": null, "filenames": {"python": "e_outfeat"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Feature", "superclass": "AbstractText"}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_offormat_outfeat"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "The percentage CG content and the Observed frequency of CG is calculated within a window whose size is set by this parameter.  The window is moved down the sequence and these statistics are  calculated at each position that the window is moved to.", "prompt": "Window size (value greater than or equal to 1)", "name": "e_window", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -window=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This sets the minimum length that a CpG island has to be before it is reported.", "prompt": "Minimum length of an island (value greater than or equal to 1)", "name": "e_minlen", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -minlen=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This sets the minimum average observed to expected ratio of C plus G to CpG in a set of 10 windows that are required before a  CpG island is reported.", "prompt": "Minimum observed/expected (value from 0. to 10.)", "name": "e_minoe", "ctrl": {"python": "value >= 0."}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -minoe=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This sets the minimum average percentage of G plus C a set of 10 windows that are required before a CpG island is reported.", "prompt": "Minimum percentage (value from 0. to 100.)", "name": "e_minpc", "ctrl": {"python": "value >= 0."}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -minpc=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "This sets the name of the file holding the report of the input sequence name, CpG island parameters and the output details  of any CpG islands that are found.", "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Plot cpg island score", "name": "e_plot", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\" -noplot\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set to true then the graph of the observed to expected ratio of C plus G to CpG within a window is displayed.", "prompt": "Show observed/expected threshold line", "name": "e_obsexp", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\" -noobsexp\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set to true then the graph of the regions which have been determined to be CpG islands is displayed.", "prompt": "Show cpg rich regions", "name": "e_cg", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\" -nocg\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set to true then the graph of the percentage C plus G within a window is displayed.", "prompt": "Show percentage line", "name": "e_pc", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\" -nopc\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "File for output features", "prompt": "Name of the output feature file (e_outfeat)", "name": "e_outfeat", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\"\" , \" -outfeat=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the feature output format", "name": "e_offormat_outfeat", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -offormat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "cpgplot"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/cpgplot.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "cpgplot"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab6d"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:cpg_islands"}], "description": "Identify and report CpG-rich regions in nucleotide sequence(s)", "title": "cpgreport", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "CpgreportReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfeat_out option", "name": "e_outfeat_out", "simple": null, "filenames": {"python": "e_outfeat"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Feature", "superclass": "AbstractText"}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_offormat_outfeat"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "This sets the score for each CG sequence found. A value of 17 is more sensitive, but 28 has also been used with some  success.", "prompt": "Cpg score (value from 1 to 200)", "name": "e_score", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -score=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "File for output features", "prompt": "Name of the output feature file (e_outfeat)", "name": "e_outfeat", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outfeat=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the feature output format", "name": "e_offormat_outfeat", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -offormat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "cpgreport"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/cpgreport.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "cpgreport"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab6e"}, "classifications": [{"type": "mobyle1", "classification": "Omics:Genomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:RNA-seq"}, {"type": "mobyle1", "classification": "RNA Analysis:Functional RNAs:noncoding RNAs"}, {"type": "mobyle1", "classification": "RNA Analysis:Functional RNAs:Protein-coding RNAs"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Annotation and Alignment"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Prediction"}, {"type": "mobyle1", "classification": "Omics:Transcriptomics"}], "description": "Cuffcompare helps you: (a) compare your assembled transcripts to a reference annotation and (b) track Cufflinks transcripts across multiple experiments (e.g. across a time course)", "title": "Cuffcompare", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output", "name": "Output", "children": [{"comment": null, "prompt": "GTF map", "name": "map_outfile", "simple": null, "filenames": {"python": "str(output_0)+\".\"+str(input_0)+\".tmap\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Combined GTF out", "name": "combined_gtf", "simple": null, "filenames": {"python": "str(output_0)+\".combined.gtf\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Loci file", "name": "loci_file", "simple": null, "filenames": {"python": "str(output_0)+\".loci\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Stats report", "name": "stats_file", "simple": null, "filenames": {"python": "str(output_0)+\".stats\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Tracking file", "name": "tracking_file", "simple": null, "filenames": {"python": "str(output_0)+\".tracking\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Initial Command", "name": "cufflinks_cmd", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"cuffcompare\"", "perl": "\"cuffcompare\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Input", "name": "input1", "children": [{"comment": null, "prompt": "Input file format (-G)", "name": "file_format", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -G \" + str(value)) [value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Input data (GTF or GFF format)", "name": "input_0", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Input data 2 (GTF or GFF format)", "name": "input_1", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\",\" \" + str( value ))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "A multi-fasta file with all the genomic sequences (-s)", "name": "seq_path", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' -s ' + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "File containing a list of GTF files to process (-i)", "name": "file_list", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' -i ' + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Reference mRNA options", "name": "reference_options", "children": [{"comment": "An optional \"reference\" annotation GTF.", "prompt": "Select Reference Annotation(-r)", "name": "refernce_annotation", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\" -r \" + str(value))[value is not None and value != \"upload\"]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A set of known mRNAs to use as a reference for assessing the accuracy of mRNAs or gene models given in input GTF/GFF file(s).Each sample is matched against this file, and sample isoforms are tagged as overlapping, matching, or novel where appropriate", "prompt": "Reference mRNA regions (GFF format) (-r)", "name": "reference_region", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -r \" + str(value)) [value is not None]"}, "command": false, "precond": {"python": "refernce_annotation == \"upload\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enables the \"contained\" transcripts to be also written in the <outprefix>.combined.gtffile, with the attribute \"contained_in\" showing the first container transfrag found. By default, without this option, cuffcompare does not write in that file isoforms that were found to be fully contained/covered (with the same compatible intron structure) by other transfrags in the same locus.", "prompt": "Restrict results to reference mRNA regions overlapping input Cufflinks GTF file (-R)", "name": "restrict_result", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -R\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not generate .tmap and .refmap files for each input file (-T)", "name": "suppress_map", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -T\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Verbose processing mode (showing all GFF parsing warnings) (-V)", "name": "verbose_mode", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -V\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "Options", "children": [{"comment": null, "prompt": "Ignore single-exon transfrags and reference transcripts (-M)", "name": "discard_1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -M\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Ignore single-exon reference transcripts (-N)", "name": "discard_2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -N\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum distance (range) for grouping transcript start sites (-d):", "name": "max_distance", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -d\" + str(value)) [value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output", "name": "Output", "children": [{"comment": "Enables the \"contained\" transcripts to be also written in the <outprefix>.combined.gtffile, with the attribute \"contained_in\" showing the first container transfrag found. By default, without this option, cuffcompare does not write in that file isoforms that were found to be fully contained/covered (with the same compatible intron structure) by other transfrags in the same locus.", "prompt": "Include the \"contained\" transcripts in the .combined.gtf file (-C)", "name": "include_contained", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -C\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Enter output prefix name (-o)", "name": "output_0", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\" -o \" + str(vdef) , \" -o \" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.3.0", "references": [], "source_links": [], "env": [], "authors": "Trapnell C., Williams B.A., Pertea G., Mortazavi A.M., Kwan G., van Baren M.J., Salzberg S.L., Wold B. & Pachter L.", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "cuffcompare"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab6f"}, "classifications": [{"type": "mobyle1", "classification": "Omics:Genomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:RNA-seq"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Expression and Regulation"}, {"type": "mobyle1", "classification": "RNA Analysis:Functional RNAs:noncoding RNAs"}, {"type": "mobyle1", "classification": "RNA Analysis:Functional RNAs:Protein-coding RNAs"}, {"type": "mobyle1", "classification": "Omics:Transcriptomics"}], "description": "Cuffdiff is part of Cufflinks. It finds significant changes in transcript expression, splicing, and promoter use.", "title": "cuffdiff", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "FPKM tracking file 1", "name": "result_files", "simple": null, "filenames": {"python": "\"*.count_tracking\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Initial command", "name": "cufflinks_cmd", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"cuffdiff\"", "perl": "\"cuffdiff\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Input", "name": "Input", "children": [{"comment": "A transcript annotation file produced by cufflinks, cuffcompare, or other source.", "prompt": "Transcripts", "name": "input_0", "ctrl": null, "simple": null, "argpos": "30", "format": {"python": "\" \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Aligned RNA-Sequence reads in SAM/BAM format", "name": "input_align", "ctrl": null, "simple": null, "argpos": "35", "format": {"python": "\" \" + str(value)"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAlignment", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Aligned RNA-Sequence reads in SAM/BAM format (2)", "name": "input_align2", "ctrl": null, "simple": null, "argpos": "36", "format": {"python": "\" \" + str(value)"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAlignment", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "Options", "children": [{"comment": null, "prompt": "Value of random number generator seed (--seed)", "name": "seed", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' --seed ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instructs Cuffdiff to analyze the provided samples as a time series, rather than testing for differences between all pairs of samples. Samples should be provided in increasing time order at the command line (e.g first timepoint SAM, second timepoint SAM, etc.)", "prompt": "Treat samples as a time-series (-T/--time-series)", "name": "time_series", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' -T ')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The minimum number of alignments in a locus that is needed to conduct significance testing on changes in that locus observed between samples. If no testing is performed, changes in the locus are deemed not signficant, and the locus' observed changes don't contribute to correction for multiple testing. The default is 10 fragment alignments.", "prompt": "Minimum number of alignments in a locus for testing (-c/--min-alignment-count)", "name": "min_alignment_count", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' -c ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The allowed false discovery rate - the default is 0.05", "prompt": "False discovery rate used in testing (--FDR)", "name": "fdr", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' --FDR ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tells Cuffdiff to ignore all reads that could have come from transcripts in this GTF file. We recommend including any annotated rRNA, mitochondrial transcripts, and other abundant transcripts you wish to ignore in your analysis in this file. Due to variable efficiency of mRNA enrichment methods and rRNA depletion kits, masking these transcripts often improves the overall robustness of transcript abundance estimates.", "prompt": "Ignore all alignment within transcripts in this file (-M/--mask-file)", "name": "mask_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' -M ' + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use bias correction - reference fasta required (-b/--frag-bias-correct)", "name": "frag_bias_correct", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' -b ' + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tells Cufflinks to do an initial estimation procedure to more accurately weight reads mapping to multiple locations in the genome", "prompt": "Use 'rescue method' for multi-reads [more accurate] (-u/--multi-read-correct)", "name": "multi_read_correct", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' -u')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "With this option, Cufflinks normalizes by the upper quartile of the number of fragments mapping to individual loci instead of the total number of sequenced fragments. This can improve robustness of differential expression calls for less abundant genes and transcripts.", "prompt": "Use upper-quartile normalization (-N/--upper-quartile-norm)", "name": "upper_quartile_norm", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -N\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify a label for each sample, which will be included in various output files produced by Cuffdiff. This option should have a string of comma-delimited names corresponding to the names of the input files.", "prompt": "Specify label for each sample (-L/--labels)", "name": "label", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' -L ' + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use this many threads to align reads - the default is 1", "prompt": "Number of threads used during quantification (-p/--num-threads)", "name": "num_threads", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' -p ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced Options", "name": "AdvancedOptions", "children": [{"comment": null, "prompt": "Library type (--library-type)", "name": "library_type", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' --library-type ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is the expected (mean) fragment length. The default is 200bp. Note: Cufflinks now learns the fragment length mean for each SAM file, so using this option is no longer recommended with paired-end reads. It is recommended to enter values here if the input BAM file is small and using a paired-end alignment file.", "prompt": "Average fragment length [unpaired reads only] (-m/--frag-len-mean)", "name": "frag_len_mean", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' -m ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The standard deviation for the distribution on fragment lengths. The default is 80bp. Note: Cufflinks now learns the fragment length standard deviation for each SAM file, so using this option is no longer recommended with paired-end reads.", "prompt": "Fragment length standard deviation [unpaired reads only] (-s/--frag-len-std-dev)", "name": "frag_len_std_dev", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' -s ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the number of importance samples generated for each locus during abundance estimation. Default: 1000", "prompt": "Number of importance samples for MAP restimation (--num-importance-samples)", "name": "number_importance_samples", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' --number-importance-samples ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of bootstrap replications (--num-bootstrap-samples)", "name": "num_bootstrap_samples", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' --num-bootstrap-samples ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Fraction of fragments in each bootstrap sample (--bootstrap-fraction)", "name": "bootstrap_fraction", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' --bootstrap-fraction ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the number of iterations allowed during maximum likelihood estimation of abundances. The default is 5000.", "prompt": "Maximum iterations allowed for MLE calculation (--max-mle-iterations)", "name": "max_mle_iterations", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' --max-mle-iterations ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Count hits compatible with reference RNAs only (--compatible-hits-norm)", "name": "compatible_hits_norm", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' --compatible-hits-norm')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "With this option, Cufflinks counts all fragments, including those not compatible with any reference transcript, towards the number of mapped fragments used in the FPKM denominator. This option can be combined with -N/--upper-quartile-norm. It is inactive by default.", "prompt": "Count all hits for normalization (--total-hits-norm)", "name": "total_hits_norm", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' --total-hits-norm')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use the Poisson fragment dispersion model instead of learning one in each condition", "prompt": "Don't fit fragment counts for overdispersion? (--poisson-dispersion)", "name": "poisson_dispersion", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' --poisson-dispersion')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Cuffdiff will output a file for each condition (called <sample>_counts.txt) containing the fragment counts, fragment count variances, and fitted variance model", "prompt": "Print count tables used to fit overdispersion (--emit-count-tables)", "name": "emit_count_tables", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' --emit-count-tables')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum fragments allowed in a bundle before skipping (--max-bundle-frags)", "name": "max_bundle_frags", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' --max-bundle-frags ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Sets the name of the directory in which Cufflinks will write all of its output. The default is \"./\".", "prompt": "Enter experiment name (-o)", "name": "output_dir", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "' -o ./'"}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.3.0", "references": [], "source_links": [], "env": [], "authors": "Trapnell C., Williams B.A., Pertea G., Mortazavi A.M., Kwan G., van Baren M.J., Salzberg S.L., Wold B. & Pachter L.", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "cuffdiff"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab70"}, "classifications": [{"type": "mobyle1", "classification": "Omics:Genomics"}, {"type": "mobyle1", "classification": "Omics:Transcriptomics"}, {"type": "mobyle1", "classification": "Databases:RNA:Sequence"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Expression and Regulation"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Annotation and Alignment"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Prediction"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:RNA-seq"}, {"type": "mobyle1", "classification": "RNA Analysis:Functional RNAs:noncoding RNAs"}, {"type": "mobyle1", "classification": "RNA Analysis:Functional RNAs:Protein-coding RNAs"}], "description": "Cufflinks assembles transcripts, estimates their abundances, and tests for differential expression and regulation in RNA-Sequence samples. It accepts aligned RNA-Sequence reads and assembles the alignments into a parsimonious set of transcripts. Cufflinks then estimates the relative abundances of these transcripts based on how many reads support each one.", "title": "Cufflinks", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output", "name": "output2", "children": [{"comment": null, "prompt": "GTF Out", "name": "gtf_out", "simple": null, "filenames": {"python": "\"transcripts.gtf\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Isoforms tracking file", "name": "iso_track", "simple": null, "filenames": {"python": "\"isoforms.fpkm_tracking\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "FPKM tracking file", "name": "fpkm_track", "simple": null, "filenames": {"python": "\"genes.fpkm_tracking\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input", "name": "Input", "children": [{"comment": "Supply the SAM/BAM format file. you can use the accepted.bam file from tophat", "prompt": "Aligned reads file (BAM/SAM format):", "name": "input_align", "ctrl": null, "simple": null, "argpos": "40", "format": {"python": "\" \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAlignment", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "Options", "children": [{"comment": null, "prompt": "Number of threads to run", "name": "num_threads", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "' -p 5'"}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tells Cufflinks to use the supplied reference annotation (a GFF file) to estimate isoform expression. It will not assemble novel transcripts, and the program will ignore alignments not structurally compatible with any reference transcript.", "prompt": "Quantitate against reference transcript annotations (-G/--GTF) <reference_annotation.(gtf/gff)>", "name": "gtf_annotation", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -G \" + str(value)) [value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tells Cufflinks to use the supplied reference annotation (GFF) to guide RABT assembly. Reference transcripts will be tiled with faux-reads to provide additional information in assembly. Output will include all reference transcripts as well as any novel genes and isoforms that are assembled.", "prompt": "Use reference transcript annotation to guide assembly (-g/--GTF-guide)", "name": "guide_reference_annotation", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -g \" + str(value)) [value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tells Cufflinks to ignore all reads that could have come from transcripts in this GTF file. We recommend including any annotated rRNA, mitochondrial transcripts other abundant transcripts you wish to ignore in your analysis in this file. Due to variable efficiency of mRNA enrichment methods and rRNA depletion kits, masking these transcripts often improves the overall robustness of transcript abundance estimates.", "prompt": "Ignore all alignment within transcripts in this file (-M/--mask-file)", "name": "mask_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -M \" + str(value)) [value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Providing Cufflinks with a multifasta file via this option instructs it to run our new bias detection and correction algorithm which can significantly improve accuracy of transcript abundance estimates.", "prompt": "Use bias correction - reference fasta required (-b/--frag-bias-correct)", "name": "frag_bias_correct", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -b \" + str(value)) [value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tells Cufflinks to do an initial estimation procedure to more accurately weight reads mapping to multiple locations in the genome.", "prompt": "Use rescue method for multi-reads (more accurate) (-u/--multi-read-correct)", "name": "multi_read_correct", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -u \")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In cases where Cufflinks cannot determine the platform and protocol used to generate input reads, you can supply this information manually, which will allow Cufflinks to infer source strand information with certain protocols. The available options are listed below. For paired-end data, we currently only support protocols where reads are point towards each other. 1) fr-unstranded (default, e.g. Standard Illumina): Reads from the left-most end of the fragment (in transcript coordinates) map to the transcript strand, and the right-most end maps to the opposite strand.  2) fr-firststrand (e.g. dUTP, NSR, NNSR): Same as above except we enforce the rule that the right-most end of the fragment (in transcript coordinates) is the first sequenced (or only sequenced for single-end reads). Equivalently, it is assumed that only the strand generated during first strand synthesis is sequenced. 3) fr-secondstrand\t(e.g. Directional Illumina (Ligation), Standard SOLiD): Same as above except we enforce the rule that the left-most end of the fragment (in transcript coordinates) is the first sequenced (or only sequenced for single-end reads). Equivalently, it is assumed that only the strand generated during second strand synthesis is sequenced.", "prompt": "Library used for input reads (--library-type)", "name": "library_type", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --library-type \" + str(value)) [value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Abundance Estimation Options", "name": "EstimationOptions", "children": [{"comment": "This is the expected (mean) fragment length. The default is 200bp. Note: Cufflinks now learns the fragment length mean for each SAM file, so using this option is no longer recommended with paired-end reads. It is recommended to enter values here if the input BAM file is small and using a paired-end alignment file.", "prompt": "Average fragment length (unpaired reads only) (-m/--frag-len-mean)", "name": "frag_len_mean", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' -m ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The standard deviation for the distribution on fragment lengths. The default is 80bp.  Note: Cufflinks now learns the fragment length standard deviation for each SAM file, so using this option is no longer recommended with paired-end reads.", "prompt": "Fragment length std deviation (unpaired reads only) (-s/--frag-len-std-dev)", "name": "frag_len_std_dev", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' -s ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "With this option, Cufflinks normalizes by the upper quartile of the number of fragments mapping to individual loci instead of the total number of sequenced fragments. This can improve robustness of differential expression calls for less abundant genes and transcripts.", "prompt": "Use upper-quartile normalization (-N/--upper-quartile-norm)", "name": "upper_quartile_norm", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -option_quartile_norm\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the number of iterations allowed during maximum likelihood estimation of abundances. Default: 5,000", "prompt": "Maximum iterations allowed for MLE calculation (--max-mle-iterations)", "name": "max_mle_iterations", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --max-mle-iterations \" + str(value)) [value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of importance samples for MAP estimation (--num-importance-samples)", "name": "num_importance_samples", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' --num-importance-samples ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "With this option, Cufflinks counts only those fragments compatible with some reference transcript towards the number of mapped hits used in the FPKM denominator. This option can be combined with -N/--upper-quartile-norm. It is inactive by default, and can only be used in combination with --GTF. Use with either RABT or ab initio assembly is not supported.", "prompt": "Count hits compatible with reference RNAs only (--compatible-hits-norm)", "name": "compatible_hits_norm", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --compatible-hits-norm\")[value]"}, "command": false, "precond": {"python": "gtf_annotation is not None"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "With this option, Cufflinks counts all fragments, including those not compatible with any reference transcript, towards the number of mapped hits used in the FPKM denominator. This option can be combined with -N/--upper-quartile-norm. It is active by default.", "prompt": "Count all hits for normalization (--total-hits-norm)", "name": "total_hits_norm", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --total-hits-norm\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Assembly Options", "name": "AssemblyOptions", "children": [{"comment": "Cufflinks will report transfrags in GTF format, with a prefix given by this option. The default prefix is \"CUFF\".", "prompt": "Assembled transcripts have this iD prefix (-L/--label)", "name": "label", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -L \" + str(value)) [value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "After calculating isoform abundance for a gene, Cufflinks filters out transcripts that it believes are very low abundance, because isoforms expressed at extremely low levels often cannot reliably be assembled, and may even be artifacts of incompletely spliced precursors of processed transcripts. This parameter is also used to filter out introns that have far fewer spliced alignments supporting them. The default is 0.1, or 10% of the most abundant isoform (the major isoform) of the gene.", "prompt": "Suppress transcripts below this abundance level (-F/--min-isoform-fraction, <0.0-1.0>)", "name": "max_isoform_frac", "ctrl": {"python": "value >= 0.0 and value <= 1.0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -F \"+str(value) )[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Some RNA-Seq protocols produce a significant amount of reads that originate from incompletely spliced transcripts, and these reads can confound the assembly of fully spliced mRNAs. Cufflinks uses this parameter to filter out alignments that lie within the intronic intervals implied by the spliced alignments. The minimum depth of coverage in the intronic region covered by the alignment is divided by the number of spliced reads, and if the result is lower than this parameter value, the intronic alignments are ignored. The default is 15%.", "prompt": "Suppress intra-intronic transcripts below this level (-j/--pre-mrna-fraction, <0.0-1.0>)", "name": "opt_pre_mrna_frac", "ctrl": {"python": "value >= 0.0 and value <= 1.0"}, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -j \"+str(value) )[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum intron length. Cufflinks will not report transcripts with introns longer than this, and will ignore SAM alignments with REF_SKIP CIGAR operations longer than this. The default is 300,000.", "prompt": "Ignore alignments with gaps longer than this (-I/--max-intron-length)", "name": "option_max_intron", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -I \"+str(value) )[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The alpha value for the binomial test used during false positive spliced alignment filtration. Default: 0.001", "prompt": "Alpha for junction binomial test filter (-a/--junc-alpha, <0.0-1.0>", "name": "junc_alpha", "ctrl": {"python": "value >= 0.0 and value <= 1.0"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -a \" + str(value)) [value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Spliced reads with less than this percent of their length on each side of the junction are considered suspicious and are candidates for filtering prior to assembly. Default: 0.09.", "prompt": "Percent read overhang taken as suspiciously small (-A/--small-anchor-fraction, <0.0-1.0>)", "name": "small_anchor_fraction", "ctrl": {"python": "value >= 0.0 and value <= 1.0"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -A \" + str(value)) [value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Assembled transfrags supported by fewer than this many aligned RNA-Seq fragments are not reported. Default: 10.", "prompt": "Minimum number of fragments needed For new transfrags (--min-frags-per-transfrag)", "name": "min_frags", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --min-frags-per-transfrag \" + str(value)) [value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The number of bp allowed to enter the intron of a transcript when determining if a read or another transcript is mappable to/compatible with it. The default is 8 bp based on the default bowtie/TopHat parameters.", "prompt": "Number of terminal exon bp to tolerate in introns (--overhang-tolerance)", "name": "overhang_tolerance", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --overhang-tolerance \" + str(value)) [value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum genomic length allowed for a given bundle. The default is 3,500,000 bp.", "prompt": "Maximum genomic length allowed for a given bundle (--max-bundle-length)", "name": "max_bundle_length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --max-bundle-length \" + str(value)) [value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the maximum number of fragments a locus may have before being skipped. Skipped loci are listed in skipped.gtf. Default: 1,000,000", "prompt": "Maximum fragments allowed in a bundle before skipping (--max-bundle-frags)", "name": "max_bundle_frags", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"  --max-bundle-frags \" + str(value)) [value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Minimum intron size allowed in genome. The default is 50 bp.", "prompt": "Minimum intron size allowed in genome (--min-intron-length)", "name": "min_intron_length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --min-intron-length \" + str(value)) [value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Minimum average coverage required to attempt 3' trimming. The default is 10.", "prompt": "Minimum average coverage required to attempt 3' trimming (--trim-3-avgcov-thresh)", "name": "avgcov_thresh", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --trim-3-avgcov-thresh \" + str(value)) [value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The fraction of average coverage below which to trim the 3' end of an assembled transcript. The default is 0.1.", "prompt": "Fraction of average coverage below which to trim 3' end (--trim-3-dropoff-frac)", "name": "dropoff_frac", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --trim-3-dropoff-frac \" + str(value)) [value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Reference Annotation Based Transcript (RABT) Assembly Options", "name": "ReferenceBasedAssemblyOptions", "children": [{"comment": "This option disables tiling of the reference transcripts with faux reads. Use this if you only want to use sequencing reads in assembly but do not want to output assembled transcripts that lay within reference transcripts. All reference transcripts in the input annotation will also be included in the output.", "prompt": "Disable tiling by faux reads (--no-faux-reads)", "name": "no_faux_reads", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --no-faux-reads\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The number of bp allowed to overhang the 3' end of a reference transcript when determining if an assembled transcript should be merged with it (ie, the assembled transcript is not novel). The default is 600 bp.", "prompt": "Overhang allowed on 3' end when merging with reference (--3-overhang-tolerance)", "name": "three_overhang_tolerance", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --3-overhang-tolerance \" + str(value)) [value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The number of bp allowed to enter the intron of a reference transcript when determining if an assembled transcript should be merged with it (ie, the assembled transcript is not novel). The default is 50 bp.", "prompt": "Overhang allowed inside reference intron when merging (--intron-overhang-tolerance)", "name": "intron_overhang_tolerance", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --intron-overhang-tolerance \" + str(value)) [value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output", "name": "output2", "children": [{"comment": "Sets the name of the directory in which Cufflinks will write all of its output. The default is \"./\".", "prompt": "Write all output files to this directory (-o)", "name": "output_dir", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -o ./\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.3.0", "references": [], "source_links": [], "env": [], "authors": "Trapnell C., Williams B.A., Pertea G., Mortazavi A.M., Kwan G., van Baren M.J., Salzberg S.L., Wold B. & Pachter L.", "command": {"path": null, "value": "cufflinks"}, "documentation_links": [], "type": "program", "name": "cufflinks"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab72"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:codon_usage"}], "description": "Create a codon usage table from nucleotide sequence(s)", "title": "cusp", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "CuspReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "cusp"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/cusp.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "cusp"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabb9"}, "classifications": [{"type": "mobyle1", "classification": "hmm:statistic"}], "description": "Sisplay summary statistics for a profile file", "title": "HMMSTAT", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": []}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Name of the HMM profile", "name": "Name", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "HmmProfile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "hmmstat"}, "documentation_links": [], "type": "program", "name": "hmmstat"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab71"}, "classifications": [{"type": "mobyle1", "classification": "Omics:Genomics"}, {"type": "mobyle1", "classification": "Omics:Transcriptomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Annotation and Alignment"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Prediction"}, {"type": "mobyle1", "classification": "RNA Analysis:Functional RNAs:noncoding RNAs"}, {"type": "mobyle1", "classification": "RNA Analysis:Functional RNAs:Protein-coding RNAs"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:RNA-seq"}], "description": "Cuffmerge takes two or more Cufflinks GTF files and merges them into a single unified transcript catalog.  Optionally, you can provide the script with a reference GTF, and the script will use it to attach gene names and other metadata to the merged catalog.", "title": "Cuffmerge", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "out GTF", "name": "out_file", "simple": null, "filenames": {"python": "\"merged.gtf\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Initial command", "name": "cufflinks_cmd", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\"cuffmerge\"", "perl": "\"cuffmerge\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Input", "name": "Input", "children": [{"comment": "Provide the GTF files that you want in the text file \"manifest\", which lists the GTF files that you'd like to merge together into a single GTF file.", "prompt": "GTF manifest file", "name": "assembly_GTF_list", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\" echo -e \"+\"\\\\\\\\n\".join(value) + \" > manifest.txt && \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "MultipleGenomeAnnotation", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Add manifest", "name": "manifest_file", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "\" manifest.txt\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "Options", "children": [{"comment": "An optional \"reference\" annotation GTF.", "prompt": "Use Reference Annotation(-g/--ref-gtf)", "name": "use_reference_annotation", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\" -g \" + str(value))[value is not None and value != \"upload\"]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Genomic DNA sequences for the reference.", "prompt": "Upload reference annotation", "name": "annotation_data", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\" -g \" + str(value))[value is not None]"}, "command": false, "precond": {"python": "use_reference_annotation == \"upload\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use sequence data for some optional classification functions", "prompt": "Use Sequence Data", "name": "use_sequence_data", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\" -s \" + str(value))[value is not None and value != \"upload\"]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Genomic DNA sequences for the reference. Upload zip file if you are referencing multiple files", "prompt": "Upload reference sequences", "name": "sequence_data", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\" -s \" + str(value))[value is not None]"}, "command": false, "precond": {"python": "use_sequence_data == \"upload\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Discard isoforms with abundance below this. Range: 0-1.0", "prompt": "Minimum isoform fraction", "name": "min_frac", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' --min-isoform-fraction ' + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use this many threads to merge assemblies. - the default is 1", "prompt": "Number of threads used during merge assemblies (-p/--num-threads)", "name": "num_threads", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -p 5\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Sets the Directory where merged assembly will be written  [ default: ./merged_asm  ]", "prompt": "Enter experiment name (-o)", "name": "output_dir", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -o ./\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.3.0", "references": [], "source_links": [], "env": [], "authors": "Trapnell C., Williams B.A., Pertea G., Mortazavi A.M., Kwan G., van Baren M.J., Salzberg S.L., Wold B. & Pachter L.", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "cuffmerge"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab73"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Removes a section from a sequence", "title": "cutseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "This is the start position (inclusive) of the section of the sequence that you wish to remove.", "prompt": "Start of region to delete", "name": "e_from", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -from=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is the end position (inclusive) of the section of the sequence that you wish to remove.", "prompt": "End of region to delete", "name": "e_to", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -to=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "cutseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/cutseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "cutseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab74"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:composition"}], "description": "Calculates nucleic acid melting temperature", "title": "dan", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_plot and e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_plot and e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_plot and e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_plot and e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_plot and e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "The values of melting point and other thermodynamic properties of the sequence are determined by taking a short length  of sequence known as a window and determining the properties of  the sequence in that window. The window is incrementally moved  along the sequence with the properties being calculated at each  new position.", "prompt": "Enter window size (value from 1 to 100)", "name": "e_windowsize", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -windowsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is the amount by which the window is moved at each increment in order to find the melting point and other properties  along the sequence.", "prompt": "Enter shift increment (value greater than or equal to 1)", "name": "e_shiftincrement", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -shiftincrement=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Enter dna concentration (nm) (value from 1. to 100000.)", "name": "e_dnaconc", "ctrl": {"python": "value >= 1."}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -dnaconc=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Enter salt concentration (mm) (value from 1. to 1000.)", "name": "e_saltconc", "ctrl": {"python": "value >= 1."}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -saltconc=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "precond": null, "prompt": "Product options", "name": "e_productsection", "children": [{"comment": "This prompts for percent formamide, percent of mismatches allowed and product length.", "prompt": "Prompt for product values", "name": "e_product", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -product\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This specifies the percent formamide to be used in calculations (it is ignored unless -product is used).", "prompt": "Enter percentage of formamide (value from 0. to 100.)", "name": "e_formamide", "ctrl": {"python": "value >= 0."}, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -formamide=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_product"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This specifies the percent mismatch to be used in calculations (it is ignored unless -product is used).", "prompt": "Enter percent mismatch (value from 0. to 100.)", "name": "e_mismatch", "ctrl": {"python": "value >= 0."}, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -mismatch=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_product"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This specifies the product length to be used in calculations (it is ignored unless -product is used).", "prompt": "Enter the product length", "name": "e_prodlen", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -prodlen=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_product and e_windowsize"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Thermodynamic options", "name": "e_thermosection", "children": [{"comment": "Output the DeltaG, DeltaH and DeltaS values of the sequence windows to the output data file.", "prompt": "Thermodynamic calculations", "name": "e_thermo", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -thermo\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If -thermo has been specified then this specifies the temperature at which to calculate the DeltaG, DeltaH and DeltaS  values.", "prompt": "Enter temperature (value from 0. to 100.)", "name": "e_temperature", "ctrl": {"python": "value >= 0."}, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -temperature=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_thermo"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "This specifies that the sequence is an RNA sequence and not a DNA sequence.", "prompt": "Use rna data values", "name": "e_rna", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -rna\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "If this is not specified then the file of output data is produced, else a plot of the melting point along the sequence is  produced.", "prompt": "Produce a plot", "name": "e_plot", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -plot\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enter a minimum value for the temperature scale (y-axis) of the plot.", "prompt": "Enter minimum temperature (value from 0. to 150.)", "name": "e_mintemp", "ctrl": {"python": "value >= 0."}, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -mintemp=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "16", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If a plot is not being produced then data on the melting point etc. in each window along the sequence is output to the  file.", "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "17", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "not e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "18", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "not e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "dan"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/dan.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "dan"}, {"comment": "Divide-and-Conquer Multiple Sequence Alignment  (DCA) is a program for producing fast, high quality simultaneous multiple sequence alignments of amino acid, RNA, or DNA sequences. The program is based on the DCA algorithm, a heuristic approach to sum-of-pairs (SP) optimal alignment that has been developed at the FSPM  over the years 1995-97.", "homepage_links": ["http://bibiserv.techfak.uni-bielefeld.de/dca/"], "_id": {"$oid": "51434da293546d52388cab75"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "Divide-and-Conquer Multiple Sequence Alignment", "title": "DCA", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Alignment file", "name": "fasta_outfile", "simple": null, "filenames": {"python": "\"dca.out\"", "perl": "\"dca.out\""}, "precond": {"python": "output_format == \"2\" or output_format == \"3\"", "perl": "$output_format eq \"2\" or $output_format eq \"3\""}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "test", "#children": ["FASTA"], "@eq": "2", "@param": "output_format"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "DCA alignment file", "name": "aln_outfile", "simple": null, "filenames": {"python": "\"dca.out\"", "perl": "\"dca.out\""}, "precond": {"python": "output_format == \"1\" or output_format == \"4\"", "perl": "$output_format eq \"1\" or $output_format eq \"4\""}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Dcalignment", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "test", "#children": ["CLUSTAL"], "@eq": "1", "@param": "output_format"}], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Sequences File", "name": "seq", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control parameters", "name": "control", "children": [{"comment": null, "prompt": "Cost matrix (-c)", "name": "cost", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\"  , \" -c \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -c $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default: free shift", "prompt": "Penalize end gaps as internal gaps (-g)", "name": "gaps", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\" , \" -g \")[ value ]", "perl": "($value)? \" -g \":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "On: FastDCA (use approximate cut positions); Off: slower, more accurate algorithm (search for exact cut positions)", "prompt": "Use approximate cut positions (-a)", "name": "approximate", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\" , \" -a\")[ value ]", "perl": "($value)? \" -a\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Weight intensity (-b)", "name": "intensity", "ctrl": {"python": "intensity >= 0.0 and intensity <= 1.0", "perl": "$intensity >= 0.0 and $intensity <= 1.0"}, "simple": null, "argpos": "1", "format": {"python": "( \"\"  , \" -b \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -b $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "5 ... 100 recommended; small: faster algorithm, maybe worse.", "prompt": "Recursion stop size (-l)", "name": "recursion", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\"  , \" -l \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -l $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "To correct the alignment in the proximity of division sites, the sequences can be re-aligned inside a window of size w >= 0 placed across each slicing site.", "prompt": "Window size (-w)", "name": "window", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\"  , \" -w \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and  $value != $vdef)? \" -w $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output parameters", "name": "output", "children": [{"comment": null, "prompt": null, "name": "quiet", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -q\"", "perl": "\" -q\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output format (-f)", "name": "output_format", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\"  , \" -f \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -f $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Suppress output about progress of the program (-o)", "name": "suppress_output", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -o\"", "perl": "\" -o\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.1", "references": [{"url": null, "doi": null, "label": "A.W.M. Dress, G. Fullen, S.W. Perrey, A Divide and Conquer Approach to Multiple Alignment, Proceedings of the Third International Conference on Intelligent Systems for Molecular Biology (ISMB 95), AAAI Press, Menlo Park, CA, USA, 107-113, 1995."}, {"url": null, "doi": null, "label": "J. Stoye, Multiple Sequence Alignment with the Divide-and-Conquer Method, Gene 211(2), GC45-GC56, 1998. (Gene-COMBIS)"}], "source_links": ["http://bibiserv.techfak.uni-bielefeld.de/download/tools/dca.html"], "env": [], "authors": "J. Stoye", "command": {"path": null, "value": "dca"}, "documentation_links": [], "type": "program", "name": "dca"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab76"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Removes non-alphabetic (e.g. gap) characters from sequences", "title": "degapseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "degapseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/degapseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "degapseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab77"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:composition"}], "description": "Draw a nucleic acid density plot", "title": "density", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_display !=\"none\" and e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_display !=\"none\" and e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_display !=\"none\" and e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_display !=\"none\" and e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_display !=\"none\" and e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "DensityReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "seqall option", "name": "e_seqall", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -seqall=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Window length (value greater than or equal to 1)", "name": "e_window", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -window=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Graph type", "name": "e_display", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -display=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_display !=\"none\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_display !=\"none\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_display ==\"none\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_display ==\"none\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "density"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/density.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "density"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab78"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Alter the name or description of a sequence.", "title": "descseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Name of the sequence", "name": "e_name", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -name=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Description of the sequence", "name": "e_description", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -description=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "This allows you to append the name or description you have given on to the end of the existing name or description of the  sequence.", "prompt": "Append to the existing description", "name": "e_append", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -append\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "descseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/descseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "descseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab79"}, "classifications": [{"type": "mobyle1", "classification": "genetics:detection"}], "description": "Copy Number Variation (CNV) detection from signal intensity data (Illumina file)", "title": "detect_cnv", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Split files", "name": "output_split_file", "simple": null, "filenames": {"python": "infile + \".*\"", "perl": "\"$infile.*\""}, "precond": {"python": "infile is not None", "perl": "defined $infile"}, "output_type": "file", "hidden": true, "main": false, "type": {"datatype": {"class": "Split", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "precond": null, "prompt": "Penncnv analyses", "name": "analyse", "children": [{"comment": null, "prompt": "CNV file", "name": "output_cnv_file", "simple": null, "filenames": {"python": "infile + \"_rawcnv\"", "perl": "\"$infile_rawcnv\""}, "precond": {"python": "type == '--test' and infile", "perl": "$type eq '--test' and $infile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Cnv", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, {"comment": null, "precond": null, "prompt": "CNV output format", "name": "cnvoutput", "children": [{"comment": null, "prompt": "CNV calls file", "name": "bed_cnv_file", "simple": null, "filenames": {"python": "infile + \"_\" + outputformat + \"cnv\"", "perl": "\"$infile.$outputformatcnv\""}, "precond": {"python": "type == '--test' and infile and outputformat != 'output'", "perl": "$type eq '--test' and $infile and $outputformat ne 'output'"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Cnv", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output file", "name": "bed_file", "simple": null, "filenames": {"python": "infile + \"_\" + outputformat", "perl": "\"$infile.$outputformat\""}, "precond": {"python": "(type is not None or rawcnv is not None) and type != '--test' and outputformat != 'output'", "perl": "($type is not None or $rawcnv is not None) and $type ne '--test' and $outputformat ne 'output'"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Cnv", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, {"comment": null, "prompt": "Output file", "name": "output_file", "simple": null, "filenames": {"python": "\"detect_cnv.out\"", "perl": "\"detect_cnv.out\""}, "precond": {"python": "type != '--test'", "perl": "$type ne '--test'"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Cnv", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Preprocessing of Illumina intensity file for Copy Number Variation (CNV) detection", "name": "preprocess", "children": [{"comment": "The input signal intensity file is a text file that contains information for one marker per\n                         line, and all fields in each line are tab-delimitedThe first line of the file specifies the meaning for each tab-delimited column. \n        For example, there are six fields in each line in the file, corresponding to SNP name, chromosome, \n        position, genotype, Log R Ratio (LRR) and B Allele Frequency (BAF), respectively.The CNV calling only requires the SNP Name, LRR and BAF values. Note that the relative position\n        of LRR and BAF is different from the previous file; again the header line tells the program that the \n        second column represents BAF values, yet the third column is LRR values.", "prompt": "Input  signal intensity file", "name": "infile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "SignalIntensity", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of tab-delimited column (field) per individual genotyping in intensity file", "name": "split", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" split \" + str(value) + \" -heading 3 --name_by_header -tab --out \"+ str(infile)", "perl": "\" split $value -heading 3 --name_by_header -tab -out $filename\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Penncnv analyses", "name": "analyse", "children": [{"comment": "--test: test a signal intensity file to generate CNV calls.--joint: New in July 2008: generate CNV calls for a father-mother-off-\n               spring trio via a one-step procedure. It is considerably slower\n               than the --trio argument, but generates more accurate CNV calls\n               with reduced false negative rates in simulation studies.--summary:   generate summary statistics on signal quality for each input\n               file. Usually the summary is provided when calling CNVs and can\n               be written to a log file via the --log argument; however, some-\n               times users forget to use --log, such that the signal quality\n               information is lost. The --summary argument can calculate the\n               signal quality again quickly without calling CNVs.", "prompt": "Analyse type without cnv calls file", "name": "type", "ctrl": {"python": "(value is not None and rawcnv is None) or (value is None and rawcnv is not None)", "perl": "(defined $value and not defined $rawcnv) or (not defined $value and defined $rawcnv)"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" && detect_cnv.pl \" + str(value) )[ value is not None and value !=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" && detect_cnv.pl $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "--trio:  generate CNV calls for a father-mother-offspring trio, given a\n               CNV file containing calls generated on each individual separately, a HMM model file, a PFB file, and the three signal\n               intensity files.--quartet:    jointly generate CNV calls for a father-mother-offspring1-offp-\n               spring2 quartet, given a CNV file containing calls generated on\n               each individual separately, a HMM model file, a PFB file, and\n               the four signal intensity files.--cctest: perform a case-control test on the frequency of having CNVs for\n               each marker within CNVs. A separate phenotype file must be\n               specified via the --phenofile argument for this to work. The\n               actual test is a two-sided Fisher exact test. The --onesided\n               argument can be specified for performing one-sided test, and\n               the --type_filter argument can be specified so that only \"dup\"\n               or \"del\" is compared between cases and controls.--exclude_heterosomic: exclude CNV calls from chromosomes showing evidence of heterosomic abberations from a given file containing CNV calls. An\n               purely empirical method is applied in this procedure, although\n               I recommended always manually examine the patterns of BAF to\n               determine whether heterosomic abberation is present in a particular sample, if the sample size is relatively small (<100).", "prompt": "Analyse type with cnv calls file", "name": "rawcnv", "ctrl": {"python": "(value is not None and cnvfile is not None and type is None) or (value is None and type is not None)", "perl": "(defined $value and defined $cnvfile and not defined $type) or (not defined $value and defined $type)"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" && detect_cnv.pl \" + str(value) )[ value is not None and value !=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" && detect_cnv.pl $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify an output file prefix.", "prompt": "Input file name", "name": "infile_name", "ctrl": null, "simple": null, "argpos": "18", "format": {"python": "\" \" + infile + \".*\"", "perl": "\" $infile.*\""}, "command": false, "precond": {"python": "type =='--test' or type =='--joint' or type =='--validate' or type =='--summary' or rawcnv =='--trio' or rawcnv =='--quartet' or rawcnv =='--cctest' or rawcnv =='--exclude_heterosomic'", "perl": "$type eq '--test' or $type eq '--joint' or $type eq '--validate' or $type eq '--summary' or $rawcnv eq '--trio' or $rawcnv eq '--quartet' or $rawcnv eq '--cctest' or $rawcnv eq '--exclude_heterosomic'"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A file containing CNV calls, that could be generated by the\n               -test operation of this program: trio, quartet, exclude_heterosomic, cctest", "prompt": "CNV calls file (cnv)", "name": "cnvfile", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "( \"\" , \" --cnv \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \"--cnv $value \" : \"\""}, "command": false, "precond": {"python": "rawcnv is not None", "perl": "defined $rawcnv"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Cnv", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify an output file prefix. By default the output filename\n               starts with \"gengen\".", "prompt": "Output CNV file name", "name": "out_cnv_filename", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "\" --out \" + infile + \"_rawcnv \"", "perl": "\" --out $infile_rawcnv\""}, "command": false, "precond": {"python": "type == '--test' and infile", "perl": "$type eq '--test' and $infile"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify a HMM model file containing elements necessary for\n               specifying the hidden Markov model for CNV calling: test, validate, joint, trio, quartet", "prompt": "HMM model (hmm)", "name": "hmmmodel", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "( \"\" , \" --hmm", "perl": "(defined $value) ? \"--hmm"}, "command": false, "precond": {"python": "(type is not None or rawcnv is not None) and (type != '--summary' and (rawcnv !='--cctest' and rawcnv !='--exclude_heterosomic'))", "perl": "($type is not None or $rawcnv is not None) and ($type and $rawcnv and $rawcnv ne '--cctest' and $rawcnv ne '--exclude_heterosomic'"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A population frequency of B allele file containing chromosome\n               coordinates of each SNP, as well as the frequency of B allele\n               in a large reference population for this SNP: test, validate, joint, summary, trio, quartet, cctest", "prompt": "Population frequency for B allelel file (pfb)", "name": "pfb", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "( \"\" , \" --pfb", "perl": "(defined $value) ? \"--pfb"}, "command": false, "precond": {"python": "(type is not None or rawcnv is not None) and (rawcnv !='--exclude_heterosomic')", "perl": "($type is not None or $rawcnv is not None) and ($rawcnv ne '--exclude_heterosomic')"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A file that contains the GC percentage in the 1Mb region around\n               each marker for the GC-model based signal adjustment: test, joint, validate, trio, quartet", "prompt": "A file containing GC model for wave adjustment (gcmodel)", "name": "gcmodel", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "( \"\" , \" --gcmodel", "perl": "(defined $value) ? \"--gcmodel"}, "command": false, "precond": {"python": "(type == '--test' or type =='--joint' or type =='--validate') or (rawcnv =='--trio' or rawcnv =='--quartet')", "perl": "$type eq '--test' or $rawcnv eq '--trio' or $rawcnv eq '--quartet' or  $type eq '--joint' or  $type eq '--validate'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "CNV output format", "name": "cnvoutput", "children": [{"comment": null, "prompt": "Output format", "name": "outputformat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" && visualize_cnv.pl --format %s \" % str(value) )[ value is not None and value !=vdef]", "perl": "(defined $value  and $value ne $vdef) ? \" && visualize_cnv.pl --format $value \" : \"\""}, "command": false, "precond": {"python": "(type is not None or rawcnv is not None)", "perl": "($type is not None or $rawcnv is not None)"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output file name for visualize_cnv (.rawcnv)", "name": "bed_cnv_infile", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "\" --out \" + infile + \"_\" + outputformat + \"cnv \" + infile + \"_rawcnv \"", "perl": "\" --out $infile.$outputformatcnv $infile.rawcnv \""}, "command": false, "precond": {"python": "type == '--test' and infile and outputformat != 'output'", "perl": "$type eq '--test' and $infile and $outputformat ne 'output'"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output file name for visualize_cnv (.out)", "name": "bed_infile", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "\" --out \" +  infile + \"_\" + outputformat + \" detect_cnv.out \"", "perl": "\" --out $infile.$outputformat detect_cnv.out \""}, "command": false, "precond": {"python": "(type is not None or rawcnv is not None) and type != '--test' and outputformat != 'output'", "perl": "($type is not None or $rawcnv is not None) and $type eq '--test' and $outputformat ne 'output'"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "CNV output control", "name": "cnvcontrol", "children": [{"comment": "The minimum number of SNPs that a CNV call must contain to be\n               in output: test, joint, validate, trio, quartet", "prompt": "Minimum number of SNPs within CNV (minsnp)", "name": "minsnp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --minsnp \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \"--minsnp $value \" : \"\""}, "command": false, "precond": {"python": "type =='--test' or rawcnv =='--trio' or rawcnv =='--quartet' or type =='--joint' or type =='--validate'", "perl": "$type eq '--test' or  $rawcnv eq '--trio' or $rawcnv eq '--quartet' or  $type eq '--joint' or  $type eq '--validate'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The minimum length of base pairs that a CNV call must contain\n               to be in output: test, joint, validate, trio, quartet", "prompt": "Minimum length of bp within CNV (minlength)", "name": "minlength", "ctrl": {"python": "minlength > 0", "perl": "$minlength =~ m/^\\d+(k|m)?$/i"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --minlength \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \"--minlength $value \" : \"\""}, "command": false, "precond": {"python": "type =='--test' or rawcnv =='--trio' or rawcnv =='--quartet' or type =='--joint' or type =='--validate'", "perl": "$type eq '--test' or $rawcnv eq '--trio' or $rawcnv eq '--quartet' or $type eq '--joint' or  $type eq '--validate'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Minimum confidence score for a CNV call to\n               be in output. This is an experimental feature, and the\n               actual definition of \"confidence score\" may change in\n               the future: test, validate", "prompt": "Minimum confidence score of CNV (minconf)", "name": "minconf", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --minconf \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \"--minconf $value \" : \"\""}, "command": false, "precond": {"python": "type =='--test' or type =='--validate'", "perl": "$type eq '--test' or  $type eq '--validate'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Calculate a confidence score for each CNV call. This is an\n               experimental feature, and the actual definition of \"confidence\n               score\" may change in the future: test, validate", "prompt": "Calculate confidence for each CNV (confidence)", "name": "confidence", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --confidence \" )[ value ]", "perl": "($value) ? \"--confidence\" : \"\""}, "command": false, "precond": {"python": "type =='--test' or type =='--validate'", "perl": "$type eq '--test' or  $type eq '--validate'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Process chromosome X specifically. By default only autosomes\n               will be processed by this program: test, joint, validate, trio, quartet.", "prompt": "Use chromosomeX-specific treatment (chrx)", "name": "chrx", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --chrx \" )[ value ]", "perl": "($value) ? \"--chrx\" : \"\""}, "command": false, "precond": {"python": "type =='--test' or rawcnv =='--trio' or rawcnv =='--quartet' or type =='--joint' or type =='--validate'", "perl": "$type eq '--test' or  $rawcnv eq '--trio' or  $rawcnv eq '--quartet' or  $type eq '--joint' or  $type eq '--validate'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A 2-column file containing filename and sex (male/female) for\n               sex chromosome calling with chromosomeX-specific (chrx) argument. The first tab-\n               delimited column should be the input signal file name, while\n               the second tab-delimited column should be male or female.\n               Alternatively, abbreviations including m (male), f (female), 1\n               (male) or 2 (female) are also fine.", "prompt": "Filename and sex (male/female) for chromosomeX (sex)", "name": "sexfile", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "( \"\" , \" --sex \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \"--sex $value \" : \"\""}, "command": false, "precond": {"python": "chrx and not bafxhet", "perl": "$chrx and not $bafxhet"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Sex", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This argument specifies the BAF heterozygosity rate in chrX to\n               predict the sex for a sample. Note that this rate is based on\n               BAF values so it is not genotype heterozygosity rate and indeed\n               quite different/smaller than that genotype heterozygosity rate.\n               By default if >10% chrX markers have BAF values around 0.5, the\n               sample is predicted as female. This threshold however does not\n               work for Affymetrix genome-wide arrays (instead a 5% threshold\n               is better used). For chrX CNV calling, rather than relying on\n               PennCNV prediction of gender, it is always best to explicitely\n               specify the sample sex using the -sexfile argument.", "prompt": "Minimum BAF heterozygosity rate to predict female gender when file is not supplied (bafxhet)", "name": "bafxhet", "ctrl": {"python": "bafxhet > 0 and bafxhet_threshold < 1", "perl": "$bafxhet_threshold > 0 and $bafxhet_threshold < 1"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --bafxhet \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \"--bafxhet $value\" : \"\""}, "command": false, "precond": {"python": "chrx and not sexfile", "perl": "$chrx and not $sexfile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "type == '--validate'", "perl": "$type eq '--validate'"}, "prompt": "Specific Validation-calling arguments (validate)", "name": "validateCalling", "children": [{"comment": "Specify the start SNP of a pre-specified region used in --validate operation", "prompt": "Start SNP of a pre-specified region (startsnp)", "name": "startsnp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --startsnp \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \"--startsnp $value\" : \"\""}, "command": false, "precond": {"python": "not candlist", "perl": "not candlist"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify the end SNP of a pre-specified region used in --validate operation", "prompt": "End SNP of a pre-specified region (endsnp)", "name": "endsnp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --endsnp \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \"--endsnp $value\" : \"\""}, "command": false, "precond": {"python": "not candlist", "perl": "not candlist"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify the prior deletion allele frequency of a pre-specified\n               region used in --validate operation (this frequency can be\n               estimated from CNV calls by --test operation)", "prompt": "Prior deletion frequency of a pre-specified region (delfreq)", "name": "delfreq", "ctrl": {"python": "delfreq < 1 and delfreq >=0", "perl": "$delfreq < 1 and $delfreq >=0 and (delfrep+dupfreq) <1"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --delfreq \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \"--delfreq $value\" : \"\""}, "command": false, "precond": {"python": "not candlist", "perl": "not candlist"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify the prior duplication allele frequency of a pre-specified region used \n            in --validate operation (this frequency can be estimated from CNV calls by --test operation)", "prompt": "Prior duplication frequency of a pre-specified region (dupfreq)", "name": "dupfreq", "ctrl": {"python": "dupfreq < 1 and dupfreq >=0", "perl": "$dupfreq < 1 and $dupfreq >=0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --dupfreq \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \"--dupfreq $value\" : \"\""}, "command": false, "precond": {"python": "not candlist", "perl": "not candlist"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Background CNV probability for any loci, with default value as\n               0.0001. This argument is useful in validation calling. When\n               -delfreq/-dupfreq is not specified, the background frequency is\n               used to calculate the prior probability of different copy number states.", "prompt": "Background CNV probability for any loci (backfreq)", "name": "backfreq", "ctrl": {"python": "backfreq > 0 and backfreq < 0.5", "perl": "$backfreq > 0 and $backfreq < 0.5"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --backfreq \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \"--backfreq $value\" : \"\""}, "command": false, "precond": {"python": "not delfreq and not dupfreq", "perl": "not $delfreq and not $dupfreq"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "A file containing all candidate CNV regions to be validated (candlist)", "name": "candlist", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --candlist \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \"--candlist $value \" : \"\""}, "command": false, "precond": {"python": "not startsnp and not endsnp and not delfreq and not dupfreq", "perl": "not $startsnp and not $endsnp and not $delfreq and not $dupfreq"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "CandidateRegion", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "rawcnv == '--cctest'", "perl": "$rawcnv eq '--cctest'"}, "prompt": "Specific Case-control comparison arguments (cctest)", "name": "cctestCalling", "children": [{"comment": "A file containing phenotype informatoin for each individual, so\n               that --cctest can be used to compare the frequency between\n               cases and controls. Each line has two tab-delimited fields:\n               file name and the phenotype. By default, \"control\" means\n               control subjects, and other words means cases; however, the\n               user can use --control_label argument to change the phenotype\n               label for controls.", "prompt": "A file containing phenotype information for each input file (phenofile)", "name": "phenofile", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "( \"\" , \" --phenofile \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \"--phenofile $value \" : \"\""}, "command": false, "precond": {"python": "rawcnv == '--cctest'", "perl": "$rawcnv eq '--cctest'"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Phenotype", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify the text label for control subjects in the phenotype\n               file specified by the --phenofile argument. Normally the \"control\" is used to specify \n               controls, and all other individuals\n               are treated as cases. However, some times users may use 1 to\n               denote controls and 2 to denote cases; in such situations the\n               \"--control_label 1\" should be used for the --cctest operation.", "prompt": "The phenotype label for control subjects in the phenotype file (control_label)", "name": "control_label", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --control_label \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \"--control_label $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Performed one-sided test (onesided)", "name": "onesided", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --onesided \" )[ value ]", "perl": "($value) ? \"--onesided\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify the particular types of CNVs to be used in the --cctest\n               operation. By default both duplications and deletions are\n               treated as a single group of CNVs and be used to compare cases\n               and controls.", "prompt": "Used together to specify types of CNVs to be tested (type_filter)", "name": "type_filter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --type_filter \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value  and $value ne $vdef) ? \"--type_filter $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Misc options", "name": "miscOpt", "children": [{"comment": "The prior probability of 6 hidden states a given CNV call in\n               father or mother.  This is used for joint calling of trios or\n               quartets. It is specified as six numbers separated by a comma that sum up to 1.\n               The empirically derived default values actually work well: trio, quartet.", "prompt": "Prior belief on CN state for regions with CNV calls. Six numbers separated by a comma (fmprior)", "name": "fmprior", "ctrl": {"python": "len(value.split(',')) == 6", "perl": "$value ~= /\\d+(,\\d+){5}/"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --fmprior \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \"--fmprior $value \" : \"\""}, "command": false, "precond": {"python": "rawcnv =='--trio' or rawcnv =='--quartet'", "perl": "$rawcnv eq '--trio' or  $rawcnv eq '--quartet'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify the probability that a given CNV is a de novo event for\n               family-based CNV calling. The default is 0.0001. trio, quartet", "prompt": "Prior belief on genome-wide de novo event rate (denovo_rate)", "name": "denovo_rate", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --denovo_rate \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value  and $value != $vdef) ? \"--denovo_rate $value\" : \"\""}, "command": false, "precond": {"python": "rawcnv =='--trio' or rawcnv =='--quartet'", "perl": "$rawcnv eq '--trio' or  $rawcnv eq '--quartet'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option is turned on by default. It adjust the log R Ratio\n               values of the entire genome by a constant so that the median is\n               zero: test, trio, quartet, joint, validate.", "prompt": "Adjust genome-wide LRR such that median equal 0 (nomedianadjust)", "name": "medianadjust", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --nomedianadjust \" )[ not value ]", "perl": "(not $value) ? \"--nomedianadjust\" : \"\""}, "command": false, "precond": {"python": "type =='--test' or rawcnv =='--trio' or rawcnv =='--quartet' or type =='--joint' or type =='--validate'", "perl": "$type eq '--test' or $rawcnv eq '--trio' or $rawcnv eq '--quartet' or $type eq '--joint' or  $type eq '--validate'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option is turned ON by default (new July 2008): it adjust\n               the BAF values genome-wide such that the median value is 0.5.", "prompt": "Adjust genome-wide BAF such that median equal 0.5 (nobafadjust)", "name": "bafadjust", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --nobafadjust \" )[ not value ]", "perl": "(not $value) ? \"--nobafadjust\" : \"\""}, "command": false, "precond": {"python": "type =='--test' or rawcnv =='--trio' or rawcnv =='--quartet' or type =='--joint' or type =='--validate'", "perl": "$type eq '--test' or $rawcnv eq '--trio' or $rawcnv eq '--quartet' or  $type eq '--joint' or  $type eq '--validate'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option is turned ON by default: it adjust the SD values in\n               HMM model such that the model fits the signal quality of the\n               testing sample to reduce false positive calls", "prompt": "Adjust SD of hidden Markov model based on input signal (nosdadjust)", "name": "sdadjust", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --nosdadjust \" )[ not value ]", "perl": "(not $value) ? \"--nosdadjust\" : \"\""}, "command": false, "precond": {"python": "type =='--test' or rawcnv =='--trio' or rawcnv =='--quartet' or type =='--joint' or type =='--validate'", "perl": "$type eq '--test' or $rawcnv eq '--trio' or $rawcnv eq '--quartet' or $type eq '--joint' or  $type eq '--validate'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This argument is turned ON by default. It requires the\n               input/output buffer to flush immediately (that is, no\n               input/output is buffered). When PennCNV is running remotely\n               (for example, through a SSH connection) or when the output is\n               redirected, this argument cause the program to report progress\n               in real-time.  When running PennCNV in parallel with many processes \n               accessing disks simultaneously, this option should be\n               turned off to decrease system overhead.", "prompt": "Flush input/output buffer (noflush)", "name": "flush", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --noflush \" )[ not value ]", "perl": "(not $value) ? \"--noflush\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Outfile for detect_cnv and Input file for visualize_cnv", "name": "outfile_name", "ctrl": null, "simple": null, "argpos": "17", "format": {"python": "\" --out detect_cnv.out \"", "perl": "\" --out detect_cnv.out \""}, "command": false, "precond": {"python": "(type is not None or rawcnv is not None) and type != '--test'", "perl": "($type is not None or $rawcnv is not None) and $type ne '--test'"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "kcolumn.pl"}, "documentation_links": [], "type": "program", "name": "detect_cnv"}, {"comment": null, "homepage_links": ["http://dialign.gobics.de/"], "_id": {"$oid": "51434da293546d52388cab7a"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "DNA and protein sequence alignment based on segment-to-segment comparison", "title": "DIALIGN", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "ali", "simple": null, "filenames": {"python": "\"*.cw\"", "perl": "\"*.cw\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "fasta alignment file", "name": "fasta_alignment", "simple": null, "filenames": {"python": "\"*.fa\"", "perl": "\"*.fa\""}, "precond": {"python": "fasta", "perl": "$fasta"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["Fasta"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Sequences", "name": "sequence", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "2,n"}, "paramfile": null}, {"comment": null, "prompt": "Nucleic acid or protein alignment (-n)", "name": "protein_dna", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\"  , \" -n\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -n\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Others options", "name": "dialign_opt", "children": [{"comment": null, "prompt": "Threshold (-thr)", "name": "threshold", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -thr \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -thr $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "\"maximum or minimum linkage\" clustering used to construct sequence tree (instead of UPGMA).", "prompt": "Clustering type used to construct sequence tree", "name": "cluster", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -\" +str(value) )[ value is not None and value !=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "iterative scoring scheme (fragment scores are based on\n                 conditional probabilities given the previously aligned\n                 fragments. I.e. the probability of a fragment -- and\n                 therefore its score -- is not based on the probability\n                 of random occurrence in the input sequences but rather on\n                 the probability of occurrence between those fragments\n                 that have already been accepted in previous iteration\n                 steps).", "prompt": "Iterative scoring scheme (-it)", "name": "iterative", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -it\" )[ value ]", "perl": "($value) ? \" -it\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "overlap weights switched off (by default,\n                 overlap weights are used if up to 35 sequences are\n                 aligned). This option speeds up the alignment but may lead\n                 to reduced alignment quality.", "prompt": "Overlap weights (-iw)", "name": "overlap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -iw\" )[ value ]", "perl": "($value) ? \" -iw\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "protein_dna == \"n\"", "perl": "$protein_dna eq \"n\""}, "prompt": "DNA options", "name": "dna_opt", "children": [{"comment": "Input sequences are nucleic acid sequences and `nucleic acid segments' are translated to `peptide segments'.", "prompt": "Translation of nucleotide diagonals into peptide diagonals (-nt)", "name": "translation", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -nt\" )[ value ]", "perl": "($value) ? \" -nt\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If segments are translated, not only the `Watson strand' but also the `Crick strand' is looked at", "prompt": "Strand to looked at Watson and Crick strands (-cs)", "name": "translation_strand", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -cs\" )[ value ]", "perl": "($value) ? \" -cs\" : \"\""}, "command": false, "precond": {"python": "translation or mix", "perl": "$translation or $mix"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "`mixed alignments' consisting of P-fragments and N-fragments if nucleic acid sequences are aligned.", "prompt": "Mixed alignments (-ma)", "name": "mix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -ma\" )[ value ]", "perl": "($value) ? \" -ma\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Non-translated nucleic acid fragments are taken\n                 into account only if they start with at least two matches.\n                 Speeds up DNA alignment at the expense of sensitivity.", "prompt": "Dna alignment speed up (-ds)", "name": "speed", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -ds\" )[ value ]", "perl": "($value) ? \" -ds\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "combines the following options:\n                 -ma, -it, -thr 2, -lmax 30, -smin 8, -nta, -ff,\n                 -fop, -ff, -cs, -ds, -pst", "prompt": "Long genomic sequences (-lgs)", "name": "long_genomic", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -lgs\" )[ value ]", "perl": "($value) ? \" -lgs\" : \"\""}, "command": false, "precond": {"python": "not long_genomic_pep", "perl": "not $long_genomic_pep"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Like \"-lgs\" but with all segment pairs assessed at the  peptide level (rather than 'mixed alignments' as with the\"-lgs\" option). Therefore faster than -lgs but not very sensitive for non-coding regions.", "prompt": "Long genomic sequences (-lfs_t)", "name": "long_genomic_pep", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -lgs_t\" )[ value ]", "perl": "($value) ? \" -lgs_t\" : \"\""}, "command": false, "precond": {"python": "not long_genomic", "perl": "not $long_genomic"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": "The number of `*' characters below the alignment reflects the degree of local similarity among sequences. More precisely: They represent the sum of `weights' of diagonals connecting residues at the respective position.By default, no stars are used but numbers between 0 and 9, instead.", "prompt": "Maximum number of * characters representing degree similarity (-stars)", "name": "max_simil", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -stars \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \" -stars $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "residues not belonging to selected fragments are replaced by `*' characters in output alignment (rather than being printed in lower-case characters)", "prompt": "Mask not aligned residues (-mask)", "name": "mask", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -mask\" )[ value ]", "perl": "($value) ? \" -mask\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Be aware that only upper-case letters are regarded to be aligned in fasta output file.", "prompt": "Alignment in fasta format (-fa)", "name": "fasta", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -fa\" )[ value ]", "perl": "($value) ? \" -fa\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "2.2.1", "references": [{"url": null, "doi": null, "label": "B. Morgenstern (1999). DIALIGN 2: improvement of the segment-to-segment approach to multiple sequence alignment. Bioinformatics 15, 211 - 218."}], "source_links": ["http://dialign.gobics.de/download/"], "env": [], "authors": "Morgenstern, Dress, Werner", "command": {"path": null, "value": "dialign"}, "documentation_links": [], "type": "program", "name": "dialign"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab7b"}, "classifications": [{"type": "mobyle1", "classification": "alignment:differences"}], "description": "Compare and report features of two similar sequences", "title": "diffseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "aoutfeat_out option", "name": "e_aoutfeat_out", "simple": null, "filenames": {"python": "e_aoutfeat"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Feature", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_offormat_aoutfeat"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "boutfeat_out option", "name": "e_boutfeat_out", "simple": null, "filenames": {"python": "e_boutfeat"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Feature", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_offormat_boutfeat"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "bsequence option", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "The similar regions between the two sequences are found by creating a hash table of 'wordsize'd subsequences. 10 is a  reasonable default. Making this value larger (20?) may speed up  the program slightly, but will mean that any two differences  within 'wordsize' of each other will be grouped as a single region  of difference. This value may be made smaller (4?) to improve the  resolution of nearby differences, but the program will go much  slower.", "prompt": "Word size (value greater than or equal to 2)", "name": "e_wordsize", "ctrl": {"python": "value >= 2"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -wordsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "Normally this program will find regions of identity that are the length of the specified word-size or greater and will then  report the regions of difference between these matching regions.  This works well and is what most people want if they are working  with long overlapping nucleic acid sequences. You are usually not  interested in the non-overlapping ends of these sequences. If you  have protein sequences or short RNA sequences however, you will be  interested in differences at the very ends . It this option is  set to be true then the differences at the ends will also be  reported.", "prompt": "Force reporting of differences at the start and end", "name": "e_globaldifferences", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -globaldifferences\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "File for output of first sequence's features", "prompt": "Name of the output feature file (e_aoutfeat)", "name": "e_aoutfeat", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -aoutfeat=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the feature output format", "name": "e_offormat_aoutfeat", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -offormat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "File for output of second sequence's features", "prompt": "Name of the output feature file (e_boutfeat)", "name": "e_boutfeat", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\" , \" -boutfeat=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the feature output format", "name": "e_offormat_boutfeat", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -offormat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "diffseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/diffseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "diffseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab7c"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:motifs"}], "description": "Reports on protein proteolytic enzyme or reagent cleavage sites", "title": "digest", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "seqall option", "name": "e_seqall", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -seqall=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "Molecular weight data for amino acids", "prompt": "Molecular weights data file", "name": "e_mwdata", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -mwdata=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "MolecularWeights", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Enzymes and reagents", "name": "e_menu", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -menu=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use monoisotopic weights", "name": "e_mono", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -mono\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "Trypsin will not normally cut after 'KR' if they are followed by any of  'KRIFLP'. Lys-C will not normally cut  after 'K' if it is followed by 'P'.  Arg-C will not normally cut after 'R'  if it is followed by 'P'. V8-bicarb  will not normally cut after 'E' if it  is followed by any of 'KREP'.  V8-phosph will not normally cut after  'DE' if they are followed by 'P'.  Chymotrypsin will not normally cut  after 'FYWLM' if they are followed by  'P'. Specifying unfavoured shows  these unfavoured cuts as well as the  favoured ones.", "prompt": "Allow unfavoured cuts", "name": "e_unfavoured", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -unfavoured\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Allows semi-specific and non-specific digestion. This option is  particularly useful for generating  lists of peptide sequences for  protein identification using  mass-spectrometry.", "prompt": "Allow ragging", "name": "e_ragging", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -ragging\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Ragging value (value from 1 to 4)", "name": "e_termini", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -termini=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "Used for partial digestion. Shows all cuts from favoured cut sites plus  1..3, 2..4, 3..5 etc but not (e.g.)  2..5. Overlaps are therefore  fragments with exactly one potential  cut site within it.", "prompt": "Show overlapping partials", "name": "e_overlap", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -overlap\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "As for overlap but fragments containing more than one potential  cut site are included.", "prompt": "Show all partials", "name": "e_allpartials", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -allpartials\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "digest"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/digest.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "digest"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab7d"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:distance"}], "description": "Create a distance matrix from a multiple sequence alignment", "title": "distmat", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "EmbossDistanceMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "File containing a sequence alignment.", "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA", "MSF", "PAIR", "MARKX0", "MARKX1", "MARKX2", "MARKX3", "MARKX10", "SRS", "SRSPAIR", "SCORE", "UNKNOWN", "MULTIPLE", "SIMPLE", "MATCH"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "Multiple substitution correction methods for nucleotides.", "prompt": "Multiple substitution correction methods for nucleotides", "name": "e_nucmethod", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -nucmethod=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Multiple substitution correction methods for proteins.", "prompt": "Multiple substitution correction methods for proteins", "name": "e_protmethod", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -protmethod=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "Option to use the ambiguous codes in the calculation of the Jukes-Cantor method or if the sequences are proteins.", "prompt": "Use the ambiguous codes in the calculation.", "name": "e_ambiguous", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -ambiguous\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Option to weight gaps in the uncorrected (nucleotide) and Jukes-Cantor distance methods.", "prompt": "Weight given to gaps", "name": "e_gapweight", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -gapweight=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Choose base positions to analyse in each codon i.e. 123 (all bases), 12 (the first two bases), 1, 2, or 3 individual  bases.", "prompt": "Base position to analyse", "name": "e_position", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -position=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This will force the calculation of parameter 'a' in the Jin-Nei Gamma distance calculation, otherwise the default is 1.0  (see -parametera option).", "prompt": "Calculate the nucleotide jin-nei parameter 'a'", "name": "e_calculatea", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -calculatea\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "User defined parameter 'a' to be use in the Jin-Nei Gamma distance calculation. The suggested value to be used is 1.0 (Jin  et al.) and this is the default.", "prompt": "Nucleotide jin-nei parameter 'a'", "name": "e_parametera", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -parametera=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "distmat"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/distmat.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "distmat"}, {"comment": "This program uses nucleotide sequences to compute a distance matrix, under four different models of nucleotide substitution. It can also\ncompute a table of similarity between the nucleotide sequences. The distance for each pair of species estimates the total branch length between the two species, and can be used in the distance matrix programs FITCH, KITSCH or NEIGHBOR.", "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab7e"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:distance"}], "description": "Compute distance matrix from nucleotide sequences", "title": "dnadist", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Outfile", "name": "outfile", "simple": null, "filenames": {"python": "\"dnadist.outfile\"", "perl": "\"dnadist.outfile\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipDistanceMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "seqboot outfile", "name": "seqboot_out", "simple": null, "filenames": {"python": "\"seqboot.outfile\"", "perl": "\"seqboot.outfile\""}, "precond": {"python": "seqboot", "perl": "$seqboot"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SetOfAlignment", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "dnadist", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"dnadist <dnadist.params\"", "perl": "\"dnadist <dnadist.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The input file must contained aligned sequences in PHYLIP format obtained by sequence alignment programs.", "prompt": "Alignment File", "name": "infile", "ctrl": {"python": "value not in ( \"infile\" , \"outfile\" )", "perl": "$value ne \"infile\" and $value ne \"outfile\""}, "simple": null, "argpos": "-10", "format": {"python": "\"ln -s \" + str( infile ) + \" infile && \"", "perl": "\"ln -s $infile infile && \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["PHYLIPI"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Dnadist options", "name": "dnadist_opt", "children": [{"comment": null, "prompt": "Distance (D)", "name": "distance", "ctrl": null, "simple": null, "argpos": "1", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnadist.params"}, {"comment": "The T option in this program does not stand for Threshold, but instead is the Transition/transversion option.\n             The user is prompted for a real number greater than 0.0, as the expected ratio of transitions to transversions. \n             Note that this is not the ratio of the first to the second kinds of events, but the resulting expected ratio of transitions to transversions. \n             The exact relationship between these two quantities depends on the frequencies in the base pools. \n             The default value of the T parameter if you do not use the T option is 2.0.", "prompt": "Transition/transversion ratio (T)", "name": "ratio", "ctrl": {"python": "value >= 0.0", "perl": "$value >= 0.0"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"T\\n\"+ str( value )+\"\\n\" )[value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"T\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "distance == \"F84\" or distance == \"K\"", "perl": "$distance eq \"F84\" or $distance eq \"K\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnadist.params"}, {"comment": null, "prompt": "Gamma distributed rates across sites (G)", "name": "gamma", "ctrl": null, "simple": null, "argpos": "5", "format": null, "command": false, "precond": {"python": "distance == \"F84\" or distance == \"K\" or distance == \"JC\"", "perl": "$distance eq \"F84\" or $distance eq \"K\" or $distance eq \"JC\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnadist.params"}, {"comment": "In gamma distribution parameters, this is 1/(square root of alpha)", "prompt": "Coefficient of variation of substitution rate among sites (must be positive) (if Gamma)", "name": "variation_coeff", "ctrl": null, "simple": null, "argpos": "1010", "format": {"python": "( \"\" , str( value ) + \"\\n\" )[ value is not None ]", "perl": "(defined $value) ? \"$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "gamma != \"No\"", "perl": "$gamma ne \"No\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnadist.params"}, {"comment": null, "prompt": "Fraction of invariant sites (if Gamma)", "name": "invariant_sites", "ctrl": null, "simple": null, "argpos": "1011", "format": {"python": "( \"\" , str( value ) + \"\\n\" )[ value is not None ]", "perl": "(defined $value) ? \"$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "gamma == \"GI\"", "perl": "$gamma eq \"GI\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnadist.params"}, {"comment": "These must add to 1", "precond": {"python": "distance == \"F84\"", "perl": "distance eq \"F84\""}, "prompt": "Base frequencies for A, C, G, T/U (if not empirical)", "name": "ACGT_frequencies", "children": [{"comment": null, "prompt": "Use empirical base frequencies (F)", "name": "empirical_frequencies", "ctrl": null, "simple": null, "argpos": "1", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnadist.params"}, {"comment": null, "prompt": "Base frequencies for A", "name": "A_frequency", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "not empirical_frequencies", "perl": "not $empirical_frequencies"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Base frequencies for C", "name": "C_frequency", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "not empirical_frequencies", "perl": "not $empirical_frequencies"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Base frequencies for G", "name": "G_frequency", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "not empirical_frequencies", "perl": "not $empirical_frequencies"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Base frequencies for T/U", "name": "T_frequency", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "not empirical_frequencies", "perl": "not $empirical_frequencies"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "base_frequencies", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\"F\\n\" + str( A_frequency ) + \" \" + str( C_frequency ) + \" \" + str( G_frequency ) + \" \" + str( T_frequency ) + \"\\n\"", "perl": "\"F\\\\n$A_frequency $C_frequency $G_frequency $T_frequency\\\\n\""}, "command": false, "precond": {"python": "not empirical_frequencies", "perl": "not $empirical_frequencies"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnadist.params"}]}]}, {"comment": null, "precond": null, "prompt": "Weight options", "name": "weight_opt", "children": [{"comment": null, "prompt": "Use weights for sites (W)", "name": "weights", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"W\\n\" )[ value ]", "perl": "($value) ? \"W\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnadist.params"}, {"comment": "It selects a set of sites to be analyzed, ignoring the others. \n            The sites selected are those with weight 1.\n            The weights in it are a simple string of digits. \n            Blanks in the weightfile are skipped over and ignored, and the weights can continue to a new line.", "prompt": "Weights file", "name": "weights_file", "ctrl": {"python": "value not in ( \"infile\" , \"outfile\" )", "perl": "$value ne \"infile\" and $value ne \"outfile\""}, "simple": null, "argpos": "-1", "format": {"python": "( \"\" , \" ln -s \" + str( weights_file ) + \" weights && \" )[ value is not None]", "perl": "(defined $value) ? \"ln -s $weights_file weights && \" : \"\""}, "command": false, "precond": {"python": "weights", "perl": "$weights"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipWeight", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Bootstrap options", "name": "bootstrap", "children": [{"comment": "By selecting this option, the bootstrap will be performed on your sequence file. So you don't need to perform a separated seqboot before.Don't give an already bootstrapped file to the program, this won't work!", "prompt": "Perform a bootstrap before analysis", "name": "seqboot", "ctrl": null, "simple": null, "argpos": "-5", "format": {"python": "( \"\" , \"seqboot < seqboot.params && mv outfile seqboot.outfile && rm infile && ln -s seqboot.outfile infile && \" )[ value ]", "perl": "($value) ? \"seqboot < seqboot.params && mv outfile seqboot.outfile && rm infile  && ln -s seqboot.outfile infile && \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "1. The bootstrap. Bootstrapping was invented by Bradley Efron in 1979, and its use in phylogeny estimation was introduced by me (Felsenstein, 1985b). It involves creating a new data set by sampling N characters randomly with replacement, so that the resulting data set has the same size as the original, but some characters have been left out and others are duplicated. The random variation of the results from analyzing these bootstrapped data sets can be shown statistically to be\n              typical of the variation that you would get from collecting new data sets. The method assumes that the characters evolve independently, an assumption that may not be realistic for many kinds of data.2. Delete-half-jackknifing. This alternative to the bootstrap involves sampling a random half of the characters, and including them in the data but dropping the others. The resulting data sets are half the size of the original, and no characters are duplicated. The random variation from doing this should be very similar to that obtained from the bootstrap. The method is advocated by Wu (1986).3. Permuting species for each characters. This method of resampling (well, OK, it may not be best to call it resampling) was introduced by Archie (1989) and Faith (1990; see also Faith and Cranston, 1991). It involves permuting the columns of the data matrix separately. This produces data matrices that have the same number and kinds of characters but no taxonomic structure. It is used for different purposes than the bootstrap, as it tests not the variation around an estimated tree but the hypothesis that there is no taxonomic structure in the data: if a statistic such as number of steps is significantly smaller in the actual data than it is in replicates that are permuted, then we can argue that there is some taxonomic structure in the data (though perhaps it might be just the presence of aa pair of sibling species).4. Permuting characters order. This simply permutes the order of the characters, the same reordering being applied to all species. For many methods of tree inference this will make no difference to the outcome (unless one has rates of evolution correlated among adjacent sites). It is included as a possible step in carrying out a permutation test of homogeneity of characters (such as the Incongruence Length Difference test).5. Permuting characters separately for each species. This is a method introduced by Steel, Lockhart, and Penny (1993) to permute data so as to destroy all phylogenetic structure, while keeping the base composition of each species the same as before. It shuffles the character order separately for each species.", "prompt": "Resampling methods (J)", "name": "Method", "ctrl": null, "simple": null, "argpos": "1", "format": null, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": "Random number seed (must be odd)", "name": "seqboot_seed", "ctrl": {"python": "value >= 0 and ( ( value % 2 ) != 0 )", "perl": "$value >= 0 and (($value % 2) != 0)"}, "simple": null, "argpos": "1000", "format": {"python": "str( value ) +\"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": "How many replicates", "name": "replicates", "ctrl": {"python": "value <= 1000", "perl": "$value <= 1000"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"R\\n\" + str( value ) + \"\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"R\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}]}, {"comment": null, "prompt": null, "name": "confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"y\\n\"", "perl": "\"y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnadist.params"}, {"comment": null, "prompt": null, "name": "terminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnadist.params"}, {"comment": null, "prompt": null, "name": "multiple_dataset", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\"M\\nD\\n\" + str( replicates ) + str(\"\\n\")", "perl": "\"M\\\\nD\\\\n$replicates\\\\n\""}, "command": false, "precond": {"python": "seqboot and replicates > 1", "perl": "$seqboot and $replicates > 1"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnadist.params"}, {"comment": null, "prompt": null, "name": "seqboot_confirm", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\"y\\n\"", "perl": "\"y\\\\n\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": null, "name": "seqboot_terminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/phylip/doc/dnadist.html"], "type": "program", "name": "dnadist"}, {"comment": "This   program  carries  out   unrooted  parsimony (analogous to Wagner trees) (Eck and Dayhoff, 1966; Kluge and Farris, 1969) on DNA sequences.  The method of Fitch (1971) is used to count the number of changes of base needed on a given tree.", "homepage_links": [], "_id": {"$oid": "51434da293546d52388cab7f"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:parsimony"}], "description": "DNA Parsimony Program", "title": "dnapars", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Outfile", "name": "outfile", "simple": null, "filenames": {"python": "'dnapars.outfile'", "perl": "dnapars.outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Tree file", "name": "treefile", "simple": null, "filenames": {"python": "'dnapars.outtree'", "perl": "dnapars.outtree"}, "precond": {"python": "print_treefile", "perl": "$print_treefile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "seqboot outfile", "name": "seqboot_out", "simple": null, "filenames": {"python": "\"seqboot.outfile\"", "perl": "\"seqboot.outfile\""}, "precond": {"python": "seqboot", "perl": "$seqboot"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SetOfAlignment", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Consense outfile", "name": "consense_outfile", "simple": null, "filenames": {"python": "\"consense.outfile\"", "perl": "\"consense.outfile\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Consense tree file", "name": "consense_treefile", "simple": null, "filenames": {"python": "\"consense.outtree\"", "perl": "\"consense.outtree\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "dnapars", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"dnapars <dnapars.params\"", "perl": "\"dnapars <dnapars.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The input file must contained aligned sequences in PHYLIP format obtained by sequence alignment programs.", "prompt": "Alignment File (infile)", "name": "infile", "ctrl": {"python": "value not in ( \"outfile\" , \"infile\" , \"outtree\"  , \"intree\")", "perl": "$value ne \"outfile\" and $value ne \"infile\" and $value ne \"outtree\" and $value ne \"intree\""}, "simple": null, "argpos": "-10", "format": {"python": "\"ln -s \" + str( infile ) + \" infile && \"", "perl": "\"ln -s $infile infile && \""}, "command": false, "precond": {"python": "infile != \"infile\"", "perl": "$infile ne \"infile\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["PHYLIPI"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Parsimony options", "name": "dnapars_opt", "children": [{"comment": null, "prompt": "Use Threshold parsimony (T)", "name": "use_threshold", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \"T\\n\" + str( threshold ) + \"\\n\" )[ value ]", "perl": "($value) ? \"T\\\\n$threshold\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnapars.params"}, {"comment": "Thresholds less than or equal to 1.0 do not have any meaning and should not be used: they will result in a tree dependent only on the input order of species and not at all on the data", "prompt": "Value for threshold parsimony", "name": "threshold", "ctrl": {"python": "threshold > 1", "perl": "$threshold > 1"}, "simple": null, "argpos": "3", "format": null, "command": false, "precond": {"python": "use_threshold", "perl": "$use_threshold"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnapars.params"}, {"comment": null, "prompt": "Use Transversion parsimony (N)", "name": "use_transversion", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "( \"\" , \"N\\n\" )[ value ]", "perl": "($value) ? \"N\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnapars.params"}]}, {"comment": null, "precond": null, "prompt": "Bootstrap options ( multiple dataset )", "name": "bootstrap", "children": [{"comment": "By selecting this option, the bootstrap will be performed on your sequence file. So you don't need to perform a separated seqboot before.Don't give an already bootstrapped file to the program, this won't work!You can't use \"Randomize options\" and \"Bootstrap options\" at the same time.", "prompt": "Perform a bootstrap before analysis", "name": "seqboot", "ctrl": {"python": "not( seqboot and jumble)", "perl": "not( $seqboot and $jumble)"}, "simple": null, "argpos": "-5", "format": {"python": "( \"\" , \"seqboot <seqboot.params && mv outfile seqboot.outfile && rm infile  && ln -s seqboot.outfile infile && \" )[ value ]", "perl": "($value) ? \"seqboot <seqboot.params && mv outfile seqboot.outfile && rm infile  && ln -s seqboot.outfile infile && \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "1. The bootstrap. Bootstrapping was invented by Bradley Efron in 1979, and its use in phylogeny estimation was introduced by me (Felsenstein, 1985b). It involves creating a new data set by sampling N characters randomly with replacement, so that the resulting data set has the same size as the original, but some characters have been left out and others are duplicated. The random variation of the results from analyzing these bootstrapped data sets can be shown statistically to be\n              typical of the variation that you would get from collecting new data sets. The method assumes that the characters evolve independently, an assumption that may not be realistic for many kinds of data.2. Delete-half-jackknifing. This alternative to the bootstrap involves sampling a random half of the characters, and including them in the data but dropping the others. The resulting data sets are half the size of the original, and no characters are duplicated. The random variation from doing this should be very similar to that obtained from the bootstrap. The method is advocated by Wu (1986).3. Permuting species for each characters. This method of resampling (well, OK, it may not be best to call it resampling) was introduced by Archie (1989) and Faith (1990; see also Faith and Cranston, 1991). It involves permuting the columns of the data matrix separately. This produces data matrices that have the same number and kinds of characters but no taxonomic structure. It is used for different purposes than the bootstrap, as it tests not the variation around an estimated tree but the hypothesis that there is no taxonomic structure in the data: if a statistic such as number of steps is significantly smaller in the actual data than it is in replicates that are permuted, then we can argue that there is some taxonomic structure in the data (though perhaps it might be just the presence of aa pair of sibling species).4. Permuting characters order. This simply permutes the order of the characters, the same reordering being applied to all species. For many methods of tree inference this will make no difference to the outcome (unless one has rates of evolution correlated among adjacent sites). It is included as a possible step in carrying out a permutation test of homogeneity of characters (such as the Incongruence Length Difference test).5. Permuting characters separately for each species. This is a method introduced by Steel, Lockhart, and Penny (1993) to permute data so as to destroy all phylogenetic structure, while keeping the base composition of each species the same as before. It shuffles the character order separately for each species.", "prompt": "Resampling methods (J)", "name": "Method", "ctrl": null, "simple": null, "argpos": "1", "format": null, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": "How many replicates (R)", "name": "replicates", "ctrl": {"python": "replicates <= 1000", "perl": "$replicates <= 1000"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"R\\n\" + str( value ) +\"\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"R\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": "Random number seed (must be odd)", "name": "seqboot_seed", "ctrl": {"python": "value > 0 and (( value % 2 ) != 0 )", "perl": "$value > 0 and (($value % 2) != 0)"}, "simple": null, "argpos": "1010", "format": {"python": "str( value ) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": "Number of times to jumble", "name": "seqboot_times2jumble", "ctrl": {"python": "seqboot_times2jumble * ( 1 , replicates)[replicates is not None] <= 100000", "perl": "($seqboot_times2jumble * (defined $replicates) ? $replicates : 1) <= 100000"}, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "multiple_dataset", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\"M\\nD\\n\" + str( replicates ) + \"\\n\" + str(seqboot_seed) + \"\\n\"+ str( seqboot_times2jumble ) + \"\\n\"", "perl": "\"M\\\\nD\\\\n$replicates\\\\n$seqboot_seed\\\\n$times2jumble\\\\n\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnapars.params"}, {"comment": null, "prompt": null, "name": "bootconfirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": null, "name": "bootterminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": "Compute a consensus tree", "name": "consense", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "( \"\" , \" && cp infile dnapars.infile && cp dnapars.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" )[ value ]", "perl": "($value) ? \" && cp infile dnapars.infile &&  cp dnapars.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" : \"\""}, "command": false, "precond": {"python": "seqboot and print_treefile", "perl": "$seqboot and $print_treefile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Use these options only if you have only one data set", "precond": null, "prompt": "Randomize options ( one dataset )", "name": "jumble_opt", "children": [{"comment": null, "prompt": "Randomize (jumble) input order (J)", "name": "jumble", "ctrl": {"python": "not (jumble and seqboot)", "perl": "not( $jumble and $seqboot)"}, "simple": null, "argpos": "20", "format": {"python": "( \"\" , \"J\\n\" + str( jumble_seed ) + \"\\n\" + str( jumble_times ) +\"\\n\" )[ value and not seqboot ]", "perl": "($value and not $seqboot )? \"J\\\\n$jumble_seed\\\\n$jumble_times\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnapars.params"}, {"comment": null, "prompt": "Random number seed for jumble (must be odd)", "name": "jumble_seed", "ctrl": {"python": "value is not None and (value > 0 and ((value % 2) != 0))", "perl": "defined $value and ($value > 0 and (($value % 2) != 0))"}, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "jumble", "perl": "$jumble"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of times to jumble", "name": "jumble_times", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "jumble", "perl": "$jumble"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "User tree options", "name": "user_tree_opt", "children": [{"comment": "To give your tree to the program, you must normally put it in the alignment file, after the sequences, preceded by a line indicating how many trees you give.Here, this will be automatically appended: just give a treefile and the number of trees in it.", "prompt": "Use User tree (default: no, search for best tree) (U)", "name": "user_tree", "ctrl": {"python": "not ( user_tree and seqboot )", "perl": "not ( $user_tree and $seqboot )"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"U\\n\" )[ value ]", "perl": "($value)? \"U\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnapars.params"}, {"comment": "Give a tree whenever the infile does not already contain the tree.", "prompt": "User Tree file", "name": "tree_file", "ctrl": {"python": "value not in ( \"outfile\" , \"infile\" , \"outtree\" ,\"intree\" )", "perl": "$value ne \"outfile\" and $value ne \"infile\" and $value ne \"outtree\" and $value ne \"intree\""}, "simple": null, "argpos": "-1", "format": {"python": "( \"\" , \"ln -s \" + str( tree_file ) + \" intree; \" )[ value is not None ]", "perl": "(defined $value) ? \"ln -s $tree_file intree; \" : \"\""}, "command": false, "precond": {"python": "user_tree", "perl": "$user_tree"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Weight options", "name": "weight_opt", "children": [{"comment": null, "prompt": "Use weights for sites (W)", "name": "weights", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"W\\n\" )[ value ]", "perl": "($value) ? \"W\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnapars.params"}, {"comment": null, "prompt": "Weights file", "name": "weights_file", "ctrl": {"python": "value not in ( \"outfile\" , \"infile\" , \"outtree\" ,\"intree\" )", "perl": "$value ne \"outfile\" and $value ne \"infile\" and $value ne \"outtree\" and $value ne \"intree\""}, "simple": null, "argpos": "-1", "format": {"python": "( \"\" , \"ln -s \" + str( weights_file ) + \" weights; \" )[ value is not None ]", "perl": "(defined $value) ? \"ln -s $weights_file weights; \" : \"\""}, "command": false, "precond": {"python": "weights", "perl": "$weights"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipWeight", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": "Tells the program to print a semi-graphical picture of the tree in the outfile.", "prompt": "Print out tree (3)", "name": "print_tree", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"3\\n\" , \"\")[ value ]", "perl": "($value) ? \"\" : \"3\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnapars.params"}, {"comment": null, "prompt": "Print out steps in each site (4)", "name": "print_steps", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"4\\n\" )[ value ]", "perl": "($value) ? \"4\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnapars.params"}, {"comment": null, "prompt": "Print sequences at all nodes of tree (5)", "name": "print_sequences", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"5\\n\" )[ value ]", "perl": "($value) ? \"5\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnapars.params"}, {"comment": "Tells the program to save the tree in a tree file (outtree) (a standard representation of trees where the tree is specified by a nested pairs of parentheses, enclosing names and separated by commas).", "prompt": "Write out trees onto tree file (6)", "name": "print_treefile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"6\\n\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \"6\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnapars.params"}, {"comment": null, "prompt": "Print out the data at start of run (1)", "name": "printdata", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"1\\n\" )[ value ]", "perl": "($value) ? \"1\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnapars.params"}]}, {"comment": null, "precond": null, "prompt": "Other options", "name": "other_options", "children": [{"comment": "The O (Outgroup) option specifies which species is to have the root of the tree be on the line leading to it.For example, if the outgroup is a species \"Mouse\" then the root of the tree will be placed in the middle of the branch which is connected to this species, with Mouse branching off on one side of the root and the lineage leading to the rest of the tree on the other.This option is toggle on by choosing the number of the outgroup (the species being taken in the numerical order that they occur in the input file).Outgroup-rooting will not be attempted  if it is a user-defined tree, despite your invoking the option.When it is used, the tree as printed out is still listed as being an unrooted tree, though the outgroup is connected to the bottommost node so that it is easy to visually convert the tree into rooted form.", "prompt": "Outgroup species (J)", "name": "outgroup", "ctrl": {"python": "value is not None and value > 0", "perl": "defined $value and $value > 0"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"O\\n\" + str( value ) + \"\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"O\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnapars.params"}]}, {"comment": null, "prompt": null, "name": "confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnapars.params"}, {"comment": null, "prompt": null, "name": "terminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "dnapars.params"}, {"comment": null, "prompt": null, "name": "consense_confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "prompt": null, "name": "consense_terminal_type", "ctrl": null, "simple": null, "argpos": "-2", "format": {"python": "\"T\\n\"", "perl": "\"T\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "prompt": null, "name": "consense_outgroup", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"O\\n\" + str( outgroup ) + \"\\n\"", "perl": "\"O\\\\n$outgroup\\\\n\""}, "command": false, "precond": {"python": "consense and outgroup and outgroup > 1", "perl": "$consense and $outgroup and $outgroup > 1"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/phylip/doc/dnapars.html"], "type": "program", "name": "dnapars"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab80"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise:dot_plots"}], "description": "Draw a threshold dotplot of two sequences", "title": "dotmatcher", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "not e_stretch and e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "not e_stretch and e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "not e_stretch and e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "not e_stretch and e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "not e_stretch and e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_stretch and e_xygraph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_stretch and e_xygraph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_stretch and e_xygraph == \"ps\" or e_xygraph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_stretch and e_xygraph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_stretch and e_xygraph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "bsequence option", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": "This is the scoring matrix file used when comparing sequences. By default it is the file 'EBLOSUM62' (for proteins) or  the file 'EDNAFULL' (for nucleic sequences). These files are  found in the 'data' directory of the EMBOSS installation.", "prompt": "Matrix file", "name": "e_matrixfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -matrixfile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Window size over which to test threshold (value greater than or equal to 3)", "name": "e_windowsize", "ctrl": {"python": "value >= 3"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -windowsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Threshold (value greater than or equal to 0)", "name": "e_threshold", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -threshold=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "Display a non-proportional graph", "prompt": "Stretch plot", "name": "e_stretch", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -stretch\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "not e_stretch"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "e_goutfile", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "not e_stretch"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_xygraph output format", "name": "e_xygraph", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\" -xygraph=\" + str(vdef), \" -xygraph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_stretch"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_stretch"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "dotmatcher"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/dotmatcher.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "dotmatcher"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab81"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise:dot_plots"}], "description": "Draw a non-overlapping wordmatch dotplot of two sequences", "title": "dotpath", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "bsequence option", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Word size (value greater than or equal to 2)", "name": "e_wordsize", "ctrl": {"python": "value >= 2"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -wordsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "Displays the overlapping matches (in red) as well as the minimal set of non-overlapping matches", "prompt": "Display the overlapping matches", "name": "e_overlaps", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -overlaps\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Draw a box around dotplot", "name": "e_boxit", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\" -noboxit\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "e_goutfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "dotpath"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/dotpath.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "dotpath"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab82"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise:dot_plots"}], "description": "Displays a wordmatch dotplot of two sequences", "title": "dottup", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "not e_stretch and e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "not e_stretch and e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "not e_stretch and e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "not e_stretch and e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "not e_stretch and e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_stretch and e_xygraph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_stretch and e_xygraph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_stretch and e_xygraph == \"ps\" or e_xygraph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_stretch and e_xygraph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_stretch and e_xygraph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "bsequence option", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Word size (value greater than or equal to 2)", "name": "e_wordsize", "ctrl": {"python": "value >= 2"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -wordsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "Use non-proportional axes", "prompt": "Stretch axes", "name": "e_stretch", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -stretch\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "not e_stretch"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "e_goutfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "not e_stretch"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_xygraph output format", "name": "e_xygraph", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\" -xygraph=\" + str(vdef), \" -xygraph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_stretch"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_stretch"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Draw a box around dotplot", "name": "e_boxit", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\" -noboxit\", \"\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_stretch"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "dottup"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/dottup.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "dottup"}, {"comment": "DRAWGRAM  interactively   plots  a  cladogram-  or\n\t  phenogram-like rooted  tree diagram, with  many options including\n\t  orientation of tree and branches,  style of tree, label sizes and\n\t  angles, tree depth, margin  sizes, stem lengths, and placement of\n\t  nodes in the  tree. Particularly if you can  use your computer to\n\t  preview the plot, you can  very effectively adjust the details of\n\t  the plotting to get just the kind of plot you want.", "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab83"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:display"}, {"type": "mobyle1", "classification": "display:tree"}], "description": "Plots a cladogram- or phenogram-like rooted tree", "title": "drawgram", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Graphic tree file", "name": "plotfile", "simple": null, "filenames": {"python": "\"plotfile\"", "perl": "\"plotfile\""}, "precond": {"python": "plotter not in [ \"L\" , \"M\" , \"W\", \"X\" ]", "perl": "$plotter !~ /^[LMWX]$/"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graphic tree file ( postscript format )", "name": "psfile", "simple": null, "filenames": {"python": "'plotfile.ps'", "perl": "plotfile.ps"}, "precond": {"python": "plotter == \"L\"", "perl": "$plotter eq \"L\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graphic tree file ( pict format )", "name": "pictfile", "simple": null, "filenames": {"python": "'plotfile.pict'", "perl": "plotfile.pict"}, "precond": {"python": "plotter == \"M\"", "perl": "$plotter eq \"M\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graphic tree file ( xbm format )", "name": "xbmfile", "simple": null, "filenames": {"python": "'plotfile.xbm'", "perl": "plotfile.xbm"}, "precond": {"python": "plotter == \"X\"", "perl": "$plotter eq \"X\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graphic tree file ( bmp format )", "name": "bmpfile", "simple": null, "filenames": {"python": "'plotfile.bmp'", "perl": "plotfile.bmp"}, "precond": {"python": "plotter == \"W\"", "perl": "$plotter eq \"W\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "drawgram", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"drawgram <drawgram.params\"", "perl": "\"drawgram <drawgram.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tree in Newick format.", "prompt": "Tree File (intree)", "name": "treefile", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"ln -s \"+ str( treefile ) +\" intree && \"", "perl": "\"ln -s $treefile intree && \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "screen_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}, {"comment": null, "precond": null, "prompt": "Drawgram options", "name": "options", "children": [{"comment": null, "prompt": "Which plotter or printer will the tree be drawn on (P)", "name": "plotter", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\" , \"P\\n\" + str(value) +\"\\n\")[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \"P\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}, {"comment": null, "precond": {"python": "plotter in [ \"X\" , \"W\" ]", "perl": "$plotter =~ /^[XW]$/"}, "prompt": "Bitmap options", "name": "xbitmap_options", "children": [{"comment": null, "prompt": "X resolution (in pixels)", "name": "xres", "ctrl": {"python": "value <= 2500", "perl": "$value <= 2500"}, "simple": null, "argpos": "3", "format": {"python": "str( value ) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}, {"comment": null, "prompt": "Y resolution (in pixels)", "name": "yres", "ctrl": {"python": "value <= 2500", "perl": "$value <= 2500"}, "simple": null, "argpos": "4", "format": {"python": "str( value ) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}]}, {"comment": null, "precond": {"python": "plotter == \"J\"", "perl": "$plotter eq \"J\""}, "prompt": "Laserjet options", "name": "laserjet_options", "children": [{"comment": null, "prompt": "Laserjet resolution", "name": "laserjet_resolution", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "str(value) +\"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}]}, {"comment": null, "precond": {"python": "plotter == \"P\"", "perl": "$plotter eq \"P\""}, "prompt": "Paintbrush options", "name": "pcx_options", "children": [{"comment": null, "prompt": "Paintbrush PCX resolution", "name": "pcx_resolution", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}]}, {"comment": null, "precond": {"python": "plotter == \"L\"", "perl": "$plotter eq \"L\""}, "prompt": "PostScript options", "name": "ps_options", "children": [{"comment": null, "prompt": "Font (F)", "name": "font", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \"F\\n\"+str(value)+\"\\n\")[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \"F\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}]}, {"comment": null, "precond": {"python": "plotter == \"V\"", "perl": "$plotter eq \"V\""}, "prompt": "POVRAY options", "name": "pov_options", "children": [{"comment": null, "prompt": null, "name": "pov_validate", "ctrl": null, "simple": null, "argpos": "2000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}]}, {"comment": null, "precond": {"python": "plotter == \"Z\"", "perl": "$plotter eq \"Z\""}, "prompt": "VRML options", "name": "vrml_options", "children": [{"comment": null, "prompt": null, "name": "vrml_validate", "ctrl": null, "simple": null, "argpos": "2000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}]}, {"comment": null, "precond": {"python": "plotter == \"R\"", "perl": "$plotter eq \"R\""}, "prompt": "Rayshade options", "name": "ray_options", "children": [{"comment": null, "prompt": null, "name": "ray_validate", "ctrl": null, "simple": null, "argpos": "2000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}]}, {"comment": null, "prompt": null, "name": "screen", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\"V\\nN\\n\"", "perl": "\"V\\\\nN\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}, {"comment": null, "prompt": "Tree grows... (H)", "name": "grows", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "( \"\" , \"H\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \"H\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}, {"comment": null, "prompt": "Tree style (S)", "name": "tree_style", "ctrl": null, "simple": null, "argpos": "5", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}, {"comment": null, "prompt": "Use branch lengths (B)", "name": "branch_lengths", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"B\\n\" , \"\")[ value ]", "perl": "($value) ? \"\" : \"B\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}, {"comment": null, "prompt": "Horizontal margins (M)", "name": "horizontal_margins", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\" , \"M\\n\" + str( value ) + \"\\n\" + str( vertical_margins ) + \"\\n\")[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"M\\\\n$value\\\\n$vertical_margins\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}, {"comment": null, "prompt": "Vertical margins", "name": "vertical_margins", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}, {"comment": "Default value: Automatically rescaled", "prompt": "Scale of branch length (R)", "name": "scale", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \"R\\n\" +str( value ) +\"\\n\")[ value is not None ]", "perl": "(defined $value) ? \"R\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}, {"comment": null, "prompt": "Depth/Breadth of tree (D)", "name": "depth", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "( \"\" , \"D\\n\" + str( value ) + \"\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"D\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}, {"comment": "Enter the stem length as fraction of tree depth (a value between 0.0 and 1.0).", "prompt": "Stem-length/tree-depth (T)", "name": "stem", "ctrl": {"python": "value >= 0.0 and value < 1.0", "perl": "$value >= 0.0 and $value < 1.0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \"T\\n\" + str( value ) + \"\\n\")[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"T\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}, {"comment": "Enter character height as fraction of tip spacing.", "prompt": "Character ht / tip space (C)", "name": "character_height", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \"C\\n\" + str( value ) +\"\\n\")[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"C\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}, {"comment": null, "prompt": "Ancestral nodes (A)", "name": "ancestral", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \"A\\n\" + str( value )+ \"\\n\")[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \"A\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}]}, {"comment": null, "prompt": null, "name": "confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawgram.params"}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/phylip/doc/drawgram.html"], "type": "program", "name": "drawgram"}, {"comment": "DRAWTREE interactively plots an unrooted tree diagram, with many options\nincluding orientation of tree and branches, label sizes and angles, margin\nsizes.  Particularly if you can use your computer screen to\npreview the plot, you can very effectively adjust the details of the plotting\nto get just the kind of plot you want.", "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab84"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:display"}, {"type": "mobyle1", "classification": "display:tree"}], "description": "Plots an unrooted tree diagram", "title": "drawtree", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Graphic tree file", "name": "plotfile", "simple": null, "filenames": {"python": "\"plotfile\"", "perl": "\"plotfile\""}, "precond": {"python": "plotter not in [ \"L\" , \"M\" , \"W\", \"X\" ]", "perl": "$plotter !~ /^[LMWX]$/"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graphic tree file ( postscript format )", "name": "psfile", "simple": null, "filenames": {"python": "\"plotfile.ps\"", "perl": "\"plotfile.ps\""}, "precond": {"python": "plotter == \"L\"", "perl": "$plotter eq \"L\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graphic tree file ( pict format )", "name": "pictfile", "simple": null, "filenames": {"python": "\"plotfile.pict\"", "perl": "\"plotfile.pict\""}, "precond": {"python": "plotter == \"M\"", "perl": "$plotter eq \"M\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graphic tree file ( xbm format )", "name": "xbmfile", "simple": null, "filenames": {"python": "\"plotfile.xbm\"", "perl": "\"plotfile.xbm\""}, "precond": {"python": "plotter == \"X\"", "perl": "$plotter eq \"X\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graphic tree file ( bmp format )", "name": "bmpfile", "simple": null, "filenames": {"python": "\"plotfile.bmp\"", "perl": "\"plotfile.bmp\""}, "precond": {"python": "plotter == \"W\"", "perl": "$plotter eq \"W\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "drawtree", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"drawtree <drawtree.params\"", "perl": "\"drawtree <drawtree.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tree in Newick format.", "prompt": "Tree File (intree)", "name": "treefile", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"ln -s \"+str( treefile ) + \" intree && \"", "perl": "\"ln -s $treefile intree && \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "screen_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}, {"comment": null, "precond": null, "prompt": "Drawtree options", "name": "options", "children": [{"comment": null, "prompt": "Which plotter or printer will the tree be drawn on", "name": "plotter", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\" , \"P\\n\" + str(value) + \"\\n\")[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \"P\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}, {"comment": null, "precond": {"python": "plotter in [ \"X\" , \"W\" ]", "perl": "$plotter =~ /^[XW]$/"}, "prompt": "Bitmap options", "name": "bitmap_options", "children": [{"comment": null, "prompt": "X resolution (in pixels)", "name": "xres", "ctrl": {"python": "value <= 2500", "perl": "$value <= 2500"}, "simple": null, "argpos": "3", "format": {"python": "str( value ) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}, {"comment": null, "prompt": "Y resolution (in pixels)", "name": "xyres", "ctrl": {"python": "value <= 2500", "perl": "$value <= 2500"}, "simple": null, "argpos": "4", "format": {"python": "str( value ) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}]}, {"comment": null, "precond": {"python": "plotter == \"J\"", "perl": "$plotter eq \"J\""}, "prompt": "Laserjet options", "name": "laserjet_options", "children": [{"comment": null, "prompt": "Laserjet resolution", "name": "laserjet_resolution", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}]}, {"comment": null, "precond": {"python": "plotter == \"P\"", "perl": "$plotter eq \"P\""}, "prompt": "Paintbrush options", "name": "pcx_options", "children": [{"comment": null, "prompt": "Paintbrush PCX resolution", "name": "pcx_resolution", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}]}, {"comment": null, "precond": {"python": "plotter == \"V\"", "perl": "$plotter eq \"V\""}, "prompt": "POVRAY options", "name": "pov_options", "children": [{"comment": null, "prompt": null, "name": "pov_validate", "ctrl": null, "simple": null, "argpos": "2000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}]}, {"comment": null, "precond": {"python": "plotter == \"L\"", "perl": "$plotter eq \"L\""}, "prompt": "PostScript options", "name": "ps_options", "children": [{"comment": null, "prompt": "Font (F)", "name": "font", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \"F\\n\"+str(value)+\"\\n\")[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \"F\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}]}, {"comment": null, "precond": {"python": "plotter == \"Z\"", "perl": "$plotter eq \"Z\""}, "prompt": "VRML options", "name": "vrml_options", "children": [{"comment": null, "prompt": null, "name": "vrml_validate", "ctrl": null, "simple": null, "argpos": "2000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}]}, {"comment": null, "precond": {"python": "plotter == \"R\"", "perl": "$plotter eq \"R\""}, "prompt": "Rayshade options", "name": "ray_options", "children": [{"comment": null, "prompt": null, "name": "ray_validate", "ctrl": null, "simple": null, "argpos": "2000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}]}, {"comment": null, "prompt": null, "name": "preview", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\"V\\nN\\n\"", "perl": "\"V\\\\nN\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}, {"comment": null, "prompt": "Use branch lengths (B)", "name": "branch_lengths", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"B\\n\" , \"\")[ value ]", "perl": "($value) ? \"\" : \"B\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}, {"comment": null, "prompt": "Angle of labels (L)", "name": "angle", "ctrl": null, "simple": null, "argpos": "5", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}, {"comment": null, "prompt": "Fixed angle: Are the labels to be plotted vertically (90), horizontally (0), or downwards (-90)  (L)?", "name": "fixed_angle", "ctrl": {"python": "value >= -90.0 and value <= 90.0", "perl": "$value >= -90.0 and $value <= 90.0"}, "simple": null, "argpos": "7", "format": {"python": "( \"\" , \"L\\nF\\n\"+ str( value ) +\"\\n\")[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"L\\\\nF\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "angle == \"\" or angle == \"F\"", "perl": "$angle eq \"\" or $angle eq \"F\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}, {"comment": null, "prompt": "Rotation of tree (in degrees from 360 to -360) (R)", "name": "rotation", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \"R\\n\" +str( value ) +\"\\n\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \"R\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}, {"comment": null, "prompt": "Angle of arc for tree (in degrees from 0 to 360)  (A)", "name": "arc", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "( \"\" , \"A\\n\" + str( value ) +\"\\n\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \"A\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}, {"comment": null, "prompt": "Iterate to improve tree (I)", "name": "iterate", "ctrl": null, "simple": null, "argpos": "5", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}, {"comment": "Default value: Automatically rescaled", "prompt": "Scale of branch length (S)", "name": "scale", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "( \"\" , \"S\\n\"+ str( value )+ \"\\n\")[ value is not None ]", "perl": "(defined $value) ? \"S\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}, {"comment": null, "prompt": "Try to avoid label overlap (D)", "name": "label_overlap", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "( \"\" , \"D\\n\" )[ value ]", "perl": "($value) ? \"D\\\\n\" : \"\""}, "command": false, "precond": {"python": "iterate != \"N\"", "perl": "$iterate ne \"N\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}, {"comment": null, "prompt": "Horizontal margins (M)", "name": "horizontal_margins", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\" , \"M\\n\" + str( value ) + \"\\n\" + str(vertical_margins ) + \"\\n\")[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"M\\\\n$value\\\\n$vertical_margins\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}, {"comment": null, "prompt": "Vertical margins (M)", "name": "vertical_margins", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}, {"comment": null, "prompt": "Relative character height (C)", "name": "character_height", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \"C\\n\" + str( value ) + \"\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"C\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}]}, {"comment": null, "prompt": null, "name": "confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "drawtree.params"}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/phylip/doc/drawtree.html"], "type": "program", "name": "drawtree"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab85"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:motifs"}], "description": "Regular expression search of nucleotide sequence(s)", "title": "dreg", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Regular expression pattern", "name": "e_pattern", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -pattern=@\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Pattern", "superclass": "AbstractText"}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "dreg"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/dreg.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "dreg"}, {"comment": null, "homepage_links": ["http://swift.cmbi.ru.nl/gv/dssp/"], "_id": {"$oid": "51434da393546d52388cab86"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Definition of secondary structure of proteins given a set of 3D coordinates", "title": "DSSP", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Standard output", "name": "outfile", "simple": null, "filenames": {"python": "\"dssp.out\"", "perl": "\"dssp.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "DsspReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "PDB File", "name": "pdbfile", "ctrl": {"python": "pdbfile is not None and pdbid is None", "perl": "not defined $pdbid and defined $pdbfile"}, "simple": null, "argpos": "10", "format": {"python": "( \" -- \" , \" \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" $value\" : \" -- \""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "_3DStructure", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["PDB"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "or you can instead enter a PDB id.", "name": "pdbid", "ctrl": {"python": "pdbid is not None and pdbfile is None", "perl": "defined $pdbid and not defined $pdbfile"}, "simple": null, "argpos": "-1", "format": {"python": "( \"\" , \"cat", "perl": "(defined $value) ? \"cat"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Output parameters", "name": "output", "children": [{"comment": null, "prompt": "Disables the calculation of accessible surface (-na)", "name": "surface", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -na \" )[ value ]", "perl": "($value) ? \" -na \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Classic (pre-July 1995) format (-c)", "name": "classic", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -c \" )[ value ]", "perl": "($value) ? \" -c \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Adds information about disulfide bonds to output file (-ssa)", "name": "disulfide", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -ssa \" )[ value ]", "perl": "($value) ? \" -ssa \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Renames residues with incomplete sidechains to 'X' (-x)", "name": "sidechains2X", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -x \" )[ value ]", "perl": "($value) ? \" -x \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Keeps an additional AltLoc indicator at the line ends (-alt2)", "name": "altLoc", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -alt2 \" )[ value ]", "perl": "($value) ? \" -alt2 \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [{"url": null, "doi": null, "label": "Kabsch,W. and Sander,C. (1983) Biopolymers 22, 2577-2637."}], "source_links": ["ftp://ftp.cmbi.ru.nl/pub/molbio/software/"], "env": [], "authors": "W.Kabsch, C. Sander", "command": {"path": null, "value": "dssp"}, "documentation_links": [], "type": "program", "name": "dssp"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab87"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "Local multiple alignment of sequences", "title": "edialign", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "EdialignReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequences option", "name": "e_sequences", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequences=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "2,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "Nucleic acid sequence alignment mode (simple, translated or mixed)", "prompt": "Nucleic acid sequence alignment mode", "name": "e_nucmode", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -nucmode=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Also consider the reverse complement", "name": "e_revcomp", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -revcomp\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default overlap weights are used when Nseq =<35 but you can set this to 'yes' or 'no'", "prompt": "Use overlap weights", "name": "e_overlapw", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -overlapw=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Clustering method to construct sequence tree (UPGMA, minimum linkage or maximum linkage)", "prompt": "Clustering method to construct sequence tree", "name": "e_linkage", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -linkage=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum fragment length (value greater than or equal to 0)", "name": "e_maxfragl", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -maxfragl=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Consider only n-fragment pairs that start with two matches", "name": "e_fragmat", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -fragmat\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Consider only p-fragment pairs if first amino acid or codon pair has similarity score of at least n (value greater than or equal to 0)", "name": "e_fragsim", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -fragsim=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use iterative score", "name": "e_itscore", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -itscore\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Threshold for considering diagonal for alignment (value greater than or equal to 0.0)", "name": "e_threshold", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -threshold=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Replace unaligned characters by stars '*' rather then putting them in lowercase", "name": "e_mask", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -mask\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Activate writing of stars instead of numbers", "name": "e_dostars", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -dostars\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Put up to n stars '*' instead of digits 0-9 to indicate level of conservation (value greater than or equal to 0)", "name": "e_starnum", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -starnum=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "16", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "edialign"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/edialign.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "edialign"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab88"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:repeats"}, {"type": "mobyle1", "classification": "sequence:nucleic:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Finds inverted repeats in nucleotide sequences", "title": "einverted", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "InvertedReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Gap penalty", "name": "e_gap", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -gap=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Minimum score threshold", "name": "e_threshold", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -threshold=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Match score", "name": "e_match", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -match=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Mismatch score", "name": "e_mismatch", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -mismatch=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "Maximum separation between the start of repeat and the end of the inverted repeat (the default is 2000 bases).", "prompt": "Maximum extent of repeats", "name": "e_maxrepeat", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -maxrepeat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The sequence of the inverted repeat regions without gap characters.", "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "einverted"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/einverted.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "einverted"}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>This software and its underlying principle are covered by copyright laws and by the international patent application WO/2006/046132.</html:p><html:p>Their use are exclusively authorized for academic purpose.\n\t\t\tAcademic users are kindly requested to cite this source when referring to said software.\n\t\t\tFor any use other than academic, please contact<html:a href=\"mailto:christian.mally@pasteur.fr\">Christian Mally</html:a>at the Technology Transfer Service of the Pasteur Institute.</html:p></html:div>", "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab89"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:mutation"}], "description": "Evolutionary Landscape Painter", "title": "ELP", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Report", "name": "elp_report", "simple": null, "filenames": {"python": "\"stat.txt\"", "perl": "\"stat.txt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ElpReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Sequences", "name": "sequences", "simple": null, "filenames": {"python": "\"sequences.fas\"", "perl": "\"sequences.fas\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1"}}, {"comment": null, "prompt": "Evolutionary landscape comparison", "name": "graphic_report", "simple": null, "filenames": {"python": "\"landscapes.png\"", "perl": "\"landscapes.png\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Sequence", "name": "sequence", "ctrl": null, "simple": null, "argpos": "99", "format": {"python": "(\"\", \" \" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1"}, "paramfile": null}, {"comment": null, "prompt": "Number of synonymous sequences to generate (1 to 3)", "name": "sequence_number", "ctrl": {"python": "sequence_number >= 1 and sequence_number <= 3", "perl": "$sequence_number >=1 and $sequence_number <= 3"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -n \" + str(value) + \" \")[value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -n $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "G+C content of the output sequences", "name": "gc_content", "ctrl": {"python": "gc_content >= 0 and gc_content <= 100", "perl": "$gc_content >= 0 and $gc_content <= 100"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -g \" + str(value) + \" \")[value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -g $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A list of codons not to incorporate in the output sequences (typically codons rarely used in the genome).", "prompt": "Forbidden codons (comma-separated list)", "name": "forbidden_codons", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -f \" + value + \" \")[value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -f $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\">For a description of the CAI, please refer to the<html:a href=\"http://www.ncbi.nlm.nih.gov/pubmed/3547335\" target=\"_blank\">original article</html:a>. This option overrides any specified G+C content value.</html:div>", "prompt": "Force to maximize Codon Adaptation Index of the generated sequence (with respect to E. coli)", "name": "force_max_cai", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -c\" )[ value ]", "perl": "($value) ? \" -c\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "0.0", "references": [{"url": null, "doi": null, "label": "<html:a xmlns:html=\"http://www.w3.org/1999/xhtml\" href=\"http://dx.doi.org/10.1371%2Fjournal.pgen.1000256\" target=\"_blank\">Cambray G, Mazel D 2008 Synonymous Genes Explore Different Evolutionary Landscapes. PLoS Genetics 4(11): e1000256 doi:10.1371/journal.pgen.1000256</html:a>"}], "source_links": [], "env": [], "authors": "Guillaume Cambray", "command": {"path": null, "value": "elp"}, "documentation_links": [], "type": "program", "name": "elp"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab8a"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Search protein sequences by digest fragment molecular weight", "title": "emowse", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "EmowseReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Peptide molecular weight values file", "name": "e_infile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -infile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PeptideMolweights", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Molecular weights data file", "name": "e_mwdata", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -mwdata=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "MolecularWeights", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Amino acid frequencies data file", "name": "e_frequencies", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -frequencies=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "AminoAcidFrequencies", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Whole sequence molwt", "name": "e_weight", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -weight=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use monoisotopic weights", "name": "e_mono", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -mono\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Enzymes and reagents", "name": "e_enzyme", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -enzyme=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Allowed whole sequence weight variability (value from 0 to 75)", "name": "e_pcrange", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -pcrange=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Tolerance (value from 0.1 to 1.0)", "name": "e_tolerance", "ctrl": {"python": "value >= 0.1"}, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -tolerance=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Partials factor (value from 0.1 to 1.0)", "name": "e_partials", "ctrl": {"python": "value >= 0.1"}, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -partials=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "emowse"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/emowse.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "emowse"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab8b"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Retrieves sequence entries from flatfile databases and files", "title": "entret", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "EntryFullText", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Read one sequence and stop", "name": "e_firstonly", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -firstonly\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "entret"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/entret.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "entret"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab8c"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:motifs"}], "description": "Finds PEST motifs as potential proteolytic cleavage sites", "title": "epestfind", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "EpestfindReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "Protein sequence USA to be analysed.", "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "Molecular weights data file", "name": "e_mwdata", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -mwdata=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "MolecularWeights", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "Minimal distance between positively charged amino acids.", "prompt": "Window length (value greater than or equal to 2)", "name": "e_window", "ctrl": {"python": "value >= 2"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -window=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Name of the output file which holds the results of the analysis. Results may be sorted by length, position and score.", "prompt": "Sort order of results", "name": "e_order", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -order=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "Threshold value to discriminate weak from potential PEST motifs. Valid PEST motifs are discriminated into 'poor' and  'potential' motifs depending on this threshold score. By default,  the default value is set to +5.0 based on experimental data.  Alterations are not recommended since significance is a matter of  biology, not mathematics.", "prompt": "Threshold score (value from -55.0 to +55.0)", "name": "e_threshold", "ctrl": {"python": "value >= -55.0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -threshold=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Use monoisotopic weights", "name": "e_mono", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -mono\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Decide whether potential PEST motifs should be printed.", "prompt": "Display potential pest motifs", "name": "e_potential", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\" -nopotential\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Decide whether poor PEST motifs should be printed.", "prompt": "Display poor pest motifs", "name": "e_poor", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\" -nopoor\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Decide whether invalid PEST motifs should be printed.", "prompt": "Display invalid pest motifs", "name": "e_invalid", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -invalid\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Decide whether PEST motifs should be mapped to sequence.", "prompt": "Display pest motifs map", "name": "e_map", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\" -nomap\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "Name of file to which results will be written.", "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "epestfind"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/epestfind.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "epestfind"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab8d"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:primers"}], "description": "Picks PCR primers and hybridization oligos", "title": "eprimer3", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Primer3Report", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "The sequence from which to choose primers. The sequence must be presented 5' to 3'", "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "Tell EPrimer3 to pick primer(s)", "prompt": "Pick pcr primer(s)", "name": "e_primer", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\" -noprimer\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tell EPrimer3 what task to perform. Legal values are 1: 'Pick PCR primers', 2: 'Pick forward primer only', 3: 'Pick  reverse primer only', 4: 'No primers needed'.", "prompt": "Task", "name": "e_task", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -task=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "An 'internal oligo' is intended to be used as a hybridization probe (hyb probe) to detect the PCR product after  amplification.", "prompt": "Pick hybridization probe", "name": "e_hybridprobe", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -hybridprobe\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Similar to MISPRIMING-LIBRARY, except that the event we seek to avoid is hybridization of the internal oligo to sequences  in this library rather than priming from them. \n  The file must be in (a slightly restricted) FASTA format (W. B.  Pearson and D.J. Lipman, PNAS 85:8 pp 2444-2448 [1988]); we  briefly discuss the organization of this file below. If this  parameter is specified then EPrimer3 locally aligns each candidate  oligo against each library sequence and rejects those primers for  which the local alignment score times a specified weight (see  below) exceeds INTERNAL-OLIGO-MAX-MISHYB. (The maximum value of  the weight is arbitrarily set to 12.0.) \n  Each sequence entry in the FASTA-format file must begin with an  'id line' that starts with '>'. The contents of the id line is  'slightly restricted' in that EPrimer3 parses everything after any  optional asterisk ('*') as a floating point number to use as the  weight mentioned above. If the id line contains no asterisk then  the weight defaults to 1.0. The alignment scoring system used is  the same as for calculating complementarity among oligos (e.g.  SELF-ANY). The remainder of an entry contains the sequence as  lines following the id line up until a line starting with '>' or  the end of the file. Whitespace and newlines are ignored.  Characters 'A', 'T', 'G', 'C', 'a', 't', 'g', 'c' are retained and  any other character is converted to 'N' (with the consequence  that any IUB / IUPAC codes for ambiguous bases are converted to  'N'). There are no restrictions on line length. \n  An empty value for this parameter indicates that no library should  be used.", "prompt": "Primer3 internal oligo mishybridizing library file (optional)", "name": "e_mishyblibraryfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -mishyblibraryfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Primer3Mishybridizing", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The name of a file containing a nucleotide sequence library of sequences to avoid amplifying (for example repetitive  sequences, or possibly the sequences of genes in a gene family  that should not be amplified.) The file must be in (a slightly  restricted) FASTA format (W. B. Pearson and D.J. Lipman, PNAS 85:8  pp 2444-2448 [1988]); we briefly discuss the organization of this  file below. If this parameter is specified then EPrimer3 locally  aligns each candidate primer against each library sequence and  rejects those primers for which the local alignment score times a  specified weight (see below) exceeds MAX-MISPRIMING. (The maximum  value of the weight is arbitrarily set to 100.0.) \n  Each sequence entry in the FASTA-format file must begin with an  'id line' that starts with '>'. The contents of the id line is  'slightly restricted' in that EPrimer3 parses everything after any  optional asterisk ('*') as a floating point number to use as the  weight mentioned above. If the id line contains no asterisk then  the weight defaults to 1.0. The alignment scoring system used is  the same as for calculating complementarity among oligos (e.g.  SELF-ANY). The remainder of an entry contains the sequence as  lines following the id line up until a line starting with '>' or  the end of the file. Whitespace and newlines are ignored.  Characters 'A', 'T', 'G', 'C', 'a', 't', 'g', 'c' are retained and  any other character is converted to 'N' (with the consequence  that any IUB / IUPAC codes for ambiguous bases are converted to  'N'). There are no restrictions on line length. \n  An empty value for this parameter indicates that no repeat library  should be used.", "prompt": "Primer3 mispriming library file (optional)", "name": "e_mispriminglibraryfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -mispriminglibraryfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Primer3Mispriming", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "precond": null, "prompt": "Program options", "name": "e_programsection", "children": [{"comment": "The maximum number of primer pairs to return. Primer pairs returned are sorted by their 'quality', in other words by  the value of the objective function (where a lower number  indicates a better primer pair). Caution: setting this parameter  to a large value will increase running time.", "prompt": "Number of results to return (value greater than or equal to 0)", "name": "e_numreturn", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -numreturn=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Sequence options", "name": "e_seqoptsection", "children": [{"comment": "A sub-region of the given sequence in which to pick primers. For example, often the first dozen or so bases of a  sequence are vector, and should be excluded from consideration.  The value for this parameter has the form \n  (start),(end) \n  where (start) is the index of the first base to consider, and  (end) is the last in the primer-picking region.", "prompt": "Included region(s)", "name": "e_includedregion", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -includedregion=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If one or more Targets is specified then a legal primer pair must flank at least one of them. A Target might be a simple  sequence repeat site (for example a CA repeat) or a  single-base-pair polymorphism. The value should be a  space-separated list of \n  (start),(end) \n  pairs where (start) is the index of the first base of a Target,  and (end) is the last \n  E.g. 50,51 requires primers to surround the 2 bases at positions  50 and 51.", "prompt": "Target region(s)", "name": "e_targetregion", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -targetregion=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Primer oligos may not overlap any region specified in this tag. The associated value must be a space-separated list of  \n  (start),(end) \n  pairs where (start) is the index of the first base of the  excluded region, and and (end) is the last. This tag is useful  for tasks such as excluding regions of low sequence quality or  for excluding regions containing repetitive elements such as  ALUs or LINEs. \n  E.g. 401,407 68,70 forbids selection of primers in the 7 bases  starting at 401 and the 3 bases at 68.", "prompt": "Excluded region(s)", "name": "e_excludedregion", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -excludedregion=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The sequence of a forward primer to check and around which to design reverse primers and optional internal oligos.  Must be a substring of SEQUENCE.", "prompt": "Forward input primer sequence to check", "name": "e_forwardinput", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -forwardinput=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The sequence of a reverse primer to check and around which to design forward primers and optional internal oligos.  Must be a substring of the reverse strand of SEQUENCE.", "prompt": "Reverse input primer sequence to check", "name": "e_reverseinput", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -reverseinput=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Primer options", "name": "e_primersection", "children": [{"comment": "Require the specified number of consecutive Gs and Cs at the 3' end of both the forward and reverse primer. (This  parameter has no effect on the internal oligo if one is  requested.)", "prompt": "Gc clamp (value greater than or equal to 0)", "name": "e_gcclamp", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -gcclamp=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Optimum length (in bases) of a primer oligo. EPrimer3 will attempt to pick primers close to this length.", "prompt": "Primer optimum size (value greater than or equal to 0)", "name": "e_osize", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -osize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Minimum acceptable length of a primer. Must be greater than 0 and less than or equal to MAX-SIZE.", "prompt": "Primer minimum size (value greater than or equal to 1)", "name": "e_minsize", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "15", "format": {"python": "(\"\", \" -minsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum acceptable length (in bases) of a primer. Currently this parameter cannot be larger than 35. This limit is  governed by the maximum oligo size for which EPrimer3's  melting-temperature is valid.", "prompt": "Primer maximum size (value less than or equal to 35)", "name": "e_maxsize", "ctrl": {"python": "value <= 35"}, "simple": null, "argpos": "16", "format": {"python": "(\"\", \" -maxsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Optimum melting temperature(Celsius) for a primer oligo. EPrimer3 will try to pick primers with melting temperatures are  close to this temperature. The oligo melting temperature formula  in EPrimer3 is that given in Rychlik, Spencer and Rhoads,  Nucleic Acids Research, vol 18, num 21, pp 6409-6412 and  Breslauer, Frank, Bloecker and Marky, Proc. Natl. Acad. Sci. USA,  vol 83, pp 3746-3750. Please refer to the former paper for  background discussion.", "prompt": "Primer optimum tm", "name": "e_otm", "ctrl": null, "simple": null, "argpos": "17", "format": {"python": "(\"\", \" -otm=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Minimum acceptable melting temperature(Celsius) for a primer oligo.", "prompt": "Primer minimum tm", "name": "e_mintm", "ctrl": null, "simple": null, "argpos": "18", "format": {"python": "(\"\", \" -mintm=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum acceptable melting temperature(Celsius) for a primer oligo.", "prompt": "Primer maximum tm", "name": "e_maxtm", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "(\"\", \" -maxtm=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum acceptable (unsigned) difference between the melting temperatures of the forward and reverse primers.", "prompt": "Maximum difference in tm of primers", "name": "e_maxdifftm", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "(\"\", \" -maxdifftm=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Primer optimum GC percent.", "prompt": "Primer optimum gc percent", "name": "e_ogcpercent", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "(\"\", \" -ogcpercent=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Minimum allowable percentage of Gs and Cs in any primer.", "prompt": "Primer minimum gc percent", "name": "e_mingc", "ctrl": null, "simple": null, "argpos": "22", "format": {"python": "(\"\", \" -mingc=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum allowable percentage of Gs and Cs in any primer generated by Primer.", "prompt": "Primer maximum gc percent", "name": "e_maxgc", "ctrl": null, "simple": null, "argpos": "23", "format": {"python": "(\"\", \" -maxgc=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The millimolar concentration of salt (usually KCl) in the PCR. EPrimer3 uses this argument to calculate oligo melting  temperatures.", "prompt": "Salt concentration (mm)", "name": "e_saltconc", "ctrl": null, "simple": null, "argpos": "24", "format": {"python": "(\"\", \" -saltconc=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The nanomolar concentration of annealing oligos in the PCR. EPrimer3 uses this argument to calculate oligo melting  temperatures. The default (50nM) works well with the standard  protocol used at the Whitehead/MIT Center for Genome  Research--0.5 microliters of 20 micromolar concentration for  each primer oligo in a 20 microliter reaction with 10 nanograms  template, 0.025 units/microliter Taq polymerase in 0.1 mM each  dNTP, 1.5mM MgCl2, 50mM KCl, 10mM Tris-HCL (pH 9.3) using 35  cycles with an annealing temperature of 56 degrees Celsius. This  parameter corresponds to 'c' in Rychlik, Spencer and Rhoads'  equation (ii) (Nucleic Acids Research, vol 18, num 21) where a  suitable value (for a lower initial concentration of template)  is 'empirically determined'. The value of this parameter is less  than the actual concentration of oligos in the reaction because  it is the concentration of annealing oligos, which in turn  depends on the amount of template (including PCR product) in a  given cycle. This concentration increases a great deal during a  PCR; fortunately PCR seems quite robust for a variety of oligo  melting temperatures. \n  See ADVICE FOR PICKING PRIMERS.", "prompt": "Dna concentration (nm)", "name": "e_dnaconc", "ctrl": null, "simple": null, "argpos": "25", "format": {"python": "(\"\", \" -dnaconc=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum allowable length of a mononucleotide repeat in a primer, for example AAAAAA.", "prompt": "Maximum polynucleotide repeat (value greater than or equal to 0)", "name": "e_maxpolyx", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "26", "format": {"python": "(\"\", \" -maxpolyx=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Product options", "name": "e_productsection", "children": [{"comment": "The optimum size for the PCR product. 0 indicates that there is no optimum product size.", "prompt": "Product optimum size (value greater than or equal to 0)", "name": "e_psizeopt", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "27", "format": {"python": "(\"\", \" -psizeopt=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The associated values specify the lengths of the product that the user wants the primers to create, and is a space  separated list of elements of the form \n  (x)-(y) \n  where an (x)-(y) pair is a legal range of lengths for the  product. For example, if one wants PCR products to be between  100 to 150 bases (inclusive) then one would set this parameter  to 100-150. If one desires PCR products in either the range from  100 to 150 bases or in the range from 200 to 250 bases then one  would set this parameter to 100-150 200-250. \n  EPrimer3 favors ranges to the left side of the parameter string.  EPrimer3 will return legal primers pairs in the first range  regardless the value of the objective function for these pairs.  Only if there are an insufficient number of primers in the first  range will EPrimer3 return primers in a subsequent range.", "prompt": "Product size range", "name": "e_prange", "ctrl": null, "simple": null, "argpos": "28", "format": {"python": "(\"\", \" -prange=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The optimum melting temperature for the PCR product. 0 indicates that there is no optimum temperature.", "prompt": "Product optimum tm", "name": "e_ptmopt", "ctrl": null, "simple": null, "argpos": "29", "format": {"python": "(\"\", \" -ptmopt=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The minimum allowed melting temperature of the amplicon. Please see the documentation on the maximum melting temperature  of the product for details.", "prompt": "Product minimum tm", "name": "e_ptmmin", "ctrl": null, "simple": null, "argpos": "30", "format": {"python": "(\"\", \" -ptmmin=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum allowed melting temperature of the amplicon. Product Tm is calculated using the formula from Bolton and  McCarthy, PNAS 84:1390 (1962) as presented in Sambrook, Fritsch  and Maniatis, Molecular Cloning, p 11.46 (1989, CSHL Press). \n  Tm = 81.5 + 16.6(log10([Na+])) + .41*(%GC) - 600/length \n  Where [Na+} is the molar sodium concentration, (%GC) is the  percent of Gs and Cs in the sequence, and length is the length  of the sequence. \n  A similar formula is used by the prime primer selection program  in GCG, which instead uses 675.0/length in  the last term (after F. Baldino, Jr, M.-F. Chesselet, and M.E.  Lewis, Methods in Enzymology 168:766 (1989) eqn (1) on page 766  without the mismatch and formamide terms). The formulas here and  in Baldino et al. assume Na+ rather than K+. According to J.G.  Wetmur, Critical Reviews in BioChem. and Mol. Bio. 26:227 (1991)  50 mM K+ should be equivalent in these formulae to .2 M Na+.  EPrimer3 uses the same salt concentration value for calculating  both the primer melting temperature and the oligo melting  temperature. If you are planning to use the PCR product for  hybridization later this behavior will not give you the Tm under  hybridization conditions.", "prompt": "Product maximum tm", "name": "e_ptmmax", "ctrl": null, "simple": null, "argpos": "31", "format": {"python": "(\"\", \" -ptmmax=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_primer"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Internal oligo input", "name": "e_oligosinput", "children": [{"comment": "Middle oligos may not overlap any region specified by this tag. The associated value must be a space-separated list of  \n  (start),(end) \n  pairs, where (start) is the index of the first base of an  excluded region, and (end) is the last. Often one would make  Target regions excluded regions for internal oligos.", "prompt": "Internal oligo excluded region", "name": "e_oexcludedregion", "ctrl": null, "simple": null, "argpos": "32", "format": {"python": "(\"\", \" -oexcludedregion=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The sequence of an internal oligo to check and around which to design forward and reverse primers. Must be a substring  of SEQUENCE.", "prompt": "Internal oligo input sequence (if any)", "name": "e_oligoinput", "ctrl": null, "simple": null, "argpos": "33", "format": {"python": "(\"\", \" -oligoinput=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Internal oligo options", "name": "e_oligosection", "children": [{"comment": "Optimum length (in bases) of an internal oligo. EPrimer3 will attempt to pick primers close to this length.", "prompt": "Internal oligo optimum size (value greater than or equal to 0)", "name": "e_osizeopt", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "34", "format": {"python": "(\"\", \" -osizeopt=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Minimum acceptable length of an internal oligo. Must be greater than 0 and less than or equal to  INTERNAL-OLIGO-MAX-SIZE.", "prompt": "Internal oligo minimum size (value greater than or equal to 0)", "name": "e_ominsize", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "35", "format": {"python": "(\"\", \" -ominsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum acceptable length (in bases) of an internal oligo. Currently this parameter cannot be larger than 35. This  limit is governed by maximum oligo size for which EPrimer3's  melting-temperature is valid.", "prompt": "Internal oligo maximum size (value less than or equal to 35)", "name": "e_omaxsize", "ctrl": {"python": "value <= 35"}, "simple": null, "argpos": "36", "format": {"python": "(\"\", \" -omaxsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Optimum melting temperature (Celsius) for an internal oligo. EPrimer3 will try to pick oligos with melting  temperatures that are close to this temperature. The oligo  melting temperature formula in EPrimer3 is that given in  Rychlik, Spencer and Rhoads, Nucleic Acids Research, vol 18, num  21, pp 6409-6412 and Breslauer, Frank, Bloecker and Marky, Proc.  Natl. Acad. Sci. USA, vol 83, pp 3746-3750. Please refer to the  former paper for background discussion.", "prompt": "Internal oligo optimum tm", "name": "e_otmopt", "ctrl": null, "simple": null, "argpos": "37", "format": {"python": "(\"\", \" -otmopt=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Minimum acceptable melting temperature(Celsius) for an internal oligo.", "prompt": "Internal oligo minimum tm", "name": "e_otmmin", "ctrl": null, "simple": null, "argpos": "38", "format": {"python": "(\"\", \" -otmmin=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum acceptable melting temperature (Celsius) for an internal oligo.", "prompt": "Internal oligo maximum tm", "name": "e_otmmax", "ctrl": null, "simple": null, "argpos": "39", "format": {"python": "(\"\", \" -otmmax=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Internal oligo optimum GC percent.", "prompt": "Internal oligo optimum gc percent", "name": "e_ogcopt", "ctrl": null, "simple": null, "argpos": "40", "format": {"python": "(\"\", \" -ogcopt=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Minimum allowable percentage of Gs and Cs in an internal oligo.", "prompt": "Internal oligo minimum gc", "name": "e_ogcmin", "ctrl": null, "simple": null, "argpos": "41", "format": {"python": "(\"\", \" -ogcmin=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum allowable percentage of Gs and Cs in any internal oligo generated by Primer.", "prompt": "Internal oligo maximum gc", "name": "e_ogcmax", "ctrl": null, "simple": null, "argpos": "42", "format": {"python": "(\"\", \" -ogcmax=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The millimolar concentration of salt (usually KCl) in the hybridization. EPrimer3 uses this argument to calculate  internal oligo melting temperatures.", "prompt": "Internal oligo salt concentration (mm)", "name": "e_osaltconc", "ctrl": null, "simple": null, "argpos": "43", "format": {"python": "(\"\", \" -osaltconc=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The nanomolar concentration of annealing internal oligo in the hybridization.", "prompt": "Internal oligo dna concentration (nm)", "name": "e_odnaconc", "ctrl": null, "simple": null, "argpos": "44", "format": {"python": "(\"\", \" -odnaconc=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum allowable local alignment score when testing an internal oligo for (local) self-complementarity. Local  self-complementarity is taken to predict the tendency of oligos  to anneal to themselves The scoring system gives 1.00 for  complementary bases, -0.25 for a match of any base (or N) with  an N, -1.00 for a mismatch, and -2.00 for a gap. Only  single-base-pair gaps are allowed. For example, the alignment \n  5' ATCGNA 3' \n  || | | \n  3' TA-CGT 5' \n  is allowed (and yields a score of 1.75), but the alignment \n  5' ATCCGNA 3' \n  || | | \n  3' TA--CGT 5' \n  is not considered. Scores are non-negative, and a score of 0.00  indicates that there is no reasonable local alignment between  two oligos.", "prompt": "Internal oligo maximum self complementarity (value less than or equal to 9999.99)", "name": "e_oanyself", "ctrl": {"python": "value <= 9999.99"}, "simple": null, "argpos": "45", "format": {"python": "(\"\", \" -oanyself=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum allowable 3'-anchored global alignment score when testing a single oligo for self-complementarity. \n  The scoring system is as for the Maximum Complementarity  argument. In the examples above the scores are 7.00 and 6.00  respectively. Scores are non-negative, and a score of 0.00  indicates that there is no reasonable 3'-anchored global  alignment between two oligos. In order to estimate 3'-anchored  global alignments for candidate oligos, Primer assumes that the  sequence from which to choose oligos is presented 5' to 3'. \n  INTERNAL-OLIGO-SELF-END is meaningless when applied to internal  oligos used for hybridization-based detection, since  primer-dimer will not occur. We recommend that  INTERNAL-OLIGO-SELF-END be set at least as high as  INTERNAL-OLIGO-SELF-ANY.", "prompt": "Internal oligo maximum 3' self complementarity (value less than or equal to 9999.99)", "name": "e_oendself", "ctrl": {"python": "value <= 9999.99"}, "simple": null, "argpos": "46", "format": {"python": "(\"\", \" -oendself=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum allowable length of an internal oligo mononucleotide repeat, for example AAAAAA.", "prompt": "Internal oligo maximum polynucleotide repeat (value greater than or equal to 0)", "name": "e_opolyxmax", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "47", "format": {"python": "(\"\", \" -opolyxmax=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Similar to MAX-MISPRIMING except that this parameter applies to the similarity of candidate internal oligos to the  library specified in INTERNAL-OLIGO-MISHYB-LIBRARY.", "prompt": "Internal oligo maximum mishybridization (value less than or equal to 9999.99)", "name": "e_omishybmax", "ctrl": {"python": "value <= 9999.99"}, "simple": null, "argpos": "48", "format": {"python": "(\"\", \" -omishybmax=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_hybridprobe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "If this flag is true, produce LEFT-EXPLAIN, RIGHT-EXPLAIN, and INTERNAL-OLIGO-EXPLAIN output tags, which are intended to  provide information on the number of oligos and primer pairs that  EPrimer3 examined, and statistics on the number discarded for  various reasons.", "prompt": "Explain flag", "name": "e_explainflag", "ctrl": null, "simple": null, "argpos": "49", "format": {"python": "(\"\", \" -explainflag\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If the associated value is true, then EPrimer3 creates two output files for each input SEQUENCE. File (sequence-id).for lists  all acceptable forward primers for (sequence-id), and  (sequence-id).rev lists all acceptable reverse primers for  (sequence-id), where (sequence-id) is the value of the SEQUENCE-ID  tag (which must be supplied). In addition, if the input tag TASK  is 1 or 4, EPrimer3 produces a file (sequence-id).int, which lists  all acceptable internal oligos.", "prompt": "Create results files for each sequence", "name": "e_fileflag", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "(\"\", \" -fileflag\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This parameter is the index of the first base in the input sequence. For input and output using 1-based indexing (such as  that used in GenBank and to which many users are accustomed) set  this parameter to 1. For input and output using 0-based indexing  set this parameter to 0. (This parameter also affects the indexes  in the contents of the files produced when the primer file flag is  set.)", "prompt": "First base index", "name": "e_firstbaseindex", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "(\"\", \" -firstbaseindex=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If true pick a primer pair even if LEFT-INPUT, RIGHT-INPUT, or INTERNAL-OLIGO-INPUT violates specific constraints.", "prompt": "Pick anyway", "name": "e_pickanyway", "ctrl": null, "simple": null, "argpos": "52", "format": {"python": "(\"\", \" -pickanyway\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum allowed weighted similarity with any sequence in MISPRIMING-LIBRARY.", "prompt": "Primer maximum mispriming (value less than or equal to 9999.99)", "name": "e_maxmispriming", "ctrl": {"python": "value <= 9999.99"}, "simple": null, "argpos": "53", "format": {"python": "(\"\", \" -maxmispriming=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum allowed sum of weighted similarities of a primer pair (one similarity for each primer) with any single  sequence in MISPRIMING-LIBRARY.", "prompt": "Primer pair maximum mispriming (value less than or equal to 9999.99)", "name": "e_pairmaxmispriming", "ctrl": {"python": "value <= 9999.99"}, "simple": null, "argpos": "54", "format": {"python": "(\"\", \" -pairmaxmispriming=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum number of unknown bases (N) allowable in any primer.", "prompt": "Maximum ns accepted in a primer (value greater than or equal to 0)", "name": "e_numnsaccepted", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "55", "format": {"python": "(\"\", \" -numnsaccepted=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum allowable local alignment score when testing a single primer for (local) self-complementarity and the maximum  allowable local alignment score when testing for complementarity  between forward and reverse primers. Local self-complementarity is  taken to predict the tendency of primers to anneal to each other  without necessarily causing self-priming in the PCR. The scoring  system gives 1.00 for complementary bases, -0.25 for a match of  any base (or N) with an N, -1.00 for a mismatch, and -2.00 for a  gap. Only single-base-pair gaps are allowed. For example, the  alignment \n  5' ATCGNA 3' \n  ...|| | | \n  3' TA-CGT 5' \n  is allowed (and yields a score of 1.75), but the alignment \n  5' ATCCGNA 3' \n  ...|| | | \n  3' TA--CGT 5' \n  is not considered. Scores are non-negative, and a score of 0.00  indicates that there is no reasonable local alignment between two  oligos.", "prompt": "Maximum self complementarity (value from 0.00 to 9999.99)", "name": "e_selfany", "ctrl": {"python": "value >= 0.00"}, "simple": null, "argpos": "56", "format": {"python": "(\"\", \" -selfany=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum allowable 3'-anchored global alignment score when testing a single primer for self-complementarity, and the  maximum allowable 3'-anchored global alignment score when testing  for complementarity between forward and reverse primers. The  3'-anchored global alignment score is taken to predict the  likelihood of PCR-priming primer-dimers, for example \n  5' ATGCCCTAGCTTCCGGATG 3' \n  .............||| ||||| \n  ..........3' AAGTCCTACATTTAGCCTAGT 5' \n  or \n  5' AGGCTATGGGCCTCGCGA 3' \n  ...............|||||| \n  ............3' AGCGCTCCGGGTATCGGA 5' \n  The scoring system is as for the Maximum Complementarity argument.  In the examples above the scores are 7.00 and 6.00 respectively.  Scores are non-negative, and a score of 0.00 indicates that there  is no reasonable 3'-anchored global alignment between two oligos.  In order to estimate 3'-anchored global alignments for candidate  primers and primer pairs, Primer assumes that the sequence from  which to choose primers is presented 5' to 3'. It is nonsensical  to provide a larger value for this parameter than for the Maximum  (local) Complementarity parameter because the score of a local  alignment will always be at least as great as the score of a  global alignment.", "prompt": "Maximum 3' self complementarity (value greater than or equal to 0.00)", "name": "e_selfend", "ctrl": {"python": "value >= 0.00"}, "simple": null, "argpos": "57", "format": {"python": "(\"\", \" -selfend=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Primer penalty weights", "name": "e_primerweights", "children": [{"comment": "The maximum stability for the five 3' bases of a forward or reverse primer. Bigger numbers mean more stable 3' ends. The  value is the maximum delta G for duplex disruption for the five  3' bases as calculated using the nearest neighbor parameters  published in Breslauer, Frank, Bloecker and Marky, Proc. Natl.  Acad. Sci. USA, vol 83, pp 3746-3750. EPrimer3 uses a completely  permissive default value for backward compatibility (which we  may change in the next release). Rychlik recommends a maximum  value of 9 (Wojciech Rychlik, 'Selection of Primers for  Polymerase Chain Reaction' in BA White, Ed., 'Methods in  Molecular Biology, Vol. 15: PCR Protocols: Current Methods and  Applications', 1993, pp 31-40, Humana Press, Totowa NJ).", "prompt": "Maximum 3' end stability (value less than or equal to 999.9999)", "name": "e_maxendstability", "ctrl": {"python": "value <= 999.9999"}, "simple": null, "argpos": "58", "format": {"python": "(\"\", \" -maxendstability=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "59", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "60", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "eprimer3"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/eprimer3.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "eprimer3"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab8e"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:repeats"}], "description": "Finds tandem repeats in nucleotide sequences", "title": "equicktandem", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "origfile_out option", "name": "e_origfile_out", "simple": null, "filenames": {"python": "e_origfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "QuicktandemReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Maximum repeat size", "name": "e_maxrepeat", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -maxrepeat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Threshold score", "name": "e_threshold", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -threshold=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_origfile)", "name": "e_origfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -origfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "equicktandem"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/equicktandem.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "equicktandem"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab8f"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise:global"}], "description": "Align EST sequences to genomic DNA sequence", "title": "est2genome", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Est2genomeReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "Spliced est nucleotide sequence(s)", "name": "e_estsequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -estsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Additional section", "name": "e_genomesequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -genomesequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "Score for matching two bases", "name": "e_match", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -match=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Cost for mismatching two bases", "name": "e_mismatch", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -mismatch=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Cost for deleting a single base in either sequence, excluding introns", "prompt": "Gap penalty", "name": "e_gappenalty", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -gappenalty=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Cost for an intron, independent of length.", "prompt": "Intron penalty", "name": "e_intronpenalty", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -intronpenalty=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Cost for an intron, independent of length and starting/ending on donor-acceptor sites", "prompt": "Splice site penalty", "name": "e_splicepenalty", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -splicepenalty=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Exclude alignments with scores below this threshold score.", "prompt": "Minimum accepted score", "name": "e_minscore", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -minscore=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "Reverse the orientation of the EST sequence", "prompt": "Reverse orientation", "name": "e_reverse", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -reverse\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use donor and acceptor splice sites. If you want to ignore donor-acceptor sites then set this to be false.", "prompt": "Use donor and acceptor splice sites", "name": "e_usesplice", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\" -nousesplice\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This determines the comparison mode. The default value is 'both', in which case both strands of the est are compared  assuming a forward gene direction (ie GT/AG splice sites), and the  best comparison redone assuming a reversed (CT/AC) gene splicing  direction. The other allowed modes are 'forward', when just the  forward strand is searched, and 'reverse', ditto for the reverse  strand.", "prompt": "Comparison mode", "name": "e_mode", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -mode=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "You can print out all comparisons instead of just the best one by setting this to be false.", "prompt": "Print out only best alignment", "name": "e_best", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\" -nobest\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "For linear-space recursion. If product of sequence lengths divided by 4 exceeds this then a divide-and-conquer strategy is  used to control the memory requirements. In this way very long  sequences can be aligned. \n  If you have a machine with plenty of memory you can raise this  parameter (but do not exceed the machine's physical RAM)", "prompt": "Space threshold (in megabytes)", "name": "e_space", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -space=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Shuffle", "name": "e_shuffle", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -shuffle=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Random number seed", "name": "e_seed", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "(\"\", \" -seed=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "16", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Show the alignment. The alignment includes the first and last 5 bases of each intron, together with the intron width. The  direction of splicing is indicated by angle brackets (forward or  reverse) or ???? (unknown).", "prompt": "Show the alignment", "name": "e_align", "ctrl": null, "simple": null, "argpos": "17", "format": {"python": "(\"\", \" -align\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment width", "name": "e_width", "ctrl": null, "simple": null, "argpos": "18", "format": {"python": "(\"\", \" -width=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "est2genome"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/est2genome.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "est2genome"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab90"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:repeats"}], "description": "Finds tandem repeats in a nucleotide sequence", "title": "etandem", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "origfile_out option", "name": "e_origfile_out", "simple": null, "filenames": {"python": "e_origfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "TandemReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Minimum repeat size (Integer, 2 or higher)", "name": "e_minrepeat", "ctrl": {"python": "value >= 2"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -minrepeat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Same as -minrepeat", "prompt": "Maximum repeat size (Integer, same as -minrepeat or higher)", "name": "e_maxrepeat", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -maxrepeat=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_minrepeat"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Threshold score", "name": "e_threshold", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -threshold=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Allow n as a mismatch", "name": "e_mismatch", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -mismatch\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Allow uniform consensus", "name": "e_uniform", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -uniform\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_origfile)", "name": "e_origfile", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\" , \" -origfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "etandem"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/etandem.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "etandem"}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>for instance</html:p>fisrt alignment<html:pre>&gt;seq1\n            aaaaggg\n            &gt;seq2\n            aaaa--g\n            &gt;seq3\n            aa--ggg</html:pre>second alignment<html:pre>&gt;seq1\n            ccccttt\n            &gt;seq2\n            cccc--t\n            &gt;seq3\n            cc--ttt</html:pre>the resulting alignment if the linker is \"---\" will be:<html:pre>&gt;seq1\n            aaaaggg---ccccttt\n            &gt;seq2\n            aaaa--g---cccc--t\n            &gt;seq3\n            aa--ggg---cc--ttt</html:pre>two methods can be used to extend the aligenmt:<html:ol><html:li>by sequence order: in this case the ids of sequences could be different.\n             and the id of each sequence in the resulting alignment is the concatenation of the respective sequence id \n             (All Alignments MUST have the same number of sequences)</html:li><html:li>by sequence id: in this case the extension is made based on the sequence ids.</html:li></html:ol></html:div>", "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab91"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "This tool concatenates multiple MSAs.", "title": "concatenate several alignments from several files", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "concatenated alignment", "name": "concatenated_alignment", "simple": null, "filenames": {"python": "\"extend_align.out\"", "perl": "\"extend_align.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:ol><html:li>by sequence order: in this case the ids of sequences could be different.\n             and the id of each sequence in the resulting alignment is the concatenation of the respective sequence id \n             (All Alignments MUST have the same number of sequences)</html:li><html:li>by sequence id: in this case the extension is made based on the sequence ids.</html:li></html:ol></html:div>", "prompt": "method to extend the alignment", "name": "extend_method", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "( \"\" , \" --id \")[value is not None and value != vdef]", "perl": "( defined $value and value != $vdef)? \" --id \":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "alignment", "name": "fasta_align", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -i \" + value + \" fasta\"", "perl": "\" -i $value fasta\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "MultipleAlignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "sequence linker", "name": "linker", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "(\"\", \" -l \" + str( value ) )[value is not None]", "perl": "(defined $value)?\"\": \" -l $value\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": "N\u00e9ron, B.", "command": {"path": null, "value": "extend_align"}, "documentation_links": [], "type": "program", "name": "extend_align"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab92"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Extract regions from a sequence alignment", "title": "extractalign", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA", "MSF", "PAIR", "MARKX0", "MARKX1", "MARKX2", "MARKX3", "MARKX10", "SRS", "SRSPAIR", "SCORE", "UNKNOWN", "MULTIPLE", "SIMPLE", "MATCH"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "Regions to extract. \n A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are separated by any non-digit, non-alpha character. \n  Examples of region specifications are: \n  24-45, 56-78 \n  1:45, 67=99;765..888 \n  1,5,8,10,23,45,57,99", "prompt": "Regions to extract (eg: 4-57,78-94)", "name": "e_regions", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -regions=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "extractalign"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/extractalign.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "extractalign"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab93"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit:feature_table"}], "description": "Extract features from sequence(s)", "title": "extractfeat", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "If this value is greater than 0 then that number of bases or residues before the feature are included in the extracted  sequence. This allows you to get the context of the feature. If  this value is negative then the start of the extracted sequence  will be this number of bases/residues before the end of the  feature. So a value of '10' will start the extraction 10  bases/residues before the start of the sequence, and a value of  '-10' will start the extraction 10 bases/residues before the end  of the feature. The output sequence will be padded with 'N' or 'X'  characters if the sequence starts after the required start of the  extraction.", "prompt": "Amount of sequence before feature to extract", "name": "e_before", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -before=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this value is greater than 0 then that number of bases or residues after the feature are included in the extracted  sequence. This allows you to get the context of the feature. If  this value is negative then the end of the extracted sequence will  be this number of bases/residues after the start of the feature.  So a value of '10' will end the extraction 10 bases/residues after  the end of the sequence, and a value of '-10' will end the  extraction 10 bases/residues after the start of the feature. The  output sequence will be padded with 'N' or 'X' characters if the  sequence ends before the required end of the extraction.", "prompt": "Amount of sequence after feature to extract", "name": "e_after", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -after=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default any feature source in the feature table is shown. You can set this to match any feature source you wish to  show. \n  The source name is usually either the name of the program that  detected the feature or it is the feature table (eg: EMBL) that  the feature came from. \n  The source may be wildcarded by using '*'. \n  If you wish to show more than one source, separate their names  with the character '|', eg: \n  gene* | embl", "prompt": "Source of feature to display", "name": "e_source", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -source=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default every feature in the feature table is extracted. You can set this to be any feature type you wish to extract. \n  See http://www.ebi.ac.uk/embl/WebFeat/ for a list of the EMBL  feature types and see the Uniprot user manual in  http://www.uniprot.org/manual/sequence_annotation  for a list of the Uniprot feature types. \n  The type may be wildcarded by using '*'. \n  If you wish to extract more than one type, separate their names  with the character '|', eg: \n  *UTR | intron", "prompt": "Type of feature to extract", "name": "e_type", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -type=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default any feature type in the feature table is extracted. You can set this to match any feature sense you wish. 0  - any sense, 1 - forward sense, -1 - reverse sense", "prompt": "Sense of feature to extract", "name": "e_sense", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -sense=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Minimum score of feature to extract (see also maxscore)", "prompt": "Minimum score of feature to extract", "name": "e_minscore", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -minscore=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum score of feature to extract. \n If both minscore and maxscore are zero (the default),  then any score is ignored", "prompt": "Maximum score of feature to extract", "name": "e_maxscore", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -maxscore=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tags are the types of extra values that a feature may have. For example in the EMBL feature table, a 'CDS' type of feature  may have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number', '/evidence', '/exception', '/function', '/gene',  '/label', '/map', '/note', '/number', '/partial', '/product',  '/protein_id', '/pseudo', '/standard_name', '/translation',  '/transl_except', '/transl_table', or '/usedin'. Some of these  tags also have values, for example '/gene' can have the value of  the gene name. \n  By default any feature tag in the feature table is extracted. You  can set this to match any feature tag you wish to show. \n  The tag may be wildcarded by using '*'. \n  If you wish to extract more than one tag, separate their names  with the character '|', eg: \n  gene | label", "prompt": "Tag of feature to extract", "name": "e_tag", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -tag=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tag values are the values associated with a feature tag. Tags are the types of extra values that a feature may have. For  example in the EMBL feature table, a 'CDS' type of feature may  have the tags '/codon', '/codon_start', '/db_xref', '/EC_number',  '/evidence', '/exception', '/function', '/gene', '/label', '/map',  '/note', '/number', '/partial', '/product', '/protein_id',  '/pseudo', '/standard_name', '/translation', '/transl_except',  '/transl_table', or '/usedin'. Only some of these tags can have  values, for example '/gene' can have the value of the gene name.  By default any feature tag value in the feature table is shown.  You can set this to match any feature tag value you wish to show. \n  The tag value may be wildcarded by using '*'. \n  If you wish to show more than one tag value, separate their names  with a space or the character '|', eg: \n  pax* | 10", "prompt": "Value of feature tags to extract", "name": "e_value", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -value=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "Some features, such as CDS (coding sequence) and mRNA are composed of introns concatenated together. There may be other  forms of 'joined' sequence, depending on the feature table. If  this option is set TRUE, then any group of these features will be  output as a single sequence. If the 'before' and 'after'  qualifiers have been set, then only the sequence before the first  feature and after the last feature are added.", "prompt": "Output introns etc. as one sequence", "name": "e_join", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -join\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "To aid you in identifying the type of feature that has been output, the type of feature is added to the start of the  description of the output sequence. Sometimes the description of a  sequence is lost in subsequent processing of the sequences file,  so it is useful for the type to be a part of the sequence ID name.  If you set this to be TRUE then the name is added to the ID name  of the output sequence.", "prompt": "Append type of feature to output sequence name", "name": "e_featinname", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -featinname\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "To aid you in identifying some further properties of a feature that has been output, this lets you specify one or more  tag names that should be added to the output sequence Description  text, together with their values (if any). For example, if this is  set to be 'gene', then if any output feature has the tag (for  example) '/gene=BRCA1' associated with it, then the text  '(gene=BRCA1)' will be added to the Description line. Tags are the  types of extra values that a feature may have. For example in the  EMBL feature table, a 'CDS' type of feature may have the tags  '/codon', '/codon_start', '/db_xref', '/EC_number', '/evidence',  '/exception', '/function', '/gene', '/label', '/map', '/note',  '/number', '/partial', '/product', '/protein_id', '/pseudo',  '/standard_name', '/translation', '/transl_except',  '/transl_table', or '/usedin'. Some of these tags also have  values, for example '/gene' can have the value of the gene name. \n  By default no feature tag is displayed. You can set this to match  any feature tag you wish to show. \n  The tag may be wildcarded by using '*'. \n  If you wish to extract more than one tag, separate their names  with the character '|', eg: \n  gene | label", "prompt": "Feature tag names to add to the description", "name": "e_describe", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -describe=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "16", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "extractfeat"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/extractfeat.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "extractfeat"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab94"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Extract regions from a sequence", "title": "extractseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "Regions to extract. \n A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are separated by any non-digit, non-alpha character. \n  Examples of region specifications are: \n  24-45, 56-78 \n  1:45, 67=99;765..888 \n  1,5,8,10,23,45,57,99", "prompt": "Regions to extract (eg: 4-57,78-94)", "name": "e_regions", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -regions=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "If this is set true then each specified region is written out as a separate sequence. The name of the sequence is created  from the name of the original sequence with the start and end  positions of the range appended with underscore characters between  them, eg: XYZ region 2 to 34 is written as: XYZ_2_34", "prompt": "Write regions to separate sequences", "name": "e_separate", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -separate\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "extractseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/extractseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "extractseq"}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\">Due to an incompatibility between the PHYLIP format and phyml and morePhyml named rules, \n            the using of long identifier in phyml or morePhyml failed. We proposed the following workaround:<html:ol><html:li>use fastaRename to generate an alignment with short ID and a file of ID mapping</html:li><html:li>perform your analysis with the alignment with short id</html:li><html:li>replace the short IDs in your tree (in NEWICK format) with nw_rename and the file of IDs mapping generated at the step 1.</html:li></html:ol></html:div>", "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab95"}, "classifications": [{"type": "mobyle1", "classification": "sequence:formatter"}], "description": "helps out with the 10-character limit of the PHYLIP-PHYML formats", "title": "fasta header shortener", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "type any kind of text", "prompt": "Output file with renamed headers", "name": "output_fasta", "simple": null, "filenames": {"python": "\"*.rename.fasta\"", "perl": "\"*.rename.fasta\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output file header map", "name": "output_map", "simple": null, "filenames": {"python": "\"*.map\"", "perl": "\"*.map\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ID_Mapping", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Input sequence file", "name": "input", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.0", "references": [], "source_links": [], "env": [], "authors": "Bertrand N\u00e9ron", "command": {"path": null, "value": "fastaRename"}, "documentation_links": [], "type": "program", "name": "fastaRename"}, {"comment": null, "homepage_links": ["http://fasta.bioch.virginia.edu/fasta_www2/fasta_list2.shtml"], "_id": {"$oid": "51434da393546d52388cab96"}, "classifications": [{"type": "mobyle1", "classification": "database:search:homology"}], "description": "Sequence database search", "title": "FASTA", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Fasta report", "name": "outfile", "simple": null, "filenames": {"python": "\"fasta.out\"", "perl": "\"fasta.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "FastaTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Html output file", "name": "html_outfile", "simple": null, "filenames": {"python": "\"fasta.html\"", "perl": "\"fasta.html\""}, "precond": {"python": "html_output", "perl": "$html_output"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "FastaHtmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "- fasta: scan a protein or DNA sequence library for similar sequences- tfasta: compare a protein sequence to a DNA sequence librarSy, translating the DNA sequence library `on-the-fly' to the 3 forward and the 3 reverse frames without frameshifts.- fastx/fasty: compare a DNA sequence to a protein sequence database, comparing the translated DNA sequence in three frames, with frameshifts. fasty2 allows frameshifts inside codons.- tfastx/tfasty: compare a protein sequence vs a translated DNA db, with frameshifts. tfasty allows frameshifts inside codons.- fastf/tfastf: compare an ordered peptide mixture (obtained for example by Edman degradation of a CNBr cleavage) against a protein or translated DNA database.- fasts/tfasts: compare a set of short peptide fragments (obtained from a mass-spec analysis of a protein) against a protein or translated DNA database.", "prompt": "Fasta program", "name": "fasta", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "str(value) + \" -q\"", "perl": "\"$value -q\""}, "command": true, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Query sequence File", "name": "query", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein", "DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Is it a DNA or protein sequence (-n)", "name": "seqtype", "ctrl": {"python": "(seqtype == \"protein\" and fasta in [\"fasta\", \"fastf\", \"fasts\", \"tfasta\", \"tfastx\", \"tfasty\", \"tfastf\", \"tfasts\"]) or (seqtype == \"DNA\" and fasta in [\"fasta\", \"fastx\", \"fasty\"] )", "perl": "($fasta =~ /^fast(f|s)/ and $seqtype eq \"DNA\") or ($fasta =~ /^fast(x|y)/ and $seqtype eq \"protein\")"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -n\" )[ value is not None and value == \"DNA\" and fasta == 'fasta']", "perl": "(defined $value and $fasta =~ /^fasta/ and $value eq \"DNA\") or $fasta =~ /^fast(x|y)/) ? \" -n\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Database", "name": "db", "children": [{"comment": "Choose a protein db for fasta, fastx, fatsf, fasty or fasts.Please note that Swissprot usage by and for commercial entities requires a license agreement.", "prompt": "Protein Database", "name": "protein_db", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"", "perl": "\""}, "command": false, "precond": {"python": "(seqtype == \"protein\" and fasta == \"fasta\") or fasta in [\"fastx\", \"fasty\", \"fastf\", \"fasts\"]", "perl": "($seqtype eq \"protein\" and $fasta =~ /^fasta/) or $fasta =~ /^fast(x|y|s|f)/"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Choose a nucleotide db for fasta, tfasta, tfastx, tfasty, tfastf or tfasts", "prompt": "Nucleotid Database", "name": "nucleotid_db", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"", "perl": "\""}, "command": false, "precond": {"python": "(seqtype == \"DNA\" and fasta == \"fasta\") or fasta in [ \"tfasta\", \"tfastx\", \"tfasty\", \"tfastf\", \"tfasts\"]", "perl": "($seqtype eq \"DNA\" and $fasta =~ /^fasta/ ) or $fasta =~ /^tfast/"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Break long library sequences into blocks of N residues.  Useful for bacterial genomes, which have only one sequence entry.  -N 2000 works well for well for bacterial genomes.", "prompt": "Break long library sequences into blocks (-N)", "name": "break_long", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -N \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -N $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Selectivity options", "name": "selectivity_opt", "children": [{"comment": "ktup sets the sensitivity and speed of the search. If ktup=2, similar regions in the two sequences being compared are found by looking at pairs of aligned residues; if ktup=1, single aligned amino acids are examined. ktup can be set to 2 or 1 for protein sequences, or from 1 to 6 for DNA sequences. The default if ktup is not specified is 2 for proteins and 6 for DNA. 1ktup=1 should be used for oligonucleotides (DNA query length < 20).", "prompt": "Sensitivity and speed of the search", "name": "ktup", "ctrl": {"python": "(seqtype == \"protein\" and value in [1,2]) or (seqtype == \"DNA\" and value in range(1,7,1))", "perl": "($seqtype eq \"protein\" and ($value == 1 or $value == 2 )) or ($seqtype eq \"DNA\" and ($value == 1 or $value == 2 or $value == 3 or $value == 4 or $value == 5 or $value == 6 )))"}, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The threshold value is normally calculated based on sequence length.", "prompt": "Threshold for band optimization (FASTA, FASTX). (-c)", "name": "optcut", "ctrl": {"python": "fasta in [\"fasta\", \"fastx\"]", "perl": "$fasta =~ /^fasta/ or $fasta =~ /^fastx"}, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -c \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -c $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The default for fasta with proteins is -12 and -16 for DNAThe default for fastx/fasty/tfastz/tfasty is -15.", "prompt": "Penalty for opening a gap (-f)", "name": "gapinit", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -f \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -f $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The default for fasta is -2 for proteins and -4 for DNAThe default for fastx/fasty/tfastz/tfasty is -3.", "prompt": "Penalty for gap extension (-g)", "name": "gapext", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -g \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -g $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Expectation value limit for displaying scores and alignments. Defaults  are 10.0 for FASTA  protein searches, 5.0 for translated DNA/protein comparisons, and 2.0 for DNA/DNA searches.", "prompt": "Maximal expectation value threshold for displaying scores and alignments (-E)", "name": "high_expect", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -E \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -E $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Expectation value lower limit for score and alignment display.  If value is 1e-6  prevents library sequences with E()-values lower than 1e-6 from being displayed. This allows the use to focus on more distant relationships.This allow one to skip over close relationships in searches for more distant relationships.", "prompt": "Minimal expectation value threshold for displaying scores and alignments (-F)", "name": "low_expect", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -F  \" + str(value))[ value is not None ]", "perl": "(defined $value) ? \" -F $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Scoring options", "name": "score_opt", "children": [{"comment": null, "precond": {"python": "fasta == \"fasta\" and seqtype == \"DNA\"", "perl": "$fasta eq \"fasta\" and seqtype eq \"DNA\""}, "prompt": "Nucleic penalty", "name": "scoring_nucleic", "children": [{"comment": null, "prompt": "Maximum positive value for a nucleotid match (-r)", "name": "nucleotid_match", "ctrl": {"python": "value >= 0", "perl": "$value >= 0"}, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "'+5/-4' are the default values for nucleotid match/mismatch, but '+3/-2' can perform better in some cases.", "prompt": "Maximum negative penalty value for a nucleotid mismatch (-r)", "name": "nucleotid_mismatch", "ctrl": {"python": "value < 0", "perl": "$value < 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , ' -r \"' + str(nucleotid_match) + '/' + str(value)+ '\"' )[ value is not None and nucleotid_match is not None and (nucleotid_match != 5 and value != vdef) ]", "perl": "(defined $value and defined nucleotid_match and ($value != $vdef and $nucleotid_match != 5)) ? \" -r \\\"$nucleotid_match/$value\\\"\" : \"\""}, "command": false, "precond": {"python": "nucleotid_match is not None", "perl": "defined $nucleotid_match"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "seqtype != \"DNA\"", "perl": "seqtype ne \"DNA\""}, "prompt": "Protein penalty", "name": "scoring_protein", "children": [{"comment": null, "prompt": "Scoring matrix file (-s)", "name": "matrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -s  \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -s $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Particularly useful for fast[xy], where termination codons are encoded as 'X'.", "prompt": "Penalty for a match to 'X' (independently of the PAM matrix) (-x)", "name": "X_penalty", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -x  \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -x $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Frameshift and translation options", "name": "frame_transl_opt", "children": [{"comment": null, "prompt": "Penalty for frameshift between two codons (fast[xy]/tfast[xy]) (-h)", "name": "frameshift", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -h  \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -h $value\":\"\""}, "command": false, "precond": {"python": "fasta in [\"fastx\", \"fasty\", \"tfastx\", \"tfasty\"]", "perl": "($fasta =~ /fast(x|y)/)"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Penalty for frameshift within a codon (fasty/tfasty) (-j)", "name": "frameshift_within", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -j  \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -j $value\":\"\""}, "command": false, "precond": {"python": "fasta in [\"fasty\", \"tfasty\"]", "perl": "($fasta =~ /fasty/)"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Search only the three forward frames (-3)", "name": "threeframe", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -3\")[ value ]", "perl": "($value) ? \" -3\":\"\""}, "command": false, "precond": {"python": "fasta in [\"tfasta\", \"tfastx\", \"tfasty\"]", "perl": "$fasta =~ /^tfast(a|x|y)/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Reverse complement the query sequence (-i)", "name": "invert", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -i\" )[ value ]", "perl": "($value) ? \" -i\" : \"\""}, "command": false, "precond": {"python": "fasta in [\"fastx\", \"tfastx\", \"fasty\", \"tfasty\"]", "perl": "$fasta =~ /fast(x|y)/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use genetic code for translation (tfasta/tfast[xy]/fast[xy]) (-t)", "name": "genetic_code", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -t  \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -t $value\" : \"\""}, "command": false, "precond": {"python": "fasta in [ \"tfasta\", \"tfastx\", \"tfasty\", \"tfastf\", \"tfasts\", \"fastx\", \"fasty\" ]", "perl": "$fasta =~ /^tfast/ or $fasta =~ /fast[xy]/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Optimization options", "name": "optimize_opt", "children": [{"comment": "Set the band-width used for optimization. -y 16 is the default for protein when ktup=2 and for all DNA alignments. -y 32 is used for protein and ktup=1. For proteins, optimization slows comparison 2-fold and is highly recommended.", "prompt": "Band-width used for optimization (-y)", "name": "band", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -y  \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -y $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Force Smith-Waterman alignment for output. Smith-Waterman is the default for protein sequences and FASTX, but not for TFASTA or DNA comparisons with FASTA.", "prompt": "Force Smith-Waterman alignment for DNA (-A)", "name": "swalig", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -A\")[ value ]", "perl": "($value)? \" -A\":\"\""}, "command": false, "precond": {"python": "fasta in [ \"tfasta\", \"fasta\" ] and seqtype == \"DNA\"", "perl": "$fasta =~ /^fasta/ and $seqtype eq \"DNA\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Turn off default optimization of all scores greater than OPTCUT. Shirt results by 'initn' scores reduces the accuracy of statistical estimates. This was  the behavior of fasta1 versions.", "prompt": "Turn fasta band optimization off during initial phase (-o)", "name": "noopt", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -o\")[ value ]", "perl": "($value)? \" -o\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In general, 1 and 2 are the best methods.", "prompt": "Specify statistical calculation. (-z)", "name": "stat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( (( \"\", \" -z  \" + str(value) )  [ value is not None and value != vdef]) , \" -z 1\" + str(value) )[value is not None and value > 0 and random is not None ]", "perl": "(defined $random and defined $value and $value > 0) ? \" -z 1$value\" : ($value ne $vdef) ? \" -z  $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This doubles the time required for a search, but allows accurate statistics to be estimated for libraries comprised of a single protein family.", "prompt": "Estimate statistical parameters from shuffled copies of each library sequence (-z)", "name": "random", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "stat > 0", "perl": "$stat > 0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Report options", "name": "affichage", "children": [{"comment": null, "prompt": "Turn off histogram display (-H)", "name": "histogram", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -H\" )[ value ]", "perl": "($value)? \" -H\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of similarity scores to be shown (-b)", "name": "scores", "ctrl": {"python": "value <= high_expect", "perl": "$value <= $high_expect"}, "simple": null, "argpos": null, "format": {"python": "(\"\"  , \" -b \"  + str(value))[ value is not None and value <= high_expect]", "perl": "(defined $value and $value <= $high_expect)? \" -b $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of alignments to be shown (-d)", "name": "alns", "ctrl": {"python": "value <= high_expect", "perl": "$value <= $high_expect"}, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -d  \" + str(value))[ value is not None and value <= high_expect]", "perl": "(defined $value and $value <= $high_expect)? \" -d $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "HTML output (-m)", "name": "html_output", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -m 6\" )[ value ]", "perl": "($value)? \" -m 6\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "(MARKX) =0,1,2,3,4. Alternate display of matches and mismatches in alignments.MARKX=0 uses ':','.',' ', for identities, conservative replacements, and non-conservative replacements, respectively.MARKX=1 uses ' ','x', and 'X'.MARKX=2 does not show the second sequence, but uses the second alignment line to display matches with a '.' for identity, or with the mismatched residue for mismatches. MARKX=2 is useful for aligning large numbers of similar sequences.MARKX=3 writes out a file of library sequences in FASTA format. MARKX=3 should always be used with the 'SHOWALL' (-a) option, but this does not completely ensure that all of the sequences output will be aligned.MARKX=4 displays a graph of the alignment of the library sequence with respect to the query sequence, so that one can identify the regions of the query sequence that are conserved.", "prompt": "Alternate display of matches and mismatches in alignments (-m)", "name": "markx", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -m  \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef )? \" -m $value\" : \"\""}, "command": false, "precond": {"python": "not html_output", "perl": "not $html_output"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequences ranked by the z-score based on the init1 score (-1)", "name": "init1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -1\")[ value ]", "perl": "($value)? \" -1\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show normalize score as (-B)", "name": "z_score_out", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -B\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -B\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output line length for sequence alignments (-w)", "name": "linlen", "ctrl": {"python": "value <= 200", "perl": "$value <= 200"}, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -w  \" + str(value))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef)? \" -w $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Causes fasta/lfasta/plfasta to start numbering the aligned sequences starting with offset1 and offset2, rather than 1 and 1. This is particularly useful for showing alignments of promoter regions.", "prompt": "Start numbering the aligned sequences at position x1 x2 (2 numbers separated by comma) (-X)", "name": "offsets", "ctrl": {"python": "len (value.split(',')) == 2 and value.split(',')[0] != '' and value.split(',')[1] != ''", "perl": "$value ~= /\\d+(,\\d+){1}/ and $value"}, "simple": null, "argpos": null, "format": {"python": "(\"\" , ' -X \"' +  str(value) + '\"')[ value is not None ]", "perl": "(defined $value)? \" -X \\\"$value\\\"\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display more information about the library sequence in the alignment (-L)", "name": "info", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -L\")[ value ]", "perl": "($value)? \" -L\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Other options", "name": "other_opt", "children": [{"comment": "Treat lower-case characters in the query or library sequence as 'low-complexity' residues. These characters are treated as 'X' during the initial scan, but are treated as normal residues during the final alignment. Sinces statistical significance is calculated from similarity score calculated during library search, low complexity regions will not produce statistical significant matches.If a significant alignment contains low complexity regions the final score may be higher than the score obtained during the search.", "prompt": "Lower case filtering (-S)", "name": "filter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -S\" )[ value ]", "perl": "($value) ? \" -S\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "3.4(t25d6)", "references": [{"url": null, "doi": null, "label": "Pearson, W. R. (1999) Flexible sequence similarity searching with the FASTA3 program package. Methods in Molecular Biology"}, {"url": null, "doi": null, "label": "W. R. Pearson and D. J. Lipman (1988), Improved Tools for Biological Sequence Analysis, PNAS 85:2444-2448"}, {"url": null, "doi": null, "label": "W. R. Pearson (1998) Empirical statistical estimates for sequence similarity searches. In J. Mol. Biol. 276:71-84"}, {"url": null, "doi": null, "label": "Pearson, W. R. (1996) Effective protein sequence comparison. In Meth. Enz., R. F. Doolittle, ed. (San Diego: Academic Press) 266:227-258"}], "source_links": ["http://faculty.virginia.edu/wrpearson/fasta/"], "env": [], "authors": "W. Pearson", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "fasta"}, {"comment": null, "homepage_links": ["http://iubio.bio.indiana.edu/soft/molbio/evolve/fastdnaml/fastDNAml.html"], "_id": {"$oid": "51434da393546d52388cab97"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:likelihood"}], "description": "Construction of phylogenetic trees of DNA sequences using maximum likelihood", "title": "fastDNAml", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output and Results Options", "name": "output_opt", "children": [{"comment": null, "prompt": "Output(s) file", "name": "outputfile", "simple": null, "filenames": {"python": "\"fastdnaml.out\"", "perl": "\"fastdnaml.out\""}, "precond": {"python": "not bootstrap and outfile is None", "perl": "not $bootstrap and not defined $outfile"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output(s) file", "name": "outputfile_name", "simple": null, "filenames": {"python": "str(outfile)", "perl": "\"$outfile\""}, "precond": {"python": "not bootstrap and outfile is not None", "perl": "not $bootstrap and defined $outfile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, {"comment": null, "prompt": "Tree file", "name": "treefiles", "simple": null, "filenames": {"python": "\"_treefile.[0-9]*\"", "perl": "\"_treefile.[0-9]*\""}, "precond": {"python": "not bootstrap", "perl": "not $bootstrap"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Bootstrap output report", "name": "bootstrap_report", "simple": null, "filenames": {"python": "\"%s.tmp.out\" % str(infile)", "perl": "\"$infile.tmp.out\""}, "precond": {"python": "bootstrap", "perl": "$bootstrap"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Bootstrap tree file", "name": "bootstrap_tree", "simple": null, "filenames": {"python": "\"%s.tmp.tree\" % str(infile)", "perl": "\"$infile.tmp.tree\""}, "precond": {"python": "bootstrap", "perl": "$bootstrap"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Bootstrap alignment file", "name": "bootstrap_aln", "simple": null, "filenames": {"python": "\"%s.tmp\" % str(infile)", "perl": "\"$infile.tmp\""}, "precond": {"python": "bootstrap", "perl": "$bootstrap"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "fastdnaml", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "(\"fastDNAml\", \"cat > %s.tmp;\" % infile )[bootstrap]", "perl": "($bootstrap) ? \"cat > $infile.tmp;\" : \"fastDNAml\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "clean_tmp", "ctrl": null, "simple": null, "argpos": "1100", "format": {"python": "\" && clean_checkpoints\"", "perl": "\" && clean_checkpoints\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The input to fastDNAml is similar to that used by DNAML (and the other PHYLIP programs). At least 3 sequences are required.", "prompt": "Sequence Alignment File", "name": "infile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\"cat \" + str(value) + \" | \"", "perl": "\"cat $value | \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["PHYLIPI"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Input Options", "name": "inputopt", "children": [{"comment": null, "prompt": "Use empirical base frequencies derived from the sequence data ?", "name": "frequencies", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" ,\"frequencies %s %s %s %s | \" % (str(fA), str(fC), str(fG), str(fT)) )[ not ( value and fA is None and fC is None and fG is None and fT is None) ]", "perl": "(not $value and not ($fA and $fC and $fG and $fT )) ? \"\": \"frequencies $fA $fC $fG $fT | \""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "not frequencies", "perl": "not $frequencies"}, "prompt": "User bases frequencies (instead of empirical frequencies)", "name": "user_frequencies", "children": [{"comment": null, "prompt": "A frequency", "name": "fA", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "C frequency", "name": "fC", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "G frequency", "name": "fG", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "T frequency", "name": "fT", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "This option can be used before a global or treefile option with auxiliary data.", "prompt": "Transition/transversion ratio", "name": "transition", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" transition \" + str(value) + \" | \" )[ value is not None and value != vdef]", "perl": "(defined $value and $value!=$vdef) ? \" transition $value | \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Note that fastDNAml explores a very small number of alternative tree topologies relative to a typical parsimony program. There is a very real chance that the search procedure will not find the tree topology with the highest likelihood. Altering the order of taxon addition and comparing the trees found is a fairly efficient method for testing convergence. Typically, it would be nice to find the same best tree at least twice (if not three times), as opposed to simply performing some\n              fixed number of jumbles and hoping that at least one of them will be the optimum.", "prompt": "Randomize input order of sequences (jumble)", "name": "jumble", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \"jumble | \" )[ value ]", "perl": "($value) ? \"jumble | \" : \"\""}, "command": false, "precond": {"python": "not bootstrap", "perl": "not $bootstrap"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The G (global) option has been generalized to permit crossing any number of branches during tree rearrangements. In addition, it is possible to modify the extent of rearrangement explored during the sequential addition phase of tree building.The G U (global and user tree) option combination instructs the program to find the best of the user trees, and then look for rearrangements that are better still.If a rearrangement distance is specified, the input must contain a transition option.The Global option can be used to force branch swapping on user trees, (combination of Global and User Tree(s) options).", "prompt": "Global rearrangements", "name": "global_opp", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "( \"\" , \" global \")[ value ]", "perl": "($value) ? \" global \" : \"\""}, "command": false, "precond": {"python": "transition is not None or bootstrap or jumble", "perl": "defined $transition or $bootstrap or $jumble"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of branches to cross in rearrangements of the completed tree", "name": "final_arrgt", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "( \"\" , \" %s \" % str(final_arrgt))[ value is not None]", "perl": "(defined $value) ? \" $final_arrgt \" : \"\""}, "command": false, "precond": {"python": "(transition is not None or bootstrap or jumble) and global_opp", "perl": "(defined $transition or $bootstrap or $jumble) and $global_opp"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of branches to cross in testing rearrangements during the sequential addition phase of tree inference", "name": "partial_arrgt", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "( \"\" , \" %s \" % str(partial_arrgt))[ value is not None]", "perl": "(defined $value) ? \"$partial_arrgt \" : \"\""}, "command": false, "precond": {"python": "(transition is not None or bootstrap or jumble) and global_opp", "perl": "(defined $transition  or $bootstrap or $jumble) and $global_opp"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of branches to cross in testing rearrangements during the sequential addition phase of tree inference", "name": "pipe_arrgt", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "\" | \"", "perl": "\" | \""}, "command": false, "precond": {"python": "(transition is not None or bootstrap or jumble) and global_opp", "perl": "(defined $transition  or $bootstrap or $jumble) and $global_opp"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option greatly decreases the time in initially placing a new sequence in the growing tree (but does not change the time required to subsequently test rearrangements). The overall time savings seems to be about 30%, based on a very limited number of test cases. Its downside, if any, is unknown. This will probably become default program behavior in the near future.If the analysis is run with a global option of 'G 0 0', so that no rearrangements are permitted, the tree is build very approximately, but very quickly. This may be of greatest interest if the question is, 'Where does this one new sequence fit into this known tree?' The known tree is provided with the restart option, below.PHYLIP DNAML does not include anything comparable to the quickadd option.", "prompt": "Decreases the time in initially placing a new sequence in the growing tree (quickadd)", "name": "quickadd", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" quickadd | \" )[ value ]", "perl": "($value)? \"quickadd | \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use the specified sequence number as outgroup", "name": "outgroup", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \"outgroup \" + str(value) + \" | \" )[ value is not None ]", "perl": "(defined $value) ? \"outgroup $value | \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "This options allows you to enter your own trees and instructs the program to evaluate them.", "precond": {"python": "not bootstrap", "perl": "not $bootstrap"}, "prompt": "User input Tree Options", "name": "treeopt", "children": [{"comment": "The trees must be in Newick format, and terminated with a semicolon. (The program also accepts a pseudo_newick format, which is a valid prolog fact.)The tree reader in this program is more powerful than that in PHYLIP 3.3. In particular, material enclosed in square brackets, [ like this ], is ignored as comments; taxa names can be wrapped in single quotation marks to support the inclusion of characters that would otherwise end the name (i.e., '(', ')', ':', ';', '[', ']', ',' and ' '); names of internal nodes are properly ignored; and exponential notation (such as 1.0E-6) for branch lengths is supported.", "prompt": "User tree - tree(s) file", "name": "user_tree", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" usertree %s |\" % str(value) )[ value is not None ]", "perl": "(defined $value) ? \"usertree $value |\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Causes user trees to be read with branch lengths (and it is an error to omit any of them). Without the L option, branch lengths in user trees are not required, and are ignored if present.", "prompt": "User trees to be read with branch lengths", "name": "user_lengths", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \"userlengths |\" )[ value ]", "perl": "($value) ? \"userlengths |\" : \"\""}, "command": false, "precond": {"python": "not bootstrap", "perl": "not $bootstrap"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Bootstrap", "name": "boot", "children": [{"comment": "Tree files will be summarized in one '.tree' file as well as output files in one '.out' file", "prompt": "Generates a re-sample of the input data (bootstrap)", "name": "bootstrap", "ctrl": null, "simple": null, "argpos": "1001", "format": {"python": "( \"\" , \" fastdnaml \" )[ value ]", "perl": "($value) ? \" fastdnaml \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "bootstrap", "perl": "$bootstrap"}, "prompt": "Bootstrap options", "name": "bootopt", "children": [{"comment": null, "prompt": "Number of different bootstrap samples", "name": "nboots", "ctrl": {"python": "value <= 1000", "perl": "$value <= 1000"}, "simple": null, "argpos": "1002", "format": {"python": "( \"\" , \" -boots \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -boots $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Warning: For a given random number seed, the sample will always be the same.", "prompt": "Random number seed for first bootstrap", "name": "bootstrap_seed", "ctrl": null, "simple": null, "argpos": "1002", "format": {"python": "( \"\" , \" -seed \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -seed $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum attempts at replicating inferred tree (max jumble)", "name": "bootstrap_maxjumble", "ctrl": null, "simple": null, "argpos": "1002", "format": {"python": "( \"\" , \" -jumble \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -jumble $value\" : \"\""}, "command": false, "precond": {"python": "bootstrap", "perl": "$bootstrap"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "in_bootfile", "ctrl": null, "simple": null, "argpos": "1003", "format": {"python": "\" %s.tmp\" % str(infile)", "perl": "\" $infile.tmp\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Output and Results Options", "name": "output_opt", "children": [{"comment": null, "prompt": "Output File", "name": "outfile", "ctrl": null, "simple": null, "argpos": "1010", "format": {"python": "( \"\" , \" > \" + str(outfile) )[ value is not None ]", "perl": "(defined $value and $value ne $vdef) ? \" > $outfile\" : \"\""}, "command": false, "precond": {"python": "not bootstrap", "perl": "not $bootstrap"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Save tree in treefile", "name": "treefile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"treefile | \", \"\" )[ value ]", "perl": "($value) ? \"\" : \"treefile | \""}, "command": false, "precond": {"python": "not bootstrap", "perl": "not $bootstrap"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Print the input alignment at start of run (printdata)", "name": "printdata", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \"printdata | \" )[ value ]", "perl": "($value) ? \"printdata | \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Categories and Weights Options", "name": "categopt", "children": [{"comment": "The data must have the format specified for PHYLIP dnaml 3.3. The first line must be the letter C, followed by the number of categories (a number in the range 1 through 35), and then a blank-separated list of the rates for each category. (The list can take more than one line; the program reads until it finds the specified number of rate values.) The next line should be the word Categories followed by one rate category character per sequence position. The categories 1 - 35 are\n              represented by the series 1, 2, 3, ..., 8, 9, A, B, C, ..., Y, Z. These latter data can be on one or more lines. For example:C 12 0.0625 0.125 0.25 0.5 1 2 4 8 16 32 64 128Categories 5111136343678975AAA8949995566778888889AAAAAA9239898629AAAAA9Category 'numbers' are ordered: 1, 2, 3, ..., 9, A, B, ..., Y, Z. Category zero (undefined rate) is permitted at sites with a zero in a user-supplied weighting mask.", "prompt": "Rate categories file (user-specified)", "name": "categories", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \"categories \"+ str(value) + \" |\" )[ value is not None ]", "perl": "(defined $value) ? \"categories $value |\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipCategoriesRates", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "example:Weights 111111111111001100000100011111100000000000000110000110000000In case of bootstrap, only positions that have nonzero weights are used in computing the bootstrap sample.", "prompt": "Weights file (user-specified column weighting information)", "name": "weights", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \"weights \" + str(value) + \" |\" )[ value is not None ]", "perl": "(defined $value) ? \"weights $value |\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipWeight", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.2.2", "references": [{"url": null, "doi": null, "label": "Olsen, G. J., Matsuda, H., Hagstrom, R., and Overbeek, R. 1994. fastDNAml: A tool for construction of phylogenetic trees of DNA sequences using maximum likelihood. Comput. Appl. Biosci. 10: 41-48."}, {"url": null, "doi": null, "label": "Felsenstein, J. 1981. Evolutionary trees from DNA sequences: A maximum likelihood approach. J. Mol. Evol. 17: 368-376."}], "source_links": [], "env": [], "authors": "Olsen, Matsuda, Hagstrom, Overbeek", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "fastdnaml"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab98"}, "classifications": [{"type": "mobyle1", "classification": "Utilities and Tools:File Format Conversion"}, {"type": "mobyle1", "classification": "Genomic Analysis:Multi-Purpose Tools"}], "description": "Generates a solexa quality score box-plot graph.", "title": "FASTX Toolkit - FASTX Quality Box Plot", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output", "name": "Output", "children": [{"comment": null, "prompt": "OutSequence", "name": "quality_out", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input", "name": "input", "children": [{"comment": "Input file should be the output of \"solexa_quality_statistics\" program", "prompt": "FASTX Quality File (-i)", "name": "input_file", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -i \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "FastxQuality", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "output_para", "children": [{"comment": "Generate PostScript (.PS) file - Default is PNG image", "prompt": "Generate PostScript? (-p)", "name": "generate_postscript", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "' -p'"}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Title (usually the solexa file name) - will be plotted on the graph", "prompt": "Enter title of the box-plot graph (-t)", "name": "chart_title", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "('', ' -t ' + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output", "name": "Output", "children": [{"comment": "Output file name - default is STDOUT", "prompt": "Enter output file prefix (-o)", "name": "output_file", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\" -o \" + str(vdef) , \" -o \" + str(value))[value is not None] + \".ps\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "0.0.13", "references": [], "source_links": [], "env": [], "authors": "Assaf Gordon", "command": {"path": null, "value": "fastq_quality_boxplot_graph.sh"}, "documentation_links": [], "type": "program", "name": "fastq_box_plot"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab99"}, "classifications": [{"type": "mobyle1", "classification": "Utilities and Tools:File Format Conversion"}, {"type": "mobyle1", "classification": "Genomic Analysis:Multi-Purpose Tools"}], "description": "This tool converts FASTQ sequencing reads to FASTA sequences.", "title": "FASTX Toolkit - FASTQ to FASTA", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output", "name": "Output", "children": [{"comment": null, "prompt": "Sequence", "name": "final_out", "simple": null, "filenames": {"python": "str(output_file)"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "fastqtofasta", "name": "fastxtoolkit_cmd", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"fastq_to_fasta\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Input", "name": "Input", "children": [{"comment": null, "prompt": "Input file format.", "name": "fasta_or_fastq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\" \" + str(value),\"\")[value == \"fasta\" or value ==\"fastq64\"]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "FASTQ input file (-i):", "name": "input_data", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\" -i \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "Options", "children": [{"comment": null, "prompt": "Rename sequence identifiers to numbers?  (-n)", "name": "seq_identifies_to_numbers", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "('',' -n ')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Keep sequences with unknown (N) nucleotides? (-r)", "name": "keep_unknown_nucleotides", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -r \")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output", "name": "Output", "children": [{"comment": null, "prompt": "Compress output with GZIP? (-z)", "name": "compress_with_gzip", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "('',' -z ')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Enter experiment name (-o):", "name": "output_file", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\" -o \" + str(vdef) , \" -o \" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "0.0.13", "references": [], "source_links": [], "env": [], "authors": "Assaf Gordon, Cold Spring Harbor Laboratory", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "fastq_to_fasta"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab9a"}, "classifications": [{"type": "mobyle1", "classification": "Utilities and Tools:File Format Conversion"}, {"type": "mobyle1", "classification": "Genomic Analysis:Multi-Purpose Tools"}], "description": "FASTA/Q Nucleotide Distribution Plotter", "title": "FASTX Toolkit - FASTX Nucleotide Distribution Graph", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output", "name": "output_options", "children": [{"comment": null, "prompt": "Graph results", "name": "graph_outfile", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input", "name": "input_options", "children": [{"comment": "Should be the output of \"fastx_quality_statistics\" program.", "prompt": "Select input file (-i)", "name": "text_intput", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "' -i ' + str(value)"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "FastxQuality", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "options", "children": [{"comment": "Will be plotted on the graph", "prompt": "Graph title (-t)", "name": "graph_title", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('', ' -t ' + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default is PNG image.", "prompt": "Generate a PostScript file? (-p)", "name": "generate_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "' -p'"}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output", "name": "output_options", "children": [{"comment": null, "prompt": "Output file name (-o)", "name": "outfile_name", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "' -o ' + ( str(vdef) ,str(value) )[value is not None and value != vdef] + \".ps\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "0.0.13", "references": [], "source_links": [], "env": [], "authors": "Assaf Gordon", "command": {"path": null, "value": "fastx_nucleotide_distribution_graph.sh"}, "documentation_links": [], "type": "program", "name": "fastx_nucleotide_distribution"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab9b"}, "classifications": [{"type": "mobyle1", "classification": "NGS: QC and Manipulation"}], "description": "Creates quality statistics report for the given FASTQ library. This statistics report can be used as input for Quality Score and Nucleotides Distribution tools.", "title": "FASTX Toolkit - FASTX Quality Statistics", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Stats", "name": "trimmer_out", "simple": null, "filenames": {"python": "( output_stats_file, \"fast_stats.txt\")[output_stats_file is None]"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "FastxQuality", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input", "name": "Input", "children": [{"comment": null, "prompt": "Input file format.", "name": "fasta_or_fastq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\" \" + str(value),\"\")[value == \"fasta\" or value ==\"fastq64\"]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "FASTA/Q Input File (-i):", "name": "input_fastx", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -i  \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output", "name": "Output", "children": [{"comment": "The output TEXT file will have the following fields (one row per column):\n\ncolumn\t= column number (1 to 36 for a 36-cycles read solexa file)\ncount   = number of bases found in this column.\nmin     = Lowest quality score value found in this column.\nmax     = Highest quality score value found in this column.\nsum     = Sum of quality score values for this column.\nmean    = Mean quality score value for this column.\nQ1\t= 1st quartile quality score.\nmed\t= Median quality score.\nQ3\t= 3rd quartile quality score.\nIQR\t= Inter-Quartile range (Q3-Q1).\nlW\t= 'Left-Whisker' value (for boxplotting).\nrW\t= 'Right-Whisker' value (for boxplotting).\nA_Count\t= Count of 'A' nucleotides found in this column.\nC_Count\t= Count of 'C' nucleotides found in this column.\nG_Count\t= Count of 'G' nucleotides found in this column.\nT_Count\t= Count of 'T' nucleotides found in this column.\nN_Count = Count of 'N' nucleotides found in this column.\nmax-count = max. number of bases (in all cycles)", "prompt": "Enter experiment name (-o):", "name": "output_stats_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\" -o \" + str(vdef) , \" -o \" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "0.0.13", "references": [], "source_links": [], "env": [], "authors": "Assaf Gordon", "command": {"path": null, "value": "fastx_quality_stats"}, "documentation_links": [], "type": "program", "name": "fastx_quality_stats"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab9c"}, "classifications": [{"type": "mobyle1", "classification": "Utilities and Tools:File Format Conversion"}, {"type": "mobyle1", "classification": "Genomic Analysis:Multi-Purpose Tools"}], "description": "FASTX Toolkit trimmer.", "title": "FASTX Toolkit - Trimmer", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "GenomeSequence", "name": "trimmer_out", "simple": null, "filenames": {"python": "( out_file , \"trimmed_seq.fq\")[out_file is None]"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input", "name": "Input", "children": [{"comment": null, "prompt": "Input file format.", "name": "fasta_or_fastq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\" \" + str(value),\"\")[value == \"fasta\" or value ==\"fastq64\"]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "FASTA/Q input file - Default is STDIN", "prompt": "FASTA/Q Input File (-i)", "name": "input_fastx", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -i \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "Options", "children": [{"comment": "Default is 1 (=first base)", "prompt": "First base to keep (-f N)", "name": "first_base_pos", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -f \" + str( value )"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default is entire read", "prompt": "Last base to keep (-l N)", "name": "last_base_pos", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\" -l \" + str( value ),\"\")[value is None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output", "name": "output_para", "children": [{"comment": "Output compressed with GZIP.", "prompt": "Compress output? (-z)", "name": "compress_output", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" ,\" -z \")[value is not None and compress_output]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "FASTA/Q output file - Default is STDOUT", "prompt": "Enter experiment name (-o)", "name": "out_file", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\" -o \" + str(vdef) , \" -o \" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "0.0.13", "references": [], "source_links": [], "env": [], "authors": "Assaf Gordon", "command": {"path": null, "value": "fastx_trimmer"}, "documentation_links": [], "type": "program", "name": "fastx_trimmer"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab9d"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Reads and writes a feature table", "title": "featcopy", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfeat_out option", "name": "e_outfeat_out", "simple": null, "filenames": {"python": "e_outfeat"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Feature", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_offormat_outfeat"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "features option", "name": "e_features", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -features=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Features", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output feature file (e_outfeat)", "name": "e_outfeat", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\" , \" -outfeat=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the feature output format", "name": "e_offormat_outfeat", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -offormat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "featcopy"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/featcopy.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "featcopy"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab9e"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Reads and writes a feature table", "title": "featreport", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "features option", "name": "e_features", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -features=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Features", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "featreport"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/featreport.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "featreport"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cab9f"}, "classifications": [{"type": "mobyle1", "classification": "database:search:sequence"}], "description": "Retrieve sequences in databases from list of identifier (USA list)", "title": "fetch sequences", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "output", "children": [{"comment": null, "prompt": "the sequences", "name": "sequence_out", "simple": null, "filenames": {"python": "\"fetchSequences.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": "(1,n)"}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "input", "children": [{"comment": "list of identifiers in USA format:\n             databank:Acc\n             ( one item per line )", "prompt": "list of sequences identifier in USA format", "name": "USAList", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" @\" + str(value)"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenesId", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["USAList"], "edam_types": [], "card": "1"}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.0", "references": [{"url": null, "doi": null, "label": "http://emboss.sourceforge.net/"}], "source_links": [], "env": [], "authors": "EMBOSS", "command": {"path": null, "value": "seqret"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/seqret.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "fetchSequences"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388caba0"}, "classifications": [{"type": "mobyle1", "classification": "sequence:enzyme:kinetics"}], "description": "Calculate and plot enzyme reaction data", "title": "findkm", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "FindkmReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graphlb == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graphlb == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graphlb == \"ps\" or e_graphlb == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graphlb == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graphlb == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "Enzyme kinetics data (application-specific) file", "name": "e_infile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -infile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "EnzymeData", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "S/v vs s", "name": "e_plot", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\" -noplot\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graphlb output format", "name": "e_graphlb", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -graphlb=\" + str(vdef), \" -graphlb=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "findkm"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/findkm.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "findkm"}, {"comment": "This program carries out Fitch-Margoliash,\n\t  Least Squares, and a number of similar methods", "homepage_links": [], "_id": {"$oid": "51434da393546d52388caba1"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:distance"}], "description": "Fitch-Margoliash and Least-Squares Distance Methods", "title": "fitch", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Consense output file", "name": "consense_outfile", "simple": null, "filenames": {"python": "\"consense.outfile\"", "perl": "\"consense.outfile\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Consense tree file", "name": "consense_treefile", "simple": null, "filenames": {"python": "\"consense.outtree\"", "perl": "\"consense.outtree\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Fitch output file", "name": "outfile", "simple": null, "filenames": {"python": "\"fitch.outfile\"", "perl": "\"fitch.outfile\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Fitch tree file", "name": "treefile", "simple": null, "filenames": {"python": "\"fitch.outtree\"", "perl": "\"fitch.outtree\""}, "precond": {"python": "print_treefile", "perl": "$print_treefile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "fitch", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"fitch <fitch.params\"", "perl": "\"fitch <fitch.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Give a file containing a distance matrix\n\t  obtained by distance matrix programs like protdist or\n\t  dnadist", "prompt": "Distances matrix File", "name": "infile", "ctrl": null, "simple": null, "argpos": "-5", "format": {"python": "\"ln -s \" + str( value ) + \" infile && \"", "perl": "\"ln -s $infile infile && \""}, "command": false, "precond": {"python": "infile != \"infile\"", "perl": "$infile ne \"infile\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipDistanceMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Method (D)", "name": "Method", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}, {"comment": null, "precond": null, "prompt": "Fitch options", "name": "fitch_options", "children": [{"comment": null, "prompt": "Negative branch lengths allowed (-)", "name": "negative_branch", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"-\\n\" )[ value ]", "perl": "($value) ? \"-\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}, {"comment": "For the Fitch-Margoliash method, which is the default method with this program, P is 2.0. For the Cavalli-Sforza and Edwards least squares method it should be set to 0 (so that the denominator is always 1). An intermediate method is also available in which P is 1.0, and any other value of P, such as 4.0 or -2.3, can also be used. This generates a whole family of methods.Please read the documentation (man distance).", "prompt": "Power (P)", "name": "power", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"P\\n\" + str(value ) + \"\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"P\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}]}, {"comment": null, "precond": null, "prompt": "Randomize options", "name": "jumble_options", "children": [{"comment": null, "prompt": "Randomize (jumble) input order (J)", "name": "jumble", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "( \"\" , \"J\\n\"+str( jumble_seed ) +\"\\n\" + str( jumble_number ) +\"\\n\" )[ value ]", "perl": "($value) ? \"J\\\\n$jumble_seed\\\\n$jumble_number\\\\n\" : \"\""}, "command": false, "precond": {"python": "not user_tree", "perl": "not $user_tree"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}, {"comment": null, "prompt": "Random number seed (must be odd)", "name": "jumble_seed", "ctrl": {"python": "value > 0 and (value % 2) != 0", "perl": "$value > 0 and ($value % 2) != 0"}, "simple": null, "argpos": "19", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "jumble", "perl": "$jumble"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of times to jumble", "name": "jumble_number", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "jumble", "perl": "$jumble"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Bootstrap options", "name": "bootstrap", "children": [{"comment": null, "prompt": "Analyze multiple data sets (M)", "name": "multiple", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\", \"M\\n\"+str(multiple_number)+\"\\n\"+str(multiple_seed)+\"\\n\")[value]", "perl": "($value) ? \"M\\\\n$multiple_number\\\\n$multiple_seed\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}, {"comment": null, "prompt": "How many data sets", "name": "multiple_number", "ctrl": {"python": "value <= 1000", "perl": "$value <= 1000"}, "simple": null, "argpos": "9", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "multiple", "perl": "$multiple"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Random number seed (must be odd)", "name": "multiple_seed", "ctrl": {"python": "value > 0 and (value % 2) != 0", "perl": "$value > 0 and ($value % 2) != 0"}, "simple": null, "argpos": "19", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "multiple", "perl": "$multiple"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Compute a consensus tree", "name": "consense", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" && cp infile fitch.infile &&  cp fitch.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" )[ value ]", "perl": "($value) ? \" && cp infile fitch.infile &&  cp fitch.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" : \"\""}, "command": false, "precond": {"python": "multiple and print_treefile", "perl": "$multiple and $print_treefile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": null, "name": "consense_confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "prompt": null, "name": "consense_terminal_type", "ctrl": null, "simple": null, "argpos": "-2", "format": {"python": "\"T\\n\"", "perl": "\"T\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "precond": null, "prompt": "User tree options", "name": "user_tree_opt", "children": [{"comment": "To give your tree to the program, you must normally put it in the alignment file, after the sequences, preceded by a line indicating how many trees you give.Here, this will be automatically appended: just give a treefile and the number of trees in it.", "prompt": "Use User tree (default: no, search for best tree) (U)", "name": "user_tree", "ctrl": {"python": "not ( user_tree and jumble )", "perl": "not ( $user_tree and $jumble )"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"U\\n\")[ value ]", "perl": "($value) ? \"U\\\\n\" : \"\""}, "command": false, "precond": {"python": "tree_file is not None", "perl": "defined $tree_file"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}, {"comment": null, "prompt": "User Tree file", "name": "tree_file", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "(\"\" , \"cat \"+str( tree_file ) + \" >> intree; \" )[ value is not None ]", "perl": "(defined $value) ? \"cat $tree_file >> intree; \" : \"\""}, "command": false, "precond": {"python": "user_tree", "perl": "$user_tree"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use lengths from user trees (N)", "name": "use_lengths", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \"N\\n\" )[ value ]", "perl": "($value) ? \"N\\\\n\" : \"\""}, "command": false, "precond": {"python": "user_tree", "perl": "$user_tree"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": "Tells the program to print a semi-graphical picture of the tree in the outfile.", "prompt": "Print out tree (3)", "name": "print_tree", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"3\\n\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \"3\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}, {"comment": "Tells the program to save the tree in a treefile (a standard representation of trees where the tree is specified by a nested pairs of parentheses, enclosing names and separated by commas).", "prompt": "Write out trees onto tree file (4)", "name": "print_treefile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"4\\n\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \"4\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}, {"comment": null, "prompt": "Print out the data at start of run (1)", "name": "printdata", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"1\\n\" )[ value ]", "perl": "($value) ? \"1\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}]}, {"comment": null, "precond": null, "prompt": "Other options", "name": "other_options", "children": [{"comment": null, "prompt": "Outgroup species root (O)", "name": "outgroup", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"O\\n\" +str( value )+ \"\\n\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \"O\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}, {"comment": null, "prompt": "Matrix format", "name": "triangular", "ctrl": null, "simple": null, "argpos": "1", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}, {"comment": "If the S (subreplication) option is in effect, the above degrees of freedom must be modified by noting that N is not n(n-1)/2 but is the sum of the numbers of replicates of all cells in the distance matrix read in, which may be either square or triangular. A further explanation of the statistical test of the clock is given in a paper of mine (Felsenstein, 1986).", "prompt": "Subreplicates (S)", "name": "subreplicates", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"S\\n\" )[ value ]", "perl": "($value) ? \"S\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}, {"comment": "is the Global search option. This causes, after the last species is added to the tree, each possible group to be removed and re-added. This improves the result, since the position of every species is reconsidered. It approximately triples the run-time of the program. It is not an option in KITSCH because it is the default and is always in force there.", "prompt": "Global rearrangements (G)", "name": "global", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\", \"G\\n\")[ value ]", "perl": "($value) ? \"G\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}]}, {"comment": null, "prompt": null, "name": "confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}, {"comment": null, "prompt": null, "name": "terminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "fitch.params"}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/phylip/doc/fitch.html"], "type": "program", "name": "fitch"}, {"comment": "forest2consense processes two files containing lists of trees, and, for each of the possible combinations between the a tree of file 1 and a tree of file 2, a consensus tree using PHYLIP's consense package. tree leaves IDs renaming is processed using nw_rename", "homepage_links": [], "_id": {"$oid": "51434da393546d52388caba2"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:tree_analyser"}], "description": "Consensus tree \"list processor\"", "title": "forest2consense", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Consense tree files", "name": "treefile", "simple": null, "filenames": {"python": "\"%s-%s-*.outtree\" % (infile1,infile2)", "perl": "\"$infile1-$infile2-*.outtree\""}, "precond": {"python": "print_treefile", "perl": "$print_treefile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Consense output files", "name": "outfile", "simple": null, "filenames": {"python": "\"%s-%s-*.outfile\" % (infile1,infile2)", "perl": "\"$infile1-$infile2-*.outfile\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "Input is a tree file which contains a series of trees in the Newick standard form", "prompt": "First series of trees in file (intree)", "name": "infile1", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" %s \" % value", "perl": "\" $value \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Input is a tree file which contains a series of trees in the Newick standard form", "prompt": "Second series of trees in file (intree)", "name": "infile2", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" %s \" % value", "perl": "\" $value \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "the map file contains the mapping between short IDs that may have been used for tree generation and the real entry names", "prompt": "Map file", "name": "map_file", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -m \" + str(value)", "perl": "\" -m $value\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Consensus type", "name": "type", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "params"}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": "Tells the program to print a semi-graphical picture of the tree in the outfile.", "prompt": "Print out tree (3)", "name": "print_tree", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"3\\n\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \"3\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "params"}, {"comment": "Tells the program to save the tree in a treefile (a standard representation of trees where the tree is specified by a nested pairs of parentheses, enclosing names and separated by commas).", "prompt": "Write out trees onto tree file (4)", "name": "print_treefile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"4\\n\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \"4\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "params"}, {"comment": null, "prompt": "Print out the data at start of run (1)", "name": "printdata", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"1\\n\" )[ value ]", "perl": "($value) ? \"1\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "params"}]}, {"comment": null, "precond": null, "prompt": "Other options", "name": "other_options", "children": [{"comment": null, "prompt": "Outgroup species (O)", "name": "outgroup", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"O\\n\"+ str( value ) +\"\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"O\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "params"}, {"comment": null, "prompt": "Trees to be treated as rooted (R)", "name": "rooted", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"R\\n\" )[ value ]", "perl": "($value) ? \"R\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "params"}]}, {"comment": null, "prompt": null, "name": "confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "params"}, {"comment": null, "prompt": null, "name": "terminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"T\\n\"", "perl": "\"T\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "params"}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": "Eric Deveaud", "command": {"path": null, "value": "forest2consense.py"}, "documentation_links": [], "type": "program", "name": "forest2consense"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388caba3"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:composition"}, {"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Generate residue/base frequency table or plot", "title": "freak", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_plot and e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_plot and e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_plot and e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_plot and e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_plot and e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "FreakReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "seqall option", "name": "e_seqall", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -seqall=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Residue letters", "name": "e_letters", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -letters=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Stepping value", "name": "e_step", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -step=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Averaging window", "name": "e_window", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -window=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Produce graphic", "name": "e_plot", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -plot\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "not e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "freak"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/freak.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "freak"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388caba4"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:motifs"}], "description": "Search for patterns in nucleotide sequences", "title": "fuzznuc", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "The standard IUPAC one-letter codes for the nucleotides are used. \n  The symbol 'n' is used for a position where any nucleotide is  accepted. \n  Ambiguities are indicated by listing the acceptable nucleotides  for a given position, between square parentheses '[ ]'. For  example: [ACG] stands for A or C or G. \n  Ambiguities are also indicated by listing between a pair of curly  brackets '{ }' the nucleotides that are not accepted at a given  position. For example: {AG} stands for any nucleotides except A  and G. \n  Each element in a pattern is separated from its neighbor by a '-'.  (Optional in fuzznuc). \n  Repetition of an element of the pattern can be indicated by  following that element with a numerical value or a numerical range  between parenthesis. Examples: N(3) corresponds to N-N-N, N(2,4)  corresponds to N-N or N-N-N or N-N-N-N. \n  When a pattern is restricted to either the 5' or 3' end of a  sequence, that pattern either starts with a '<' symbol or  respectively ends with a '>' symbol. \n  A period ends the pattern. (Optional in fuzznuc). \n  For example, [CG](5)TG{A}N(1,5)C", "prompt": "Search pattern", "name": "e_pattern", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -pattern=@\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Pattern", "superclass": "AbstractText"}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Search pattern", "name": "e_pmismatch", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -pmismatch=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Search complementary strand", "name": "e_complement", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -complement\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "fuzznuc"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/fuzznuc.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "fuzznuc"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388caba5"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:motifs"}], "description": "Search for patterns in protein sequences", "title": "fuzzpro", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "The standard IUPAC one-letter codes for the amino acids are used. \n  The symbol 'x' is used for a position where any amino acid is  accepted. \n  Ambiguities are indicated by listing the acceptable amino acids  for a given position, between square parentheses '[ ]'. For  example: [ALT] stands for Ala or Leu or Thr. \n  Ambiguities are also indicated by listing between a pair of curly  brackets '{ }' the amino acids that are not accepted at a given  position. For example: {AM} stands for any amino acid except Ala  and Met. \n  Each element in a pattern is separated from its neighbor by a '-'.  (Optional in fuzzpro). \n  Repetition of an element of the pattern can be indicated by  following that element with a numerical value or a numerical range  between parenthesis. Examples: x(3) corresponds to x-x-x, x(2,4)  corresponds to x-x or x-x-x or x-x-x-x. \n  When a pattern is restricted to either the N- or C-terminal of a  sequence, that pattern either starts with a '<' symbol or  respectively ends with a '>' symbol. \n  A period ends the pattern. (Optional in fuzzpro). \n  For example, [DE](2)HS{P}X(2)PX(2,4)C", "prompt": "Search pattern", "name": "e_pattern", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -pattern=@\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Pattern", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Search pattern", "name": "e_pmismatch", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -pmismatch=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "fuzzpro"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/fuzzpro.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "fuzzpro"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388caba6"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:motifs"}, {"type": "mobyle1", "classification": "sequence:protein:motifs"}], "description": "Search for patterns in protein sequences (translated)", "title": "fuzztran", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "The standard IUPAC one-letter codes for the amino acids are used. \n  The symbol 'x' is used for a position where any amino acid is  accepted. \n  Ambiguities are indicated by listing the acceptable amino acids  for a given position, between square parentheses '[ ]'. For  example: [ALT] stands for Ala or Leu or Thr. \n  Ambiguities are also indicated by listing between a pair of curly  brackets '{ }' the amino acids that are not accepted at a gven  position. For example: {AM} stands for any amino acid except Ala  and Met. \n  Each element in a pattern is separated from its neighbor by a '-'.  (Optional in fuzztran) \n  Repetition of an element of the pattern can be indicated by  following that element with a numerical value or a numerical range  between parenthesis. Examples: x(3) corresponds to x-x-x, x(2,4)  corresponds to x-x or x-x-x or x-x-x-x. \n  When a pattern is restricted to either the N- or C-terminal of a  sequence, that pattern either starts with a '<' symbol or  respectively ends with a '>' symbol. \n  A period ends the pattern. (Optional in fuzztran). \n  For example, [DE](2)HS{P}X(2)PX(2,4)C", "prompt": "Search pattern", "name": "e_pattern", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -pattern=@\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Pattern", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Search pattern", "name": "e_pmismatch", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -pmismatch=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Translation frames", "name": "e_frame", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -frame=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Genetic codes", "name": "e_table", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -table=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "fuzztran"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/fuzztran.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "fuzztran"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388caba7"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Predicts protein secondary structure using GOR method", "title": "garnier", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "In their paper, GOR mention that if you know something about the secondary structure content of the protein you are  analyzing, you can do better in prediction. 'idc' is an index into  a set of arrays, dharr[] and dsarr[], which provide 'decision  constants' (dch, dcs), which are offsets that are applied to the  weights for the helix and sheet (extend) terms. So, idc=0 says  don't use the decision constant offsets, and idc=1 to 6 indicates  that various combinations of dch,dcs offsets should be used.", "prompt": "Index decision constants parameter (value from 0 to 6)", "name": "e_idc", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -idc=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "garnier"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/garnier.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "garnier"}, {"comment": null, "homepage_links": ["http://molevol.cmima.csic.es/castresana/Gblocks.html"], "_id": {"$oid": "51434da393546d52388caba8"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple:information"}], "description": "Selection of conserved blocks from multiple sequence alignment", "title": "Gblocks", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Results and Params (HTML format)", "name": "Res_Param_HTML", "simple": null, "filenames": {"python": "\"*-gb.htm\"", "perl": "\"*-gb.htm\""}, "precond": {"python": "Res_Param != 't' and Res_Param != 's' and Res_Param != 'n'", "perl": "$Res_Param ne 't' and $Res_Param ne 's' and $Res_Param ne 'n'"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Results and Params (Text format)", "name": "Res_Param_t", "simple": null, "filenames": {"python": "\"*-gb.txt\""}, "precond": {"python": "Res_Param == 't'", "perl": "$Res_Param eq 't'"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Results and Params (ShortText format)", "name": "Res_Param_st", "simple": null, "filenames": {"python": "\"*-gb.txts\"", "perl": "\"*-gb.txts\""}, "precond": {"python": "Res_Param == 's'", "perl": "$Res_Param eq 's'"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment file with selected blocks", "name": "alignment_result", "simple": null, "filenames": {"python": "\"*-gb\"", "perl": "\"*-gb\""}, "precond": {"python": "sb", "perl": "$sb"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "NonConserved Blocks File", "name": "nc_file", "simple": null, "filenames": {"python": "\"*-gbComp\"", "perl": "\"*-gbComp\""}, "precond": {"python": "nc", "perl": "$nc"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Ungapped Alignment File", "name": "ua_file", "simple": null, "filenames": {"python": "\"*--\"", "perl": "\"*--\""}, "precond": {"python": "ua", "perl": "$ua"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Mask File With The Selected Blocks", "name": "mask_file", "simple": null, "filenames": {"python": "\"*-gbMask\"", "perl": "\"*-gbMask\""}, "precond": {"python": "mask", "perl": "$mask"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Postscript File", "name": "ps_file", "simple": null, "filenames": {"python": "\"*-gbPS\"", "perl": "\"*-gbPS\""}, "precond": {"python": "ps", "perl": "$ps"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input", "name": "input", "children": [{"comment": "FASTA-formatted alignments are accepted by gblocks. \n\t\t\t      \tThere is no limit for the number of sequences or positions in the alignment\n\t\t\t      \tas long as there is enough memory available for the program.", "prompt": "Alignment", "name": "infile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" \"+str(value)+\" -g\"", "perl": "\" $value -g\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein", "DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Automatic: For FASTA-formatted alignments, gblocks assigned the type Protein automatically.In other cases, precise.", "prompt": "Type of sequence (-t)", "name": "input_type", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -t=\"+str(value))[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -t=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options for selection", "name": "sel_options", "children": [{"comment": "Any integer BIGGER than half the number of sequences \n            \t\t\tand SMALLER OR EQUAL than the total number of sequences. If you put an integer not in this interval, gblocks will run the program with default value, check the warning in output.By default, = 50% of the number of sequences +1.", "prompt": "Minimum Number Of Sequences For A Conserved Position(-b1)", "name": "MNOSFACP", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -b1=\"+str(value))[value is not None]", "perl": "(defined $value) ? \" -b1=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Any integer EQUAL OR SMALLER than Minimum Number Of Sequences For A Conserved Position. If you put an integer not in this interval, gblocks will run the program with default value, check the warning in output.By default, = 85% of the number of sequences.", "prompt": "Minimum Number Of Sequences For A Flank Position(-b2)", "name": "MNOSFOFP", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -b2=\"+str(value))[value is not None]", "perl": "(defined $value) ? \" -b2=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Any integer equal or bigger than 2 (= 10 by default).", "prompt": "Minimum Length Of A Block(-b4)", "name": "MLOAB", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -b4=\"+str(value))[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -b4=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "None(default value): No gap positions are allowed in the final alignment.With Half: Positions with a gap in less than 50% of the sequences selected in the final alignment (if they're in an appropriate block).All: Positions with gaps are not treated differently from others positions.", "prompt": "Allowed Gap Positions (-b5)", "name": "gap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -b5=\"+str(value))[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -b5=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "All segment with contiguous non-conserved positions bigger than this value is rejected (=8 by default).", "prompt": "Maximum Number Of Contiguous Nonconserved Positions(-b3)", "name": "MNOCNP", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -b3=\"+str(value))[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -b3=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Saving options", "name": "saving_options", "children": [{"comment": "Saving or Not the alignment file with the selected blocks.", "prompt": "Selected Blocks (-s)", "name": "sb", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\" -s=n\" , \"\")[value]", "perl": "($value) ? \"\" , \" -s=n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Saving an HTML file (Yes), saving a text file (Text), saving a short text file (Short Text) or not saving any of them (No).With the first two options the original file is shown with the selected blocks underlined and, in the HTML file, with colored conserved positions.The parameters used and the flank positions of the selected blocks are written in these files.", "prompt": "Results And Parameters File(-p)", "name": "Res_Param", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -p=\"+str(value))[value is not None and value!=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -p=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Number of characters per line in the alignment shown in the Results And Parameters File.Any integer bigger than 50 is accepted (60 by default).", "prompt": "Characters Per Line In Results And Parameters File (>50)(-v)", "name": "PerLine", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -v=\"+str(value))[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -v=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Saving or Not a the alignment file with the blocks NOT selected (i.e., the complementary of the selected blocks).", "prompt": "NonConserved Blocks (-n)", "name": "nc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -n=y\")[value]", "perl": "($value) ? \"-n=y\" , \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Saving or Not the alignment file where only gap positions (i.e. positions with at least one gap) have been removed.", "prompt": "Ungapped Alignment (-u)", "name": "ua", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -u=y\")[value]", "perl": "($value) ? \"-u=y\" , \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Saving or Not a file that can be read by the program SeqPup.In this file, conserved positions as defined by Gblocks are shadowed and selected blocks underlined", "prompt": "Mask File With The Selected Blocks (-k)", "name": "mask", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -k=y\")[value]", "perl": "($value) ? \"-k=y\" , \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Saving or Not a Postscript file that shows schematically the selected blocks. You need a postscript viewer or editor to view this file.", "prompt": "Postscript File With The Selected Blocks (-d)", "name": "ps", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -d=y\")[value]", "perl": "($value) ? \"-d=y\" , \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "Version 0.91b", "references": [{"url": null, "doi": null, "label": "Castresana, J. (2000). Selection of conserved blocks from multiple alignments for their use in phylogenetic analysis. Molecular Biology and Evolution 17, 540-552"}, {"url": null, "doi": null, "label": "Talavera, G., and Castresana, J. (2007). Improvement of phylogenies after removing divergent and ambiguously aligned blocks from protein sequence alignments. Systematic Biology 56, 564-577"}], "source_links": ["http://molevol.cmima.csic.es/castresana/Gblocks.html"], "env": [], "authors": "Jose Castresana", "command": {"path": null, "value": "gblocks"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/gblocks/"], "type": "program", "name": "gblocks"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388caba9"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:cpg_islands"}], "description": "Calculate fractional GC content of nucleic acid sequences", "title": "geecee", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GeeceeReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "geecee"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/geecee.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "geecee"}, {"comment": null, "homepage_links": ["http://genes.mit.edu/GENSCANinfo.html"], "_id": {"$oid": "51434da393546d52388cabaa"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:gene_finding"}], "description": "Gene Identification", "title": "GENSCAN", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output parameters", "name": "output", "children": [{"comment": null, "prompt": "PostScript output", "name": "psFile", "simple": null, "filenames": {"python": "str( psfname )", "perl": "$psfname"}, "precond": {"python": "ps", "perl": "$ps"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "DNA Sequence File", "name": "seq", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Currently available parameter files are:HumanIso.smat for human/vertebrate sequences (also Drosophila)Arabidopsis.smat for Arabidopsis thaliana sequencesMaize.smat for Zea mays sequences", "prompt": "Organism", "name": "organism", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Output parameters", "name": "output", "children": [{"comment": "Add some extra explanatory information to the text output. This information may be helpful the first few times you run the program but will soon become tiresome (that's why its optional).", "prompt": "Verbose output (-v)", "name": "verbose", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -v\")[ value ]", "perl": "($value) ? \" -v\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Print predicted coding sequences (-cds)", "name": "cds", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -cds\")[ value ]", "perl": "($value) ? \" -cds\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The default output of the program is the optimal 'parse' of the sequence, i.e. the highest probability gene structure(s) which is present: the exons in this optimal parse are referred to as 'optimal exons' and are always printed out by GENSCAN.Suboptimal exons, on the other hand, are defined as potential exons which have probability above a certian threshold but which are not contained in the optimal parse of the sequence.Suboptimal exons have a variety of potential uses.First, suboptimal exons sometimes correspond to real exons which were missed for whatever reason by the optimal parse of the sequence.Second, regions of a prediction which contain multiple overlapping and/or incompatible optimal and suboptimal exons may in some cases indicate alternatively spliced regions of a gene (Burge & Karlin, in preparation).", "prompt": "Identify suboptimal exons (-subopt)?", "name": "subopt", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -subopt \" + str( cutoff ))[ value and cutoff is not None]", "perl": "($value and defined $cutoff ) ? \" -subopt $cutoff\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The cutoff is the probability cutoff used to determine which potential exons qualify as suboptimal exons.This argument should be a number between 0.01 and 0.99.For most applications, a cutoff value of about 0.10 is recommended.Setting the value much lower than 0.10 will often lead to an explosion in the number of suboptimal exons, most of which will probably not be useful.On the other hand, if the value is set much higher than 0.10, then potentially interesting suboptimal exons may be missed.", "prompt": "Cutoff value for suboptimal exons", "name": "cutoff", "ctrl": {"python": "(subopt and value is not None) or ( not subopt)", "perl": "($subopt  and defined $value) or ( not $subopt)"}, "simple": null, "argpos": "3", "format": null, "command": false, "precond": {"python": "subopt", "perl": "$subopt"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Create Postscript output (-ps)", "name": "ps", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , (\" -ps \" + str( psfname ), \" -ps \" + str( psfname ) + \" \" + str( scale ))[scale is not None] )[ value ]", "perl": "($value) ? (defined $scale) ? \" -ps $psfname $scale\" : \" -ps $psfname\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Scale for PostScript output", "name": "scale", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "ps", "perl": "$ps"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Filename for PostScript output", "name": "psfname", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "ps", "perl": "$ps"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.0", "references": [{"url": null, "doi": null, "label": "Burge, C., Karlin, S. (1997) Prediction of complete gene structures in human genomic DNA. J. Mol. Biol. 268, 78-94."}, {"url": null, "doi": null, "label": "Burge, C., Karlin, S. (1997) Gene structure, exon prediction, and alternative splicing. (in preparation)."}, {"url": null, "doi": null, "label": "Burge, C. (1997) Identification of genes in human genomic DNA. PhD thesis, Stanford University, Stanford, CA."}, {"url": null, "doi": null, "label": "Burset, M., Guigo, R. (1996) Evaluation of gene structure prediction programs. Genomics 34, 353-367."}], "source_links": [], "env": [], "authors": "C. Burge", "command": {"path": null, "value": "genscan"}, "documentation_links": [], "type": "program", "name": "genscan"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabab"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:gene_finding"}], "description": "Finds and extracts open reading frames (ORFs)", "title": "getorf", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Genetic codes", "name": "e_table", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -table=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Minimum nucleotide size of orf to report", "name": "e_minsize", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -minsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum nucleotide size of orf to report", "name": "e_maxsize", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -maxsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is a small menu of possible output options. The first four options are to select either the protein translation or the  original nucleic acid sequence of the open reading frame. There  are two possible definitions of an open reading frame: it can  either be a region that is free of STOP codons or a region that  begins with a START codon and ends with a STOP codon. The last  three options are probably only of interest to people who wish to  investigate the statistical properties of the regions around  potential START or STOP codons. The last option assumes that ORF  lengths are calculated between two STOP codons.", "prompt": "Type of sequence to output", "name": "e_find", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -find=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "START codons at the beginning of protein products will usually code for Methionine, despite what the codon will code for  when it is internal to a protein. This qualifier sets all such  START codons to code for Methionine by default.", "prompt": "Change initial start codons to methionine", "name": "e_methionine", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\" -nomethionine\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Is the sequence circular", "name": "e_circular", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -circular\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to find ORFs in the reverse complement of the sequence.", "prompt": "Find orfs in the reverse sequence", "name": "e_reverse", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\" -noreverse\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If you have chosen one of the options of the type of sequence to find that gives the flanking sequence around a STOP or  START codon, this allows you to set the number of nucleotides  either side of that codon to output. If the region of flanking  nucleotides crosses the start or end of the sequence, no output is  given for this codon.", "prompt": "Number of flanking nucleotides to report", "name": "e_flanking", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -flanking=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "getorf"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/getorf.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "getorf"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabac"}, "classifications": [{"type": "mobyle1", "classification": "display:feature_table"}], "description": "Produces PostScript graphical output from GFF-files", "title": "gff2ps", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Postscript output file", "name": "outfile", "simple": null, "filenames": {"python": "\"gff2ps.ps\"", "perl": "\"gff2ps.ps\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Custom output file", "name": "custom_file", "simple": null, "filenames": {"python": "\"gff2psrc\"", "perl": "\"gff2psrc\""}, "precond": {"python": "default_custom_file", "perl": "$default_custom_file"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "GFF file", "name": "gff_file", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Feature", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["GFF"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Output Options", "name": "output_options", "children": [{"comment": null, "prompt": "Modify page size (-s)", "name": "page_size", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -s \"+str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -s $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switches page orientation to Portrait (default is Landscape) (-p)", "name": "orientation", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -p\" )[ value ]", "perl": "($value)? \" -p\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sets how many pages are needed to split your output (-P)", "name": "split", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" +str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Zoom first nucleotide (default is sequence origin) (-S)", "name": "zoom_first", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -S \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -S $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Zoom last nucleotide (default is sequence length) (-E)", "name": "zoom_last", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -E \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -E $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sets blocks per page (-B)", "name": "blocks", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -B \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -B $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sets nucleotides per line (default is the largest sequence position from input gff-files) (-N)", "name": "nuc_per_line", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -N \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -N $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Blocks from left to right and from top to bottom (default is top to bottom first) (-b)", "name": "blocks_from_left_to_right", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -b\" )[ value ]", "perl": "($value)? \" -b\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switch off Header (Title area) (-L)", "name": "no_headers", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -L\" )[ value ]", "perl": "($value)? \" -L\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Defining title (default is input gff filename) (-T)", "name": "set_title", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -T \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -T $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Does not show page numbering (-l)", "name": "no_page_nb", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -l\" )[ value ]", "perl": "($value)? \" -l\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Does not show date (-O)", "name": "no_date", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -O\" )[ value ]", "perl": "($value)? \" -O\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Does not show time (-o)", "name": "no_time", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -o\" )[ value ]", "perl": "($value)? \" -o\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switch off CopyRight line on plot (-a)", "name": "no_copyright", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -a\" )[ value ]", "perl": "($value)? \" -a\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Color Options", "name": "color_options", "children": [{"comment": null, "prompt": "Sets color for FOREGROUND (-G)", "name": "fg_color_name", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -G \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -G $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sets color for BACKGROUND (-g)", "name": "bg_color_name", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -g \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -g $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sets color for frame 0 (-0)", "name": "f0_color_name", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -0 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -0 $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sets color for frame 1 (-1)", "name": "f1_color_name", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -1 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -1 $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sets color for frame 2 (-2)", "name": "f2_color_name", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -2 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -2 $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sets color for frame . (-3)", "name": "f_color_name", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -3 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -3 $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Tickmark Options", "name": "tickmark_options", "children": [{"comment": null, "prompt": "Number of major tickmarks per line (-M)", "name": "major_tickmarks", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -M \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -M $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default is nucleotide length for lines divided by major tickmarks number (see option -T).", "prompt": "Major tickmarks scale in nucleotides (-K)", "name": "major_tickmarks_scale", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -K \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -K $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of minor tickmarks between major tickmarks (-m)", "name": "minor_tickmarks", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -m \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -m $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default is major tickmarks size divided by minor tickmarks number (see option -t).", "prompt": "Minor tickmarks scale in nucleotides (-k)", "name": "minor_tickmarks_scale", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -k \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -k $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Display elements Options", "name": "element_options", "children": [{"comment": null, "prompt": "Switch off displaying forward-strand(Watson) elements (-w)", "name": "no_forward_strand", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -w\" )[ value ]", "perl": "($value)? \" -w\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switch off displaying reverse-strand(Crick) elements (-c)", "name": "no_reverse_strand", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -c\" )[ value ]", "perl": "($value)? \" -c\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switch off displaying strand-independent elements (-i)", "name": "no_strand_independent", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -i\" )[ value ]", "perl": "($value)? \" -i\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switch off labels for element positions (-n)", "name": "no_label", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -n\" )[ value ]", "perl": "($value)? \" -n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Other Options", "name": "other_options", "children": [{"comment": null, "prompt": "Create a new default customfile (-D)", "name": "default_custom_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -D gff2psrc\" )[ value ]", "perl": "($value)? \" -D gff2psrc\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Your custom rc file (-C)", "name": "user_custom_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -C \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -C $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GffCustomRc", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": "Josep Francesc ABRIL FERRANDO, Roderic GUIGO SERRA", "command": {"path": null, "value": "gff2ps"}, "documentation_links": ["http://genome.imim.es/software/gfftools/GFF2PS.html"], "type": "program", "name": "gff2ps"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabad"}, "classifications": [{"type": "mobyle1", "classification": "database:search:sequence"}], "description": "Fetch a database entry", "title": "GOLDEN", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Sequence", "name": "nucleic_sequence_out", "simple": null, "filenames": {"python": "\"golden.out\"", "perl": "\"golden.out\""}, "precond": {"python": "db in ( 'embl' , 'genbank' , 'imgt' ,'rdpii' )", "perl": "$db =~ /^(embl|genbank|imgt|rdpii)$/"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [{"#tag": "test", "#children": ["EMBL"], "@eq": "embl", "@param": "db"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Sequence", "name": "protein_sequence_out", "simple": null, "filenames": {"python": "\"golden.out\"", "perl": "\"golden.out\""}, "precond": {"python": "db in ( 'genpept' , 'uniprot' )", "perl": "$db =~ /^(genpept|uniprot)$/"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [{"#tag": "test", "#children": ["GENBANK"], "@eq": "genpept", "@param": "db"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Sequence", "name": "refseq_out", "simple": null, "filenames": {"python": "\"golden.out\"", "perl": "\"golden.out\""}, "precond": {"python": "db == 'refseq'", "perl": "$db eq 'refseq'"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA", "Protein"], "biomoby_datatypes": [], "formats": ["GENBANK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Motif", "name": "motif_out", "simple": null, "filenames": {"python": "\"golden.out\"", "perl": "\"golden.out\""}, "precond": {"python": "db == 'prosite'", "perl": "$db eq 'prosite'"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Motif", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["PROSITE"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Enzyme", "name": "enzyme_out", "simple": null, "filenames": {"python": "\"golden.out\"", "perl": "\"golden.out\""}, "precond": {"python": "db == 'enzyme'", "perl": "$db eq 'enzyme'"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Enzyme", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["ENZYME"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Database", "name": "db", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \" + db + \":\"", "perl": "\" $db:\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Query (Entry name or Accession number)", "name": "query", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "str(value)", "perl": "\"$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Search with Accession number only (-a)", "name": "ac", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -a\" )[ value ]", "perl": "($value) ? \" -a\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Search with entry name only (-i)", "name": "Id", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -i\" )[ value ]", "perl": "($value) ? \" -i\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.0", "references": [], "source_links": ["ftp://ftp.pasteur.fr/pub/gensoft/projects/golden/"], "env": [], "authors": "N. Joly", "command": {"path": null, "value": "golden"}, "documentation_links": [], "type": "program", "name": "golden"}, {"comment": "This application predicts the minimum generation time for a bacterial or archaeal organism based on  its codon usage bias intensity (CUB). \n    \tThe CUB index is calculated given two input sets of sequences: 1) highly expressed genes 2) other genes. \n    \tThe application runs 1000 bootstraps and outputs the average and the standard deviation of the predictions.", "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabae"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:prediction"}, {"type": "mobyle1", "classification": "sequence:nucleic:codon_usage"}], "description": "Sequence-based Prediction of Minimum Generation Times for Bacteria and Archaea", "title": "growthpred", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Prediction results", "name": "res", "simple": null, "filenames": {"python": "\"*.results\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Prediction error(s)", "name": "err", "simple": null, "filenames": {"python": "\"*.errors\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Codon usage bias indexes for each gene", "name": "cubs", "simple": null, "filenames": {"python": "\"*.cub\""}, "precond": {"python": "ifiles"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Ribosomal protein genes retrieved by blast", "name": "ribs", "simple": null, "filenames": {"python": "\"*.ribs\""}, "precond": {"python": "rfiles"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "Use a set of example files (E. coli K12) to run the program.The expected results depending on the choosen option and the example files are shown in the program help pages (end of the form).", "prompt": "Run with example data (-e)", "name": "example", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "( \"\" , \" -e \" )[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Input section", "name": "input", "children": [{"comment": "Set of genes under purifying selection for codon usage.", "prompt": "Enter sequences of highly expressed genes (-f)", "name": "hsequence", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -f \" + str( value ) + \" \" )[value is not None]"}, "command": false, "precond": {"python": "not example and not b"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Retrieve ribosomal protein genes by blast (-b)", "name": "b", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -b\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set of control genes with near random codon usage.", "prompt": "Enter sequences of non-highly expressed genes/Complete genome (-g)", "name": "nhsequence", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -g \" + str( value ) + \" \" )[value is not None]"}, "command": false, "precond": {"python": "not example"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "You need to precise to the program if your sequences are metagenome or mixed organisms sequences.", "prompt": "Mixed organisms sequences", "name": "typeg", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -m\" )[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Remove from sequences", "name": "codon_remove", "children": [{"comment": null, "prompt": "First codon (-s)", "name": "fc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" -s \" , \"\" )[value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Last codon (-S)", "name": "lc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" -S \" , \"\" )[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "options", "children": [{"comment": null, "prompt": "Choose genetic code (-c)", "name": "geneticcode", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -c \" + str( value )"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Recover file with ribosomal protein genes retrieved by blast or given as input (-r)", "name": "rfiles", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -r\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Recover file with codon usage bias indexes for each gene (-i)", "name": "ifiles", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -i\")[value ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Estimate optimal growth temperature (-t)", "name": "autotemp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -t\")[value ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Enter optimal growth temperature (Celsius) (-T)", "name": "temp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -T \" + str( value ) )[value is not None and value != vdef]"}, "command": false, "precond": {"python": "not autotemp", "perl": "not $autotemp"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Outfile name (-o)", "name": "outfile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -o \" + str(value))[ value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.07", "references": [{"url": null, "doi": null, "label": "<html:a xmlns:html=\"http://www.w3.org/1999/xhtml\" href=\"ftp://ftp.pasteur.fr/pub/gensoft/projects/growthpred/\" target=\"ftp\">The program sources and Example files are downloadable here.</html:a>"}, {"url": null, "doi": null, "label": "Vieira-Silva S,  Rocha EPC, 2010 The Systemic Imprint of Growth and Its Uses in Ecological (Meta)Genomics. PLoS Genet 6(1): e1000808. doi:10.1371/journal.pgen.1000808"}], "source_links": ["ftp://ftp.pasteur.fr/pub/GenSoft/projects/growthpred/"], "env": [], "authors": "S. Vieira-Silva, E. Rocha", "command": {"path": null, "value": "growthpred"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/growthpred/growthpred.pdf"], "type": "program", "name": "growthpred"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabaf"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:pattern"}, {"type": "mobyle1", "classification": "sequence:nucleic:clusters"}], "description": "clusters of binding sites", "title": "gruppi", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Gruppi output", "name": "output", "simple": null, "filenames": {"python": "\"gruppi.out\"", "perl": "\"gruppi.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "GruppiReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "gruppi", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"gruppi", "perl": "\"gruppi"}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequences", "name": "sequences", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" \" + str(sequences)", "perl": "\" $sequences\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["NBRF"], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.0", "references": [], "source_links": ["ftp://ftp.pasteur.fr/pub/GenSoft/unix/nucleic_acid/"], "env": [], "authors": "Marco Pontoglio", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "gruppi"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabb0"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:2D_structure"}, {"type": "mobyle1", "classification": "sequence:protein:motifs"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Identify nucleic acid-binding motifs in protein sequences", "title": "helixturnhelix", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Mean value (value from 1. to 10000.)", "name": "e_mean", "ctrl": {"python": "value >= 1."}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -mean=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Standard deviation value (value from 1. to 10000.)", "name": "e_sd", "ctrl": {"python": "value >= 1."}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -sd=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Minimum sd (value from 0. to 100.)", "name": "e_minsd", "ctrl": {"python": "value >= 0."}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -minsd=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use the old (1987) weight data", "name": "e_eightyseven", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -eightyseven\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "helixturnhelix"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/helixturnhelix.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "helixturnhelix"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabb1"}, "classifications": [{"type": "mobyle1", "classification": "hmm:alignment:multiple"}, {"type": "mobyle1", "classification": "alignment:multiple:hmm"}], "description": "Align sequences to a profile HMM", "title": "HMMALIGN", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output Options", "name": "output_options", "children": [{"comment": null, "prompt": "Alignment file", "name": "outputfile", "simple": null, "filenames": {"python": "str(outfile_name)", "perl": "\"$outfile_name\""}, "precond": {"python": "outfile_name is not None", "perl": "defined($outfile_name)"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "outputformat"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment file", "name": "outfile", "simple": null, "filenames": {"python": "\"hmmalign.out\"", "perl": "\"hmmalign.out\""}, "precond": {"python": "outfile_name is None", "perl": "not defined($outfile_name)"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "outputformat"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "hmmcmd", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"hmmalign\"", "perl": "\"hmmalign\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Input file", "name": "infile", "children": [{"comment": "Input sequence file may  be in  any unaligned  or  aligned file format. If  it is \n            in  a multiple alignment format  (e.g. Stockholm, MSF,  ClustalW),  the  existing  alignment is  \n            ignored  (i.e.,  the\n\t      sequences are read as if they were unaligned).", "precond": null, "prompt": "Input sequences file", "name": "file", "children": [{"comment": null, "prompt": "Sequences File", "name": "seqfile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" \" + str(seqfile)", "perl": "\" $seqfile\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA", "EMBL", "Genbank", "Uniprot"], "edam_types": [], "card": "2,n"}, "paramfile": null}]}, {"comment": null, "prompt": "Profile HMM file", "name": "hmmfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "HmmProfile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Expert Options", "name": "expert_options", "children": [{"comment": "The alphabet type (amino, DNA, or RNA) is autodetected by default, by looking at the composition of the\n            msafile. Autodetection is normally quite reliable, but occasionally alphabet type may be ambiguous and\n            autodetection can fail (for instance, on tiny toy alignments of just a few residues). To avoid this, or to\n            increase robustness in automated analysis pipelines, you may specify the alphabet type of msafile with\n            these options.Protein: Specify that all sequences in seqfile are proteins. By default, alphabet type is\n                    autodetected from looking at the residue composition.DNA: Specify that all sequences in seqfile are DNAs.RNA: Specify that all sequences in seqfile are RNAs.", "prompt": "Assert sequences and hmm files are both in same type", "name": "biotype", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Common Options", "name": "common_options", "children": [{"comment": "Include columns in the output alignment for every match (consensus) state in\n            the hmmfile, even if it means having all-gap columns. This is useful in analysis\n            pipelines that need to be able to maintain a predetermined profile HMM architecture\n            (with an unchanging number of consensus columns) through an hmmalign\n            step.", "prompt": "Include all consensus columns in ali, even if all gaps", "name": "allcol", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --allcol \" )[ value  ]", "perl": "($value) ? \" --allcol : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Merge the existing alignment in file into the result, where the file is exactly the\n            same alignment that was used to build the model in hmmfile. This is done using\n            a 'map' of alignment columns to consensus profile positions that is stored in the\n            hmmfile. The multiple alignment in the file will be exactly reproduced in its consensus\n            columns (as defined by the profile), but the displayed alignment in insert columns\n            may be altered, because insertions relative to a profile are considered by convention\n            to be unaligned data.", "prompt": "Include alignment file", "name": "mapali", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --mapali \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --mapali $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["STOCKHOLM"], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output Options", "name": "output_options", "children": [{"comment": "Trim nonhomologous residues (assigned to N and C states in the optimal alignments)\n            from the resulting multiple alignment output.", "prompt": "Trim terminal tails of nonaligned residues from alignment", "name": "trim", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\", \" --trim\" )[ value ]", "perl": "($value) ? \" --trim\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Outfile name (-o)", "name": "outfile_name", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -o \" + str(value))[value is not None]", "perl": "(defined $value)? \" -o $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify that the msafile is in the selected format. Currently the accepted multiple \n            alignment sequence file formats only include Stockholm and SELEX. Default is to autodetect\n            the format of the file.", "prompt": "Output format", "name": "outputformat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --outformat \" + str( value) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" --outformat $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "hmmalign"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabb2"}, "classifications": [{"type": "mobyle1", "classification": "hmm:building"}], "description": "Build a profile HMM from an input multiple alignment", "title": "HMMBUILD", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Hmm profile", "name": "hmmfile_res", "simple": null, "filenames": {"python": "\"*.hmm\"", "perl": "*.hmm"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "HmmProfile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["HMMER3"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment file", "name": "re_save_file", "simple": null, "filenames": {"python": "re_save", "perl": "$re_save"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["STOCKHOLM"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Aligned sequences File", "name": "alignfile", "ctrl": null, "simple": null, "argpos": "30", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["STOCKHOLM"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The alphabet type (amino, DNA, or RNA) is autodetected by default, by looking at the composition of the\n            msafile. Autodetection is normally quite reliable, but occasionally alphabet type may be ambiguous and\n            autodetection can fail (for instance, on tiny toy alignments of just a few residues). To avoid this, or to\n            increase robustness in automated analysis pipelines, you may specify the alphabet type of msafile with\n            these options.Protein: Specify that all sequences in seqfile are proteins. By default, alphabet type is\n                    autodetected from looking at the residue composition.DNA: Specify that all sequences in seqfile are DNAs.RNA: Specify that all sequences in seqfile are RNAs.", "prompt": "Forcing an alphabet in input alignment", "name": "alphabet", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "hmm_textfile", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "\" \" + str(alignfile) + \".hmm\"", "perl": "\" $alignfile.hmm\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": "Name the new profile. The default is to use the name of the alignment (if one\n          is present in the msafile, or, failing that, the name of the hmmfile. If msafile contains\n          more than one alignment, -n doesn't work, and every alignment must have a name\n          annotated in the msafile (as in Stockholm #=GF ID annotation).", "prompt": "Name the HMM (-n)", "name": "hmmname", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -n \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -n $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "After each model is constructed, resave annotated, possibly modified source alignments\n            to a file in Stockholm format. The alignments are annotated with a\n            reference annotation line indicating which columns were assigned as consensus,\n            and sequences are annotated with what relative sequence weights were assigned.\n            Some residues of the alignment may have been shifted to accommodate restrictions\n            of the Plan7 profile architecture, which disallows transitions between insert\n            and delete states..", "prompt": "Re_save annotated, possibly modified MSA to 'file', in Stockholm format. (-O)", "name": "re_save", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -O \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -O $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "These options control how consensus columns are defined in an alignment.", "precond": null, "prompt": "Alternative model construction strategies", "name": "AlternativeConstruction", "children": [{"comment": "Define consensus columns as those that have a fraction >= symfrac of residues\n            as opposed to gaps. (See the --symfrac option.) This is the default.", "prompt": "Quickly and heuristically determine the architecture of the model (fast)", "name": "fast", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" --fast\" )[ value ]", "perl": "($value) ? \" --fast\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enter a value >= 0 and <= 1. Define the residue fraction threshold necessary \n              to define a consensus column\n              when using the --fast option. The default is 0.5. The symbol fraction in each\n              column is calculated after taking relative sequence weighting into account, and ignoring\n              gap characters corresponding to ends of sequence fragments (as opposed\n              to internal insertions/deletions). \n              Setting this to 0.0 means that every alignment column will be assigned\n\t\t\t  as consensus, which may be useful in some cases. Setting it to 1.0\n\t          means that only columns that have no gap characters at all will be\n              assigned as consensus.", "prompt": "Sets sym fraction controlling for the --fast model construction algorithm, (symfrac)", "name": "symfrac", "ctrl": {"python": "0 <= value <= 1", "perl": "0 <= $value <= 1"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --symfrac \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --symfrac $value\" : \"\""}, "command": false, "precond": {"python": "fast", "perl": "$fast"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enter a value >= 0 and <= 1. We only want to count terminal gaps as deletions if the aligned sequence is known\n           to be full-length, not if it is a fragment (for instance, because only part of it was\n           sequenced). HMMER uses a simple rule to infer fragments: if the sequence length\n           L is less than a fraction x times the mean sequence length of all the sequences\n           in the alignment, then the sequence is handled as a fragment. The default is 0.5.", "prompt": "Tag sequence as a fragment, (fragthresh)", "name": "fragthresh", "ctrl": {"python": "0 <= value <= 1", "perl": "0 <= $value <= 1"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --fragthresh \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value  and $value != $vdef) ? \" --fragthresh $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced options", "name": "advanced", "children": [{"comment": "HMMER uses an ad hoc sequence weighting algorithm to downweight closely related sequences and upweight\n          distantly related ones. This has the effect of making models less biased by uneven phylogenetic\n          representation. For example, two identical sequences would typically each receive half the weight that one\n          sequence would. These options control which algorithm gets used.wnp: Use the Henikoff position-based sequence weighting scheme [Henikoff and Henikoff,\n          J. Mol. Biol. 243:574, 1994]. This is the default.wgsc: Use the Gerstein/Sonnhammer/Chothia weighting algorithm [Gerstein et al, J. Mol.\n          Biol. 235:1067, 1994].wblosum: Use the same clustering scheme that was used to weight data in calculating BLOSUM\n          subsitution matrices [Henikoff and Henikoff, Proc. Natl. Acad. Sci 89:10915,\n          1992]. Sequences are single-linkage clustered at an identity threshold (default\n          0.62; see --wid) and within each cluster of c sequences, each sequence gets relative\n          weight 1/c.wnone: No relative weights. All sequences are assigned uniform weight", "prompt": "Alternative relative sequence weighting strategies", "name": "relativeWeight", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , ' --'+ str(value) )[ value != vdef and value != 'infoWgiven' ]", "perl": "($value ne $vdef and $value ne 'infoWgiven') ? \" --$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Personal weights in file", "name": "wgiven", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \"--wgiven \" + str( value ))[value is not None]", "perl": "(defined $value) ? \" --wgiven $value\" : \"\""}, "command": false, "precond": {"python": "relativeWeight == 'infoWgiven'", "perl": "$relativeWeight eq 'infoWgiven'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "MSAFile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the identity threshold used by single-linkage clustering when using --wblosum.\n            Invalid with any other weighting scheme. Default is 0.62. Enter a value >= 0 and <= 1", "prompt": "Set identity cutoff for BLOSUM filtering algorithm option (wid)", "name": "wid", "ctrl": {"python": "0 <= value and value <= 1", "perl": "0 <= $value and $value <= 1"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --wid \" + str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" --wid $value\" : \"\""}, "command": false, "precond": {"python": "relativeWeight == 'wblosum' and not eset", "perl": "$wblosum eq 'wblosum' and not $eset"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "After relative weights are determined, they are normalized to sum to a total effective sequence number,\neff nseq. This number may be the actual number of sequences in the alignment, but it is almost always\nsmaller than that. The default entropy weighting method (--eent) reduces the effective sequence number\nto reduce the information content (relative entropy, or average expected score on true homologs) per\nconsensus position. The target relative entropy is controlled by a two-parameter function, where the two\nparameters are settable with --ere and --esigma.--eent: Adjust effective sequence number to achieve a specific relative entropy per position\n(see --ere). This is the default.--eclust: Set effective sequence number to the number of single-linkage clusters at a specific\nidentity threshold (see --eid). This option is not recommended; it's for experiments\nevaluating how much better --eent is.--enone: Turn off effective sequence number determination and just use the actual number\nof sequences. One reason you might want to do this is to try to maximize the\nrelative entropy/position of your model, which may be useful for short models", "prompt": "Alternate effective sequence weighting strategies", "name": "effectiveWeight", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" +str(value) )[ value != vdef and value != 'turnOff']", "perl": "($value ne $vdef and $value ne 'turnOff') ? \" $value\" : \"\""}, "command": false, "precond": {"python": "not eset", "perl": "not $eset"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Explicitly set the effective sequence number for all models to value", "prompt": "Set personal effective sequence weighting for all models to value (eset)", "name": "eset", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --eset \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --eset $value\" : \"\""}, "command": false, "precond": {"python": "effectiveWeight == 'turnOff'", "perl": "$effectiveWeight eq 'turnOff'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the minimum relative entropy/position target to value. Requires --eent. Default\n              depends on the sequence alphabet; for protein sequences, it is 0.59 bits/position.", "prompt": "For personal adjustment of effective sequence weighting: set minimum relative entropy/position to value (ere)", "name": "ere", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --ere \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --ere $value\" : \"\""}, "command": false, "precond": {"python": "effectiveWeight == \"--eent\"", "perl": "$effectiveWeight eq \"--eent\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the minimum relative entropy contributed by an entire model alignment, over\n            its whole length. This has the effect of making short models have higher relative\n            entropy per position than --ere alone would give. The default is 45.0 bits.", "prompt": "For personal adjustment of effective sequence weighting: set sigma parameter to value (esigma)", "name": "esigma", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --esigma \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value!=$vdef) ? \" --esigma $value\" : \"\""}, "command": false, "precond": {"python": "effectiveWeight == \"--eent\"", "perl": "$effectiveWeight eq \"--eent\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enter a value >= 0 and <= 1. Sets the fractional pairwise identity cutoff used \n           by single linkage clustering with the --eclust option. The default is 0.62.", "prompt": "For single linkage clustering: set fractional identity cutoff to value (eid)", "name": "eid", "ctrl": {"python": "0 <= value <= 1", "perl": "0 <= $value <= 1"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --eid \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value!=$vdef) ? \" --eid $value\" : \"\""}, "command": false, "precond": {"python": "effectiveWeight == \"--eclust\"  and not eset", "perl": "$effectiveWeight eq \"--eclust\"  and not $eset"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "The location parameters for the expected score distributions for MSV filter scores, \n        Viterbi filter scores, and Forward scores require three short random sequence simulations.", "precond": null, "prompt": "Control of E-value calibration", "name": "ECalibration", "children": [{"comment": "Enter a value > 0. Sets the sequence length in simulation that estimates the location parameter mu\nfor MSV filter E-values. Default is 200.", "prompt": "Lengt of sequences for MSV Gumbel mu fit (EmL)", "name": "EmL", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --EmL \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value!=$vdef) ? \" --EmL $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enter a value > 0. Sets the number of sequences in simulation that estimates the location parameter\nmu for MSV filter E-values. Default is 200.", "prompt": "Number of sequences for MSV Gumbel mu fit (EmN)", "name": "EmN", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --EmN \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value!=$vdef) ? \" --EmN $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enter a value > 0. Sets the sequence length in simulation that estimates the location parameter mu\nfor Viterbi filter E-values. Default is 200.", "prompt": "Lengt of sequences for Viterbi Gumbel mu fit (EvL)", "name": "EvL", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --EvL \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value!=$vdef) ? \" --EvL $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enter a value > 0. Sets the number of sequences in simulation that estimates the location parameter\nmu for Viterbi filter E-values. Default is 200.", "prompt": "Number of sequences for Viterbi Gumbel mu fit (EvN)", "name": "EvN", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --EvN \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value!=$vdef) ? \" --EvN $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enter a value > 0. Sets the sequence length in simulation that estimates the location parameter tau\nfor Forward E-values. Default is 100.", "prompt": "Lengt of sequences for Forward exp tail tau fit (EfL)", "name": "EfL", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --EfL \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value!=$vdef) ? \" --EfL $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enter a value > 0. Sets the number of sequences in simulation that estimates the location parameter\ntau for Forward E-values. Default is 200.", "prompt": "Number of sequences for Forward exp tail tau fit (EfN)", "name": "EfN", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --EfN \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value!=$vdef) ? \" --EfN $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enter a value > 0 and < 1. Sets the tail mass fraction to fit in the simulation that estimates the location parameter\ntau for Forward evalues. Default is 0.04.", "prompt": "Tail mass for Forward exponential tail tau fit (Eft)", "name": "Eft", "ctrl": {"python": "value > 0 and value < 1", "perl": "$value > 0 and $value < 1"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --Eft \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value!=$vdef) ? \" --Eft $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Other options", "name": "other", "children": [{"comment": "Seed the random number generator with the value, an integer >= 0. If the value is nonzero,\n            any stochastic simulations will be reproducible; the same command will give the\n            same results. If the number is 0, the random number generator is seeded arbitrarily, and\n            stochastic simulations will vary from run to run of the same command. The default\n            seed is 42.", "prompt": "Set random number seed  (seed)", "name": "seed", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --seed \" + str(value))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --seed $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use a Laplace +1 prior", "name": "laplace", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --laplace \" )[ value ]", "perl": "($value) ? \" --laplace\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "hmmbuild"}, "documentation_links": [], "type": "program", "name": "hmmbuild"}, {"comment": "hmmconvert reads an HMM file from oldhmmfile in any HMMER format, and writes it to a new file newhmmfile in a new format. oldhmmfile and newhmmfile must be different files; you can't reliably overwrite the old file. By default, the new HMM file is written in HMMER 2 ASCII format.", "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabb3"}, "classifications": [{"type": "mobyle1", "classification": "hmm:building"}], "description": "Convert profile HMM file to a HMMER format", "title": "HMMCONVERT", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Hmm profile", "name": "result_file", "simple": null, "filenames": {"python": "(str(oldbinfile) + \".convert\" , str(oldhmmfile) + \".convert\")[oldhmmfile is not None]", "perl": "(defined $oldhmmfile)? \"$oldhmmfile.convert\": \"$oldbinfile.convert\""}, "precond": {"python": "new_format == '-a' or new_format == '-2'", "perl": "$new_format eq '-a' or $new_format eq '-2'"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "HmmProfile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Hmm profile (binary)", "name": "result_bin_file", "simple": null, "filenames": {"python": "(str(oldbinfile) + \".bin\" , str(oldhmmfile) + \".bin\")[oldhmmfile is not None]", "perl": "(defined $oldhmmfile)? \"$oldhmmfile.bin\":\"oldbinfile.bin\""}, "precond": {"python": "new_format == '-b'", "perl": "$new_format eq '-b'"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "HmmProfileBin", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Old HMM ascii file", "name": "oldhmmfile", "ctrl": {"python": "oldbinfile is None", "perl": "not defined $oldbinfile"}, "simple": null, "argpos": "2", "format": {"python": "\" \" + str(oldhmmfile)", "perl": "\" $oldhmmfile\""}, "command": false, "precond": {"python": "oldhmmfile is not None", "perl": "not $oldhmmfile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "HmmProfile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Old HMM binary file", "name": "oldbinfile", "ctrl": {"python": "oldhmmfile is None", "perl": "not defined $oldhmmfile"}, "simple": null, "argpos": "2", "format": {"python": "\" \" + str(oldbinfile)", "perl": "\" $oldbinfile\""}, "command": false, "precond": {"python": "oldbinfile is not None", "perl": "not $oldhmmfile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "HmmProfileBin", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Advanced options", "name": "advanced", "children": [{"comment": null, "prompt": "New format", "name": "new_format", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" \"+str(value)", "perl": "($value)? \" $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Output in a HMMER3 ASCII text format other then the most current one. Valid\n      choices for the value are '3/b' or '3/a'. The current format is '3/b', and this is the\n      default. There is a slightly different format '3/a' that was used in some alpha test\n      code.", "prompt": "Choose output legacy 3.x file formats by name", "name": "outfmt", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" --outfmt \"+str(value))[value !=vdef]", "perl": "($value ne $vdef)? \" --outfmt $value\":\"\""}, "command": false, "precond": {"python": "new_format != '-2'", "perl": "$new_format ne  '-2'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "hmmconvert"}, "documentation_links": [], "type": "program", "name": "hmmconvert"}, {"comment": "hmmemit reads an HMM file from hmmfile and generates a number of sequences from it; or, if the -c option is selected, generate a single majority-rule consensus. This can be useful for various applications in which one needs a simulation of sequences consistent with a sequence family consensus.By default, hmmemit generates 10 sequences and outputs them in FASTA (unaligned) format.", "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabb4"}, "classifications": [{"type": "mobyle1", "classification": "hmm:building"}], "description": "Generate sequences from a profile HMM", "title": "HMMEMIT", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "output_file", "simple": null, "filenames": {"python": "str(outfile_name)", "perl": "$outfile_name"}, "precond": {"python": "outfile_name is not None", "perl": "defined $outfile_name"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output file", "name": "out_file", "simple": null, "filenames": {"python": "\"hmmemit.out\"", "perl": "\"hmmemit.out\""}, "precond": {"python": "outfile_name is None", "perl": "not defined $outfile_name"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "HMM emit command", "name": "hmmcmd", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"hmmemit\"", "perl": "\"hmmemit\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "HMM file", "name": "hmmfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \" + str(hmmfile)", "perl": "\" $hmmfile\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "HmmProfile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Save the synthetic sequences to file rather than writing them to stdout.", "prompt": "Name of the synthetic sequences file (-o)", "name": "outfile_name", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -o \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -o $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Emit a consensus sequence, instead of sampling a sequence from the profile\n        HMM's probability distribution. The consensus sequence is formed by selecting\n        the maximum probability residue at each match state.", "prompt": "Consensus sequence (-c)", "name": "consensus", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -c\" )[ value ]", "perl": "($value) ? \" -c\" : \"\""}, "command": false, "precond": {"python": "number ==  1 and not sample", "perl": "$number == 1 and not sample"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sample x sequences, rather than just one.", "prompt": "Number of sequences to sample (-N)", "name": "number", "ctrl": {"python": "0 < value", "perl": "0 < $value"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -N \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -N $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sample sequences from the implicit profile, not from the core model. \n        The core\n        model consists only of the homologous states (between the begin and end states\n        of a HMMER Plan7 model). The profile includes the nonhomologous N, C, and J\n        states, local/glocal and uni/multihit algorithm configuration, and the target length\n        model. Therefore sequences sampled from a profile may include nonhomologous\n        as well as homologous sequences, and may contain more than one homologous\n        sequence segment. By default, the profile is in multihit local mode, and the target\n        sequence length is configured for L=400. To change these defaults, see Options\n        Controlling Emission from Profiles, below.", "prompt": "Sample from profile, not core model (-p)", "name": "sample", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -p \" )[ value ]", "perl": "( $value ) ? \" -p \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "sample", "perl": "define $sample"}, "prompt": "Options controlling emission from profiles (with -p)", "name": "controlP", "children": [{"comment": "Configure the profile's target sequence length model to generate a mean length of\n          approximately the value rather than the default of 400.", "prompt": "Set expected length from profile (-L)", "name": "len", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -L \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -L $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Configure profile mode", "name": "local", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --$value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Seed the random number generator with the value, an integer >= 0. If the value is nonzero,\n          any stochastic simulations will be reproducible; the same command will give the\n          same results. If the value is 0, the random number generator is seeded arbitrarily, and\n          stochastic simulations will vary from run to run of the same command. The default\n          is 0: use an arbitrary seed, so different hmmemit runs will generate different\n          samples.", "prompt": "Seed number (--seed)", "name": "seed", "ctrl": {"python": "0 <= value", "perl": "0 <= $value"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" --seed \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --seed $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "hmmemit"}, {"comment": "hmmfetch  is  a  small  utility  that  retrieves an HMM called name from a HMMER model database called database.  in a new format, and prints that model to standard output.  For example, hmmfetch Pfam  rrm retrieves  the RRM (RNA recognition motif) model from Pfam.  The retrieved HMM file is written in HMMER 2 ASCII format.", "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabb5"}, "classifications": [{"type": "mobyle1", "classification": "hmm:database:search"}, {"type": "mobyle1", "classification": "database:search:hmm"}], "description": "Retrieve an HMM from pfam an HMM database", "title": "HMMFETCH", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "output_file_name", "simple": null, "filenames": {"python": "str(outfile_name)", "perl": "$outfile_name"}, "precond": {"python": "outfile_name is not None", "perl": "defined $outfile_name"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "HmmProfile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output file", "name": "output_file", "simple": null, "filenames": {"python": "\"hmmfetch.out\"", "perl": "\"hmmfetch.out\""}, "precond": {"python": "outfile_name is None", "perl": "not defined $outfile_name"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "HmmProfile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "A file containing a list of one or more keys is read instead. The first white space delimited\n      field on each non-blank non-comment line of the file is used as a key, and any remaining\n      data on the line is ignored; this allows a variety of whitespace delimited datafiles to be used as files.", "prompt": "Name of the HMM", "name": "Name", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "HMMKeys", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "HMM database", "name": "HMMDB", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -f \"+str(value)", "perl": "\" -f $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Save the synthetic sequences to file rather than writing them to stdout.", "prompt": "Name of the HMM output file (-o)", "name": "outfile_name", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -o \" + str(value) )[ value is not None ]", "perl": "(defined $value ) ? \" -o $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "hmmfetch"}, "documentation_links": [], "type": "program", "name": "hmmfetch"}, {"comment": "hmmscan reads sequence(s) from seqfile and compares it against all the HMMs in pfam \n        database looking for significantly similar sequence matches. \n        The output consists of three sections: a ranked list of the best scoring HMMs, \n        a list of the best scoring domains in order of their occurrence in the sequence, \n        and alignments for all the best scoring domains. A sequence score may be higher than a \n        domain score for the same sequence if there is more than one domain in the sequence; \n        the sequence score takes into account all the domains. All sequences scoring above the\n         -E and -T cutoffs are shown in the first list, then every domain found in this list is shown\n        in the second list of domain hits. If desired, E-value and score thresholds may also be applied\n        to the domain list using the --domE and --domT options.", "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabb6"}, "classifications": [{"type": "mobyle1", "classification": "hmm:database:search"}, {"type": "mobyle1", "classification": "database:search:hmm"}], "description": "Search sequence(s) against pfam a profile HMM database", "title": "HMMSCAN", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Options controlling output", "name": "controlOutput", "children": [{"comment": null, "prompt": "Output file", "name": "output_file_name", "simple": null, "filenames": {"python": "str(outfile_name)", "perl": "$outfile_name"}, "precond": {"python": "outfile_name is not None", "perl": "defined $outfile_name"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output parseable table of per-sequence hits", "name": "output_perseqfile_name", "simple": null, "filenames": {"python": "str(perseqfile_name)", "perl": "$perseqfile_name"}, "precond": {"python": "perseqfile_name", "perl": "$perseqfile_name"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output parseable table of per-domain hits", "name": "output_perdomfile_name", "simple": null, "filenames": {"python": "str(perdomfile_name)", "perl": "$perdomfile_name"}, "precond": {"python": "perdomfile_name", "perl": "$perdomfile_name"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Sequence file", "name": "seqfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "HMM database", "name": "HMMDB", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Options for reporting thresholds", "name": "thresholds_report", "children": [{"comment": "In the per-target output, report target profiles with an E-value of <= value. The\n        default is 10.0, meaning that on average, about 10 false positives will be reported\n        per query, so you can see the top of the 'noise' and decide for yourself if it's really\n        noise.", "prompt": "E_value cutoff (-E)", "name": "E_value_cutoff", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -E \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -E $value\" : \"\""}, "command": false, "precond": {"python": "Bit_cutoff is None and model_specific != '--cut_ga' and model_specific != '--cut_nc'", "perl": "not defined $Bit_cutoff and $model_specific ne '--cut_ga' and $model_specific ne '--cut_nc'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of thresholding per-profile output on E-value, instead report target profiles\n        with a bit score of >= value.", "prompt": "Bit score cutoff (-T)", "name": "Bit_cutoff", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -T \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -T $value\" : \"\""}, "command": false, "precond": {"python": "E_value_cutoff == 10.0 and model_specific != '--cut_ga' and model_specific != '--cut_nc'", "perl": "$E_value_cutoff == 10.0 and $model_specific ne '--cut_ga' and $model_specific ne '--cut_nc'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In the per-domain output, for target profiles that have already satisfied the perprofile\n            reporting threshold, report individual domains with a conditional E-value\n            of <= value. The default is 10.0. A 'conditional' E-value means the expected\n            number of additional false positive domains in the smaller search space of those\n            comparisons that already satisfied the per-profile reporting threshold (and thus\n            must have at least one homologous domain already).", "prompt": "E-value cutoff for the per-domain ranked hit list (--domE)", "name": "domE", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --domE \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --domE $value\" : \"\""}, "command": false, "precond": {"python": "domT is None and model_specific != '--cut_ga' and model_specific != '--cut_nc'", "perl": "not defined $domT and $model_specific ne '--cut_ga' and $model_specific ne '--cut_nc'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of thresholding per-domain output on E-value, instead report domains with\n              a bit score of >= value.", "prompt": "Bit score cutoff for the per-domain ranked hit list  (--domT)", "name": "domT", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --domT \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --domT $value\" : \"\""}, "command": false, "precond": {"python": "domE == 10.0 and model_specific != '--cut_ga' and model_specific != '--cut_nc'", "perl": "$domE == 10.0 and $model_specific ne '--cut_ga' and $model_specific ne '--cut_nc'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "'Inclusion' thresholds are stricter than reporting thresholds. Inclusion thresholds \n            control which hits are considered to be reliable enough to be included in an output alignment or a \n            subsequent search round. In hmmscan, which does not have any alignment output  nor any iterative\n            search steps, inclusion thresholds have little effect. They only affect what domains get\n            marked as significant ('!') or questionable ('?') in domain output.", "precond": null, "prompt": "Options controlling inclusion (significance) thresholds.", "name": "thresholds_inclusion", "children": [{"comment": "Use an E-value of <= value as the per-target inclusion threshold. The default is\n              0.01, meaning that on average, about 1 false positive would be expected in every\n              100 searches with different query sequences.", "prompt": "Include sequences lower than this E-value threshold (--incE)", "name": "incE", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --incE \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and value != vdef) ? \" --incE $value\" : \"\""}, "command": false, "precond": {"python": "incT is None and model_specific != '--cut_ga'", "perl": "not defined $incT and $model_specific ne '--cut_ga'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use a conditional E-value of <= value as the per-domain inclusion threshold, in\n              targets that have already satisfied the overall per-target inclusion threshold. The\n              default is 0.01.", "prompt": "Include domains lower than this E-value threshold  (--incdomE)", "name": "incdomE", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --incdomE \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and value != vdef) ? \" --incdomE $value\" : \"\""}, "command": false, "precond": {"python": "incdomT is not None and model_specific is None", "perl": "defined $incdomT and not defined model_specific"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of using E-values for setting the inclusion threshold, instead use a bit score\n                of >= the value as the per-target inclusion threshold. It would be unusual to use bit\n                score thresholds with hmmscan, because you don't expect a single score threshold\n                to work for different profiles; different profiles have slightly different expected score\n                distributions.", "prompt": "Include sequences upper than this score threshold  (--incT)", "name": "incT", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --incT \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --incT $value\" : \"\""}, "command": false, "precond": {"python": "incE == 0.01 and model_specific != '--cut_ga'", "perl": "$incE == 0.01 and $model_specific ne '--cut_ga'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of using E-values, instead use a bit score of >= value as the per-domain\n                inclusion threshold. As with --incT above, it would be unusual to use a single bit\n                score threshold in hmmscan.", "prompt": "Include domans upper than this score threshold  (--incdomT)", "name": "incdomT", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --incdomT \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --incdomT $value\" : \"\""}, "command": false, "precond": {"python": "incdomE == 0.01 and model_specific is None", "perl": "$incdomE == 0.01 and not defined $model_specific"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Curated profile databases may define specific bit score thresholds for each profile, superseding any thresholding\n            based on statistical significance alone. To use these options, the profile must contain the appropriate\n            (GA, TC, and/or NC) optional score threshold annotation; this is picked up by hmmbuild from Stockholm\n            format alignment files. Each thresholding option has two scores: the per-sequence threshold x1 value and the\n            per-domain threshold x2 value. These act as if -T x1 --incT x1 --domT x2 --incdomT x2 has been\n            applied specifically using each model's curated thresholds.cut ga: Use the GA (gathering) bit scores in the model to set per-sequence (GA1) and\n            per-domain (GA2) reporting and inclusion thresholds. GA thresholds are generally\n            considered to be the reliable curated thresholds defining family membership; for\n            example, in Pfam, these thresholds define what gets included in Pfam Full alignments\n            based on searches with Pfam Seed models.cut_nc: Use the NC (noise cutoff) bit score thresholds in the model to set per-sequence\n            (NC1) and per-domain (NC2) reporting and inclusion thresholds. NC thresholds\n            are generally considered to be the score of the highest-scoring known false positive.cut_tc: Use the NC (trusted cutoff) bit score thresholds in the model to set per-sequence\n            (TC1) and per-domain (TC2) reporting and inclusion thresholds. TC thresholds are\n            generally considered to be the score of the lowest-scoring known true positive that\n            is above all known false positives.", "prompt": "Options for model-specific thresholding", "name": "model_specific", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\""}, "command": false, "precond": {"python": "not Bit_cutoff and E_value_cutoff == 10.0 and incdomT is None and incdomE == 0.01", "perl": "not defined $Bit_cutoff and not $E_value_cutoff == 10.0 and not defined $incdomT and  $incdomE == 0.01"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "HMMER3 searches are accelerated in a three-step filter pipeline: the MSV filter, the Viterbi filter, and\n            the Forward filter. The first filter is the fastest and most approximate; the last is the full Forward scoring\n            algorithm. There is also a 'bias filter' step between MSV and Viterbi. Targets that pass all the steps\n            in the acceleration pipeline are then subjected to 'postprocessing' -- domain identification and scoring\n            using the Forward/Backward algorithm. Changing filter thresholds only removes or includes targets from\n            consideration; changing filter thresholds does not alter bit scores, E-values, or alignments, all of which are\n            determined solely in 'postprocessing'.", "precond": null, "prompt": "Options controlling acceleration heuristics", "name": "acceleration", "children": [{"comment": "Turn off all filters, including the bias filter, and run full Forward/Backward postprocessing\n              on every target. This increases sensitivity somewhat, at a large cost in speed.", "prompt": "Turn all heuristic filters off (less speed, more power) (--max)", "name": "max", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --max \" )[ value ]", "perl": "($value) ? \" --max\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the P-value threshold for the MSV filter step. The default is 0.02, meaning that\n            roughly 2% of the highest scoring nonhomologous targets are expected to pass the filter.", "prompt": "Stage 1 (MSV) threshold", "name": "F1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --F1 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef ) ? \" --F1 $value\" : \"\""}, "command": false, "precond": {"python": "not max", "perl": "not max"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the P-value threshold for the Viterbi filter step. The default is 0.001.", "prompt": "Stage 1 (Vit) threshold", "name": "F2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --F2 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef ) ? \" --F2 $value\" : \"\""}, "command": false, "precond": {"python": "not max", "perl": "not max"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the P-value threshold for the Forward filter step. The default is 1e-5.", "prompt": "Stage 1 (Fwd) threshold", "name": "F3", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --F3 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef ) ? \" --F3 $value\" : \"\""}, "command": false, "precond": {"python": "not max", "perl": "not max"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Turn off the bias filter. This increases sensitivity somewhat, but can come at a\n            high cost in speed, especially if the query has biased residue composition (such\n            as a repetitive sequence region, or if it is a membrane protein with large regions\n            of hydrophobicity). Without the bias filter, too many sequences may pass the filter\n            with biased queries, leading to slower than expected performance as the computationally\n            intensive Forward/Backward algorithms shoulder an abnormally heavy\n            load.", "prompt": "Turn off composition bias filter (--nobias)", "name": "nobias", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --nobias \" )[ value ]", "perl": "($value) ? \" --nobias\" : \"\""}, "command": false, "precond": {"python": "not max", "perl": "not max"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Other expert options", "name": "expert", "children": [{"comment": "Turn off the 'null2' score corrections for biased composition.", "prompt": "Turn off biased composition score corrections (--nonull2)", "name": "nonull2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --nonull2 \" )[ value ]", "perl": "($value) ? \" --nonull2\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Assert that the total number of targets in your searches is the value, for the purposes of\n          per-sequence E-value calculations, rather than the actual number of targets seen.", "prompt": "Control of E_value calculation (-Z)", "name": "E_value_calculation", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -Z \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -Z $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Assert that the total number of targets in your searches is the value, for the purposes\n          of per-domain conditional E-value calculations, rather than the number of targets\n          that passed the reporting thresholds.", "prompt": "Set Z score of significant sequences, for domain E-value calculation  (--domZ)", "name": "domZ", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --domZ \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --domZ $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the random number seed to value. Some steps in postprocessing require Monte\n               Carlo simulation. The default is to use a fixed seed (42), so that results are exactly\n               reproducible. Any other positive integer will give different (but also reproducible)\n               results. A choice of 0 uses a 'randomly chosen' seed.", "prompt": "Set RNG seed number (--seed)", "name": "seed", "ctrl": {"python": "0 <= value", "perl": "0 <= $value"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --seed \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --seed $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options controlling output", "name": "controlOutput", "children": [{"comment": null, "prompt": "Name of the sequence(s) file (-o)", "name": "outfile_name", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \" \" , \" -o \" + str(value) )[ value is not None ]", "perl": "(defined $value ) ? \" -o $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Save a simple tabular (space-delimited) file summarizing the 'per-target' output,\n        with one data line per homologous target model found", "prompt": "File name of parseable table of per-sequence hits (--tblout)", "name": "perseqfile_name", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" --tblout \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --tblout $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Save a simple tabular (space-delimited) file summarizing the 'per-domain' output,\n          with one data line per homologous domain detected in a query sequence for each\n          homologous model.", "prompt": "File name of parseable table of per-domain hits (--domtblout)", "name": "perdomfile_name", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" --domtblout \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --domtblout $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use accessions instead of names in the main output, where available for profiles\n        and/or sequences", "prompt": "Prefer accessions over names in output", "name": "acc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --acc \" )[ value ]", "perl": "($value) ? \" --acc \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Omit the alignment section from the main output. This can greatly reduce the\n        output volume.", "prompt": "Don't output alignments, so output is smaller", "name": "noali", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --noali \" )[ value ]", "perl": "($value) ? \" --noali \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Unlimit the length of each line in the main output. The default is a limit of 120\n                characters per line, which helps in displaying the output cleanly on terminals and\n                in editors, but can truncate target profile description lines.", "prompt": "Unlimit ASCII text output line width (--notextw)", "name": "notextw", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --notextw \" )[ value ]", "perl": "($value) ? \" --notextw \" : \"\""}, "command": false, "precond": {"python": "textw == 120", "perl": "textw == 120"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the main output's line length limit to value> characters per line. The default is\n         120.", "prompt": "Set max width of ASCII text output lines (--textw)", "name": "textw", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --textw \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --textw $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "hmmscan"}, "documentation_links": [], "type": "program", "name": "hmmscan"}, {"comment": "hmmsearch reads an HMM from hmmfile and searches seqfile for significantly similar sequence matches.hmmsearch may take minutes or even hours to run, depending on the size of the sequence database.The output consists of four sections: a ranked list of the best scoring sequences, a ranked list of the best scoring domains, alignments for all the best scoring domains, and a histogram of the scores. sequence score may be higher than a domain score for the same sequence if there is more than domain in the sequence; the sequence score takes into account all the domains. All sequences scoring above the -E and -T cutoffs are shown in the first list, then every domain found in this list is shown in the second list of domain hits. If desired, E-value and bit score thresholds may also be applied to the domain list using the --domE and --domT options.", "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabb7"}, "classifications": [{"type": "mobyle1", "classification": "hmm:database:search"}, {"type": "mobyle1", "classification": "database:search:hmm"}], "description": "Search a sequence database with a profile HMM", "title": "HMMSEARCH", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Options directing output", "name": "output_options", "children": [{"comment": null, "prompt": "Output file", "name": "output_file_name", "simple": null, "filenames": {"python": "str(outfile_name)", "perl": "$outfile_name"}, "precond": {"python": "outfile_name", "perl": "$outfile_name"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output align file", "name": "output_align_name", "simple": null, "filenames": {"python": "str(alnfile_name)", "perl": "\"$alnfile_name\""}, "precond": {"python": "alnfile_name", "perl": "$alnfile_name"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["STOCKHOLM"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output parseable table of per-sequence hits", "name": "output_perseqfile_name", "simple": null, "filenames": {"python": "str(perseqfile_name)", "perl": "\"$perseqfile_name\""}, "precond": {"python": "perseqfile_name", "perl": "$perseqfile_name"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output parseable table of per-domain hits", "name": "output_perdomfile_name", "simple": null, "filenames": {"python": "str(perdomfile_name)", "perl": "\"$perdomfile_name\""}, "precond": {"python": "perdomfile_name", "perl": "$perdomfile_name"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "HMM file", "name": "hmmfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "HmmProfile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose one public protein sequence database", "name": "public_seq_DB", "ctrl": {"python": "not perso_seq_DB", "perl": "not defined $perso_seq_DB"}, "simple": null, "argpos": "3", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": {"python": "not perso_seq_DB  or ( perso_seq_DB and public_seq_DB )", "perl": "not $public_seq_DB"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "OR paste a personal protein sequence database", "name": "perso_seq_DB", "ctrl": {"python": "not public_seq_DB", "perl": "not defined $perso_seq_DB"}, "simple": null, "argpos": "3", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": {"python": "not public_seq_DB or ( perso_seq_DB and public_seq_DB )", "perl": "not $perso_seq_DB"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "'Reporting' thresholds control which hits are reported in output files. Sequence hits and \n        domain hits are ranked by statistical significance (E-value) and output is\n        generated in two sections called 'per-target' and 'per-domain' output. In per-target output, by default, all\n        sequence hits with an E-value <= 10 are reported. In the per-domain output, for each target that has passed\n        per-target reporting thresholds, all domains satisfying per-domain reporting thresholds are reported. By default,\n        these are domains with conditional E-values of <= 10. The following options allow you to change the\n        default E-value reporting thresholds, or to use bit score thresholds instead.", "precond": null, "prompt": "Options controlling reporting thresholds", "name": "thresholds_report", "children": [{"comment": "In the per-target output, report target profiles with an E-value of <= value. The\n        default is 10.0, meaning that on average, about 10 false positives will be reported\n        per query, so you can see the top of the 'noise' and decide for yourself if it's really\n        noise.", "prompt": "E_value cutoff (-E)", "name": "E_value_cutoff", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -E \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -E $value\" : \"\""}, "command": false, "precond": {"python": "Bit_cutoff is None and model_specific != '--cut_ga' and model_specific != '--cut_nc'", "perl": "not defined $Bit_cutoff and $model_specific ne '--cut_ga' and $model_specific ne '--cut_nc'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of thresholding per-profile output on E-value, instead report target profiles\n        with a bit score of >= value.", "prompt": "Bit score cutoff (-T)", "name": "Bit_cutoff", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -T \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -T $value\" : \"\""}, "command": false, "precond": {"python": "E_value_cutoff == 10.0 and model_specific != '--cut_ga' and model_specific != '--cut_nc'", "perl": "$E_value_cutoff == 10.0 and $model_specific ne '--cut_ga' and $model_specific ne '--cut_nc'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In the per-domain output, for target profiles that have already satisfied the perprofile\n            reporting threshold, report individual domains with a conditional E-value\n            of <= value. The default is 10.0. A 'conditional' E-value means the expected\n            number of additional false positive domains in the smaller search space of those\n            comparisons that already satisfied the per-profile reporting threshold (and thus\n            must have at least one homologous domain already).", "prompt": "E-value cutoff for the per-domain ranked hit list (--domE)", "name": "domE", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --domE \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --domE $value\" : \"\""}, "command": false, "precond": {"python": "domT is None and model_specific != '--cut_ga' and model_specific != '--cut_nc'", "perl": "not defined $domT and $model_specific ne '--cut_ga' and $model_specific ne '--cut_nc'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of thresholding per-domain output on E-value, instead report domains with\n              a bit score of >= value.", "prompt": "Bit score cutoff for the per-domain ranked hit list  (--domT)", "name": "domT", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --domT \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --domT $value\" : \"\""}, "command": false, "precond": {"python": "domE == 10.0 and model_specific != '--cut_ga' and model_specific != '--cut_nc'", "perl": "$domE == 10.0 and $model_specific ne '--cut_ga' and $model_specific ne '--cut_nc'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "'Inclusion' thresholds are stricter than reporting thresholds. Inclusion thresholds \n            control which hits are considered to be reliable enough to be included in an output alignment or a \n            subsequent search round. In hmmscan, which does not have any alignment output  nor any iterative\n            search steps, inclusion thresholds have little effect. They only affect what domains get\n            marked as significant ('!') or questionable ('?') in domain output.", "precond": null, "prompt": "Options controlling inclusion (significance) thresholds.", "name": "thresholds_output", "children": [{"comment": "Use an E-value of <= value as the per-target inclusion threshold. The default is\n              0.01, meaning that on average, about 1 false positive would be expected in every\n              100 searches with different query sequences.", "prompt": "Include sequences lower than this E-value threshold in output alignment  (--incE)", "name": "incE", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --incE \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != vdef) ? \" --incE $value\" : \"\""}, "command": false, "precond": {"python": "incT is None and model_specific != '--cut_ga'", "perl": "not defined $incT and $model_specific ne '--cut_ga'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use a conditional E-value of <= value as the per-domain inclusion threshold, in\n              targets that have already satisfied the overall per-target inclusion threshold. The\n              default is 0.01.", "prompt": "Include domains lower than this E-value threshold in output alignment  (--incdomE)", "name": "incdomE", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --incdomE \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != vdef) ? \" --incdomE $value\" : \"\""}, "command": false, "precond": {"python": "incdomT is not None and model_specific is None", "perl": "defined $incdomT and not defined model_specific"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of using E-values for setting the inclusion threshold, instead use a bit score\n                of >= the value as the per-target inclusion threshold. It would be unusual to use bit\n                score thresholds with hmmscan, because you don't expect a single score threshold\n                to work for different profiles; different profiles have slightly different expected score\n                distributions.", "prompt": "Include sequences upper than this score threshold in output alignment  (--incT)", "name": "incT", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --incT \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --incT $value\" : \"\""}, "command": false, "precond": {"python": "incE == 0.01 and model_specific != '--cut_ga'", "perl": "$incE == 0.01 and $model_specific ne '--cut_ga'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of using E-values, instead use a bit score of >= value as the per-domain\n                inclusion threshold. As with --incT above, it would be unusual to use a single bit\n                score threshold in hmmscan.", "prompt": "Include domans upper than this score threshold in output alignment  (--incdomT)", "name": "incdomT", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --incdomT \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --incdomT $value\" : \"\""}, "command": false, "precond": {"python": "incdomE == 0.01 and model_specific is None", "perl": "$incdomE == 0.01 and not defined $model_specific"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Curated profile databases may define specific bit score thresholds for each profile, superseding any thresholding\n            based on statistical significance alone. To use these options, the profile must contain the appropriate\n            (GA, TC, and/or NC) optional score threshold annotation; this is picked up by hmmbuild from Stockholm\n            format alignment files. Each thresholding option has two scores: the per-sequence threshold x1 value and the\n            per-domain threshold x2 value. These act as if -T x1 --incT x1 --domT x2 --incdomT x2 has been\n            applied specifically using each model's curated thresholds.cut ga: Use the GA (gathering) bit scores in the model to set per-sequence (GA1) and\n            per-domain (GA2) reporting and inclusion thresholds. GA thresholds are generally\n            considered to be the reliable curated thresholds defining family membership; for\n            example, in Pfam, these thresholds define what gets included in Pfam Full alignments\n            based on searches with Pfam Seed models.cut_nc: Use the NC (noise cutoff) bit score thresholds in the model to set per-sequence\n            (NC1) and per-domain (NC2) reporting and inclusion thresholds. NC thresholds\n            are generally considered to be the score of the highest-scoring known false positive.cut_tc: Use the NC (trusted cutoff) bit score thresholds in the model to set per-sequence\n            (TC1) and per-domain (TC2) reporting and inclusion thresholds. TC thresholds are\n            generally considered to be the score of the lowest-scoring known true positive that\n            is above all known false positives.", "prompt": "Options controlling model-specific thresholding", "name": "model_specific", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\""}, "command": false, "precond": {"python": "not Bit_cutoff and E_value_cutoff == 10.0 and incdomT is None and incdomE == 0.01", "perl": "not defined $Bit_cutoff and not $E_value_cutoff == 10.0 and not defined $incdomT and  $incdomE == 0.01"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "HMMER3 searches are accelerated in a three-step filter pipeline: the MSV filter, the Viterbi filter, and\n            the Forward filter. The first filter is the fastest and most approximate; the last is the full Forward scoring\n            algorithm. There is also a 'bias filter' step between MSV and Viterbi. Targets that pass all the steps\n            in the acceleration pipeline are then subjected to 'postprocessing' -- domain identification and scoring\n            using the Forward/Backward algorithm. Changing filter thresholds only removes or includes targets from\n            consideration; changing filter thresholds does not alter bit scores, E-values, or alignments, all of which are\n            determined solely in 'postprocessing'.", "precond": null, "prompt": "Options controlling acceleration heuristics", "name": "acceleration", "children": [{"comment": "Turn off all filters, including the bias filter, and run full Forward/Backward postprocessing\n              on every target. This increases sensitivity somewhat, at a large cost in speed.", "prompt": "Turn all heuristic filters off (less speed, more power) (--max)", "name": "max", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --max \" )[ value ]", "perl": "($value) ? \" --max\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the P-value threshold for the MSV filter step. The default is 0.02, meaning that\n            roughly 2% of the highest scoring nonhomologous targets are expected to pass the filter.", "prompt": "Stage 1 (MSV) threshold", "name": "F1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --F1 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef ) ? \" --F1 $value\" : \"\""}, "command": false, "precond": {"python": "not max", "perl": "not $max"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the P-value threshold for the Viterbi filter step. The default is 0.001.", "prompt": "Stage 1 (Vit) threshold", "name": "F2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --F2 \" + str(value) )[ value is not None and value != vdef]", "perl": "( defined $value and $value != $vdef  ) ? \" --F2 $value\" : \"\""}, "command": false, "precond": {"python": "not max", "perl": "not $max"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the P-value threshold for the Forward filter step. The default is 1e-5.", "prompt": "Stage 1 (Fwd) threshold", "name": "F3", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --F3 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef ) ? \" --F3 $value\" : \"\""}, "command": false, "precond": {"python": "not max", "perl": "not $max"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Turn off the bias filter. This increases sensitivity somewhat, but can come at a\n            high cost in speed, especially if the query has biased residue composition (such\n            as a repetitive sequence region, or if it is a membrane protein with large regions\n            of hydrophobicity). Without the bias filter, too many sequences may pass the filter\n            with biased queries, leading to slower than expected performance as the computationally\n            intensive Forward/Backward algorithms shoulder an abnormally heavy\n            load.", "prompt": "Turn off composition bias filter (--nobias)", "name": "nobias", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --nobias \" )[ value ]", "perl": "($value) ? \" --nobias\" : \"\""}, "command": false, "precond": {"python": "not max", "perl": "not $max"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Other expert options", "name": "expert", "children": [{"comment": "Turn off the 'null2' score corrections for biased composition.", "prompt": "Turn off biased composition score corrections (--nonull2)", "name": "nonull2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --nonull2 \" )[ value ]", "perl": "($value) ? \" --nonull2\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Assert that the total number of targets in your searches is the value, for the purposes of\n          per-sequence E-value calculations, rather than the actual number of targets seen.", "prompt": "Control of E_value calculation (-Z)", "name": "E_value_calculation", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -Z \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -Z $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Assert that the total number of targets in your searches is the value, for the purposes\n          of per-domain conditional E-value calculations, rather than the number of targets\n          that passed the reporting thresholds.", "prompt": "Set Z score of significant sequences, for domain E-value calculation  (--domZ)", "name": "domZ", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --domZ \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --domZ $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the random number seed to value. Some steps in postprocessing require Monte\n               Carlo simulation. The default is to use a fixed seed (42), so that results are exactly\n               reproducible. Any other positive integer will give different (but also reproducible)\n               results. A choice of 0 uses a 'randomly chosen' seed.", "prompt": "Set RNG seed number (--seed)", "name": "seed", "ctrl": {"python": "0 <= value", "perl": "0 <= $value"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --seed \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --seed $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options directing output", "name": "output_options", "children": [{"comment": "Set the main output's line length limit to value> characters per line. The default is\n         120.", "prompt": "Set max width of ASCII text output lines (--textw)", "name": "textw", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --textw \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --textw $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Unlimit the length of each line in the main output. The default is a limit of 120\n                characters per line, which helps in displaying the output cleanly on terminals and\n                in editors, but can truncate target profile description lines.", "prompt": "Unlimit ASCII text output line width (--notextw)", "name": "notextw", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --notextw \" )[ value ]", "perl": "($value) ? \" --notextw \" : \"\""}, "command": false, "precond": {"python": "textw == 120", "perl": "$textw == 120"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use accessions instead of names in the main output, where available for profiles\n        and/or sequences", "prompt": "Prefer accessions over names in output (--acc)", "name": "acc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --acc \" )[ value ]", "perl": "($value) ? \" --acc \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the sequence(s) file (-o)", "name": "outfile_name", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \" \" , \" -o \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -o $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Omit the alignment section from the main output. This can greatly reduce the\n        output volume.", "prompt": "Don't output alignments, so output is smaller (--noali)", "name": "noali", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --noali \" )[ value ]", "perl": "( $value ) ? \" --noali \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Save a multiple alignment of all significant hits (those satisfying inclusion thresholds)\n        to the file.", "prompt": "File name of the multiple alignment of all hits (-A)", "name": "alnfile_name", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -A \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -A $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Save a simple tabular (space-delimited) file summarizing the 'per-target' output,\n        with one data line per homologous target model found", "prompt": "File name of parseable table of per-sequence hits (--tblout)", "name": "perseqfile_name", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" --tblout \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --tblout $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Save a simple tabular (space-delimited) file summarizing the 'per-domain' output,\n          with one data line per homologous domain detected in a query sequence for each\n          homologous model.", "prompt": "File name of parseable table of per-domain hits (--domtblout)", "name": "perdomfile_name", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" --domtblout \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --domtblout $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "hmmsearch"}, "documentation_links": [], "type": "program", "name": "hmmsearch"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabb8"}, "classifications": [{"type": "mobyle1", "classification": "hmm:simulation"}], "description": "Collect profile HMM score distributions on random sequences", "title": "HMMSIM", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": null, "prompt": "Direct summary output to file.", "name": "save_out", "simple": null, "filenames": {"python": "str( save )", "perl": "\"$save\""}, "precond": {"python": "save is not None", "perl": "defined $save"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output alignment lengths", "name": "afile_out", "simple": null, "filenames": {"python": "str( afile )", "perl": "\"$afile\""}, "precond": {"python": "afile is not None", "perl": "defined $afile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output E vs. E plots to file in xy format", "name": "efile_out", "simple": null, "filenames": {"python": "str( efile )", "perl": "\"$efile\""}, "precond": {"python": "efile is not None", "perl": "defined $efile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output filter fraction: sequences passing P thresh", "name": "ffile_out", "simple": null, "filenames": {"python": "str( ffile )", "perl": "\"$ffile\""}, "precond": {"python": "ffile is not None", "perl": "defined $ffile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output cumulative survival plots", "name": "pfile_out", "simple": null, "filenames": {"python": "str( pfile )", "perl": "\"$pfile\""}, "precond": {"python": "pfile is not None", "perl": "defined $pfile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output bitscores as binary double vector to file", "name": "xfile_out", "simple": null, "filenames": {"python": "str( xfile )", "perl": "\"$xfile\""}, "precond": {"python": "xfile is not None", "perl": "defined $xfile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BitScores", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "HMM file", "name": "hmmfile", "ctrl": null, "simple": null, "argpos": "30", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "HmmProfile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "General options", "name": "generalOptions", "children": [{"comment": "Collect expected Viterbi alignment length statistics from each simulated sequence.\n            This only works with Viterbi scores (the default; see --vit). Two additional fields are\n            printed in the output table for each model: the mean length of Viterbi alignments,\n            and the standard deviation.", "prompt": "Obtain alignment length statistics (-a)", "name": "aln", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -a\" )[ value ]", "perl": "($value) ? \" -a\" : \"\""}, "command": false, "precond": {"python": "altSco == '--vit'", "perl": "$altSco eq '--vit'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Verbose: print scores (-v)", "name": "verbose", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -v\" )[ value ]", "perl": "($value) ? \" -v\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Length of random target sequences (-L)", "name": "Length", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -L \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef ) ? \" -L $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of random target sequences (-N)", "name": "number", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -N \" + str(value) )[ value is not None and value !=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -N $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced options", "name": "AdvancedOptions", "children": [{"comment": "H3 only uses multihit local alignment ( --fs mode), and this is where we believe the statistical fits. Unihit\n            local alignment scores (Smith/Waterman; --sw mode) also obey our statistical conjectures. Glocal alignment\n            statistics (either multihit or unihit) are still not adequately understood nor adequately fitted.fs: Collect multihit local alignment scores. This is the default. 'fs comes from HMMER2'\n            s historical terminology for multihit local alignment as 'fragment search mode'.sw: Collect unihit local alignment scores. The H3 J state is disabled. 'sw' comes from\n            HMMER2's historical terminology for unihit local alignment as 'Smith/Waterman search mode'.ls Collect multihit glocal alignment scores. In glocal (global/local) alignment, the entire\n            model must align, to a subsequence of the target. The H3 local entry/exit transition\n            probabilities are disabled. 'ls' comes from HMMER2's historical terminology\n            for multihit local alignment as 'local search mode'.s: Collect unihit glocal alignment scores. Both the H3 J state and local entry/exit transition\n            probabilities are disabled. 's' comes from HMMER2's historical terminology\n            for unihit glocal alignment.", "prompt": "Alternative alignment styles", "name": "altAln", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "vit: Collect Viterbi maximum likelihood alignment scores. This is the default.fwd: Collect Forward log-odds likelihood scores, summed over alignment ensemble.hyb: Collect 'Hybrid' scores, as described in papers by Yu and Hwa (for instance, Bioinformatics\n            18:864, 2002). These involve calculating a Forward matrix and taking the\n            maximum cell value. The number itself is statistically somewhat unmotivated, but\n            the distribution is expected be a well-behaved extreme value distribution (Gumbel).msv: Collect MSV (multiple ungapped segment Viterbi) scores, using H3's main acceleration\n            heuristic.fast: For any of the above options, use H3's optimized production implementation (using\n            SIMD vectorization). The default is to use the 'generic' implementation (slow and\n            non-vectorized). The optimized implementations sacrifice a small amount of numerical\n            precision. This can introduce confounding noise into statistical simulations\n            and fits, so when one gets super-concerned about exact details, it's better to be\n            able to factor that source of noise out.", "prompt": "Option controlling scoring algorithm", "name": "altSco", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \"  $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Controlling range of fitted tail masses", "name": "controlMasse", "children": [{"comment": "Set the lower bound on the tail mass distribution. (The default is 0.02 for the default\n            single tail mass.)", "prompt": "Set lower bound tail mass for fwd,island (--tmin)", "name": "tmin", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --tmin \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --tmin $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the upper bound on the tail mass distribution. (The default is 0.02 for the default\n            single tail mass.)", "prompt": "Set upper bound tail mass for fwd,island (--tmax)", "name": "tmax", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --tmax \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --tmax $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the number of tail masses to sample, starting from --tmin and ending at --tmax.\n            The default is 1, for the default 0.02 single tail mass.", "prompt": "Set number of tail probs to try (--tpoints)", "name": "tpoints", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --tpoints \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --tpoints $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sample a range of tail masses with uniform linear spacing. The default is to use\n            uniform logarithmic spacing.", "prompt": "Use linear not log spacing of tail probs (--tlinear)", "name": "tlinear", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --tlinear\" )[ value ]", "perl": "($value) ? \" --tlinear\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "H3 uses three short random sequence simulations to estimating the location parameters \n        for the expected score distributions for MSV scores, Viterbi scores, and Forward scores. These options \n        allow these simulations to be modified.", "precond": null, "prompt": "Options controlling h3 parameter estimation methods", "name": "ECalibration", "children": [{"comment": "Sets the sequence length in simulation that estimates the location parameter mu\n         for MSV E-values. Default is 200. Enter a value > 0.", "prompt": "Lengt of sequences for MSV Gumbel mu fit (EmL)", "name": "EmL", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --EmL \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value!=$vdef) ? \" --EmL $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the number of sequences in simulation that estimates the location parameter\n              mu for MSV E-values. Default is 200. Enter a value > 0.", "prompt": "Number of sequences for MSV Gumbel mu fit (EmN)", "name": "EmN", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --EmN \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value!=$vdef) ? \" --EmN $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the sequence length in simulation that estimates the location parameter mu\n            for Viterbi E-values. Default is 200. Enter a value > 0", "prompt": "Lengt of sequences for Viterbi Gumbel mu fit (EvL)", "name": "EvL", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --EvL \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value!=$vdef) ? \" --EvL $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the number of sequences in simulation that estimates the location parameter\n          mu for Viterbi E-values. Default is 200. Enter a value > 0.", "prompt": "Number of sequences for Viterbi Gumbel mu fit (EvN)", "name": "EvN", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --EvN \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --EvN $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the sequence length in simulation that estimates the location parameter tau\n          for Forward E-values. Default is 100. Enter a value > 0", "prompt": "Lengt of sequences for Forward exp tail tau fit (EfL)", "name": "EfL", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --EfL \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --EfL $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the number of sequences in simulation that estimates the location parameter\n            tau for Forward E-values. Default is 200. Enter a value > 0", "prompt": "Number of sequences for Forward exp tail tau fit (EfN)", "name": "EfN", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --EfN \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --EfN $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the tail mass fraction to fit in the simulation that estimates the location parameter\n            tau for Forward evalues. Default is 0.04. Enter a value > 0 and < 1", "prompt": "Tail mass for Forward exponential tail tau fit (Eft)", "name": "Eft", "ctrl": {"python": "value > 0 and value < 1", "perl": "$value > 0 and $value < 1"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --Eft \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --Eft $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Debugging options", "name": "debugg", "children": [{"comment": "For debugging the MPI master/worker version: pause after start, to enable the\n            developer to attach debuggers to the running master and worker(s) processes.\n            Send SIGCONT signal to release the pause. (Under gdb: (gdb) signal SIGCONT)\n            (Only available if optional MPI support was enabled at compile-time.)", "prompt": "Arrest after start: for debugging MPI under gdb (--stall)", "name": "stall", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --stall\" )[ value ]", "perl": "($value) ? \" --stall\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the random number seed. The default is 0, which makes the random\n            number generator use an arbitrary seed, so that different runs of hmmsim will\n            almost certainly generate a different statistical sample. For debugging, it is useful\n            to force reproducible results, by fixing a random number seed.", "prompt": "Set random number seed  (--seed)", "name": "seed", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --seed \" + str(value))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --seed $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "These options were used in a small variety of different exploratory experiments.", "precond": null, "prompt": "Experiments options", "name": "expert", "children": [{"comment": "Set the background residue distribution to a uniform distribution, both for purposes\n            of the null model used in calculating scores, and for generating the random sequences.\n            The default is to use a standard amino acid background frequency distribution.", "prompt": "Set uniform background frequencies (--bgflat)", "name": "bgflat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --bgflat\" )[ value ]", "perl": "($value) ? \" --bgflat\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the background residue distribution to the mean composition of the profile. This\n            was used in exploring some of the effects of biased composition.", "prompt": "Set bg frequencies to model's average composition (--bgcomp)", "name": "bgcomp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --bgcomp\" )[ value ]", "perl": "($value) ? \" --bgcomp\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Turn the H3 target sequence length model off. Set the self-transitions for N,C,J\n            and the null model to 350/351 instead; this emulates HMMER2. Not a good idea\n            in general. This was used to demonstrate one of the main H2 vs. H3 differences.", "prompt": "Turn the H3 length model off (--x-no-lengthmode)", "name": "lengthmode", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --x-no-lengthmode \" )[value ]", "perl": "($value) ? \" --x-no-lengthmode\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the nu parameter for the MSV algorithm -- the expected number of ungapped\n          local alignments per target sequence. The default is 2.0, corresponding to a E->J transition probability of 0.5. This was used to test whether varying nu has\n          significant effect on result (it doesn't seem to, within reason). This option only\n          works if --msv is selected (it only affects MSV), and it will not work with --fast\n          (because the optimized implementations are hardwired to assume nu=2.0).", "prompt": "Set nu parameter (expected HSPs) for GMSV (--nu)", "name": "nu", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --nu \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --nu $value\" : \"\""}, "command": false, "precond": {"python": "altSco == '--msv'", "perl": "$altSco eq '--msv'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the filter P-value threshold to use in generating filter power files with --ffile. The\n            default is 0.02 (which would be appropriate for testing MSV scores, since this is\n            the default MSV filter threshold in H3's acceleration pipeline.) Other appropriate\n            choices (matching defaults in the acceleration pipeline) would be 0.001 for Viterbi,\n            and 1e-5 for Forward.", "prompt": "Set  P-value threshold for --ffile (--pthresh)", "name": "pthresh", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --pthresh \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --pthresh $value\" : \"\""}, "command": false, "precond": {"python": "ffile is not None", "perl": "defined $ffile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": null, "prompt": "Direct summary output to file, not stdout. (-o)", "name": "save", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -o \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -o $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "When collecting Viterbi alignment statistics (the -a option), for each sampled sequence,\n            output two fields per line to a file: the length of the optimal alignment,\n            and the Viterbi bit score. Requires that the -a option is also used.", "prompt": "Output alignment lengths to file (--afile)", "name": "afile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" --afile \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" --afile $value\" : \"\""}, "command": false, "precond": {"python": "aln and altSco == '--vit'", "perl": "$aln and $altSco eq '--vit'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Output a rank versus. E-value plot in XMGRACE xy format to file. The x-axis is the\n            rank of this sequence, from highest score to lowest; the y-axis is the E-value calculated\n            for this sequence. E-values are calculated using H3's default procedures (i.e.\n            the 'pmu, plambda' parameters in the output table). You expect a rough match\n            between rank and E-value if E-values are accurately estimated.", "prompt": "Output E vs. E plots to file in xy format (--efile)", "name": "efile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" --efile \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" --efile $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Output a 'filter power' file: for each model, a line with three fields: model\n            name, number of sequences passing the P-value threshold, and fraction of sequences\n            passing the P-value threshold. See --pthresh for setting the P-value\n            threshold, which defaults to 0.02 (the default MSV filter threshold in H3). The\n            P-values are as determined by H3's default procedures (the 'pmu,plambda' parameters\n            in the output table). If all is well, you expect to see filter power equal to\n            the predicted P-value setting of the threshold.", "prompt": "Output filter fraction: sequences passing P thresh (--ffile)", "name": "ffile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" --ffile \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" --ffile $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Output cumulative survival plots (P(S>x)) to file in XMGRACE xy format.\n            There are three plots: (1) the observed score distribution; (2) the maximum likelihood\n            fitted distribution; (3) a maximum likelihood fit to the location parameter\n            (mu/tau) while assuming lambda=log 2.", "prompt": "Output cumulative survival plots (--pfile)", "name": "pfile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" --pfile \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" --pfile $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Output the bit scores as a binary array of double-precision floats (8 bytes per score)\n            to file. Programs like Easel's esl-histplot can read such binary files. This is\n            useful when generating extremely large sample sizes.", "prompt": "Output bitscores as binary double vector to file (--xfile)", "name": "xfile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" --xfile \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" --xfile $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "hmmsim"}, "documentation_links": [], "type": "program", "name": "hmmsim"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabba"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Calculate and plot hydrophobic moment for protein sequence(s)", "title": "hmoment", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_plot and e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_plot and e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_plot and e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_plot and e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_plot and e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "HmomentReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "seqall option", "name": "e_seqall", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -seqall=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Window", "name": "e_window", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -window=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alpha helix angle (degrees)", "name": "e_aangle", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -aangle=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Beta sheet angle (degrees)", "name": "e_bangle", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -bangle=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Graph marker line", "name": "e_baseline", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -baseline=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Produce graphic", "name": "e_plot", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -plot\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Plot two graphs", "name": "e_double", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -double\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "not e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "hmoment"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/hmoment.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "hmoment"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabbb"}, "classifications": [{"type": "mobyle1", "classification": "database:search:display"}], "description": "HTML blast results formatter", "title": "html4blast", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "output", "simple": null, "filenames": {"python": "outfile", "perl": "$outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastHtmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": null, "name": "image", "simple": null, "filenames": {"python": "\"*.gif\"", "perl": "\"*.gif\""}, "precond": {"python": "graph", "perl": "$graph"}, "output_type": "file", "hidden": true, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "html4blast", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\"html4blast\"", "perl": "\"html4blast\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Blast input file", "name": "input", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" %s\" % str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "BlastTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Database links", "name": "links", "ctrl": null, "simple": null, "argpos": "2", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Graphical alignment summary (-g)", "name": "graph", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -g\")[ value ]", "perl": "($value) ? \" -g\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Draw one HSP per graphic line  (-l)", "name": "hspline", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -l\")[ value ]", "perl": "($value) ? \" -l\" : \"\""}, "command": false, "precond": {"python": "graph", "perl": "$graph"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Generate query based images names (-q)", "name": "queryimagename", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -q\")[ value ]", "perl": "($value) ? \" -q\" : \"\""}, "command": false, "precond": {"python": "graph", "perl": "$graph"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Outfile name (-o)", "name": "outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -o \" + str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -o $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.6", "references": [], "source_links": ["ftp://ftp.pasteur.fr/pub/gensoft/projects/html4blast/"], "env": [], "authors": "Nicolas Joly", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "html4blast"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabbc"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Calculate the isoelectric point of proteins", "title": "iep", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_plot and e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_plot and e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_plot and e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_plot and e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_plot and e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "IepReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Number of n-termini (value greater than or equal to 0)", "name": "e_amino", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -amino=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of c-termini (value greater than or equal to 0)", "name": "e_carboxyl", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -carboxyl=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Include charge at n and c terminus", "name": "e_termini", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -notermini\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of modified lysines (value greater than or equal to 0)", "name": "e_lysinemodified", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -lysinemodified=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of disulphide bridges (value greater than or equal to 0)", "name": "e_disulphides", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -disulphides=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Step value for ph (value from .01 to 1.)", "name": "e_step", "ctrl": {"python": "value >= .01"}, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -step=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Plot charge vs ph", "name": "e_plot", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -plot\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Write results to a file", "name": "e_report", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\" -noreport\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_report"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "iep"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/iep.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "iep"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabbd"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple:information"}], "description": "Display basic information about a multiple sequence alignment", "title": "infoalign", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "InfoalignReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "The sequence alignment to be displayed.", "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA", "MSF", "PAIR", "MARKX0", "MARKX1", "MARKX2", "MARKX3", "MARKX10", "SRS", "SRSPAIR", "SCORE", "UNKNOWN", "MULTIPLE", "SIMPLE", "MATCH"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "This is the scoring matrix file used when comparing sequences. By default it is the file 'EBLOSUM62' (for proteins) or  the file 'EDNAFULL' (for nucleic sequences). These files are  found in the 'data' directory of the EMBOSS installation.", "prompt": "Similarity scoring matrix file", "name": "e_matrix", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -matrix=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If you give the number in the alignment or the name of a sequence, it will be taken to be the reference sequence. The  reference sequence is the one against which all the other  sequences are compared. If this is set to 0 then the consensus  sequence will be used as the reference sequence. By default the  consensus sequence is used as the reference sequence.", "prompt": "The number or the name of the reference sequence", "name": "e_refseq", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -refseq=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "Set a cut-off for the % of positive scoring matches below which there is no consensus. The default plurality is taken as 50%  of the total weight of all the sequences in the alignment.", "prompt": "Plurality check % for consensus (value from 0.0 to 100.0)", "name": "e_plurality", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -plurality=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Provides the facility of setting the required number of identities at a position for it to give a consensus. Therefore, if  this is set to 100% only columns of identities contribute to the  consensus.", "prompt": "Required % of identities at a position fro consensus (value from 0.0 to 100.0)", "name": "e_identity", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -identity=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "If you enter the name of a file here then this program will write the sequence details into that file.", "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Format output as an html table", "name": "e_html", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -html\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is a way of shortening the command line if you only want a few things to be displayed. Instead of specifying: \n  '-nohead -nousa -noname -noalign -nogaps -nogapcount -nosimcount  -noidcount -nodiffcount -noweight' \n  to get only the sequence length output, you can specify \n  '-only -seqlength'", "prompt": "Display the specified columns", "name": "e_only", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -only\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display column headings", "name": "e_heading", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -heading\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display the usa of the sequence", "name": "e_usa", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -usa\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'name' column", "name": "e_name", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -name\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'seqlength' column", "name": "e_seqlength", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -seqlength\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'alignlength' column", "name": "e_alignlength", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -alignlength\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display number of gaps", "name": "e_gaps", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -gaps\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display number of gap positions", "name": "e_gapcount", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "(\"\", \" -gapcount\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display number of identical positions", "name": "e_idcount", "ctrl": null, "simple": null, "argpos": "16", "format": {"python": "(\"\", \" -idcount\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display number of similar positions", "name": "e_simcount", "ctrl": null, "simple": null, "argpos": "17", "format": {"python": "(\"\", \" -simcount\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display number of different positions", "name": "e_diffcount", "ctrl": null, "simple": null, "argpos": "18", "format": {"python": "(\"\", \" -diffcount\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display % number of changed positions", "name": "e_change", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "(\"\", \" -change\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'weight' column", "name": "e_weight", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "(\"\", \" -weight\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'description' column", "name": "e_description", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "(\"\", \" -description\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "22", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "infoalign"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/infoalign.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "infoalign"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da393546d52388cabbe"}, "classifications": [{"type": "mobyle1", "classification": "information"}], "description": "Display basic information about sequences", "title": "infoseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "InfoseqReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "Set this option on (Y) to print the sequence information into neat, aligned columns in the output file. Alternatively,  leave it unset (N), in which case the information records will be  delimited by a character, which you may specify by using the  -delimiter option. In other words, if -columns is set on, the  -delimiter option is overriden.", "prompt": "Print information in neat, aligned columns.", "name": "e_columns", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\" -nocolumns\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This string, which is usually a single character only, is used to delimit individual records in the text output file. It  could be a space character, a tab character or  any other character or string.", "prompt": "Delimiter of records in text output file", "name": "e_delimiter", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -delimiter=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "If you enter the name of a file here then this program will write the sequence details into that file.", "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Format output as an html table", "name": "e_html", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -html\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is a way of shortening the command line if you only want a few things to be displayed. Instead of specifying: \n  '-nohead -noname -noacc -notype -nopgc -nodesc' \n  to get only the length output, you can specify \n  '-only -length'", "prompt": "Display the specified columns", "name": "e_only", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -only\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display column headings", "name": "e_heading", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\" -noheading\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display the usa of the sequence", "name": "e_usa", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -usa\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'database' column", "name": "e_database", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -database\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'name' column", "name": "e_name", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -name\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'accession' column", "name": "e_accession", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -accession\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'gi' column", "name": "e_gi", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -gi\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'version' column", "name": "e_seqversion", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -seqversion\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'type' column", "name": "e_type", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -type\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'length' column", "name": "e_length", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "(\"\", \" -length\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'percent gc content' column", "name": "e_pgc", "ctrl": null, "simple": null, "argpos": "16", "format": {"python": "(\"\", \" -pgc\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'organism' column", "name": "e_organism", "ctrl": null, "simple": null, "argpos": "17", "format": {"python": "(\"\", \" -organism\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'description' column", "name": "e_description", "ctrl": null, "simple": null, "argpos": "18", "format": {"python": "(\"\", \" -description\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "infoseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/infoseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "infoseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabbf"}, "classifications": [{"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:Peak Annotation"}, {"type": "mobyle1", "classification": "Genomic Analysis:Multi-Purpose Tools"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Annotation and Alignment"}, {"type": "mobyle1", "classification": "Sequence Analysis and Comparison:Comparative Genomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Variant Analysis"}, {"type": "mobyle1", "classification": "Utilities and Tools:File Format Conversion"}, {"type": "mobyle1", "classification": "Omics:Genomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:Variant calling"}], "description": "This tool finds overlaps between two sets of genomic features. This tool works with the following file formats: BED, GFF, VCF and BAM.", "title": "BEDtools: intersectBed", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output", "name": "output_para", "children": [{"comment": null, "prompt": "GenomeAnnotation", "name": "intersectBed_out", "simple": null, "filenames": {"python": "(\"intersected_data\",output_file)[output_file is not None] + \".bed\""}, "precond": {"python": "output_type != \"bam\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "GenomeAnnotation", "name": "intersectBam_out", "simple": null, "filenames": {"python": "(\"intersected_data\",output_file)[output_file is not None] + \".bam\""}, "precond": {"python": "output_type == \"bam\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input", "name": "input_para", "children": [{"comment": null, "prompt": "Input file A format (-a or -abam)", "name": "file_a_type", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "BED/GFF/VCF format file", "prompt": "File A [BED/GFF/VCF format] (-a)", "name": "input_fileA_bed", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -a \" + str(value)"}, "command": false, "precond": {"python": "file_a_type != \"bam\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "BAM format file", "prompt": "File A [BAM format] (-ibam)", "name": "input_fileA_bam", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -abam \" + str(value)"}, "command": false, "precond": {"python": "file_a_type == \"bam\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "BED/GFF/VCF file B.", "prompt": "File B (BED/GFF/VCF format): (-b)", "name": "input_fileB_bed", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" -b \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "Options", "children": [{"comment": null, "prompt": "Overlap output options", "name": "overlap_option", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\",\" \" +  str(value) + \" \" )[value is not None and value != 'null']"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Minimum overlap required as a fraction of A: (-f)", "name": "minimum_overlap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\" -f \" +  str(value) + \" \" )[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Require that the fraction of overlap be reciprocal for A and B. In other words, if -f is 0.90 and -r is used, this requires that B overlap at least 90% of A and that A also overlaps at least 90% of B.", "prompt": "Require that the fraction of overlap be reciprocal? (-r)", "name": "is_overlap_reciprocal", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -r \")[value == 1]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Finds the closest feature in B overlaps A on the same or opposite strand. Default: strand information is ignored.Same strandedness option - finds the closest feature in B that overlaps A on the same strandOpposite strandedness option - finds the closest feature in B that overlaps A on the opposite strand", "prompt": "Strandedness (-s or -S)", "name": "force_strand_option", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" \" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Treat \"split\" BAM (i.e., having an \"N\" CIGAR operation) or BED12 entries as distinct BED intervals.", "prompt": "Treat split BAM as distinct BED intervals? (-split)", "name": "treat_split_bam_as_distinct_bed_intervals", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -split \")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default is to write compressed BAM output", "prompt": "Write uncompressed BAM output (-ubam)", "name": "un_compress_bam", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -ubam \")[value == 1]"}, "command": false, "precond": {"python": "file_a_type == \"bam\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use the \"chromsweep\" algorithm for sorted (-k1,1 -k2,2n) input (-sorted)", "name": "sorted", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' -sorted ')[value == 1]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Print the header from the A file prior to results. (-header)", "name": "header", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' -header ')[value == 1]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output", "name": "output_para", "children": [{"comment": "The BED or BAM format can be chosen only if the input is BAM file.", "prompt": "Output format", "name": "output_type", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -bed \")[ value == \"bed\"]"}, "command": false, "precond": {"python": "file_a_type == \"bam\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Enter output file prefix:", "name": "output_file", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "(\" > \" + str(vdef) , \" > \" + str(value))[value is not None] + (\".bed\",\".bam\")[output_type == \"bam\"]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "2.15.0", "references": [], "source_links": [], "env": [], "authors": "Quinlan A.R. & Hall I.M.", "command": {"path": null, "value": "intersectBed"}, "documentation_links": [], "type": "program", "name": "intersectBed"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabc0"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:composition"}], "description": "Plots isochores in DNA sequences", "title": "isochore", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "IsochoreReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Window size (value greater than or equal to 1)", "name": "e_window", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -window=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Shift increment (value greater than or equal to 1)", "name": "e_shift", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -shift=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "isochore"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/isochore.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "isochore"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabc1"}, "classifications": [{"type": "mobyle1", "classification": "hmm:database:search"}, {"type": "mobyle1", "classification": "database:search:hmm"}], "description": "Iteratively search protein sequence(s) against a protein database", "title": "JACKHMMER", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "out_file", "simple": null, "filenames": {"python": "\"*.output\"", "perl": "*.output"}, "precond": {"python": "outfile==1", "perl": "$outfile==1"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment file", "name": "ali_file", "simple": null, "filenames": {"python": "\"*.align\"", "perl": "*.align"}, "precond": {"python": "aligfile==1", "perl": "$aligfile==1"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["STOCKHOLM"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Parseable table of per-sequence hits", "name": "seq_file", "simple": null, "filenames": {"python": "\"*.tblout\"", "perl": "*.tblout"}, "precond": {"python": "seqtab==1", "perl": "$seqtab==1"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Parseable table of per-domain hits", "name": "dom_file", "simple": null, "filenames": {"python": "\"*.domtblout\"", "perl": "*.domtblout"}, "precond": {"python": "domaintab==1", "perl": "$domaintab==1"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "HMM checkpoints files", "name": "chkhmm_file", "simple": null, "filenames": {"python": "\"*.hmm\"", "perl": "*.hmm"}, "precond": {"python": "chkhmm==1", "perl": "$chkhmm==1"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment checkpoints files", "name": "chkali_file", "simple": null, "filenames": {"python": "\"*.sto\"", "perl": "*.sto"}, "precond": {"python": "chkali==1", "perl": "$chkali==1"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["STOCKHOLM"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Query sequence(s)", "name": "qsequence", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose a protein sequence database", "name": "db", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the maximum number of iterations (default is 5). If =1, the result\nis equivalent to a phmmer search.", "prompt": "Maximum number of iterations (-N)", "name": "n_it", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -N \" + str(value)) [ value != vdef]", "perl": "($value != $vdef) ? \" -N $value\" :\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default, output for each iteration appears on stdout in a somewhat human readable, somewhat parseable\nformat. These options allow redirecting that output or saving additional kinds of output to files, including\ncheckpoint files for each iteration.", "precond": null, "prompt": "Directing output", "name": "output", "children": [{"comment": "Direct the main \"human-readable\" output to a file instead of the default stdout.", "prompt": "Direct output to file (-o)", "name": "outfile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -o jackhmmer.output\") [ value != vdef]", "perl": "($value != $vdef) ? \" -o jackmmer.output\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "After the final iteration, save an annotated multiple alignment of all hits satisfying\ninclusion thresholds (also including the original query) to a file (Stockholm format).", "prompt": "Save multiple alignment of hits to file (-A)", "name": "aligfile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -A jackhmmer.align\") [ value != vdef]", "perl": "($value != $vdef) ? \" -A jackhmmer.align\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "After the final iteration, save a tabular summary of top sequence hits to a file in a\nreadily parseable, columnar, whitespace-delimited format.", "prompt": "Save parseable table of per-sequence hits to file (--tblout)", "name": "seqtab", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --tblout jackhmmer.tblout\") [ value != vdef]", "perl": "$value != $vdef) ? \" --tblout jackhmmer.tblout\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "After the final iteration, save a tabular summary of top domain hits to a file in a\nreadily parseable, columnar, whitespace-delimited format.", "prompt": "Save parseable table of per-domain hits to file (--domtblout)", "name": "domaintab", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --domtblout jackhmmer.domtblout\") [ value != vdef]", "perl": "($value != $vdef) ? \" --domtblout jackhmmer.domtblout\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "At the start of each iteration, checkpoint the query HMM, saving it to a file named\nphmmer-n.hmm where n is the iteration number (from 1..N).", "prompt": "Save HMM checkpoints (--chkhmm)", "name": "chkhmm", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --chkhmm jackhmmer\") [ value != vdef]", "perl": "($value != $vdef) ? \" --chkhmm jackhmmer\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "At the end of each iteration, checkpoint an alignment of all domains satisfying\ninclusion thresholds (e.g. what will become the query HMM for the next iteration),\nsaving it to a file named phmmer-n.sto in Stockholm format, where n is the iteration number (from 1..N).", "prompt": "Save alignment checkpoints (--chkali)", "name": "chkali", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --chkali jackhmmer\") [ value != vdef]", "perl": "($value != $vdef) ? \" --chkali jackhmmer\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use accessions instead of names in the main output, where available for profiles and/or sequences.", "prompt": "Prefer accessions over names in output (--acc)", "name": "acc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --acc\") [ value != vdef]", "perl": "($value != $vdef) ? \" --acc\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Omit the alignment section from the main output. This can greatly reduce the output volume.", "prompt": "Don't output alignments, so output is smaller (--noali)", "name": "noali", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --noali\") [ value != vdef]", "perl": "($value != $vdef) ? \" --noali\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Unlimit the length of each line in the main output. The default is a limit of 120\ncharacters per line, which helps in displaying the output cleanly on terminals and\nin editors, but can truncate target profile description lines.", "prompt": "Unlimit ASCII text output line width (--notextw)", "name": "notextw", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --notextw\" ) [ value  != vdef]", "perl": "($value != $vdef) ? \" --notextw\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Max width of ASCII text output lines (--textw)", "name": "textw", "ctrl": {"python": "120 <=value", "perl": "120 <=$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --textw \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --textw $value\" : \"\""}, "command": false, "precond": {"python": "notextw == 0", "perl": "$notextw == 0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "By default, the first iteration uses a search model constructed from a single query sequence. This model\nis constructed using a standard 20x20 substitution matrix for residue probabilities, and two additional parameters\nfor position-independent gap open and gap extend probabilities. These options allow the default\nsingle-sequence scoring parameters to be changed.", "precond": null, "prompt": "Controlling single sequence scoring in first iteration", "name": "scoringsys", "children": [{"comment": "Set the gap open probability for a single sequence query model. This probability has to be >= 0 and <0.5. Default value = 0.02.", "prompt": "Gap open probability (--popen)", "name": "popen", "ctrl": {"python": "0 <= value <0.5", "perl": "0 <= $value <0.5"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --popen \" + str(value)) [ value != vdef]", "perl": "($value != $vdef) ? \" --popen $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the gap extend probability for a single sequence query model. This probability has to be >= 0 and <1. Default value: 0.4.", "prompt": "Gap extend probability (--pextend)", "name": "pextend", "ctrl": {"python": "0 <= value <1", "perl": "0 <= $value <1"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --pextend \" + str(value)) [ value != vdef]", "perl": "($value != $vdef) ? \" --pextend $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "To obtain residue alignment probabilities from a substitution matrix. The default score matrix is BLOSUM62", "prompt": "Substitution score matrix (--mxfile)", "name": "matrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --mxfile \" + str(value)) [ value != vdef]", "perl": "($value != $vdef) ? \" --mxfile $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "\"Reporting\" thresholds control which hits are reported in output files (the main output, --tblout, and --\ndomtblout). In each iteration, sequence hits and domain hits are ranked by statistical significance (E-value) and output is\ngenerated in two sections called \"per-target\" and \"per-domain\" output.The following options allow you to change the default E-value reporting thresholds, or to use bit score thresholds instead.", "precond": null, "prompt": "Controlling significance thresholds for reporting", "name": "report", "children": [{"comment": "Report sequences <= this E-value threshold in per-sequence output. [Default value: 10].", "prompt": "Thresholds for Sequences:  E-value (-E)", "name": "e_threshold", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -E \" + str(value)) [ value != vdef]", "perl": "($value != $vdef) ? \" -E $value\" : \"\""}, "command": false, "precond": {"python": "s_threshold is None", "perl": "$s_threshold is None"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use a bit score threshold for per-sequence output instead of an E-value threshold\n(any setting of -E is ignored). Report sequences with a bit score of >= this score threshold in output. By\ndefault this option is unset.", "prompt": "Score (-T)", "name": "s_threshold", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -T \" + str(value)) [ value is not None]", "perl": "($value) ? \" -T $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Report domains with conditional E-values < or = this E-value threshold in per-domain output, in addition\nto the top-scoring domain per significant sequence hit.[Default value: 10]", "prompt": "Thresholds for Domains: E-value (--domE)", "name": "d_e_threshold", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --domE \" + str(value)) [ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" --domE $value\" : \"\""}, "command": false, "precond": {"python": "d_s_threshold is None", "perl": "$d_s_threshold is None"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use a bit score threshold for per-domain output instead of an E-value threshold\n(any setting of --domE is ignored). Report domains with a bit score of >= this score threshold in per-domain output,\nin addition to the top-scoring domain per significant sequence hit. By default this option is unset.", "prompt": "Score (--domT)", "name": "d_s_threshold", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --domT \" + str(value)) [ value is not None]", "perl": "($value) ? \" --domT $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Inclusion thresholds control which hits are included in the final multiple alignment (if the -A option is used) \nand which hits actually get used in the next iteration.", "precond": null, "prompt": "Controlling significance thresholds for inclusion in next round", "name": "inclusion_A", "children": [{"comment": "Include sequences with E-values <= this E-value threshold in subsequent iteration or final alignment\noutput (-A option). The default is 0.001.", "prompt": "Thresholds for Sequences:  E-value (--incE)", "name": "a_e_threshold", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --incE \" + str(value)) [ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" --incE $value\" : \"\""}, "command": false, "precond": {"python": "a_s_threshold is None", "perl": "$a_s_threshold is None"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use a bit score threshold for per-sequence inclusion instead of an E-value threshold\n(any setting of --incE is ignored). Include sequences with a bit score of >= this score threshold. By default this option is unset.", "prompt": "Score (--incT)", "name": "a_s_threshold", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --incT \" + str(value)) [ value is not None]", "perl": "($value) ? \" --incT $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Include domains with conditional E-values <= this E-value threshold in subsequent iteration or final\nalignment output (-A option), in addition to the top-scoring domain per significant sequence hit. The default is 0.001.", "prompt": "Thresholds for Domains: E-value (--incdomE)", "name": "a_d_e_threshold", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --incdomE \" + str(value)) [ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" --incdomE $value\" : \"\""}, "command": false, "precond": {"python": "a_d_s_threshold is None", "perl": "$a_d_s_threshold is None"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use a bit score threshold for per-domain inclusion instead of an E-value threshold\n(any setting of --incdomE is ignored). Include domains with a bit score of > = this score threshold. By default this option is unset.", "prompt": "Score (--incdomT)", "name": "a_d_s_threshold", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --incdomT \" + str(value)) [ value is not None]", "perl": "($value) ? \" --incdomT $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "HMMER3 searches are accelerated in a three-step filter pipeline:- the MSV filter (the fastest and most approximate),- the Viterbi filter,- and the Forward filter (full Forward scoring algorithm, slowest but most accurate),+ There is also a \"bias filter\" step between MSV and Viterbi.Targets that pass all the steps in the acceleration pipeline are then subjected to \"postprocessing\" (domain identification\nand scoring using the Forward/Backward algorithm).Essentially the only free parameters that control\nHMMER's heuristic filters are the P-value thresholds controlling the expected fraction of non-homologous\nsequences that pass the filters.- Setting the default thresholds higher will pass a higher proportion of non-homologous\nsequence, increasing sensitivity at the expense of speed,- Setting lower P-value thresholds will pass a smaller proportion, decreasing \nsensitivity and increasing speed,- Setting a filter's P-value threshold to 1.0 means it will passing all sequences, and effectively disables the filter.Changing filter thresholds only removes or includes targets from consideration; it does not alter bit\nscores, E-values, or alignments, all of which are determined solely in \"postprocessing\".", "precond": null, "prompt": "Controlling acceleration heuristics", "name": "heuristic", "children": [{"comment": "Maximum sensitivity. Turn off all filters, including the bias filter, and run full Forward/\nBackward postprocessing on every target. This increases sensitivity slightly, at a large cost in speed.", "prompt": "Turn all heuristic filters off (less speed, more power) (--max)", "name": "max", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --max\") [ value  != vdef]", "perl": "($value != $vdef) ? \" --max\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "First filter threshold; set the P-value threshold for the MSV filter step. The default is\n0.02, meaning that roughly 2% of the highest scoring non-homologous targets are expected to pass the filter.", "prompt": "Stage 1 (MSV) threshold: (--F1)", "name": "F1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --F1 \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --F1 $value\" : \"\""}, "command": false, "precond": {"python": "max==0", "perl": "$max==0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Second filter threshold; set the P-value threshold for the Viterbi filter step. The\ndefault is 0.001.", "prompt": "Stage 2 (Vit) threshold: (--F2)", "name": "F2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --F2 \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --F2 $value\" : \"\""}, "command": false, "precond": {"python": "max==0", "perl": "$max==0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Third filter threshold; set the P-value threshold for the Forward filter step. The\ndefault is 1e-5.", "prompt": "Stage 3 (Fwd) threshold: (--F3)", "name": "F3", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --F3 \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --F3 $value\" : \"\""}, "command": false, "precond": {"python": "max==0", "perl": "$max==0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Turn off the bias filter increases sensitivity somewhat, but can come at a\nhigh cost in speed, especially if the query has biased residue composition (such as a repetitive sequence region, \nor if it is a membrane protein with large regions of hydrophobicity).Without the bias filter, too many sequences may pass the filter\nwith biased queries, leading to slower than expected performance as the computationally\nintensive Forward/Backward algorithms shoulder an abnormally heavy load.", "prompt": "Turn off composition bias filter (--nobias)", "name": "nobias", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --nobias\" ) [ value != vdef]", "perl": "($value != $vdef) ? \" --nobias\" : \"\""}, "command": false, "precond": {"python": "max==0", "perl": "$max==0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "These options control how consensus columns are defined in multiple alignments when building profiles. By\ndefault, jackhmmer always includes your original query sequence in the alignment result at every iteration,\nand consensus positions are defined by that query sequence: that is, a default jackhmmer profile is always\nthe same length as your original query, at every iteration.", "precond": null, "prompt": "Controlling profile construction (later iteration)", "name": "model_constr", "children": [{"comment": "Define consensus columns as those that have a fraction >= symfrac of residues\nas consensus/opposed to gaps. (See below for the --symfrac option.) This option may have undesirable effects in jackhmmer, \nbecause a profile could iteratively walk in sequence space away from your original query, leaving few or no consensus\ncolumns corresponding to its residues.", "prompt": "Quickly and heuristically determine the architecture of the model (--fast)", "name": "fast", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --fast\" ) [ value != vdef]", "perl": "($value != $vdef) ? \" --fast\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Define the residue fraction threshold necessary to define a consensus column\nwhen using the --fast option. The default is 0.5. The symbol fraction in each column is calculated after taking \nrelative sequence weighting into account, and ignoring gap characters corresponding to ends of sequence fragments (as opposed\nto internal insertions/deletions).- Setting this to 1.0 means that every alignment column\nwill be assigned as consensus, which may be useful in some cases.- Setting it to 0.0 is a bad idea, because no columns will be assigned as consensus, and\nyou will get a model of zero length.", "prompt": "Symbol fraction controlling --fast construction (--symfrac)", "name": "symfrac", "ctrl": {"python": "0 < value <=1", "perl": "0 <=$value <=1"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --symfrac \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --symfrac $value\" : \"\""}, "command": false, "precond": {"python": "fast==1", "perl": "$fast==1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "We only want to count terminal gaps as deletions if the aligned sequence is known\nto be full-length, not if it is a fragment (for instance, because only part of it was sequenced). \nHMMER uses a simple rule to infer fragments: if the sequence length is less than a fraction threshold times the mean \nsequence length of all the sequences in the alignment, then the sequence is handled as a fragment. The default is 0.5.", "prompt": "Threshold to tag sequence as a fragment (--fragthresh)", "name": "fragthresh", "ctrl": {"python": "0 < value <=1", "perl": "0 <=$value <=1"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --fragthresh \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --fragthresh $value\" : \"\""}, "command": false, "precond": {"python": "fast==1", "perl": "$fast==1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Whenever a profile is built from a multiple alignment, HMMER uses an ad hoc sequence weighting algorithm\nto downweight closely related sequences and upweight distantly related ones. This has the effect of making\nmodels less biased by uneven phylogenetic representation.After relative weights are determined, they are normalized to sum to a total effective sequence number\n(eff_nseq). This number may be the actual number of sequences in the alignment, but it is almost always smaller than that.", "precond": null, "prompt": "Controlling relative weights and effective sequence number in models after first iteration", "name": "w_option", "children": [{"comment": "These option controls which ad hoc sequence weighting algorithm gets used:- Use the Henikoff position-based sequence weighting scheme [Henikoff and Henikoff,\nJ. Mol. Biol. 243:574, 1994]. This is the default.- Use the Gerstein/Sonnhammer/Chothia weighting algorithm [Gerstein et al, J. Mol.\nBiol. 235:1067, 1994].- Use the same clustering scheme that was used to weight data in calculating BLOSUM\nsubsitution matrices [Henikoff and Henikoff, Proc. Natl. Acad. Sci 89:10915,1992]. Sequences are single-linkage clustered \nat an identity threshold (default 0.62; see --wid option) and within each cluster of c sequences, each sequence gets relative\nweight 1/c.- No relative weights. All sequences are assigned uniform weight.", "prompt": "Relative weights in models", "name": "wmodel", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --\" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the identity threshold used by single-linkage clustering when using --wblosum.\nInvalid with any other weighting scheme. Default is 0.62.", "prompt": "Set identity cutoff in case of Henikoff simple filter weights (--wblosum) selection (--wid)", "name": "wid", "ctrl": {"python": "0 < value <=1", "perl": "0 <=$value <=1"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --wid \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --wid $value\" : \"\""}, "command": false, "precond": {"python": "wmodel == \"wblosum\"", "perl": "wmodel eq \"wblosum\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Choice between:- eent: Adjust effective sequence number to achieve a specific relative entropy per position\n(see --ere). This is the default. This method reduces the effective sequence number to reduce the information content \n(relative entropy, or average expected score on true homologs) per consensus position.- eclust: Set effective sequence number to the number of single-linkage clusters at a specific\nidentity threshold (see --eid). This option is not recommended; it is for experiments evaluating how much better --eent is.- enone: Turn off effective sequence number determination and just use the actual number\nof sequences. One reason you might want to do this is to try to maximize the relative entropy/position of your model, \nwhich may be useful for short models.", "prompt": "Effective sequence number in models", "name": "seqnum_model", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --\" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Effective sequence number for all model (--eset)", "name": "eff_snum", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --eset \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --eset $value\" : \"\""}, "command": false, "precond": {"python": "seqnum_model != \"enone\"", "perl": "seqnum_model ne \"enone\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the minimum relative entropy/position target. Requires --eent. Default\ndepends on the sequence alphabet; for protein sequences, it is 0.59 bits/position.", "prompt": "Minimum relative entropy/position target for --eent (--ere)", "name": "ere", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --ere \" + str(value) ) [ value is not None]", "perl": "($value) ? \" --ere $value\" : \"\""}, "command": false, "precond": {"python": "seqnum_model == \"eent\" and not eff_snum", "perl": "$seqnum_model eq \"eent\" and not $eff_snum"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the minimum relative entropy contributed by an entire model alignment, over\nits whole length. This has the effect of making short models have higher relative entropy per position \nthan --ere alone would give. The default is 45.0 bits.", "prompt": "Sigma parameter for --eent (--esigma)", "name": "esigma", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --esigma \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value!=$vdef) ? \" --esigma $value\" : \"\""}, "command": false, "precond": {"python": "seqnum_model == \"eent\" and not eff_snum", "perl": "$seqnum_model eq \"eent\" and not $eff_snum"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the fractional pairwise identity cutoff used by single linkage clustering with the\n--eclust option. The default is 0.62.", "prompt": "Fractional Identity cutoff for --eclust (--eid)", "name": "eid", "ctrl": {"python": "0 <= value <=1", "perl": "0 <=$value <=1"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --eid \" + str(value) ) [ value != vdef ]", "perl": "($value != $vdef) ? \" --eid $value\" : \"\""}, "command": false, "precond": {"python": "seqnum_model == \"eclust\" and not eff_snum", "perl": "$seqnum_model eq \"eclust\" and not $eff_snum"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Estimating the location parameters for the expected score distributions for MSV filter scores, Viterbi filter\nscores, and Forward scores requires three short random sequence simulations.", "precond": null, "prompt": "Controlling E-value calibration for Stage 1 - MSV Gumbel mu fit", "name": "MSV", "children": [{"comment": "Sets the sequence length in simulation that estimates the location parameter mu\n    for MSV filter E-values. Default is 200.", "prompt": "Length of sequences (--EmL)", "name": "eml", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --EmL \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --EmL $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the number of sequences in simulation that estimates the location parameter\nmu for MSV filter E-values. Default is 200.", "prompt": "Number of sequences (--EmN)", "name": "emn", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --EmN \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --EmN $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Estimating the location parameters for the expected score distributions for MSV filter scores, Viterbi filter\n  scores, and Forward scores requires three short random sequence simulations.", "precond": null, "prompt": "Controlling E-value calibration for Stage 2 - Viterbi Gumbel mu fit", "name": "Ecalibration2", "children": [{"comment": "Sets the sequence length in simulation that estimates the location parameter mu\nfor Viterbi filter E-values. Default is 200.", "prompt": "Length of sequences (--EvL)", "name": "evl", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --EvL \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --EvL $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the number of sequences in simulation that estimates the location parameter\nmu for Viterbi filter E-values. Default is 200.", "prompt": "Number of sequences (--EvN)", "name": "evn", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --EvN \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --EvN $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Estimating the location parameters for the expected score distributions for MSV filter scores, Viterbi filter\n  scores, and Forward scores requires three short random sequence simulations.", "precond": null, "prompt": "Controlling E-value calibration for Stage 3 - Forward exponential tail tau fit", "name": "Ecalibration3", "children": [{"comment": "Sets the sequence length in simulation that estimates the location parameter tau\nfor Forward E-values. Default is 100.", "prompt": "Length of sequences (--EfL)", "name": "efl", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --EfL \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --EfL $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the number of sequences in simulation that estimates the location parameter\ntau for Forward E-values. Default is 200.", "prompt": "Number of sequences (--EfN)", "name": "efn", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --EfN \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --EfN $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the tail mass fraction to fit in the simulation that estimates the location parameter\n  tau for Forward evalues. Default is 0.04.", "prompt": "Tail mass (--Eft)", "name": "eft", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --Eft \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --Eft $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Expert options", "name": "other", "children": [{"comment": "Turn off the \"null2\" score corrections for biased composition.", "prompt": "Turn off biased composition score corrections (--nonull2)", "name": "nonull", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --nonull2\" ) [ value != vdef]", "perl": "($value != $vdef) ? \" --nonull2\" : \"\""}, "command": false, "precond": {"python": "max==0", "perl": "$max==0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Assert that the total number of targets in your searches is this number, for the purposes of\n  per-sequence E-value calculations, rather than the actual number of targets seen.", "prompt": "Number of comparisons done, for E-value calculation (-Z)", "name": "z", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -Z \" + str(value)) [ value is not None]", "perl": "($value) ? \" -Z $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Assert that the total number of targets in your searches is this number, for the purposes\n  of per-domain conditional E-value calculations, rather than the number of targets that passed the reporting thresholds.", "prompt": "Number of significant sequences, for domain E-value calculation (--domZ)", "name": "d_z", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --domZ \" + str(value)) [ value is not None]", "perl": "($value) ? \" --domZ $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Seed the random number generator with this, an integer >= 0. The default seed is 42.If >0, any stochastic simulations will be reproducible; the same command will give the\n  same results.If = 0, the random number generator is seeded arbitrarily, and\n  stochastic simulations will vary from run to run of the same command.", "prompt": "Set Random Number Generator seed to (--seed)", "name": "seed", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --seed \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --seed $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "jackhmmer"}, "documentation_links": [], "type": "program", "name": "jackhmmer"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabc2"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:transcription"}], "description": "Scans DNA sequences for transcription factors", "title": "jaspscan", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Jaspar matrix set", "name": "e_menu", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -menu=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The name 'all' reads in all matrix files from the selected \n JASPAR matrix set. You can specify individual matrices by giving \n  their names with commas between then, such as: \n  'ma0001.1,ma0015*'. \n  The case of the names is not important. You can specify a file of \n  matrix names to read in by giving the name of the file holding the \n  matrix names with a '@' character in front of it, for example, \n  '@matrix.list'. \n  Blank lines and lines starting with a hash character or '!' are  ignored and all other lines are concatenated together with a comma \n  character ',' and then treated as the list of enzymes to search \n  for. \n  An example of a file of matrix names is: \n  ! my matrices \n  ma0001.1, ma0002.1 \n  ! other matrices \n  ma0010.1 \n  ma0032* \n  ma0053.1", "prompt": "Comma separated matrix list", "name": "e_matrices", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -matrices=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "If the matrix score is greater than or equal to this percentage \n then a hit will be reported", "prompt": "Threshold percentage", "name": "e_threshold", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -threshold=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "The names of any matrices to exclude from the 'matrices' \n list. Matrices are specified in the same way as for the \n  selection list.", "prompt": "Comma separated matrix list for exclusion", "name": "e_exclude", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -exclude=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If set then both the forward and reverse strands are searched", "prompt": "Scan both strands", "name": "e_both", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -both\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "jaspscan"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/jaspscan.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "jaspscan"}, {"comment": "This program carries out the Fitch-Margoliash\n\tand Least Squares methods, plus a variety of others of the\n\tsame family, with the assumption that all tip species are\n\tcontemporaneous, and that there is an evolutionary clock (in\n\teffect, a molecular clock). This means that branches of the\n\ttree cannot be of arbitrary length, but are constrained so\n\tthat the total length from the root of the tree to any species\n\tis the same.", "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabc3"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:distance"}], "description": "Fitch-Margoliash and Least Squares Methods with Evolutionary Clock", "title": "kitsch", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Consense output file", "name": "consense_outfile", "simple": null, "filenames": {"python": "\"consense.outfile\"", "perl": "\"consense.outfile\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Consense tree file", "name": "consense_treefile", "simple": null, "filenames": {"python": "\"consense.outtree\"", "perl": "\"consense.outtree\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Kitsch output file", "name": "outfile", "simple": null, "filenames": {"python": "\"kitsch.outfile\"", "perl": "\"kitsch.outfile\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Kitch tree file", "name": "treefile", "simple": null, "filenames": {"python": "\"kitsch.outtree\"", "perl": "\"kitsch.outtree\""}, "precond": {"python": "print_treefile", "perl": "$print_treefile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "kitsch", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"kitsch <kitsch.params\"", "perl": "\"kitsch <kitsch.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Give a file containing a distance matrix\n\t  obtained by distance matrix programs like prodist or\n\t  dnadist", "prompt": "Distances matrix File", "name": "infile", "ctrl": null, "simple": null, "argpos": "-5", "format": {"python": "\"ln -s \" + str(infile) + \" infile && \"", "perl": "\"ln -s $infile infile && \""}, "command": false, "precond": {"python": "infile != \"infile\"", "perl": "$infile ne \"infile\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipDistanceMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Fitch options", "name": "fitch_options", "children": [{"comment": null, "prompt": "Program method (D)", "name": "Method", "ctrl": null, "simple": null, "argpos": "1", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "kitsch.params"}, {"comment": null, "prompt": "Negative branch lengths allowed (-)", "name": "negative_branch", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"-\\n\")[ value ]", "perl": "($value) ? \"-\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "kitsch.params"}, {"comment": "For the Fitch-Margoliash method, which is the default method with this program, P is 2.0. For the Cavalli-Sforza and Edwards least squares method it should be set to 0 (so that the denominator is always 1). An intermediate method is also available in which P is 1.0, and any other value of P, such as 4.0 or -2.3, can also be used. This generates a whole family of methods.Please read the documentation (man distance).", "prompt": "Power (P)", "name": "power", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"P\\n\" +str( value ) +\"\\n\")[ value is not None and vdef != value ]", "perl": "(defined $value and $value != $vdef) ? \"P\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "kitsch.params"}]}, {"comment": null, "precond": null, "prompt": "Randomize options", "name": "jumble_options", "children": [{"comment": null, "prompt": "Randomize (jumble) input order (J)", "name": "jumble", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "( \"\" , \"J\\n\" + str( jumble_seed ) + \"\\n\"+str( jumble_number )+ \"\\n\")[ value ]", "perl": "($value) ? \"J\\\\n$jumble_seed\\\\n$jumble_number\\\\n\" : \"\""}, "command": false, "precond": {"python": "not user_tree", "perl": "not $user_tree"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "kitsch.params"}, {"comment": null, "prompt": "Random number seed (must be odd)", "name": "jumble_seed", "ctrl": {"python": "value >= 0 and (value % 2) != 0", "perl": "$value >= 0 and ($value % 2) != 0"}, "simple": null, "argpos": "19", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "jumble", "perl": "$jumble"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of times to jumble", "name": "jumble_number", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "jumble", "perl": "$jumble"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Bootstrap options", "name": "bootstrap", "children": [{"comment": null, "prompt": "Analyze multiple data sets (M)", "name": "multiple", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \"M\\n\"+str(multiple_number)+\"\\n\"+str(multiple_seed)+\"\\n\")[ value ]", "perl": "($value) ? \"M\\\\n$numtiple_number\\\\n$multiple_seed\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "kitsch.params"}, {"comment": null, "prompt": "How many data sets", "name": "multiple_number", "ctrl": {"python": "value <= 1000", "perl": "$value <= 1000"}, "simple": null, "argpos": "9", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "multiple", "perl": "$multiple"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Random number seed (must be odd)", "name": "multiple_seed", "ctrl": {"python": "value >= 0 and (value % 2) != 0", "perl": "$value >= 0 and ($value % 2) != 0"}, "simple": null, "argpos": "19", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "multiple", "perl": "$multiple"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Compute a consensus tree", "name": "consense", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\" , \" && cp infile kitsch.infile &&  cp kitsch.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" )[ value ]", "perl": "($value) ? \" && cp infile kitsch.infile &&  cp kitsch.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" : \"\""}, "command": false, "precond": {"python": "multiple and print_treefile", "perl": "$multiple and $print_treefile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": null, "name": "consense_confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "prompt": null, "name": "consense_terminal_type", "ctrl": null, "simple": null, "argpos": "-2", "format": {"python": "\"T\\n\"", "perl": "\"T\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "precond": null, "prompt": "User tree options", "name": "user_tree_opt", "children": [{"comment": "The U (User Tree) option requires a bifurcating tree, unlike FITCH, which requires an unrooted tree with a trifurcation at its base.If a tree with a trifurcation at the base is by mistake fed into the U option of KITSCH then some of its species (the entire rightmost furc, in fact) will be ignored and too small a tree read in. This should result in an error message and the program should stop.It is important to understand the difference between the User Tree formats for KITSCH and FITCH. You may want to use RETREE to convert a user tree that is suitable for FITCH into one suitable for KITSCH or vice versa.", "prompt": "Use User tree (default: No, search for best tree) (U)", "name": "user_tree", "ctrl": {"python": "not ( user_tree and jumble )", "perl": "not ( $user_tree and $jumble )"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"U\\n\" )[ value ]", "perl": "($value) ? \"U\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "kitsch.params"}, {"comment": "Note that the User Trees (used by option U) must be rooted trees (with a bifurcation at their base). If you take a user tree from FITCH and try to evaluate it in KITSCH, it must first be rooted. This can be done using RETREE", "prompt": "User Tree file", "name": "tree_file", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "( \"\" , \"cat \"+ str( value ) +\" >> intree && \" ) [ value is not None ]", "perl": "(defined $value) ? \"cat $tree_file >> intree && \" : \"\""}, "command": false, "precond": {"python": "user_tree", "perl": "$user_tree"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": "Tells the program to print a semi-graphical picture of the tree in the outfile.", "prompt": "Print out tree (3)", "name": "print_tree", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"3\\n\" ,\"\" )[ value ]", "perl": "($value) ? \"\" : \"3\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "kitsch.params"}, {"comment": "Tells the program to save the tree in a treefile (a standard representation of trees where the tree is specified by a nested pairs of parentheses, enclosing names and separated by commas).", "prompt": "Write out trees onto tree file (4)", "name": "print_treefile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"4\\n\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \"4\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "kitsch.params"}, {"comment": null, "prompt": "Print out the data at start of run (1)", "name": "printdata", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \"1\\n\" )[ value ]", "perl": "($value)? \"1\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "kitsch.params"}]}, {"comment": null, "precond": null, "prompt": "Other options", "name": "other_options", "children": [{"comment": null, "prompt": "Matrix format", "name": "triangular", "ctrl": null, "simple": null, "argpos": "1", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "kitsch.params"}, {"comment": "If the S (subreplication) option is in effect, the above degrees of freedom must be modified by noting that N is not n(n-1)/2 but is the sum of the numbers of replicates of all cells in the distance matrix read in, which may be either square or triangular. A further explanation of the statistical test of the clock is given in a paper of mine (Felsenstein, 1986).", "prompt": "Subreplicates (S)", "name": "subreplicates", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"S\\n\" )[ value ]", "perl": "($value) ? \"S\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "kitsch.params"}]}, {"comment": null, "prompt": null, "name": "confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "kitsch.params"}, {"comment": null, "prompt": null, "name": "terminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "kitsch.params"}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/phylip/doc/kitsch.html"], "type": "program", "name": "kitsch"}, {"comment": null, "homepage_links": ["http://molevol.cmima.csic.es/castresana/Ktreedist.html"], "_id": {"$oid": "51434da493546d52388cabc4"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:tree_analyser"}], "description": "Calculation of the minimum branch length distance (K tree score) between phylogenetic trees", "title": "Ktreedist", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file for table of results", "name": "output_res_f", "simple": null, "filenames": {"python": "\"*.tab\"", "perl": "\"*.tab\""}, "precond": {"python": "output_res or output_all", "perl": "$output_res or $output_all"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output file for table of partitions", "name": "output_part_f", "simple": null, "filenames": {"python": "\"*.part\"", "perl": "\"*.part\""}, "precond": {"python": "output_part or output_all", "perl": "$output_part or $output_all"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output file for comparison tree/s after scaling", "name": "output_comp_f", "simple": null, "filenames": {"python": "\"*.scaled\"", "perl": "\"*.scaled\""}, "precond": {"python": "output_comp or output_all", "perl": "$output_comp or $output_all"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "The program is supposed to run with one reference tree and one or several comparison trees. If the reference file contains more than one tree, only the first one will be used.", "precond": null, "prompt": "Input", "name": "input", "children": [{"comment": "This is the file that contains the tree to which you want to compare the comparison tree/s.Only NEWICK or NEXUS tree format are accepted by ktreedist.The input tree must be write in one line. for nexus tree the tree itself must be write in one line", "prompt": "Reference Tree", "name": "ref_tree", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -rt \"+str(value)", "perl": "\"-rt $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK", "NEXUS"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is the file that contains the tree or the set of trees you want to compare to the reference tree. They will be scaled to match as much as possible the reference tree.Only NEWICK or NEXUS tree format are accepted by ktreedist.The input tree must be write in one line. for nexus tree the tree itself must be write in one line", "prompt": "Comparison Tree", "name": "comp_tree", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" -ct \"+str(value)+\" \"", "perl": "\"-ct $value \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK", "NEXUS"], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "options", "children": [{"comment": "A file containing a table of results is generated.", "prompt": "Output file for table of results (-t)", "name": "output_res", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -t\")[ value ]", "perl": "($value) ? \" -t\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A file containing a table of partitions for each comparison tree is generated.", "prompt": "Output file for table of partitions (-p)", "name": "output_part", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -p\")[ value ]", "perl": "($value) ? \" -p\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A file containing the scaled comparison tree/s is generated.", "prompt": "Output file for comparison tree/s after scaling (-s)", "name": "output_comp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -s\")[ value ]", "perl": "($value) ? \" -s\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The symmetric difference is defined as the number of partitions that are not shared between two trees, \n\t\t\t\t\t\tthat is, the number of partitions of the first tree that are not present in the second tree plus the number of partitions \n\t\t\t\t\t\tof the second tree that are not present in the first tree.", "prompt": "Output symmetric difference (Robinson-Foulds) (-r)", "name": "output_rf", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -r\")[ value ]", "perl": "($value) ? \" -r\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The knowledge of the number of partitions may be useful to detect trees with polytomies.", "prompt": "Output number of partitions in the comparison tree/s (-n)", "name": "output_nbpf", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -n\")[ value ]", "perl": "($value) ? \" -n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Equivalent to all options.", "prompt": "Equivalent to all options (-a)", "name": "output_all", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -a\")[ value ]", "perl": "($value) ? \" -a\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "Version 1.0", "references": [{"url": null, "doi": null, "label": "Soria-Carrasco, V., Talavera, G., Igea, J., and Castresana, J. (2007). The K tree score: quantification of differences \n      \t\tin the relative branch length and topology of phylogenetic trees. Bioinformatics 23, 2954-2956."}], "source_links": ["http://molevol.cmima.csic.es/castresana/Ktreedist.html"], "env": [], "authors": "Victor Soria-Carrasco, Jose Castresana", "command": {"path": null, "value": "ktreedist"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/ktreedist/"], "type": "program", "name": "ktreedist"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabc5"}, "classifications": [{"type": "mobyle1", "classification": "display"}], "description": "Draws linear maps of DNA constructs", "title": "lindna", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graphout == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graphout == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graphout == \"ps\" or e_graphout == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graphout == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graphout == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "Commands to the lindna drawing program file", "name": "e_infile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -infile=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "LindnaMappingCommands", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Maximum number of groups (value greater than or equal to 1)", "name": "e_maxgroups", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -maxgroups=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum number of labels (value greater than or equal to 1)", "name": "e_maxlabels", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -maxlabels=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Draw a ruler", "name": "e_ruler", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -noruler\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Type of blocks", "name": "e_blocktype", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -blocktype=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Type of junctions between blocks", "name": "e_intersymbol", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -intersymbol=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Colour of junctions between blocks (enter a colour number) (value from 0 to 15)", "name": "e_intercolour", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -intercolour=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Horizontal junctions between ticks", "name": "e_interticks", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -interticks\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Interval between ticks in the ruler (value greater than or equal to 0)", "name": "e_gapsize", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -gapsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Vertical lines at the ruler's ticks", "name": "e_ticklines", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -ticklines\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Height of text. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively", "prompt": "Height of text multiplier (value greater than or equal to 0.0)", "name": "e_textheight", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -textheight=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Length of text. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively", "prompt": "Length of text multiplier (value greater than or equal to 0.0)", "name": "e_textlength", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -textlength=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Width of left margin. This is the region left to the groups where the names of the groups are displayed. Enter a number <1.0  or >1.0 to decrease or increase the size, respectively", "prompt": "Width of left margin multiplier (value greater than or equal to 0.0)", "name": "e_margin", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -margin=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Height of ticks. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively", "prompt": "Height of ticks multiplier (value greater than or equal to 0.0)", "name": "e_tickheight", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -tickheight=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Height of blocks. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively", "prompt": "Height of blocks multilpier (value greater than or equal to 0.0)", "name": "e_blockheight", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "15", "format": {"python": "(\"\", \" -blockheight=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Height of range ends. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively", "prompt": "Height of range ends multiplier (value greater than or equal to 0.0)", "name": "e_rangeheight", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "16", "format": {"python": "(\"\", \" -rangeheight=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Space between groups. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively", "prompt": "Space between groups mutliplier (value greater than or equal to 0.0)", "name": "e_gapgroup", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "17", "format": {"python": "(\"\", \" -gapgroup=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Space between text and ticks, blocks, and ranges. Enter a number <1.0 or >1.0 to decrease or increase the size,  respectively", "prompt": "Space between text and ticks, blocks, and ranges multiplier (value greater than or equal to 0.0)", "name": "e_postext", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "18", "format": {"python": "(\"\", \" -postext=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graphout output format", "name": "e_graphout", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "(\" -graphout=\" + str(vdef), \" -graphout=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "e_goutfile", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "lindna"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/lindna.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "lindna"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabc6"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Write a list file of the logical OR of two sets of sequences", "title": "listor", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "UsaList", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "firstsequences option", "name": "e_firstsequences", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -firstsequences=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "2,n"}, "paramfile": null}, {"comment": null, "prompt": "secondsequences option", "name": "e_secondsequences", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -secondsequences=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "2,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "The following logical operators combine the sequences in the following ways: \n  OR - gives all that occur in one set or the other \n  AND - gives only those which occur in both sets \n  XOR - gives those which only occur in one set or the other, but  not in both \n  NOT - gives those which occur in the first set except for those  that also occur in the second", "prompt": "Logical operator to combine sequence lists", "name": "e_operator", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -operator=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "The list of sequence names will be written to this list file", "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "listor"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/listor.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "listor"}, {"comment": null, "homepage_links": ["http://biology.st-andrews.ac.uk/cegg/lvb.htm"], "_id": {"$oid": "51434da493546d52388cabc7"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:parsimony"}], "description": "Reconstructing Evolution With Parsimony And Simulated Annealing", "title": "LVB", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Tree file", "name": "res", "simple": null, "filenames": {"python": "\"outtree\"", "perl": "\"outtree\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Results files", "name": "other_results", "simple": null, "filenames": {"python": "\"ini*\"", "perl": "\"ini*\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "lvb", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"lvb <lvb.params\"", "perl": "\"lvb <lvb.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment File", "name": "infile", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"ln -s \" + str(value) + \" infile; \"", "perl": "\"ln -s $value infile; \""}, "command": false, "precond": {"python": "infile != \"infile\"", "perl": "$infile ne \"infile\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["PHYLIPI"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Format is INTERLEAVED or SEQUENTIAL", "name": "format", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "lvb.params"}, {"comment": "A gap represented by the letter 'O' in the data matrix is always treated as a character state in its own right (fifth state). lvb can treat gaps represented by'-' in either of the following ways:Fifth state '-' is treated as equivalent to 'O'.Unknown '-' is treated as equivalent to '?', i.e., as an ambiguous site that may contain 'A' or 'C' or 'G' or 'T' or 'O'.'Fifth state' may give excessive weight to multi-site gaps, since each affected base will be counted as one event.", "prompt": "Treatment of gaps represented by '-'", "name": "gaps_treatment", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "lvb.params"}, {"comment": "When prompted for the random number seed, enter an integer in the range 0 to 900000000 inclusive. The default value is taken from the system clock and hence will vary from one analysis to the next, changing every second. The default is usually appropriate.", "prompt": "Seed for the random number generator", "name": "seed", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\\n\" , str(value) + \"\\n\" )[ value is not None ]", "perl": "(defined $value)? \"$value\\\\n\" : \"\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "lvb.params"}, {"comment": "Number of bootstrap replicates required as an integer in the range 1 to 1000 inclusive, or 0 for no bootstrapping (this server allows no more than 1000 replicates)", "prompt": "How many bootstrap replicates required (bootstrap)", "name": "bootstrap", "ctrl": {"python": "bootstrap <= 1000", "perl": "$bootstrap < 1000"}, "simple": null, "argpos": "5", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "lvb.params"}]}, "version": "2.3", "references": [{"url": null, "doi": null, "label": "Barker, D. 2004. LVB: Parsimony and simulated annealing in the search for phylogenetic trees. Bioinformatics, 20, 274-275."}], "source_links": ["http://biology.st-andrews.ac.uk/cegg/lvb.htm"], "env": [], "authors": "D. Barker", "command": {"path": null, "value": null}, "documentation_links": ["http://biology.st-andrews.ac.uk/cegg/lvb.htm"], "type": "program", "name": "lvb"}, {"comment": null, "homepage_links": ["http://mafft.cbrc.jp/alignment/software/"], "_id": {"$oid": "51434da493546d52388cabc8"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "Multiple alignment program for amino acid or nucleotide sequences.", "title": "mafft", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Alignment file", "name": "result", "simple": null, "filenames": {"python": "\"mafft.out\"", "perl": "\"mafft.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "output_format"}], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input Options", "name": "input_opt", "children": [{"comment": null, "prompt": "Sequences File ( a file containing several sequences ).", "name": "sequences", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" \" + str( sequences )", "perl": "\" $sequences\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequences type", "name": "seq_type", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Seed alignments given in alignment (fasta format) are aligned with sequences in input.  The alignment within every seed is preserved.", "precond": null, "prompt": "Use structural alignment(s)", "name": "seed", "children": [{"comment": "These sequences will be aligned with the 'input' sequences above, being used as a constraint.", "prompt": "Structural alignment 1", "name": "seed_1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --seed \"+str(value))[value is not None]", "perl": "(defined $value)? \" --seed $value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "These sequences will be aligned with the 'input' sequences above, being used as a constraint.", "prompt": "Structural alignment 1", "name": "seed_2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --seed \"+str(value))[value is not None]", "perl": "(defined $value)? \" --seed $value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "These sequences will be aligned with the 'input' sequences above, being used as a constraint.", "prompt": "Structural alignment 1", "name": "seed_3", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --seed \"+str(value))[value is not None]", "perl": "(defined $value)? \" --seed $value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>If there are unusual characters (e.g., U as selenocysteine in protein sequence), use the --anysymbol option.</html:p><html:p>It accepts any printable characters (U, O, #, $, %, etc.; 0x21-0x7e in the ASCII code), execpt for &gt; (0x3e).  \n    They are scored equivalently to X.  Gap is - (0x2d), as in the default mode.</html:p></html:div>", "prompt": "Allow unusual symbols (Selenocysteine \"U\", Inosine \"i\", non-alphabetical characters, etc.)", "name": "anysymbol", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --anysymbol \")[ value ]", "perl": "( value )? \"\" : \" --anysymbol \""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output Options", "name": "output_opt", "children": [{"comment": null, "prompt": "Output format:", "name": "output_format", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output order:", "name": "out_order", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( '' , ' --reorder ' )[ value == 'reorder' ]", "perl": "( value eq 'reorder')? \" --reorder \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced settings", "name": "advanced_settings", "children": [{"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:h2>Algorithms and parameters (unfinished)</html:h2>MAFFT offers various multiple alignment strategies.\n          They are classified into three types,\n          (<html:b>a</html:b>) the progressive method,\n          (<html:b>b</html:b>) the iterative refinement method with the WSP score, and\n          (<html:b>c</html:b>) the iterative refinment method using both the WSP and consistency scores.\n          In general,\n          there is a tradeoff between speed and accuracy.\n          The order of speed is<html:b>a</html:b>&gt;<html:b>b</html:b>&gt;<html:b>c</html:b>, whereas\n          the order of accuracy is<html:b>a</html:b>&lt;<html:b>b</html:b>&lt;<html:b>c</html:b>.\n          The results of benchmarks can be seen<html:a href=\"http://mafft.cbrc.jp/alignment/software/eval/accuracy.html\">here</html:a>.\n          The following are the detailed procedures for the major options of MAFFT.<html:h3 id=\"fftnsx\">(a) FFT-NS-1, FFT-NS-2 &#8212; Progressive methods</html:h3><html:img alt=\"prog.png\" height=\"163\" src=\"http://mafft.cbrc.jp/alignment/software/algorithms/prog.png\" width=\"382\" /><html:br />These are simple progressive methods like<html:a href=\"http://www.ebi.ac.uk/clustalw/\">ClustalW</html:a>.\n              By using the several new techniques described below,\n              these options can align a large number of sequences\n              (up to &#8764;5,000) on a standard desktop computer.\n              The qualities of the resulting alignments are shown<html:a href=\"http://mafft.cbrc.jp/alignment/software/eval/accuracy.html\">here</html:a>.\n              The detailed algorithms are described in Katoh et al. (2002).<html:ul><html:li><html:b>FFT-NS-1</html:b><html:br /><html:b><html:tt>mafft --retree 1<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />or<html:br /><html:b><html:tt>fftns --retree 1<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />is the simplest progressive option in MAFFT\n                          and one of the fastest methods currently available.\n                          The procedure is:\n                          (1) make a rough distance matrix by counting the number of\n                          shared 6-tuples (see below) between every sequence pair,\n                          (2) build a guide tree\n                          and (3) align the sequences according to the branching order.<html:p /></html:li><html:li><html:b>FFT-NS-2</html:b><html:br /><html:b><html:tt>mafft --retree 2<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />or<html:br /><html:b><html:tt>fftns<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />The distance matrix used in FFT-NS-1 is very approximate\n                          and unreliable.\n                          In FFT-NS-2,\n                          (4) the guide tree is re-computed from\n                          the FFT-NS-1 alignment,\n                          and (5) the second progressive alignment\n                          is carried out.</html:li></html:ul>The following techniques are used to improve the performance.<html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">FFT approximation.</html:span>(Not yet written) See Katoh et al. (2002).</html:p><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\"><html:i>k</html:i>-mer counting.</html:span>To accelerate the initial calculation of the distance matrix,\n                which requires a CPU time of<html:i>O</html:i>(<html:i>N</html:i><html:sup>2</html:sup>) steps,\n                a rough method similar to the 'quicktree' option of ClustalW\n                is adopted,\n                in which the number of<html:i>k</html:i>-mers shared by\n                a pair of sequences\n                is counted and regarded as an approximation\n                of the degree of similarity.\n                MAFFT uses the very rapid method proposed by Jones et al. (1992)\n                with a minor modification\n                (Katoh et al. 2002): (1) The 20 amino acids are compressed to 6\n                alphabets, according to Dayhoff et al. (1978),\n                and\n                (2) MAFFT performs the second progressive alignment (FFT-NS-2) in order to\n                improve the accuracy.</html:p><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Modified UPGMA.</html:span><html:a href=\"upg.html\">A modified version of UPGMA</html:a>is used to construct a guide tree,\n                which works well for handling fragment sequences.</html:p><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">The second progressive alignment.</html:span>The accuracy of the second progressive alignment (FFT-NS-2)\n                is slightly higher than that of the first progressive alignment (FFT-NS-1)\n                according to the<html:a href=\"http://mafft.cbrc.jp/alignment/software/eval/accuracy.html\">BAliBASE test</html:a>,\n                but the amount CPU time required by FFT-NS-2 is\n                approximately two times longer than that by FFT-NS-1.</html:p><html:h3>(b) FFT-NS-i, NW-NS-i &#8212; Iterative refinement method</html:h3><html:img alt=\"iter.png\" height=\"200\" src=\"http://mafft.cbrc.jp/alignment/software/algorithms/iter.png\" width=\"379\" /><html:br />The accuracy of progressive alignment\n                  can be improved\n                  by the iterative refinement method (Berger and Munson 1991, Gotoh 1993).\n                  A simplified version of<html:a href=\"\">PRRN</html:a>is implemented as the\n                  FFT-NS-i option of MAFFT.\n                  In FFT-NS-i,\n                  an initial alignment by FFT-NS-2 is subjected to\n                  an iterative refienment process.<html:ul><html:li><html:b>FFT-NS-i (max. 1,000 cycles)</html:b><html:br /><html:b><html:tt>mafft --maxiterate 1000<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />or<html:br /><html:b><html:tt>fftnsi --maxiterate 1000<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />The iterative refinement is repeated until\n                              no more improvement in the WSP score is made or the number of cycles reaches 1,000.<html:p /></html:li><html:li><html:b>FFT-NS-i (max. 2 cycles)</html:b><html:br /><html:b><html:tt>mafft --maxiterate 1000<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />or<html:br /><html:b><html:tt>fftnsi<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />As most of the quality of improvement is obtained in the early\n                              stage of the iteration, this option is also useful\n                              (default of the fftnsi script).</html:li></html:ul><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Objective function.</html:span>The weighted sum-of-pairs (WSP) score proposed by Gotoh is used.</html:p><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Tree-dependent partitioning.</html:span>(Not yet written)\n                    See Hirosawa et al.</html:p><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Effect of FFT.</html:span>To test the effect of the FFT approximation,\n                    we also implemented the NW-NS-x options,\n                    in which the FFT approximation is disabled, but the other procedures are the same\n                    as those in the corresponding FFT-NS-x.\n                    There was no significant reduction in the accuracy\n                    by introducing the FFT approximation\n                    (Katoh et al. 2002).</html:p><html:h3>(c) L-INS-i, E-INS-i, G-INS-i &#8212; Iterative refinement methods using WSP and consistency scores</html:h3><html:img alt=\"cons.png\" height=\"134\" src=\"http://mafft.cbrc.jp/alignment/software/algorithms/cons.png\" width=\"366\" /><html:br />In order to obtain more accurate alignments in extremely difficult cases,\n                      three new options, L-INS-i, G-INS-i and E-INS-i, have been added to\n                      recent versions (v.&#8805;5) of MAFFT.\n                      These options use\n                      a new objective function combining the WSP score (Gotoh) explained above\n                      and the COFFEE-like score (Notredame et al.),\n                      which evaluates the consistency between\n                      a multiple alignment and pairwise alignments (Katoh et al. 2005).<html:p id=\"GLE\">For pairwise alignment,\n                        three different types of algorithms are implemented,\n                        global alignment (Needleman-Wunsch), local alignment (Smith-Waterman)\n                        with affine gap costs (Gotoh) and\n                        local alignment with generalized affine gap costs (Altschul).\n                        The differences in the accuracy values among these methods are small\n                        for the currently available benchmarks, as shown<html:a href=\"http://mafft.cbrc.jp/alignment/software/eval/accuracy.html\">here</html:a>.\n                        However,\n                        each of them has different characteristics, according to the algorithm\n                        in the pairwise alignment stage:</html:p><html:ul><html:li id=\"einsi\"><html:b>E-INS-i</html:b><html:br /><html:b><html:tt>mafft --genafpair --maxiterate 1000<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />or<html:br /><html:b><html:tt>einsi<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />is suitable for alignments like this:<html:pre style=\"background-color: #F0F0F0; border: 0 solid #AAAAAA; font-size: 90%; font-weight: bold;\">oooooooooXXX------XXXX---------------------------------XXXXXXXXXXX-XXXXXXXXXXXXXXXooooooooooooo\n ---------XXXXXXXXXXXXXooo------------------------------XXXXXXXXXXXXXXXXXX-XXXXXXXX-------------\n -----ooooXXXXXX---XXXXooooooooooo----------------------XXXXX----XXXXXXXXXXXXXXXXXXooooooooooooo\n ---------XXXXX----XXXXoooooooooooooooooooooooooooooooooXXXXX-XXXXXXXXXXXX--XXXXXXX-------------\n ---------XXXXX----XXXX---------------------------------XXXXX---XXXXXXXXXX--XXXXXXXooooo--------</html:pre>where '<html:tt>X</html:tt>'s indicate alignable residues,\n                                  '<html:tt>o</html:tt>'s indicate unalignable residues and\n                                  '<html:tt>-</html:tt>'s indicate gaps.\n                                  Unalignable residues are left\n                                  unaligned\n                                  at the pairwise alignment stage,\n                                  because of the use of the generalized affine gap cost.\n                                  Therefore E-INS-i is applicable to a difficult problem such as RNA polymerase, which\n                                  has several conserved motifs embedded in long unalignable regions.\n                                  As E-INS-i has the minimum assumption of the three methods,\n                                  this is recommended if the nature of sequences to be aligned is not clear.\n                                  Note that E-INS-i assumes that the arrangement of the conserved motifs is shared by\n                                  all sequences.</html:li><html:li id=\"linsi\"><html:b>L-INS-i</html:b><html:br /><html:b><html:tt>mafft --localpair --maxiterate 1000<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />or<html:br /><html:b><html:tt>linsi<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />is suitable to:<html:pre style=\"background-color: #F0F0F0; border: 0 solid #AAAAAA; font-size: 90%; font-weight: bold;\">ooooooooooooooooooooooooooooooooXXXXXXXXXXX-XXXXXXXXXXXXXXX------------------\n --------------------------------XX-XXXXXXXXXXXXXXX-XXXXXXXXooooooooooo-------\n ------------------ooooooooooooooXXXXX----XXXXXXXX---XXXXXXXooooooooooo-------\n --------ooooooooooooooooooooooooXXXXX-XXXXXXXXXX----XXXXXXXoooooooooooooooooo\n --------------------------------XXXXXXXXXXXXXXXX----XXXXXXX------------------</html:pre>L-INS-i can align\n                          a set of sequences containing sequences flanking\n                          around one alignable domain.\n                          Flanking sequences are ignored in the pairwise alignment\n                          by the Smith-Waterman algorithm.\n                          Note that the input sequences are assumed to have\n                          only one alignable domain.\n                          In benchmark tests, the ref4 of BAliBASE corresponds to this.\n                          The other categories of BAliBASE also correspond to similar situations,\n                          because they have flanking sequences.\n                          L-INS-i also shows higher accuracy values for a part of SABmark and HOMSTRAD\n                          than G-INS-i, but we have not identified the reason for this.</html:li><html:li id=\"ginsi\"><html:b>G-INS-i</html:b><html:br /><html:b><html:tt>mafft --globalpair --maxiterate 1000<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />or<html:br /><html:b><html:tt>ginsi<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />is suitable to:<html:pre style=\"background-color: #F0F0F0; border: 0 solid #AAAAAA; font-size: 90%; font-weight: bold;\">XXXXXXXXXXX-XXXXXXXXXXXXXXX\n XX-XXXXXXXXXXXXXXX-XXXXXXXX\n XXXXX----XXXXXXXX---XXXXXXX\n XXXXX-XXXXXXXXXX----XXXXXXX\n XXXXXXXXXXXXXXXX----XXXXXXX</html:pre>G-INS-i assumes that entire region can be aligned\n                          and tries to align them globally using\n                          the Needleman-Wunsch algorithm;\n                          that is,\n                          a set of sequences of one domain\n                          must be extracted by truncating flanking\n                          sequences.\n                          In benchmark tests, SABmark and HOMSTRAD correspond to this.</html:li></html:ul><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Consistency score.</html:span>The COFFEE objective function was originally proposed\n                        by Notredame et al. (1998), and\n                        the extended versions are used in TCoffee and ProbCons.\n                        MAFFT also adopts a similar objective function, as described\n                        in Katoh et al. (2005).\n                        However,\n                        the consistency among three sequences\n                        (called 'library extension' in TCoffee)\n                        is currently not calculated in MAFFT,\n                        because the improvement in accuracy by library extension was limited to\n                        alignments consisting of a small number (&lt;10) of sequences\n                        in our preliminary tests.\n                        If library extention is needed, then please use<html:a href=\"http://igs-server.cnrs-mrs.fr/%7Ecnotred/Projects_home_page/t_coffee_home_page.html\">TCoffee</html:a>or<html:a href=\"http://probcons.stanford.edu/\">ProbCons</html:a>.</html:p><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Consistency + WSP.</html:span>Instead,\n                        the WSP score is summed with the consistency score in the\n                        objective function of MAFFT.\n                        The use of the WSP score\n                        has the merit that a pattern of gaps can be incorporated\n                        into the objective function.\n                        This is probably the reason why\n                        MAFFT achieves higher accuracy than\n                        ProbCons and TCoffee for alignments consisting of\n                        many (&#8764;10 - &#8764;100) sequences.\n                        This suggests that\n                        the pattern of gaps within a group\n                        to be aligned\n                        is important information\n                        when aligning two groups of proteins (and evaluating\n                        homology between distantly related protein families).</html:p></html:div>", "prompt": "Strategy:", "name": "strategy", "ctrl": null, "simple": null, "argpos": "0", "format": null, "command": true, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The BLOSUM62 matrix is adopted as a default scoring matrix, \n      because this showed slightly higher accuracy values than the \n      BLOSUM80, 45, JTT200PAM, 100PAM and Gonnet matrices in SABmark tests.", "prompt": "Scoring matrix for amino acid sequences:", "name": "amino_scm", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p style=\"color: red\">Switch it to '1PAM / &#954;=2' when aligning closely related DNA sequences.</html:p><html:p>The default scoring matrix is derived from Kimura's two-parameter model. \n      The ratio of transitions to transversions is set at 2 by default. \n      Other parameters can be used, but have not yet been tested.</html:p></html:div>", "prompt": "Scoring matrix for nucleotide sequences:", "name": "nuc_scm", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --kimura \"+str( value ) )[ value is not None and value!= vdef ]", "perl": "( defined $value and $value ne $vdef )\" --kimura $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Gap penalties for proteins.</html:span>The default gap penalties for amino acid alignments\n        have been changed in<html:span style=\"color: red\">v.4.0</html:span>.\n        Note that the current version of MAFFT returns\n        an entirely different alignment from v.&lt;4.0.\n        In v.4.0, two major gap penalties\n        (--op [gap open penalty]\n        and --ep [offset value, which functions like a gap extension penalty,\n        see the<html:a href=\"http://mafft.cbrc.jp/alignment/software/algorithms/algorithms.html\">mafft3 paper</html:a>for definition])\n        were tuned by applying the FFT-NS-2 option to a part of\n        the SABmark benchmark.\n        We adopted the parameter set (--op 1.53 --ep 0.123) optimized for\n        SABmark,\n        because this works better for other benchmark\n        (HOMSTRAD, PREFAB and BAliBASE)\n        tests than\n        the previous one (--ep 2.4 --ep 0.06).\n        Other parameters might work better in other situations.\n        Consistency-based options have more parameters\n        (L-INS-i has four more parameters and E-INS-i has six more parameters).\n        We determined these additional parameters so that the Smith-Waterman alignment function\n        used in L-INS-i\n        returns a local alignment similar to that generated by FASTA,\n        but we have not closely tuned them yet.\n        In our tests using SABmark,\n        the accuracy values can be improved by 2-3% by\n        tuning these parameters,\n        but this improvement may result from overfitting.</html:p><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Gap penalties for RNAs.</html:span>The default gap penalties for nucleotide alignment\n          have changed in<html:span class=\"red\">v.5.6</html:span>.\n          Note that the current version of MAFFT returns\n          an entirely different alignment from v.&lt;5.6.\n          In the former versions (v.&lt;5.6),\n          the default gap penalties for nucleotide alignments were set at the same values\n          as those for amino acid alignments.\n          According to<html:a href=\"http://projects.binf.ku.dk/pgardner/bralibase/\">BRAliBASE</html:a>,\n          these penalties result in\n          very bad alignments for RNAs.\n          The newer versions (v.&#8805;5.6) use a different penalties for nucleotide alignment;\n          the penalty values are set to three times larger than those for amino acids.\n          This is not yet the optimal value for BRAliBASE.\n          The BRAliBASE score can be improved by\n          closely tuning the penalty values, but we have not adopted the\n          optimized penalties, because we are not sure whether they are\n          applicable to a wide range of problems.</html:p></html:div>", "prompt": "Gap opening penalty (1.0 - 3.0):", "name": "gap_open_penalty", "ctrl": {"": "1.0 < value < 3.0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --op \"+str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef)? \" --op $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p style=\"color: red\">If long gaps are not expected, set it as 0.1 or larger value.</html:p></html:div>", "prompt": "Offset value (0.0 - 1.0):", "name": "offset", "ctrl": {"": "0.0 < value < 1.0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --ep \"+str( value ) )[ value is not None and value != 0.123 ]", "perl": "(defined $value and $value != $vdef)? \" --ep $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "6.849", "references": [{"url": null, "doi": "10.1093/bioinformatics/btq224", "label": "Katoh, Toh 2010 (Bioinformatics 26:1899-1900)\n          Parallelization of the MAFFT multiple sequence alignment program.\n          (describes the multithread version; Linux only)"}, {"url": null, "doi": "10.1007/978-1-59745-251-9_3", "label": "Katoh, Asimenos, Toh 2009 (Methods in Molecular Biology 537:39-64)\n             Multiple Alignment of DNA Sequences with MAFFT. In Bioinformatics for DNA Sequence Analysis edited by D. Posada\n             (outlines DNA alignment methods and several tips including group-to-group alignment and rough clustering of a large number of sequences)"}, {"url": null, "doi": "10.1186/1471-2105-9-212", "label": "Katoh, Toh 2008 (BMC Bioinformatics 9:212)\n             Improved accuracy of multiple ncRNA alignment by incorporating structural information into a MAFFT-based framework.\n             (describes RNA structural alignment methods)"}, {"url": null, "doi": "10.1093/bib/bbn013", "label": "Katoh, Toh 2008 (Briefings in Bioinformatics 9:286-298)\n             Recent developments in the MAFFT multiple sequence alignment program.\n             (outlines version 6; Fast Breaking Paper in Thomson Reuters' ScienceWatch)"}, {"url": null, "doi": "10.1093/bioinformatics/btl592", "label": "Katoh, Toh 2007 (Bioinformatics 23:372-374) Errata\n            PartTree: an algorithm to build an approximate tree from a large number of unaligned sequences.\n            (describes the PartTree algorithm)"}, {"url": null, "doi": "10.1093/nar/gki198", "label": "Katoh, Kuma, Toh, Miyata 2005 (Nucleic Acids Res. 33:511-518)\n             MAFFT version 5: improvement in accuracy of multiple sequence alignment.\n             (describes [ancestral versions of] the G-INS-i, L-INS-i and E-INS-i strategies)"}, {"url": null, "doi": "10.1093/nar/gkf436", "label": "Katoh, Misawa, Kuma, Miyata 2002 (Nucleic Acids Res. 30:3059-3066)\n            MAFFT: a novel method for rapid multiple sequence alignment based on fast Fourier transform.\n            (describes the FFT-NS-1, FFT-NS-2 and FFT-NS-i strategies)"}], "source_links": ["http://mafft.cbrc.jp/alignment/software/source.html"], "env": [], "authors": "Kazutaka Katoh", "command": {"path": null, "value": null}, "documentation_links": ["http://mafft.cbrc.jp/alignment/software/about.html"], "type": "program", "name": "mafft"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabc9"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Create random nucleotide sequences", "title": "makenucseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "Optional codon usage file. Nucleotide sequences will be created as triplets matching the frequencies in the file, with the  end trimmed to be in the correct reading frame.", "prompt": "Codon usage file (optional)", "name": "e_codonfile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -codonfile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Number of sequences created (value greater than or equal to 1)", "name": "e_amount", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -amount=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Length of each sequence (value greater than or equal to 1)", "name": "e_length", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -length=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do you want to make an insert", "name": "e_useinsert", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -useinsert\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "String that is inserted into sequence", "prompt": "Inserted string", "name": "e_insert", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -insert=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_useinsert"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Start point of inserted sequence (value greater than or equal to 1)", "name": "e_start", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -start=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_useinsert"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "makenucseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/makenucseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "makenucseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabca"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Create random protein sequences", "title": "makeprotseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "This file should be a pepstats output file. Protein sequences will be created with the composition in the pepstats  output file.", "prompt": "Pepstats program output file (optional)", "name": "e_pepstatsfile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -pepstatsfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "PepstatsReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Number of sequences created (value greater than or equal to 1)", "name": "e_amount", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -amount=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Length of each sequence (value greater than or equal to 1)", "name": "e_length", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -length=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do you want to make an insert", "name": "e_useinsert", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -useinsert\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "String that is inserted into sequence", "prompt": "Inserted string", "name": "e_insert", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -insert=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_useinsert"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Start point of inserted sequence (value greater than or equal to 1)", "name": "e_start", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -start=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_useinsert"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "makeprotseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/makeprotseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "makeprotseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabcb"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:gene_finding"}, {"type": "mobyle1", "classification": "sequence:nucleic:motifs"}], "description": "Finds matrix/scaffold recognition (MRS) signatures in DNA sequences", "title": "marscan", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "File for output of MAR/SAR recognition signature (MRS) regions. This contains details of the MRS in normal GFF format.  The MRS consists of two recognition sites, one of 8 bp and one of  16 bp on either sense strand of the genomic DNA, within 200 bp of  each other.", "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "marscan"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/marscan.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "marscan"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabcc"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit:feature_table"}], "description": "Write a sequence with masked features", "title": "maskfeat", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "By default any feature in the feature table with a type starting 'repeat' is masked. You can set this to be any feature  type you wish to mask. \n  See http://www.ebi.ac.uk/embl/WebFeat/ for a list of the EMBL  feature types and see Appendix A of the Swissprot user manual in  http://www.expasy.org/sprot/userman.html for a list of the Swissprot  feature types. \n  The type may be wildcarded by using '*'. \n  If you wish to mask more than one type, separate their names with  spaces or commas, eg: \n  *UTR repeat*", "prompt": "Type of feature to mask", "name": "e_type", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -type=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The region can be 'masked' by converting the sequence characters to lower-case, some non-EMBOSS programs e.g. fasta can  interpret this as a masked region. The sequence is unchanged apart  from the case change. You might like to ensure that the whole  sequence is in upper-case before masking the specified regions to  lower-case by using the '-supper' flag.", "prompt": "Change masked region to lower-case", "name": "e_tolower", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -tolower\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Character to use when masking. \n Default is 'X' for protein sequences, 'N' for nucleic sequences. \n  If the mask character is set to be the SPACE character or a null  character, then the sequence is 'masked' by changing it to  lower-case, just as with the '-lowercase' flag.", "prompt": "Character to mask with", "name": "e_maskchar", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -maskchar=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "not e_tolower"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "maskfeat"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/maskfeat.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "maskfeat"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabcd"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Write a sequence with masked regions", "title": "maskseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "Regions to mask. \n A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are separated by any non-digit, non-alpha character. \n  Examples of region specifications are: \n  24-45, 56-78 \n  1:45, 67=99;765..888 \n  1,5,8,10,23,45,57,99", "prompt": "Regions to mask (eg: 4-57,78-94)", "name": "e_regions", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -regions=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "The region can be 'masked' by converting the sequence characters to lower-case, some non-EMBOSS programs e.g. fasta can  interpret this as a masked region. The sequence is unchanged apart  from the case change. You might like to ensure that the whole  sequence is in upper-case before masking the specified regions to  lower-case by using the '-supper' flag.", "prompt": "Change masked region to lower-case", "name": "e_tolower", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -tolower\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Character to use when masking. \n Default is 'X' for protein sequences, 'N' for nucleic sequences. \n  If the mask character is set to be the SPACE character or a null  character, then the sequence is 'masked' by changing it to  lower-case, just as with the '-lowercase' flag.", "prompt": "Character to mask with", "name": "e_maskchar", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -maskchar=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "not e_tolower"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "maskseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/maskseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "maskseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabce"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise:local"}], "description": "Waterman-Eggert local alignment of two sequences", "title": "matcher", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['FASTA', 'MSF']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out2 option", "name": "e_outfile_out2", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['PAIR', 'MARKX0', 'MARKX1', 'MARKX2', 'MARKX3', 'MARKX10', 'SRS', 'SRSPAIR', 'SCORE', 'UNKNOWN', 'MULTIPLE', 'SIMPLE', 'MATCH']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "bsequence option", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": "This is the scoring matrix file used when comparing sequences. By default it is the file 'EBLOSUM62' (for proteins) or  the file 'EDNAFULL' (for nucleic sequences). These files are  found in the 'data' directory of the EMBOSS installation.", "prompt": "Matrix file", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "This sets the number of alternative matches output. By default only the highest scoring alignment is shown. A value of 2  gives you other reasonable alignments. In some cases, for example  multidomain proteins of cDNA and genomic DNA comparisons, there  may be other interesting and significant alignments.", "prompt": "Number of alternative matches (value greater than or equal to 1)", "name": "e_alternatives", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -alternatives=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The gap penalty is the score taken away when a gap is created. The best value depends on the choice of comparison  matrix. The default value of 14 assumes you are using the  EBLOSUM62 matrix for protein sequences, or a value of 16 and the  EDNAFULL matrix for nucleotide sequences.", "prompt": "Gap penalty (Positive integer)", "name": "e_gapopen", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -gapopen=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The gap length, or gap extension, penalty is added to the standard gap penalty for each base or residue in the gap. This is  how long gaps are penalized. Usually you will expect a few long  gaps rather than many short gaps, so the gap extension penalty  should be lower than the gap penalty. An exception is where one or  both sequences are single reads with possible sequencing errors  in which case you would expect many single base gaps. You can get  this result by setting the gap penalty to zero (or very low) and  using the gap extension penalty to control gap scoring.", "prompt": "Gap length penalty (Positive integer)", "name": "e_gapextend", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -gapextend=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output alignment file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the alignment output format", "name": "e_aformat_outfile", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -aformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "matcher"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/matcher.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "matcher"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabcf"}, "classifications": [{"type": "mobyle1", "classification": "alignment:consensus"}], "description": "Merge two large overlapping DNA sequences", "title": "megamerger", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "MegamergerReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "bsequence option", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Word size (value greater than or equal to 2)", "name": "e_wordsize", "ctrl": {"python": "value >= 2"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -wordsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "When a mismatch between the two sequence is discovered, one or other of the two sequences must be used to create the merged  sequence over this mismatch region. The default action is to  create the merged sequence using the sequence where the mismatch  is closest to that sequence's centre. If this option is used, then  the first sequence (seqa) will always be used in preference to  the other sequence when there is a mismatch.", "prompt": "Use the first sequence when there is a mismatch", "name": "e_prefer", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -prefer\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "megamerger"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/megamerger.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "megamerger"}, {"comment": null, "homepage_links": ["http://www.ebi.ac.uk/~lenov/meltinghome.html"], "_id": {"$oid": "51434da493546d52388cabd0"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:composition"}], "description": "enthalpy, entropy and melting temperature", "title": "MELTING", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": []}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "melting", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"melting -q -v\"", "perl": "\"melting -q -v\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Hybridisation type (-H)", "name": "hybridation_type", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -H\" + str(value)", "perl": "\" -H$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Nearest Neighbor parameters set (-A)", "name": "nnfile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -A\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -A$value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequence string (-S)", "name": "sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -S\" + str(value)", "perl": "\" -S$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Complementary sequence (-C)", "name": "complement_string", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -C\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -C$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Value must be greater than 0.0 and lower than 10.0", "prompt": "Salt concentration (-N)", "name": "salt_concentration", "ctrl": {"python": "value > 0.0 and value < 10.0", "perl": "$value > 0.0 and $value < 10.0"}, "simple": null, "argpos": "1", "format": {"python": "\" -N\" + str(value)", "perl": "\" -N$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Value must be greater than 0.0 and lower than 0.1", "prompt": "Nucleic acid concentration in excess (-P)", "name": "nucacid_concentration", "ctrl": {"python": "value > 0.0 and value < 0.1", "perl": "$value > 0.0 and $value < 0.1"}, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -P\" + str(value))[value is not None]", "perl": "(defined $value) ? \" -P$value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Nucleic acid correction factor (-F)", "name": "correction_factor", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -F\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -F$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Salt correction (-K)", "name": "salt_correction", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -K\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -K$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Force approximative temperature computation (-x)", "name": "approx", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -x\" )[ value ]", "perl": "($value) ? \" -x\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use parameters for dangling ends (dnadnade.nn) (-D)?", "name": "dangling_ends", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -Ddnadnade.nn \" )[ value ]", "perl": "($value) ? \" -Ddnadnade.nn \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use parameters for mismatches (dnadnamm.nn) (-M)?", "name": "mismatches", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -Mdnadnamm.nn \" )[ value ]", "perl": "($value) ? \" -Mdnadnamm.nn \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "4.1f", "references": [{"url": null, "doi": null, "label": "Nicolas Le Novere (2001), MELTING, computing the melting temperature of nucleic acid duplex. Bioinformatics 17(12), 1226-1227"}], "source_links": ["http://www.ebi.ac.uk/~lenov/SOFTWARES/"], "env": [], "authors": "N. Le Novere", "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/melting/melting.pdf"], "type": "program", "name": "melting"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabd1"}, "classifications": [{"type": "mobyle1", "classification": "alignment:consensus"}], "description": "Merge two overlapping sequences", "title": "merger", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['FASTA', 'MSF']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out2 option", "name": "e_outfile_out2", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['PAIR', 'MARKX0', 'MARKX1', 'MARKX2', 'MARKX3', 'MARKX10', 'SRS', 'SRSPAIR', 'SCORE', 'UNKNOWN', 'MULTIPLE', 'SIMPLE', 'MATCH']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "bsequence option", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": "This is the scoring matrix file used when comparing sequences. By default it is the file 'EBLOSUM62' (for proteins) or  the file 'EDNAFULL' (for nucleic sequences). These files are  found in the 'data' directory of the EMBOSS installation.", "prompt": "Matrix file", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Gap opening penalty (value from 0.0 to 100.0)", "name": "e_gapopen", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -gapopen=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Gap extension penalty (value from 0.0 to 10.0)", "name": "e_gapextend", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -gapextend=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output alignment file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the alignment output format", "name": "e_aformat_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -aformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "merger"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/merger.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "merger"}, {"comment": null, "homepage_links": ["http://www.bioinfo.rpi.edu/applications/mfold/"], "_id": {"$oid": "51434da493546d52388cabd2"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Prediction of RNA secondary structure", "title": "MFOLD", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output options", "name": "runtype", "children": [{"comment": null, "prompt": null, "name": "txt_out", "simple": null, "filenames": {"python": "\"*.out\"", "perl": "\"*.out\""}, "precond": {"python": "txt_format", "perl": "$txt_format"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Detailed outfile", "name": "det_out_html", "simple": null, "filenames": {"python": "\"*.det.html\"", "perl": "\"*.det.html\""}, "precond": {"python": "det_format  and html_format", "perl": "$det_format  and $html_format"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "MfoldDetailHtmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Detailed outfile", "name": "det_out", "simple": null, "filenames": {"python": "\"*.det\"", "perl": "\"*.det\""}, "precond": {"python": "det_format  and not html_format", "perl": "$det_format  and not $html_format"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Html output file", "name": "out_html", "simple": null, "filenames": {"python": "\"*.html\"", "perl": "\"*.html\""}, "precond": {"python": "html_format", "perl": "$html_format"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "MfoldHtmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "RNAML output file", "name": "out_rnaml", "simple": null, "filenames": {"python": "\"*.rnaml\"", "perl": "\"*.rnaml\""}, "precond": {"python": "rnaml_format", "perl": "$rnaml_format"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "2DStructure", "superclass": "AbstractText"}, "biotypes": ["RNA"], "biomoby_datatypes": [], "formats": ["RNAML"], "edam_types": [], "card": null}}, {"comment": null, "precond": null, "prompt": "Energy Dot plot", "name": "energy_param", "children": [{"comment": null, "prompt": "Energy dot plot output file", "name": "out_plot", "simple": null, "filenames": {"python": "\"*.plot\"", "perl": "\"*.plot\""}, "precond": {"python": "plot_format", "perl": "$plot_format"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Structure annotation output file", "name": "ann_plot", "simple": null, "filenames": {"python": "\"*.ann\"", "perl": "\"*.ann\""}, "precond": {"python": "ann_format", "perl": "$ann_format"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Helix num output file", "name": "hnum_plot", "simple": null, "filenames": {"python": "\"*.h-num\"", "perl": "\"*.h-num\""}, "precond": {"python": "hnum_format", "perl": "$hnum_format"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, {"comment": null, "precond": null, "prompt": "Structure file format", "name": "structure_format", "children": [{"comment": null, "prompt": "GIF output file", "name": "out_gif", "simple": null, "filenames": {"python": "\"*.gif\"", "perl": "*.gif"}, "precond": {"python": "gif_format", "perl": "$gif_format"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "PDF output file", "name": "out_pdf", "simple": null, "filenames": {"python": "\"*.pdf\"", "perl": "\"*.pdf\""}, "precond": {"python": "pdf_format", "perl": "$pdf_format"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Pdf", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Postscript output file", "name": "out_ps", "simple": null, "filenames": {"python": "\"*.ps\"", "perl": "\"*.ps\""}, "precond": {"python": "ps_format", "perl": "$ps_format"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "CT output file", "name": "out_ct", "simple": null, "filenames": {"python": "\"*.ct\"", "perl": "\"*.ct\""}, "precond": {"python": "ct_format", "perl": "$ct_format"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "2DStructure", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["CT"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "XRNA_ss output file", "name": "out_ss", "simple": null, "filenames": {"python": "\"*.ss-count\"", "perl": "\"*.ss-count\""}, "precond": {"python": "ss_format", "perl": "$ss_format"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "2DStructure", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["SS"], "edam_types": [], "card": null}}]}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "mfold", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"mfold\"", "perl": "\"mfold\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "SEQ : The sequence file may contain multiple sequences.\n\t      At present, the mfold script will fold the first sequence by default.", "prompt": "Sequence File (SEQ)", "name": "SEQ", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" SEQ=\" + str(value)", "perl": "\" SEQ=$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["IG", "GENBANK", "EMBL"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "RNA or DNA (NA)", "name": "NA", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\" , \" NA=\" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" NA=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "It indicates whether a linear or circular nucleic acid is being folded.", "prompt": "Sequence type  (LC)", "name": "LC", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\" , \" LC=\" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" LC=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control options", "name": "control", "children": [{"comment": null, "prompt": "Temperature (T)", "name": "T", "ctrl": {"python": "value <= 100 and value >= 0", "perl": "$value <= 100 and $value >= 0"}, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" T=\" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" T=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is the percent suboptimality for computing the energy dot plot and suboptimal foldings. The default value is 5%. This parameter controls the value of the free energy increment, delta (deltaG). Delta of deltaG is set to P% of deltaG, computed minimum free energy. The energy dot plot shows only those base pairs that are in foldings with free energy minus or equal to deltaG plus delta (deltaG). Similarly, the free energies of computed foldings are in the range from deltaG to deltaG plus delta (deltaG). No matter the value of P, mfold currently keeps delta (deltaG) in the range [1,12] (kcal/mole).", "prompt": "Percent (P)", "name": "P", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" P=\"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" P=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Na+ molar concentration (NA_CONC)", "name": "NA_CONC", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" NA_CONC=\" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" NA_CONC=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Mg++ molar concentration (MG_CONC)", "name": "MG_CONC", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" MG_CONC=\" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" MG_CONC=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is the window parameter that controls the number of foldings that are automatically computed by mfold . `W' may be thought of as a distance parameter. The distance between 2 base pairs, i.j and i'.j' may be defined as max{|i-i'|,|j-j'|}. Then if k-1 foldings have already been predicted by mfold , the kth folding will have at least W base pairs that are at least a distance W from any of the base pairs in the first k-1 foldings. As W increases, the number of predicted foldings decreases. If W is not specified, mfold selects a value by default based on sequence length.", "prompt": "Window parameter  (W)", "name": "W", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" W=\" + str(value))[ value is not None ]", "perl": "(defined $value) ? \" W=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A base pair i.j will not be allowed to form (in linear RNA) if j-i > MAXBP. For circular RNA, a base pair i.j cannot form if min{j-i,n+i-j} > MAXBP . Thus small values of MAXBP ensure that only short range base pairs will be predicted. By default, MAXBP=+infinity, indicating no constraint.", "prompt": "Max base pair distance (MAXBP)", "name": "MAXBP", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" MAXBP=\" + str(value))[ value is not None ]", "perl": "(defined $value) ? \" MAXBP=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum bulge/interior loop size (MAX_LP)", "name": "MAX_LP", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" MAX_LP=\" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" MAX_LP=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum asymmetry of a bulge/interior loop (MAX_AS)", "name": "MAX_AS", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" MAX_AS=\" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" MAX_AS=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "MAX : This is the maximum number of foldings that mfold will compute (50 by default). It is better to limit the number of foldings by careful selection of the P and W parameters.", "prompt": "Maximum number of foldings to be computed (MAX)", "name": "MAX", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" MAX=\" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" MAX=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This parameter currently takes on 3 values.- `none' : secondary structures are drawn without any special annotation. Letters or outline are in black, while base pairs are red lines or dots for GC pairs and blue lines or dots for AU and GU pairs.- `p-num' : Colored dots, colored base characters or a combination are used to display in each folding how well-determined each base is according to the P-num values in the `fold_name.ann' file.- `ss-count' : Colored dots, colored base characters or a combination are used to display in each folding how likely a base is to be single-stranded according to sample statistics stored in the `fold_name.ss-count' file.", "prompt": "Structure annotation type (ANN)", "name": "ANN", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\" , \" ANN=\" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" ANN=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Structure display mode (MODE)", "name": "MODE", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\" , \" MODE=\" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" MODE=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Structure rotation angle (ROT_ANG)", "name": "ROT_ANG", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" ROT_ANG=\" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" ROT_ANG=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "5' base number (START)", "name": "START", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" START=\" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" START=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "3' base number  (STOP)", "name": "STOP", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" STOP=\" + str(value))[ value is not None ]", "perl": "(defined $value) ? \" STOP=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "AUX : (optional) This is the name of an auxiliary input file of folding\n\t\t  constraints. If this parameter is not used, mfold looks for a file\n\t\t  named `fold_name.aux'. If this file exists and is not empty, then it\n\t\t  is interpreted as a constraint file. Thus constraints may be used\n\t\t  without the use of this command line parameter.Fill the box or the file with constraints (1 constraint per line) You may:1. force bases i,i+1,...,i+k-1 to be double stranded by entering:F   i   0   k2. force consecutive base pairs i.j,i+1.j-1, ...,i+k-1.j-k+1 by entering:F   i   j   k3. force bases i,i+1,...,i+k-1 to be single stranded by entering:P   i   0   k4. prohibit the consecutive base pairsi.j,i+1.j-1, ...,i+k-1.j-k+1 by entering:P   i   j   k5. prohibit bases i to j from pairing with bases k to l by entering:P   i-j   k-l", "prompt": "Constraints File (AUX)", "name": "AUX", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" AUX=\" + str(value) )[ value is not None]", "perl": "(defined $value) ? \" AUX=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "MfoldFoldingConstraints", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "runtype", "children": [{"comment": null, "prompt": "Text output file", "name": "txt_format", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Detailed output file", "name": "det_format", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Html output file", "name": "html_format", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" RUN_TYPE=html\")[ value ]", "perl": "($value) ? \" RUN_TYPE=html\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The RNAML (RNA Markup Language) was developed by a consortium of investigators and is a proposed syntax for RNA information files. A description was published in 2002:A. Waugh, P. Gendron, R. Altman, J.W. Brown, D. Case, D. Gautheret, S.C. Harvey, N. Leontis, J. Westbrook, E. Westhof, M. Zuker, and\nF. Major RNAML: A standard syntax for exchanging RNA information. RNA   8 (6), 707-717, (2002)", "prompt": "RNAML output file", "name": "rnaml_format", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Energy Dot plot", "name": "energy_param", "children": [{"comment": "This is a text file that contains all the\nbase pairs on the energy dot plot , organized into helices for which Delta G(i,j) is constant. The first record is a header, and each subsequent record\ndescribes a single helix. The records are usually sorted by Delta G(i,j) and are often filtered so that short helices or isolated base pairs (helices of length 1) in suboptimal foldings are removed.", "prompt": "Energy dot plot output file", "name": "plot_format", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Structure annotation output file", "name": "ann_format", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This file is the same as plot file, except that the energy column is replaced by an h-num column. These files are usually sorted by h-num; lowest to highest, or best determined to worst determined. Often, only helices in optimal foldings are retained.", "prompt": "Helix num output file", "name": "hnum_format", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Structure file format", "name": "structure_format", "children": [{"comment": "A graphics file that ends with the suffix .gif should be displayed directly on the page of your web browser.", "prompt": "GIF output file", "name": "gif_format", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "PDF output file", "name": "pdf_format", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "PostScript is a programming language that is used to describe output for printing and display. It was developed by Adobe Systems. It is common to have PostScript capability on most printers. Programs such as Ghostscript, Ghostview and GSview can be used to display PostScript files(http://www.cs.wisc.edu/~ghost/\").", "prompt": "Postscript output file", "name": "ps_format", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The '.ct file' contains the nucleic acid sequence and base pairing information from which a structure plot may be computed. The mfold software and mfold web servers use the \"sir_graph_ng\" program to create Postscript, jpg and png images from .ct files. \"sir_graph_ng\" is part of the mfold_util package that may be obtained here: http://www.bioinfo.rpi.edu/~zukerm/export/.", "prompt": "CT output file", "name": "ct_format", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is an input file for the XRNA program by Bryn Weiser and Harry Noller. \n                The new Java version is available from UC Santa Cruz RNA Center web site: \n                href=\"http://rna.ucsc.edu/rnacenter/xrna/xrna.html\". The\n                ss file can be regarded as an expanded ct file. It contains base and connect information as \n                well a coordinates for plotting the bases.", "prompt": "XRNA_ss output file", "name": "ss_format", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}]}, "version": "3.2", "references": [{"url": null, "doi": null, "label": "M. Zuker, D.H. Mathews and D.H. Turner Algorithms and Thermodynamics for RNA Secondary Structure Prediction: A Practical Guide in RNA Biochemistry and Biotechnology, J. Barciszewski and B.F.C. Clark, eds., NATO ASI Series, Kluwer Academic Publishers, (1999)"}], "source_links": ["http://www.bioinfo.rpi.edu/~zukerm/export/"], "env": [], "authors": "M. Zuker", "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/mfold/index.html"], "type": "program", "name": "mfold"}, {"comment": "MIX is a general parsimony program which carries out the Wagner and Camin-Sokal parsimony methods in mixture, where each character can have its method specified separately. The program defaults to carrying out Wagner parsimony.", "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabd3"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:parsimony"}], "description": "Mixed method parsimony", "title": "mix", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Mix output file", "name": "outfile", "simple": null, "filenames": {"python": "\"mix.outfile\"", "perl": "\"mix.outfile\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Mix tree file", "name": "treefile", "simple": null, "filenames": {"python": "\"mix.outtree\"", "perl": "\"mix.outtree\""}, "precond": {"python": "print_treefile", "perl": "$print_treefile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Consense output file", "name": "consense_outfile", "simple": null, "filenames": {"python": "\"consense.outfile\"", "perl": "\"consense.outfile\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Consense tree file", "name": "consense_treefile", "simple": null, "filenames": {"python": "\"consense.outtree\"", "perl": "\"consense.outtree\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "mix", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\" && mix <mix.params\"", "perl": "\" && mix <mix.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Input File", "name": "infile", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"ln -s \"+ str( infile ) + \" infile \"", "perl": "\"ln -s $infile infile; \""}, "command": false, "precond": {"python": "infile != \"infile\"", "perl": "$infile ne \"infile\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipDiscreteCharMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Ancestral options", "name": "ancestral_opt", "children": [{"comment": "Give a ancestors file whenever you enable this parameter", "prompt": "Use ancestral states (A)", "name": "use_ancestral_state", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"A\\n\")[ value ]", "perl": "($value) ? \"A\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "mix.params"}, {"comment": "The A (Ancestral states) option. This indicates that we are specifying the ancestral states for each character.In the menu the ancestors (A) option must be selected. An ancestral states input file is read, whose default name is ancestors.It contains a line or lines giving the ancestral states for each character. These may be 0, 1 or ?the latter indicating that the ancestral state is unknown.An example is: 001??11The ancestor information can be continued to a new line and can have blanks between any of the characters in the same way that species character data can.", "prompt": "Ancestors file", "name": "ancestors_file", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "( \"\" , \" && ln -s \" + str( ancestors_file ) + \" ancestors\")[ value is not None ]", "perl": "(defined $value) ? \" && ln -s $ancestors_file ancestors\" : \"\""}, "command": false, "precond": {"python": "use_ancestral_state", "perl": "$use_ancestral_state"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "AncestorsFile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Mix options", "name": "mix_opt", "children": [{"comment": "Only if Use Mixed method is disabled.", "prompt": "Parsimony method (P)", "name": "parsimony_method", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"P\\n\" )[ value == \"camin\" ]", "perl": "($value eq \"camin\") ? \"P\\\\n\" : \"\""}, "command": false, "precond": {"python": "not use_mixed", "perl": "not $use_mixed"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "mix.params"}, {"comment": "Give a mixure file whenever you choose Mixed method", "prompt": "Use Mixed method (X)", "name": "use_mixed", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"X\\n\")[ value ]", "perl": "($value) ? \"X\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "mix.params"}, {"comment": "The X (miXture) option. Move, and Penny the user can specify for each character which parsimony method is in effect.This is done by selecting menu option X (not M) and having an input mixture file . It contains a line or lines with and one letter for each character.These letters are C or S if the character is to be reconstructed according to Camin-Sokal parsimony, W or ? if the character is to be reconstructed according to Wagner parsimony.So if there are 20 characters the line giving the mixture might look like this:WWWCC WWCWCNote that blanks in the sequence of characters (after the first ones that are as long as the species names) will be ignored, and the information can go on to a new line at any point. So this could equally well have been specified byWWCCCWWCWC", "prompt": "Mixture file", "name": "mixture_file", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "( \"\" , \" && ln -s \" + str( mixture_file ) + \" mixture\")[ value is not None ]", "perl": "(defined $value) ? \" && ln -s $mixture_file mixture\" : \"\""}, "command": false, "precond": {"python": "use_mixed", "perl": "$use_mixed"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "MixturePattern", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Randomize and Multiple data set options", "name": "jumble_dataset", "children": [{"comment": null, "prompt": "I want to", "name": "jumble_or_dataset", "ctrl": null, "simple": null, "argpos": "9", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If you choose Analyze multiple data sets, you must indicate the number of sets you have.", "prompt": "number of data set", "name": "data_nb", "ctrl": {"python": "value > 0 and value <= 1000", "perl": "$value > 0 and $value <= 1000"}, "simple": null, "argpos": "9", "format": null, "command": false, "precond": {"python": "jumble_or_dataset == 'D'", "perl": "$jumble_or_dataset eq 'D'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Random number seed (must be odd)", "name": "seed", "ctrl": {"python": "value >= 0 and (value % 2) != 0", "perl": "$value >= 0 and ($value % 2) != 0"}, "simple": null, "argpos": "9", "format": null, "command": false, "precond": {"python": "jumble_or_dataset", "perl": "$jumble_or_dataset"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of times to jumble", "name": "times", "ctrl": {"python": "times * (1, data_nb)[data_nb is not None] <= 100000", "perl": "($times * (defined $data_nb) ? $data_nb : 1) <= 100000"}, "simple": null, "argpos": "9", "format": null, "command": false, "precond": {"python": "jumble_or_dataset is not None", "perl": "defined $jumble_or_dataset"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "jumble", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "'J\\n' + str( seed ) + \"\\n\" + str( times ) +\"\\n\"", "perl": "\"J\\\\n$seed\\\\n$times\\\\n\""}, "command": false, "precond": {"python": "( jumble_or_dataset is not None ) and ( jumble_or_dataset == \"J\" )", "perl": "( defined $jumble_or_dataset ) and ( $jumble_or_dataset  eq \"J\" )"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "mix.params"}, {"comment": null, "prompt": null, "name": "multiple_dataset", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\"M\\nD\\n\" + str( data_nb ) + \"\\n\" + str( seed ) +\"\\n\" + str( times ) +\"\\n\"", "perl": "\"M\\nD\\n\" + str( data_nb ) + \"\\n\" + str( seed ) +\"\\n\" + str( times ) +\"\\n\""}, "command": false, "precond": {"python": "( jumble_or_dataset is not None ) and ( jumble_or_dataset == \"D\" )", "perl": "( defined $jumble_or_dataset ) and ( $jumble_or_dataset eq 'D')"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "mix.params"}, {"comment": null, "prompt": "Compute a consensus tree", "name": "consense", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\" , \" && cp infile mix.infile &&  cp mix.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\")[ value ]", "perl": "($value) ? \" && cp infile mix.infile &&  cp mix.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" : \"\""}, "command": false, "precond": {"python": "jumble_or_dataset == 'D' and print_treefile", "perl": "$jumble_or_dataset eq 'D' and $print_treefile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "User tree options", "name": "user_tree_opt", "children": [{"comment": "The user-defined trees supplied if you use the U option must be given as rooted trees with two-way splits (bifurcations)", "prompt": "Use User tree (default: search for best tree) (U)", "name": "user_tree", "ctrl": {"python": "not( user_tree and jumble )", "perl": "not ( $user_tree and $jumble )"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"U\\n\" )[ value ]", "perl": "($value) ? \"U\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "mix.params"}, {"comment": "Give a tree whenever the infile does not already contain the tree.", "prompt": "User Tree file", "name": "tree_file", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "( \"\" , \" && ln -s \" + str( tree_file ) + \" intree\")[ value is not None ]", "perl": "(defined $value)? \" && ln -s $tree_file intree\" : \"\""}, "command": false, "precond": {"python": "user_tree", "perl": "$user_tree"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Give this information whenever the infile does not already contain the tree.", "prompt": "How many tree(s) in the User Tree file", "name": "tree_number", "ctrl": null, "simple": null, "argpos": "-2", "format": {"python": "\" && echo \"+ str( value ) + \">> infile\"", "perl": "\" && echo $value >> infile\""}, "command": false, "precond": {"python": "tree_file", "perl": "$tree_file"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": "Tells the program to print a semi-graphical picture of the tree in the outfile.", "prompt": "Print out tree (3)", "name": "print_tree", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"3\\n\" ,\"\" )[ value ]", "perl": "($value) ? \"\" : \"3\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "mix.params"}, {"comment": null, "prompt": "Print out steps in each character (4)", "name": "print_step", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"4\\n\" )[ value ]", "perl": "($value) ? \"4\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "mix.params"}, {"comment": null, "prompt": "Print states at all nodes of tree (5)", "name": "print_states", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"5\\n\" )[ value ]", "perl": "($value) ? \"5\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "mix.params"}, {"comment": "Tells the program to save the tree in a treefile (a standard representation of trees where the tree is specified by a nested pairs of parentheses, enclosing names and separated by commas).", "prompt": "Write out trees onto tree file (6)", "name": "print_treefile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"6\\n\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \"6\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": "mix.params"}, {"comment": null, "prompt": "Print out the data at start of run (1)", "name": "printdata", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"1\\n\" )[ value ]", "perl": "($value) ? \"1\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "mix.params"}]}, {"comment": null, "precond": null, "prompt": "Parsimony options", "name": "pars_opt", "children": [{"comment": null, "prompt": "Use Threshold parsimony (T)", "name": "use_threshold", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \"T\\n\" +str( threshold ) +\"\\n\")[ value ]", "perl": "($value) ? \"T\\\\n$threshold\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "mix.params"}, {"comment": null, "prompt": "Threshold parsimony value", "name": "threshold", "ctrl": {"python": "threshold >= 1", "perl": "$threshold >= 1"}, "simple": null, "argpos": "2", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "use_threshold", "perl": "$use_threshold"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "mix.params"}]}, {"comment": null, "precond": null, "prompt": "Other options", "name": "other_options", "children": [{"comment": null, "prompt": "Outgroup root species (O)", "name": "outgroup", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"O\\n\" + str( value ) + \"\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"O\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "mix.params"}]}, {"comment": null, "prompt": null, "name": "confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"y\\n\"", "perl": "\"y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "mix.params"}, {"comment": null, "prompt": null, "name": "terminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "mix.params"}, {"comment": null, "prompt": null, "name": "consense_confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "prompt": null, "name": "consense_terminal_type", "ctrl": null, "simple": null, "argpos": "-2", "format": {"python": "\"T\\n\"", "perl": "\"T\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/phylip/doc/mix.html"], "type": "program", "name": "mix"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabd4"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:likelihood"}], "description": "Improving ML tree searching with PhyML 3", "title": "morePhyML", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "outfile", "simple": null, "filenames": {"python": "\"*_morephyml_stats.txt\"", "perl": "\"*_morephyml_stats.txt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output tree", "name": "outtree", "simple": null, "filenames": {"python": "\"*_morephyml_tree.txt\"", "perl": "\"*_morephyml_tree.txt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Sequence Alignment", "name": "alignment", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -i \"+str(value)", "perl": "\"-i $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["PHYLIPI"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Data type (-d)", "name": "seqtype", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -d \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -d $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control Options", "name": "control_opt", "children": [{"comment": null, "prompt": "Nucleotide substitution model (-m)", "name": "ntmodel", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -m \"+str(value))[value != vdef]", "perl": "($value ne $vdef) ? \" -m $value\" : \"\""}, "command": false, "precond": {"python": "seqtype == \"nt\"", "perl": "$seqtype eq \"nt\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Amino-acid substitution model (-m)", "name": "aamodel", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -m \"+str(value))[value != vdef]", "perl": "($value ne $vdef) ? \" -m $value\" : \"\""}, "command": false, "precond": {"python": "seqtype == \"aa\"", "perl": "$seqtype eq \"aa\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Estimated transition/transversion ratio for DNA sequences? (-t)", "name": "tstvratio1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -t e\")[ value ]", "perl": "($value) ? \" -t e\" : \"\""}, "command": false, "precond": {"python": "seqtype == \"nt\"", "perl": "$seqtype eq \"nt\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "User transition/transversion ratio for DNA sequences? (-t)", "name": "tstvratio2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -t \"+str(value))[ value is not None ]", "perl": "(defined $value ) ? \" -t $value\" : \"\""}, "command": false, "precond": {"python": "seqtype == \"nt\" and not tstvratio1", "perl": "$seqtype eq \"nt\" and not $tstvratio1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Estimated proportion of invariable sites? (-v)", "name": "propinvar1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -v e\")[ value ]", "perl": "($value) ? \" -v e\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "User proportion of invariable sites? (-v)", "name": "propinvar2", "ctrl": {"python": "value >= 0 and value < 1", "perl": "$value >= 0 and $value < 1"}, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -v \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -v $value\" : \"\""}, "command": false, "precond": {"python": "not propinvar1", "perl": "not $propinvar1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of relative substitution rate categories (-c)", "name": "nbsubstcat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -c \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -c $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Estimated Gamma distribution parameter? (-a)", "name": "gamma1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -a e\")[value]", "perl": "($value) ? \" -a e\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "User gamma distribution parameter? (-a)", "name": "gamma2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -a \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -a $value\" : \"\""}, "command": false, "precond": {"python": "not gamma1", "perl": "not $gamma1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Equilibrium character frequencies (-f)", "name": "frequencies", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -f \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -f $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Starting tree filename (u)", "name": "usertreefile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -u \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -u $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Most parsimonious starting tree (-p)", "name": "parsimoniousTree", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -p\")[value]", "perl": "(defined $value) ? \" -p\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of random starting trees to be used (-n)", "name": "randomNumber", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -n \" + str(value))[value is not None]", "perl": "(defined $value) ? \" -n $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "First tree swapping (-s)", "name": "tree_swapping", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -s \"+str(value))[value is not None and value !=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -s $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Branch support (-b)", "name": "branch_support", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -b \"+str(value))[value is not None and value !=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -b $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Write the likelihood for each character (-l)", "name": "likelihoodCar", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -l\")[value]", "perl": "(defined $value) ? \" -l\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Write the results outputed by the first run of phyml (-x)", "name": "firstRun", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -x\")[value]", "perl": "(defined $value) ? \" -x\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.0", "references": [{"url": null, "doi": null, "label": "Criscuolo A (2011) morePhyML: improving the phylogenetic tree space\n\texploration with PhyML 3. Molecular Phylogenetics and Evolution."}, {"url": null, "doi": null, "label": "Guindon S, Dufayard JF, Lefort V, Anisimova M, Hordijk W, Gascuel O\n\t(2010) New algorithms and methods to estimate maximum-likelihood\n\tphylogenies: assessing the performance of PhyML 3.0. Syst Biol\n\t59:307-321."}, {"url": null, "doi": null, "label": "Guindon, S. and Gascuel, O. (2003) A simple, fast and accurate algorithm to estimate large phylogenies by maximum likelihood Syst. Biol., 52, 696-704"}], "source_links": ["ftp://ftp.pasteur.fr/pub/gensoft/projects/morePhyML/"], "env": [], "authors": "Alexis Criscuolo", "command": {"path": null, "value": "morePhyML"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/morePhyML/morePhyML_doc.pdf"], "type": "program", "name": "morePhyML"}, {"comment": null, "homepage_links": ["http://bioinfo.lifl.fr/mreps/"], "_id": {"$oid": "51434da493546d52388cabd5"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:repeats"}], "description": "Algorithm for finding tandem repeats in DNA sequences", "title": "mreps", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "XML output file", "name": "xmlout", "simple": null, "filenames": {"python": "str(xml)", "perl": "$xml"}, "precond": {"python": "xml is not None", "perl": "$xml"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "MrepsXmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Query Sequence file", "name": "query", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "\" -fasta \"+str(value)", "perl": "\" -fasta $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Integer value", "prompt": "Specifies the resolution (-res)", "name": "err", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -res \" + str(value) )[ value is not None]", "perl": "(defined $value ) ? \" -res $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Integer value", "prompt": "Specifies starting position (-from)", "name": "from_v", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -from \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -from $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Integer value", "prompt": "Specifies end position (-to)", "name": "to", "ctrl": {"python": "value >= from_v", "perl": "$value >= $from_v"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -to \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -to $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Integer value", "prompt": "Processes by sliding windows of size 2*n overlaping by n (-win)", "name": "win", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -win \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -win $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Integer value", "prompt": "Report repetitions whose size is at least n (-minsize)", "name": "minsize", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -minsize \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -minsize $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Integer value", "prompt": "Report repetitions whose size is at most n (-maxsize)", "name": "maxsize", "ctrl": {"python": "value >= minsize", "perl": "$value >= $minsize"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -maxsize \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -maxsize $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Integer value", "prompt": "Report repetitions whose period is at least n (-minperiod)", "name": "minperiod", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -minperiod \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -minperiod $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Integer value", "prompt": "Report repetitions whose period is at most n (-maxperiod)", "name": "maxperiod", "ctrl": {"python": "value >= minperiod", "perl": "$value >= $minperiod"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -maxperiod \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -maxperiod $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Float value greater tha 1.0", "prompt": "Report repetitions whose exponent is at least n (-exp)", "name": "exp", "ctrl": {"python": "value >= 1.0", "perl": "$value >= 1.0"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -exp \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -exp $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output small repeats that can occur randomly (-allowsmall)", "name": "allowsmall", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -allowsmall\" )[ value ]", "perl": "( $value) ? \" -allowsmall\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not output repetitions sequences (-noprint)", "name": "noprint", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -noprint\" )[ value ]", "perl": "( $value) ? \" -noprint\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "XML format output file name (-xmloutput)", "name": "xml", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -xmloutput \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -xmloutput $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "2.5", "references": [{"url": null, "doi": null, "label": "R. Kolpakov, G. Kucherov, Finding maximal repetitions in a word in linear time, 1999 Symposium on Foundations of Computer Science (FOCS), New-York (USA), pp. 596-604, IEEE Computer Society"}, {"url": null, "doi": null, "label": "R. Kolpakov, G. Kucherov, Finding Approximate Repetitions under Hamming Distance, 9-th European Symposium on Algorithms (ESA), Aarhus (Denmark), Lecture Notes in Computer Science, vol. 2161, pp 170-181."}], "source_links": ["http://bioinfo.lifl.fr/mreps/"], "env": [], "authors": "G. Kucherov", "command": {"path": null, "value": "mreps"}, "documentation_links": ["http://bioinfo.lifl.fr/mreps/"], "type": "program", "name": "mreps"}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>MSAProbs is an open-source protein multiple sequence ailgnment algorithm, \n           achieving the stastistically highest alignment accuracy on popular benchmarks:<html:a href=\"http://www-bio3d-igbmc.u-strasbg.fr/balibase/\">BALIBASE</html:a>,<html:a href=\"http://www.drive5.com/muscle/prefab.htm\">PREFAB</html:a>,<html:a href=\"http://bioinformatics.vub.ac.be/databases/databases.html\">SABMARK</html:a>,<html:a href=\"http://www.compbio.dundee.ac.uk/Software/Oxbench/oxbench.html\">OXBENCH</html:a>,  \n           compared to ClustalW, MAFFT, MUSCLE, ProbCons and Probalign.</html:p></html:div>", "homepage_links": ["http://sourceforge.net/projects/msaprobs/"], "_id": {"$oid": "51434da493546d52388cabd6"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "is a protein multiple sequence alignment algorithm based on pair hidden Markov models and partition function posterior probabilities", "title": "MSAProbs", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Alignment file", "name": "alignment", "simple": null, "filenames": {"python": "\"msaprobs.out\"", "perl": "\"msaprobs.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}, {"comment": "Each line represents the score of each column of the final alignment from the leftmost to the right most.", "prompt": "Annotation file", "name": "annotation_file", "simple": null, "filenames": {"python": "annotation", "perl": "$annotation"}, "precond": {"python": "annotation is not None", "perl": "defined $annotation"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "MSAProbsAnnotation", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Sequences File ( a file containing several sequences ).", "name": "sequences", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" \" + str( sequences )", "perl": "\" $sequences\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Accuracy Options", "name": "accuracy", "children": [{"comment": "A probabilistic consistency transformation is used to re-estimate more\n              accurate posterior probabilities of each sequence pair x and y by introducing\n              another sequence z. Instead of re-computing the posterior probabilities\n              based on three-sequence alignments, the transformation is performed\n              based on the already computed probability matrices estimated from\n              pairwise alignments. \n              To avoid a biased sampling of sequences, we therefore derive a weighed \n              probabilistic consistency transformation approach\n              This motivation of the weighted approach is to obtain more accurate\n              alignments than the non-weighted one. The transformations are further\n              performed for a fixed number of iterations to refine the probabilities. In\n              MSAProbs, two iterations (the default value) are used. This default value\n              offers a good trade-off between alignment accuracy and execution time.", "prompt": "passes of consistency transformation( 0 >= REPS >= 5 default: 2 )", "name": "consitency", "ctrl": {"python": "value >=0 and value<=5", "perl": "$value >=0 and $value<=5"}, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -c \"+str(value))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef)\" -c $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "As a post-processing step, a randomized iterative alignment is employed\n              to further improve alignment accuracy. This refinement randomly partitions\n              S into two non-overlapped subsets, and then performs a profile\u2013profile\n              alignment of the two subsets. MSAProbs designs its own pseudo random\n              number generator based on the linear congruential method for the random\n              partition of S. The iterative refinement is designed to complete after a fixed\n              number of iterations (10 iterations, by default).", "prompt": "passes of iterative-refinement ( use 0 >= REPS >= 1000 default: 10 )", "name": "iterative_refinement", "ctrl": {"python": "value >=0 and value<=100", "perl": "$value >=0 and $value<=100"}, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -ir \"+str(value))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef)\" -ir $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output Options", "name": "output_opt", "children": [{"comment": "The score of each column of the final alignment, from the leftmost to the right most, will be report on this annotation file.", "prompt": "write annotation for multiple alignment to FILENAME", "name": "annotation", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -annot \" + str(value))[ value is not None ]", "perl": "(defined $value)\" -annot $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "0.9.4", "references": [{"url": null, "doi": "doi:10.1093/bioinformatics/btq338", "label": "Yongchao Liu, Bertil Schmidt and Douglas L. Maskell (Bioinformatics 2010 26(16): 1958-1964)\n         MSAProbs: multiple sequence alignment based on pair hidden Markov models and \n         partition function posterior probabilities."}], "source_links": ["http://sourceforge.net/projects/msaprobs/files/MSAProbs-0.9.4.tar.gz/download"], "env": [], "authors": "Yongchao Liu, Bertil Schmidt and Douglas L. Maskell", "command": {"path": null, "value": "msaprobs"}, "documentation_links": [], "type": "program", "name": "msaprobs"}, {"comment": null, "homepage_links": ["http://www.ncbi.nlm.nih.gov/CBBresearch/Schaffer/msa.html"], "_id": {"$oid": "51434da493546d52388cabd7"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "Multiple sequence alignment", "title": "MSA", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": []}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "This  is  a  file  containing  the  sequences to be aligned.", "prompt": "Sequences File", "name": "seqs", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control parameters", "name": "control", "children": [{"comment": "Turns  off  the optimal multiple alignment segment of the program.This allows the user to see the heuristic alignment and other data produced by the program before the it attempts to produce an optimal multiple alignment.", "prompt": "Turns off the optimal multiple alignment (-m)", "name": "optimal", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -m\")[ value ]", "perl": "($value)? \" -m\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Allows the user to force the alignment of certain  residues. The file referred to must have one or more lines of the following format:seqs.| \"S\" precedes block start | \"L\" precedes block lengthThe example would force positions 22 to 31 of sequence 2 to  be  aligned  with positions  21  to  30  of  sequence  3  and  positions 25 to 34 of sequence 5; it would else force position 35 of sequence  2  to  be aligned with position 36 of sequence 3 and position 41 of sequence 5.  Needless to say, all positions forced into alignment  must  be mutually consistent.", "prompt": "User file to force the alignment of certain  residues (-f)", "name": "forcedres", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -f \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -f $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "ForceAlignmentPattern", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Cost parameters", "name": "Cost", "children": [{"comment": "As a default, no charge is made for the existence of a terminal gap.", "prompt": "Charges terminal gaps the same as internal gaps (-g)", "name": "endgap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -g\")[ value ]", "perl": "($value)? \" -g\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The cost of a multiple alignment is taken to be the unweighted sum of all the pairwise alignments.  In the absence of this flag, the program estimates an evolutionary tree and uses it to  assign weights  to  each  pairwise  alignment using either rationale-1 or rational-2 as described in Altschul et al., J.  Molec.  Biol.  208 (1989).", "prompt": "Cost of a multiple alignment (-b)", "name": "unweight", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -b\")[ value ]", "perl": "($value)? \" -b\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specifies  the  maximum  score  of  an optimal multiple alignment. Default is calculated from the  scores  of  the  optimal  pairwise alignments, the weights, and the epsilons.", "prompt": "Maximum score of an optimal multiple alignment (-d)", "name": "maxscore", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -d\" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -d$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "As  a default, the program calculates an  heuristic  multiple  alignment and  uses  it  to  set epsilons for each pairwise alignment.  Frequently the \"optimal multiple alignment\" will  be  found  to  have observed  epsilons  exceeding  those supplied or calculated.  When this is the case, it is advisable to rerun the program using suitably augmented epsilons.  The file named here should have integers separated by spaces or newlines or both, with one integer for each pair  of  sequences  in  the order 1-2, 1-3, ... , 1-N, 2-3, ... , (N-1)-N.", "prompt": "User  specified  epsilons  for  each  pairwise  alignment (-e)", "name": "epsilons", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -e \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -e $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "EpsilonFile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Allows the user to specify the cost for a gap, as well as the cost for  aligning  any  pair  of  letters or a letter with a null. The default is PAM-250 costs for protein sequences, using the one-letter  code.  The format of this file is an integer, followed by all possible pairs of aligned symbols followed by  their  cost.   For example, the file might begin as follows:This  would  specify  a  cost of 0 for aligning a null symbol with another null symbol, a cost of 1 for aligning an  A  with  a  null symbol,  etc.,  and an additional cost of 3 for the existence of a gap.  The program assumes the costs are symmetric, so  that  there is  no  need to have a line for C A as well as for A C.  All costs must be non-negative integers.", "prompt": "User costs file (-c)", "name": "costs", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -c \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -c $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Costs", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output parameters", "name": "output", "children": [{"comment": null, "prompt": "Suppress verbose output (-o)", "name": "quiet", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -o\")[ value ]", "perl": "($value)? \" -o\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "2.1", "references": [], "source_links": ["ftp://fastlink.nih.gov/pub/msa/msa.tar.Z"], "env": [], "authors": "S. F. Altschul", "command": {"path": null, "value": "msa"}, "documentation_links": [], "type": "program", "name": "msa"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabd8"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:mutation"}, {"type": "mobyle1", "classification": "sequence:protein:mutation"}], "description": "Mutate a sequence", "title": "msbar", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "If you require that the resulting mutated sequence should not match a set of other sequences, then you can specify that set  of sequences here. For example, if you require that the mutated  sequence should not be the same as the input sequence, enter the  input sequence here. If you want the result to be different to  previous results of this program, specify the previous result  sequences here. The program will check that the result does not  match the sequences specified here before writing it out. If a  match is found, then the mutation is started again with a fresh  copy of the input sequence. If, after 10 such retries, there is  still a match to the set of sequence given here, then the matching  mutated sequence is written with a warning message.", "prompt": "Other sequences that the mutated result should not match", "name": "e_othersequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -othersequence=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Number of times to perform the mutation operations (value greater than or equal to 0)", "name": "e_count", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -count=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Point mutation operations (value from 1 to 4)", "name": "e_point", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -point=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Block mutation operations (value from 1 to 4)", "name": "e_block", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -block=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Types of codon mutations to perform. These are only done if the sequence is nucleic.", "prompt": "Codon mutation operations (value from 1 to 4)", "name": "e_codon", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -codon=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Do 'codon' and 'block' operations in frame", "name": "e_inframe", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -inframe\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Minimum size for a block mutation (value greater than or equal to 0)", "name": "e_minimum", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -minimum=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum size for a block mutation", "name": "e_maximum", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -maximum=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "msbar"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/msbar.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "msbar"}, {"comment": null, "homepage_links": ["http://sonnhammer.sbc.su.se/MSPcrunch.html"], "_id": {"$oid": "51434da493546d52388cabd9"}, "classifications": [{"type": "mobyle1", "classification": "database:search:display"}], "description": "A BLAST post-processing filter", "title": "MSPcrunch", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output Options", "name": "output_options", "children": [{"comment": null, "prompt": "Result file", "name": "outfile", "simple": null, "filenames": {"python": "\"mspcrunch.out\"", "perl": "\"mspcrunch.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Coverage stats outputfile", "name": "stats_file", "simple": null, "filenames": {"python": "\"mspcrunch.stats\"", "perl": "\"mspcrunch.stats\""}, "precond": {"python": "stats", "perl": "$stats"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "mspcrunch", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"MSPcrunch\"", "perl": "\"MSPcrunch\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Input Options", "name": "input_options", "children": [{"comment": null, "prompt": "BLAST output File", "name": "blast_output", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "BlastTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Force Blastp mode (default Blastx) (-p)", "name": "force_blastp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -p\" )[ value ]", "perl": "($value) ? \" -p\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Force Blastn mode (default Blastx) (-n)", "name": "force_blastn", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -n\" )[ value ]", "perl": "($value) ? \" -n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Control options", "name": "analyse_options", "children": [{"comment": null, "prompt": "Make gapped alignment of ungapped-MSP contigs (-G)", "name": "gapped", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -G\" )[ value ]", "perl": "($value) ? \" -G\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "0 = No coverage rejection", "prompt": "Set coverage limit (-l)", "name": "cov_limit", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -l \"+str(value) )[ value is not None  and value !=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -l $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use old step cutoffs for adjacency instead of the new continuous system. (-O)", "name": "old_cutoff", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -O\" )[ value ]", "perl": "($value) ? \" -O\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Don't reject any MSPs (-w)", "name": "dont_reject", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -w\" )[ value ]", "perl": "($value) ? \" -w\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Report only rejected MSPs (-r)", "name": "report_rejected", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -r\" )[ value ]", "perl": "($value) ? \" -r\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Reject all matches with less than this % identity (-I)", "name": "threshold_id", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -I \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -I $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Reject all matches with length less than this value (-L)", "name": "threshold_length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -L \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -L $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Reject all matches with E-value higher than this value (-e)", "name": "expect", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -e \" + str(value))[ value is not None ]", "perl": "(defined $value) ? \" -e $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Read in query seq (for rereading .seqbl files) (-Q)", "name": "query", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -Q \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -Q $query\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Coverage limitation requires whole contig to be covered (always for Blastp) (-a)", "name": "whole_contig", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -a\" )[ value ]", "perl": "($value) ? \" -a\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Accept hits to self (-s)", "name": "hits_to_self", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -s\" )[ value ]", "perl": "($value) ? \" -s\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Ignore hits to earlier seqnames (for All-vs-All) (-A)", "name": "no_hits_to_earlier", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -A\" )[ value ]", "perl": "($value) ? \" -A\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Recalculate percentage identity, ignoring X residues. (-j)", "name": "stats_without_X", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -j\" )[ value ]", "perl": "($value) ? \" -j\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Recalculate percentage identity, ignoring mismatches at ends. (-J)", "name": "stats_without_end", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -J\" )[ value ]", "perl": "($value) ? \" -J\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do Statistics of Silent mutations (only cDNA!) (-S)", "name": "silent_mutations", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -S\" )[ value ]", "perl": "($value) ? \" -S\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Print statistics on used matrices (-E)", "name": "matrix_stats", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -E\" )[ value ]", "perl": "($value) ? \" -E\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Print all Expected scores (default only when positive) (-X)", "name": "all_expected", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -X\" )[ value ]", "perl": "($value) ? \" -X\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Line length of Wrapped alignment (-W)", "name": "line_length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -W \" +str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -W $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output Options", "name": "output_options", "children": [{"comment": null, "prompt": "Big Picture output (-P)", "name": "big_pict", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -P\" )[ value ]", "perl": "($value) ? \" -P\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "For Big Picture output, force all matches to the same subject on one line (-F)", "name": "matches_one_line", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -F\" )[ value ]", "perl": "($value) ? \" -F\" : \"\""}, "command": false, "precond": {"python": "big_pict", "perl": "$big_pict"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Produce SFS output (-H)", "name": "sfs", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -H\" )[ value ]", "perl": "($value) ? \" -H\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Produce seqbl  output for Blixem (-q)", "name": "seqbl", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -q\" )[ value ]", "perl": "($value) ? \" -q\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Indicate query insertions with numbers (For seqbl output from Wublast) (-N)", "name": "wublast_numbered", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -N\" )[ value ]", "perl": "($value) ? \" -N\" : \"\""}, "command": false, "precond": {"python": "seqbl", "perl": "$seqbl"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Produce .ace output (for ACEDB 4) (-4)", "name": "ace", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -4\" )[ value ]", "perl": "($value) ? \" -4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Don't mirror (i.e. print the subject object) in ACE4 format (-M)", "name": "dont_mirror", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -M\" )[ value ]", "perl": "($value) ? \" -M\" : \"\""}, "command": false, "precond": {"python": "ace", "perl": "$ace"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Produce exblx output (for easy parsing) (-x)", "name": "exblx", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -x\" )[ value ]", "perl": "($value) ? \" -x\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Produce exbldb output (as exblx with query names) (-d)", "name": "exbldb", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -d\" )[ value ]", "perl": "($value) ? \" -d\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Produce fasta output (unaligned, for mult.alignm.) (-2)", "name": "fasta", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -2\" )[ value ]", "perl": "($value) ? \" -2\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Print 3 frame translation (blastn only) (-3)", "name": "three_frame", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -3\" )[ value ]", "perl": "($value) ? \" -3\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Print footer with parameters and stats (-f)", "name": "footer", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -f\" )[ value ]", "perl": "($value) ? \" -f\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Print percentage identity (seqbl output only) (-i)", "name": "percentage_id", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -i\" )[ value ]", "perl": "($value) ? \" -i\" : \"\""}, "command": false, "precond": {"python": "seqbl", "perl": "$seqbl"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output coverage stats?", "name": "stats", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Produce output for Domainer (trim overlaps) (-D)", "name": "domainer", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -D\" )[ value ]", "perl": "($value) ? \" -D\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "2.5", "references": [], "source_links": ["http://sonnhammer.sbc.su.se/download/software/MSPcrunch+Blixem/"], "env": [], "authors": "Sonnhammer, Durbin", "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/mspcrunch/MSPcrunch2.pdf"], "type": "program", "name": "mspcrunch"}, {"comment": null, "homepage_links": ["http://www.drive5.com/muscle/"], "_id": {"$oid": "51434da493546d52388cabda"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "MUSCLE is a program for creating multiple alignments of amino acid or nucleotide sequences.", "title": "Muscle", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Alignment", "name": "alignmentout", "simple": null, "filenames": {"python": "( outfile , \"muscle.out\")[outfile is None]", "perl": "(defined $outfile) ? \"$outfile\" : \"muscle.out\""}, "precond": {"python": "outformat in [ 'fasta' , 'msf' , 'phyi' , 'clwstrict' , 'clw']", "perl": "$outformat =~ /^(fasta|msf|phyi|clwstrict|clw)$/"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "test", "#children": ["FASTA"], "@eq": "fasta", "@param": "outformat"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment", "name": "muscleHtmlout", "simple": null, "filenames": {"python": "( outfile , \"muscle.out\")[outfile is None]", "perl": "(defined $outfile) ? \"$outfile\" : \"muscle.out\""}, "precond": {"python": "outformat == 'html'", "perl": "$outformat == 'html'"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "MuscleHtmlAlignment", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "quiet", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -quiet\"", "perl": "\" -quiet\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Inputs options", "name": "inputs", "children": [{"comment": null, "prompt": "Sequences (-in)", "name": "sequence", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -in \" + str(value)", "perl": "\"-in $value\""}, "command": false, "precond": {"python": "profile1 is None and profile2 is None", "perl": "not defined($profile1) and not defined($profile2)"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "2,n"}, "paramfile": null}, {"comment": "By default, MUSCLE looks at the first 100 letters in the input sequence data (excluding gaps). If 95% or more of those letters are valid nucleotides (AGCTUN), then the file is treated as nucleotides, otherwise as amino acids.This method almost always guesses correctly, but you can make sure by specifying the sequence type on the command line.", "prompt": "Determining sequence type (-seqtype)", "name": "seqtype", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -seqtype \" + str(value) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -seqtype $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Optimization parameters", "name": "optimization", "children": [{"comment": "You can control the number of iterations that MUSCLE does by specifying the -maxiters option.If you specify 1, 2 or 3, then this is exactly the number of iterations that will be performed.If the value is greater than 3, then muscle will continue up to the maximum you specify or until convergence is reached, which ever happens sooner.The default is 16. If you have a large number of sequences, refinement may be rather slow.", "prompt": "Maximum number of iterations (-maxiters)", "name": "maxiters", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -maxiters \" + str( value ) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -maxiters $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Option controls the maximum number of new trees to create in iteration 2.experience suggests that a point of diminishing returns is typically reached after the first tree, so the default value is 1.If a larger value is given, the process will repeat until convergence or until this number of trees has been created, which ever comes first.", "prompt": "Maximum number of trees (-maxtrees)", "name": "maxtrees", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -maxtrees \" + str( value ) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \"-maxtrees $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If you have a large alignment, muscle may take a long time to complete. It is sometimes convenient to say \"I want the best alignment I can get in 24 hours\" rather than specifying a set of options that will take an unknown length of time.This is done by using -maxhours, which specifies a floating-point number of hours. If this time is exceeded, muscle will write out current alignment and stop. For example,muscle -in huge.fa -out huge.afa -maxiters 9999 -maxhours 24.0", "prompt": "Maximum time to run in hours (-maxhours)", "name": "maxhours", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -maxhours \" + str( value ) )[ maxhours is not None ]", "perl": "(defined $maxhours) ? \"-maxhours $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Creating a pair-wise alignment by dynamic programming requires computing an L1 * L2 matrix, where L1 and L2 are the sequence lengths.A trick used in algorithms such as BLAST is to reduce the size of this matrix by using fast methods to find \"diagonals\", i.e. short regions of high similarity between the two sequences.This speeds up the algorithm at the expense of some reduction in accuracy.", "prompt": "Find diagonals (faster for similar sequences) (-diags)", "name": "diags", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -diags \" )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -diags \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Three different protein profile scoring functions are supported,- the log-expectation score (-le option)- and a sum of pairs score using either the PAM200 matrix (-sp)- or the VTML240 matrix (-sv).The log-expectation score is the default as it gives better results on our tests, but is typically somewhere between two or three times slower than the sum-of-pairs score.For nucleotides, -spn is currently the only option (which is of course the default for nucleotide data, so you don't need to specify this option).", "prompt": "The profile scoring function (for protein only)", "name": "scoring", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "seqtype != \"nucleo\"", "perl": "$seqtype ne \"nucleo\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "To align two sequence alignments. Not compatible with Input options.", "precond": null, "prompt": "Profile Alignments parameters", "name": "profile_option", "children": [{"comment": null, "prompt": "Profile 1", "name": "profile1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -in1 \" + str(value)", "perl": "\"-in1 $value\""}, "command": false, "precond": {"python": "sequence is None", "perl": "not defined($sequence)"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Profile 2", "name": "profile2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -in2 \" + str(value)", "perl": "\"-in2 $value\""}, "command": false, "precond": {"python": "sequence is None", "perl": "not defined($sequence)"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "(-profile)", "name": "profile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -profile \"", "perl": "\"\""}, "command": false, "precond": {"python": "sequence is None and profile1 is not None and profile2 is not None", "perl": "not defined($sequence) and defined($profile1) and defined($profile2)"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output Options", "name": "outpout_options", "children": [{"comment": "fasta : Write output in Fasta formathtml  : Write output in HTML formatmsf   : Write output in GCG MSF formatphylip   : Write output in Phylip (interleaved) formatmuscle   : Write output in CLUSTALW format with muscle headerclustalw : Write output in CLUSTALW format with CLUSTAL W (1.81)", "prompt": "output format", "name": "outformat", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Filename (-out)", "name": "outfile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -out \" + str(value))[value is not None]", "perl": "\" -out $value\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "3.8.31", "references": [{"url": null, "doi": "10.1093/nar/gkh340", "label": "Edgar, Robert C. (2004), MUSCLE: multiple sequence alignment with high accuracy and high throughput, Nucleic Acids Research 32(5), 1792-97."}], "source_links": ["http://www.drive5.com/muscle/downloads.htm"], "env": [], "authors": "Edgar, R.C.", "command": {"path": null, "value": "muscle"}, "documentation_links": ["http://www.drive5.com/muscle/"], "type": "program", "name": "muscle"}, {"comment": null, "homepage_links": ["http://bio-mview.sourceforge.net/"], "_id": {"$oid": "51434da493546d52388cabdb"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple:display"}, {"type": "mobyle1", "classification": "display:alignment:multiple"}], "description": "Multiple alignment pretty viewer", "title": "MVIEW", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Alignment output file", "name": "alig_file", "simple": null, "filenames": {"python": "\"mview.out\"", "perl": "\"mview.out\""}, "precond": {"python": "out in [ \"msf\", \"pearson\" , \"pir\"]", "perl": "$out eq \"msf\" or $out eq \"pearson\" or $out eq \"pir\""}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "test", "#children": ["FASTA"], "@eq": "pearson", "@param": "outformat"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment output file", "name": "html_file", "simple": null, "filenames": {"python": "\"mview_alignment.html\"", "perl": "\"mview_alignment.html\""}, "precond": {"python": "out == \"html\"", "perl": "$out eq \"html\""}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["HTML"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment output in RDB format", "name": "rdb_file", "simple": null, "filenames": {"python": "\"mview.out\"", "perl": "\"mview.out\""}, "precond": {"python": "out == \"rdb\"", "perl": "$out eq \"rdb\""}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["RDB"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Alignment File", "name": "alig", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" -in clustal \"+str(value)", "perl": "\" -in clustal $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["CLUSTAL"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output format (-out)", "name": "out", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\", \" -out \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \"-out $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Main formatting options", "name": "main_formatting_options", "children": [{"comment": null, "prompt": "Attach a ruler (-ruler)", "name": "ruler", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -ruler on\" )[ value ]", "perl": "($value) ? \" -ruler on\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show alignment (-alignment)", "name": "alignment", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" -alignment off\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \" -alignment off\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show consensus (-consensus)", "name": "consensus", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -consensus on\" )[ value ]", "perl": "($value) ? \" -consensus on\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use DNA/RNA colormaps and/or consensus groups (-dna)", "name": "dna", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -dna\" )[ value ]", "perl": "($value) ? \" -dna\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Alignment options", "name": "alignment_options", "children": [{"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:ul><html:li><html:em>Colour all the residues</html:em>, will colour every residue according to the currently selected palette.</html:li><html:li><html:em>Colouring by identity to the first sequence</html:em>, will colour only those residues that are identical to some reference sequence (usually the query or first row).</html:li><html:li><html:em>Colour only when above a given percent similarity</html:em>, will colour only those residues that belong to a specified physicochemical class that is conserved in at least a specified percentage of all rows for a given column. This defaults to 70% and and may be set to another threshold, eg., -coloring consensus -threshold 80 would specify 80%. Note that the physicochemical classes in question can be confined to individual residues.</html:li><html:li><html:em>Colours residues by the colour of the class to which they belong</html:em>, is like -coloring consensus, but colours residues by the colour of the class to which they belong.</html:li></html:ul><html:p>By default, the consensus computation counts gap characters, so that sections of the alignment may be uncolored where the presence of gaps prevents the non-gap count from reaching the threshold. Setting -con_gaps off prevents this, allowing sequence-only based consensus thresholding.</html:p></html:div>", "prompt": "Colour scheme (-coloring)", "name": "coloring", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -coloring \" + str(value) )[ value !=vdef ]", "perl": "($value and $value ne $vdef) ? \" -coloring $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Threshold percentage for consensus coloring (-threshold)", "name": "threshold", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -threshold \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -threshold $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tip: If you want to see only the conserved residues above the threshold (ie., only one type of conserved residue per column), add the option -ignore class.", "prompt": "Ignore singleton or class group (-ignore)", "name": "ignore", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -ignore \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -ignore $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "consensus", "perl": "$consensus"}, "prompt": "Consensus options", "name": "consensus_options", "children": [{"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>Colouring of an alignment by consensus determines which residues to colour and the colours to use based on</html:p><html:ol><html:li>the consensus threshold chosen for the colouring operation,</html:li><html:li>a consideration of the common physicochemical properties of the residues in that column,</html:li><html:li>the chosen colour scheme.</html:li></html:ol></html:div>", "prompt": "Basic style of coloring (-con_coloring)", "name": "con_coloring", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -con_coloring \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -con_coloring $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Consensus line thresholds (in range 50..100) (separated by commas) (-con_threshold)", "name": "con_threshold", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -con_threshold \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -con_threshold $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Ignore singleton or class group (-con_ignore)", "name": "con_ignore", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -con_ignore \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -con_ignore $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Hybrid alignment and consensus options", "name": "hybrid_alignment_consensus_options", "children": [{"comment": null, "prompt": "Count gaps during consensus computations (-con_gaps)", "name": "con_gaps", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \" -con_gaps off\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \" -con_gaps off\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "General row/column filters", "name": "general_row_column_filters", "children": [{"comment": null, "prompt": "Report top N hits (-top)", "name": "top", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -top \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -top $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "You must enter a string composed of two numbers separated by comma", "prompt": "Display column range M:N (-range)", "name": "range", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -range \" + str(value).replace(',',':') )[ value is not None ]", "perl": "(defined $value and $value =~ s/,/:/g) ? \" -range $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Only report sequences with percent identity <= N (-maxident)", "name": "maxident", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -maxident \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -maxident $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use row N or row identifier as percent identity reference (-ref)", "name": "ref", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -ref \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -ref $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "You must enter a string composed of two numbers separated by comma", "prompt": "Keep only the rows from start to end (separated by comma) (-keep)", "name": "keep_only", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -keep \" + str(value) )[ value is not None ]", "perl": "(defined $value ) ? \" -keep $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "You must enter a string composed of two numbers separated by comma", "prompt": "Discard rows from start to end (separated by comma) (-disc)", "name": "disc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -disc \" + str(value).replace(',','..') )[ value is not None ]", "perl": "(defined $value and $value =~ s/,/../ ) ? \" -disc $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "You must enter a string composed of two numbers separated by comma", "prompt": "Display rows unprocessed (separated by comma ) (-nops)", "name": "nops", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -nops \" + str(value).replace(',','..' ))[ value is not None ]", "perl": "(defined $value and $value =~ s/,/../) ? \" -nops $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "General formatting options", "name": "general_formatting_options", "children": [{"comment": null, "prompt": "Paginate in N columns of alignment (-width)", "name": "width", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -width \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -width $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use this character as the gap (-gap)", "name": "gap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" \" ,  \" -gap \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \" -gap $value\" : \" \""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switch off label: row number (-label0)", "name": "label0", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -label0\" )[ value ]", "perl": "($value) ? \" -label0\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switch off label: identifier (-label1)", "name": "label1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -label1\" )[ value ]", "perl": "($value) ? \" -label1\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switch off label: description (-label2)", "name": "label2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -label2\" )[ value ]", "perl": "($value) ? \" -label2\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switch off label: scores (-label3)", "name": "label3", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -label3\" )[ value ]", "perl": "($value) ? \" -label3\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switch off label: percent identity (-label4)", "name": "label4", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -label4\" )[ value ]", "perl": "($value) ? \" -label4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output multi-pass alignments with columns in register (-register)", "name": "register", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" -register off\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \" -register off\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "out == \"html\"", "perl": "$out eq \"html\""}, "prompt": "HTML markup options", "name": "html_markup_options", "children": [{"comment": null, "prompt": "Amount of HTML markup (-html)", "name": "html_output", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -html \" + str(value))[value is not None]", "perl": "(defined $value]) ? \"-html $value\":\"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Page title string", "name": "Title", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -title \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -title $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Page background color (-pagecolor)", "name": "pagecolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pagecolor \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -pagecolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Page text color (-textcolor)", "name": "textcolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -textcolor \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -textcolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Link color (-linkcolor)", "name": "linkcolor", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -linkcolor \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -linkcolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Active link color (-alinkcolor)", "name": "alinkcolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -alinkcolor \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -alinkcolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Visited link color (-vlinkcolor)", "name": "vlinkcolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -vlinkcolor \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -vlinkcolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment background color (-alncolor)", "name": "alncolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -alncolor \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -alncolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment label color (-labcolor)", "name": "labcolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -labcolor \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -labcolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment default text color (-symcolor)", "name": "symcolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" \" , \" -symcolor \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -symcolor $value\" : \" \""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment gap color (-gapcolor)", "name": "gapcolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gapcolor \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -gapcolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use bold emphasis for coloured residues (-bold)", "name": "bold", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -bold\" )[ value ]", "perl": "($value) ? \" -bold\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use Cascading Style Sheets (-css)", "name": "css", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -css on\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value eq $vdef) ? \" -css on\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.49", "references": [{"url": null, "doi": null, "label": "Brown, N.P., Leroy C., Sander C. (1998). MView: A Web compatible database search or multiple alignment viewer. Bioinformatics. 14(4):380-381."}], "source_links": [], "env": [], "authors": "N. P. Brown", "command": {"path": null, "value": "mview"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/mview/index.html"], "type": "program", "name": "mview_alignment"}, {"comment": null, "homepage_links": ["http://bio-mview.sourceforge.net/"], "_id": {"$oid": "51434da493546d52388cabdc"}, "classifications": [{"type": "mobyle1", "classification": "database:search:display"}, {"type": "mobyle1", "classification": "display:database:search"}], "description": "Blast report pretty viewer", "title": "MVIEW", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Alignment output file", "name": "alig_file", "simple": null, "filenames": {"python": "\"mview.out\"", "perl": "\"mview.out\""}, "precond": {"python": "out in [ \"msf\", \"pearson\" , \"pir\"]", "perl": "$out eq \"msf\" or $out eq \"pearson\" or $out eq \"pir\""}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "test", "#children": ["FASTA"], "@eq": "pearson", "@param": "outformat"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment output file", "name": "html_file", "simple": null, "filenames": {"python": "\"mview_blast.html\"", "perl": "\"mview_blast.html\""}, "precond": {"python": "out == \"html\"", "perl": "$out eq \"html\""}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["HTML"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment output in RDB format", "name": "rdb_file", "simple": null, "filenames": {"python": "\"mview.out\"", "perl": "\"mview.out\""}, "precond": {"python": "out == \"rdb\"", "perl": "$out eq \"rdb\""}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["RDB"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Blast text Report", "name": "blast", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -in blast \"+str(value)", "perl": "\" -in blast $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "BlastTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output format (-out)", "name": "out", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\", \" -out \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \"-out $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Main formatting options", "name": "main_formatting_options", "children": [{"comment": null, "prompt": "Attach a ruler (-ruler)", "name": "ruler", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -ruler on\" )[ value ]", "perl": "($value) ? \" -ruler on\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show alignment (-alignment)", "name": "alignment", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" -alignment off\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \" -alignment off\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show consensus (-consensus)", "name": "consensus", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -consensus on\" )[ value ]", "perl": "($value) ? \" -consensus on\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use DNA/RNA colormaps and/or consensus groups (-dna)", "name": "dna", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -dna\" )[ value ]", "perl": "($value) ? \" -dna\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Alignment options", "name": "alignment_options", "children": [{"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:ul><html:li><html:em>Colour all the residues</html:em>, will colour every residue according to the currently selected palette.</html:li><html:li><html:em>Colouring by identity to the first sequence</html:em>, will colour only those residues that are identical to some reference sequence (usually the query or first row).</html:li><html:li><html:em>Colour only when above a given percent similarity</html:em>, will colour only those residues that belong to a specified physicochemical class that is conserved in at least a specified percentage of all rows for a given column. This defaults to 70% and and may be set to another threshold, eg., -coloring consensus -threshold 80 would specify 80%. Note that the physicochemical classes in question can be confined to individual residues.</html:li><html:li><html:em>Colours residues by the colour of the class to which they belong</html:em>, is like -coloring consensus, but colours residues by the colour of the class to which they belong.</html:li></html:ul><html:p>By default, the consensus computation counts gap characters, so that sections of the alignment may be uncolored where the presence of gaps prevents the non-gap count from reaching the threshold. Setting -con_gaps off prevents this, allowing sequence-only based consensus thresholding.</html:p></html:div>", "prompt": "Colour scheme (-coloring)", "name": "coloring", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -coloring \" + str(value) )[ value !=vdef ]", "perl": "($value and $value ne $vdef) ? \" -coloring $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Threshold percentage for consensus coloring (-threshold)", "name": "threshold", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -threshold \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -threshold $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tip: If you want to see only the conserved residues above the threshold (ie., only one type of conserved residue per column), add the option -ignore class.", "prompt": "Ignore singleton or class group (-ignore)", "name": "ignore", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -ignore \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -ignore $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "consensus", "perl": "$consensus"}, "prompt": "Consensus options", "name": "consensus_options", "children": [{"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>Colouring of an alignment by consensus determines which residues to colour and the colours to use based on</html:p><html:ol><html:li>the consensus threshold chosen for the colouring operation,</html:li><html:li>a consideration of the common physicochemical properties of the residues in that column,</html:li><html:li>the chosen colour scheme.</html:li></html:ol></html:div>", "prompt": "Basic style of coloring (-con_coloring)", "name": "con_coloring", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -con_coloring \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -con_coloring $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Consensus line thresholds (in range 50..100) (separated by commas) (-con_threshold)", "name": "con_threshold", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -con_threshold \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -con_threshold $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Ignore singleton or class group (-con_ignore)", "name": "con_ignore", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -con_ignore \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -con_ignore $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Hybrid alignment and consensus options", "name": "hybrid_alignment_consensus_options", "children": [{"comment": null, "prompt": "Count gaps during consensus computations (-con_gaps)", "name": "con_gaps", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \" -con_gaps off\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \" -con_gaps off\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "General row/column filters", "name": "general_row_column_filters", "children": [{"comment": null, "prompt": "Report top N hits (-top)", "name": "top", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -top \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -top $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "You must enter a string composed of two numbers separated by comma", "prompt": "Display column range M:N (-range)", "name": "range", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -range \" + str(value).replace(',',':') )[ value is not None ]", "perl": "(defined $value and $value =~ s/,/:/g) ? \" -range $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Only report sequences with percent identity <= N (-maxident)", "name": "maxident", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -maxident \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -maxident $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use row N or row identifier as percent identity reference (-ref)", "name": "ref", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -ref \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -ref $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "You must enter a string composed of two numbers separated by comma", "prompt": "Keep only the rows from start to end (separated by comma) (-keep)", "name": "keep_only", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -keep \" + str(value) )[ value is not None ]", "perl": "(defined $value ) ? \" -keep $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "You must enter a string composed of two numbers separated by comma", "prompt": "Discard rows from start to end (separated by comma) (-disc)", "name": "disc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -disc \" + str(value).replace(',','..') )[ value is not None ]", "perl": "(defined $value and $value =~ s/,/../ ) ? \" -disc $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "You must enter a string composed of two numbers separated by comma", "prompt": "Display rows unprocessed (separated by comma ) (-nops)", "name": "nops", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -nops \" + str(value).replace(',','..' ))[ value is not None ]", "perl": "(defined $value and $value =~ s/,/../) ? \" -nops $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "General formatting options", "name": "general_formatting_options", "children": [{"comment": null, "prompt": "Paginate in N columns of alignment (-width)", "name": "width", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -width \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -width $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use this character as the gap (-gap)", "name": "gap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" \" ,  \" -gap \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \" -gap $value\" : \" \""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switch off label: row number (-label0)", "name": "label0", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -label0\" )[ value ]", "perl": "($value) ? \" -label0\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switch off label: identifier (-label1)", "name": "label1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -label1\" )[ value ]", "perl": "($value) ? \" -label1\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switch off label: description (-label2)", "name": "label2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -label2\" )[ value ]", "perl": "($value) ? \" -label2\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switch off label: scores (-label3)", "name": "label3", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -label3\" )[ value ]", "perl": "($value) ? \" -label3\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Switch off label: percent identity (-label4)", "name": "label4", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -label4\" )[ value ]", "perl": "($value) ? \" -label4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output multi-pass alignments with columns in register (-register)", "name": "register", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" -register off\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \" -register off\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "BLAST options", "name": "blast_options", "children": [{"comment": null, "prompt": "HSP tiling method (-hsp)", "name": "hsp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\" -hsp \" + str(value))[value !=vdef]", "perl": "($value ne  $vdef) ?  \" -hsp $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Report only these query strand orientations (-strand)", "name": "strand", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -strand \" +str(value))[value !=vdef]", "perl": "($value ne $vdef) ? \" -strand $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "BLAST series 1 options", "name": "blast1_options", "children": [{"comment": null, "prompt": "Ignore hits with p-value more than N (-maxpval)", "name": "maxpval", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -maxpval \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -maxpval $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Ignore hits with score less than N (-minscore)", "name": "minscore", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -minscore \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -minscore $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "BLAST series 2 options", "name": "blast2_options", "children": [{"comment": null, "prompt": "Ignore hits with p-value more than N -- Blast2 only (-maxeval)", "name": "maxeval", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -maxeval \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -maxeval $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Ignore hits with bits less than N (-minbits)", "name": "minbits", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -minbits \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -minbits $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "PSI-BLAST options", "name": "psi_options", "children": [{"comment": null, "prompt": "Process the Nth cycle of a multipass search (-cycle)", "name": "cycle", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -cycle \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -cycle $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}]}, {"comment": null, "precond": {"python": "out == \"html\"", "perl": "$out eq \"html\""}, "prompt": "HTML markup options", "name": "html_markup_options", "children": [{"comment": null, "prompt": "Amount of HTML markup (-html)", "name": "html_output", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -html \" + str(value))[value is not None]", "perl": "(defined $value]) ? \"-html $value\":\"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Page title string", "name": "Title", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -title \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -title $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Page background color (-pagecolor)", "name": "pagecolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pagecolor \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -pagecolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Page text color (-textcolor)", "name": "textcolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -textcolor \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -textcolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Link color (-linkcolor)", "name": "linkcolor", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -linkcolor \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -linkcolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Active link color (-alinkcolor)", "name": "alinkcolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -alinkcolor \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -alinkcolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Visited link color (-vlinkcolor)", "name": "vlinkcolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -vlinkcolor \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -vlinkcolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment background color (-alncolor)", "name": "alncolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -alncolor \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -alncolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment label color (-labcolor)", "name": "labcolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -labcolor \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -labcolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment default text color (-symcolor)", "name": "symcolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" \" , \" -symcolor \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -symcolor $value\" : \" \""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment gap color (-gapcolor)", "name": "gapcolor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gapcolor \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -gapcolor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use bold emphasis for coloured residues (-bold)", "name": "bold", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -bold\" )[ value ]", "perl": "($value) ? \" -bold\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use Cascading Style Sheets (-css)", "name": "css", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -css on\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value eq $vdef) ? \" -css on\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.49", "references": [{"url": null, "doi": null, "label": "Brown, N.P., Leroy C., Sander C. (1998). MView: A Web compatible database search or multiple alignment viewer. Bioinformatics. 14(4):380-381."}], "source_links": [], "env": [], "authors": "N. P. Brown", "command": {"path": null, "value": "mview"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/mview/index.html"], "type": "program", "name": "mview_blast"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabdd"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Filter noisy data from molecular weights file", "title": "mwfilter", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "MolecularWeights", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "Molecular weights file", "name": "e_infile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -infile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "MolecularWeights", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Molecular weight standards data file", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "StandardMolecularWeights", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Ppm tolerance", "name": "e_tolerance", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -tolerance=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Output deleted mwts", "name": "e_showdel", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -showdel\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "mwfilter"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/mwfilter.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "mwfilter"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabde"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise:global"}], "description": "Many-to-many pairwise alignments of two sequence sets", "title": "needleall", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['FASTA', 'MSF']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out2 option", "name": "e_outfile_out2", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['PAIR', 'MARKX0', 'MARKX1', 'MARKX2', 'MARKX3', 'MARKX10', 'SRS', 'SRSPAIR', 'SCORE', 'UNKNOWN', 'MULTIPLE', 'SIMPLE', 'MATCH']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "errorfile_out option", "name": "e_errorfile_out", "simple": null, "filenames": {"python": "e_errorfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "NeedleallError", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "2,n"}, "paramfile": null}, {"comment": null, "prompt": "bsequence option", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "This is the scoring matrix file used when comparing sequences. By default it is the file 'EBLOSUM62' (for proteins) or  the file 'EDNAFULL' (for nucleic sequences). These files are  found in the 'data' directory of the EMBOSS installation.", "prompt": "Matrix file", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "The gap open penalty is the score taken away when a gap is created. The best value depends on the choice of comparison  matrix. The default value assumes you are using the EBLOSUM62  matrix for protein sequences, and the EDNAFULL matrix for  nucleotide sequences.", "prompt": "Gap opening penalty (Floating point number from 1.0 to 100.0)", "name": "e_gapopen", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -gapopen=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The gap extension, penalty is added to the standard gap penalty for each base or residue in the gap. This is how long gaps  are penalized. Usually you will expect a few long gaps rather  than many short gaps, so the gap extension penalty should be lower  than the gap penalty. An exception is where one or both sequences  are single reads with possible sequencing errors in which case  you would expect many single base gaps. You can get this result by  setting the gap open penalty to zero (or very low) and using the  gap extension penalty to control gap scoring.", "prompt": "Gap extension penalty (Floating point number from 0.0 to 10.0)", "name": "e_gapextend", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -gapextend=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Apply end gap penalties.", "name": "e_endweight", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -endweight\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The end gap open penalty is the score taken away when an end gap is created. The best value depends on the choice of comparison  matrix. The default value assumes you are using the EBLOSUM62  matrix for protein sequences, and the EDNAFULL matrix for  nucleotide sequences.", "prompt": "End gap opening penalty (Floating point number from 1.0 to 100.0)", "name": "e_endopen", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -endopen=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The end gap extension, penalty is added to the end gap penalty for each base or residue in the end gap.", "prompt": "End gap extension penalty (Floating point number from 0.0 to 10.0)", "name": "e_endextend", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -endextend=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Minimum alignment score to report an alignment.", "prompt": "Minimum alignment score (Floating point number from -10.0 to 100.0)", "name": "e_minscore", "ctrl": {"python": "value >= -10.0"}, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -minscore=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "Brief identity and similarity", "prompt": "Brief identity and similarity", "name": "e_brief", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\" -nobrief\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output alignment file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the alignment output format", "name": "e_aformat_outfile", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -aformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Error file to be written to", "prompt": "errorfile option", "name": "e_errorfile", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\" , \" -errorfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "needleall"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/needleall.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "needleall"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabdf"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise:global"}], "description": "Needleman-Wunsch global alignment of two sequences", "title": "needle", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['FASTA', 'MSF']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out2 option", "name": "e_outfile_out2", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['PAIR', 'MARKX0', 'MARKX1', 'MARKX2', 'MARKX3', 'MARKX10', 'SRS', 'SRSPAIR', 'SCORE', 'UNKNOWN', 'MULTIPLE', 'SIMPLE', 'MATCH']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "bsequence option", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "This is the scoring matrix file used when comparing sequences. By default it is the file 'EBLOSUM62' (for proteins) or  the file 'EDNAFULL' (for nucleic sequences). These files are  found in the 'data' directory of the EMBOSS installation.", "prompt": "Matrix file", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "The gap open penalty is the score taken away when a gap is created. The best value depends on the choice of comparison  matrix. The default value assumes you are using the EBLOSUM62  matrix for protein sequences, and the EDNAFULL matrix for  nucleotide sequences.", "prompt": "Gap opening penalty (Floating point number from 1.0 to 100.0)", "name": "e_gapopen", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -gapopen=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The gap extension, penalty is added to the standard gap penalty for each base or residue in the gap. This is how long gaps  are penalized. Usually you will expect a few long gaps rather  than many short gaps, so the gap extension penalty should be lower  than the gap penalty. An exception is where one or both sequences  are single reads with possible sequencing errors in which case  you would expect many single base gaps. You can get this result by  setting the gap open penalty to zero (or very low) and using the  gap extension penalty to control gap scoring.", "prompt": "Gap extension penalty (Floating point number from 0.0 to 10.0)", "name": "e_gapextend", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -gapextend=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Apply end gap penalties.", "name": "e_endweight", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -endweight\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The end gap open penalty is the score taken away when an end gap is created. The best value depends on the choice of comparison  matrix. The default value assumes you are using the EBLOSUM62  matrix for protein sequences, and the EDNAFULL matrix for  nucleotide sequences.", "prompt": "End gap opening penalty (Floating point number from 1.0 to 100.0)", "name": "e_endopen", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -endopen=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The end gap extension, penalty is added to the end gap penalty for each base or residue in the end gap. This is how long end gaps  are penalized.", "prompt": "End gap extension penalty (Floating point number from 0.0 to 10.0)", "name": "e_endextend", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -endextend=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "Brief identity and similarity", "prompt": "Brief identity and similarity", "name": "e_brief", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\" -nobrief\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output alignment file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the alignment output format", "name": "e_aformat_outfile", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -aformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "needle"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/needle.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "needle"}, {"comment": "This program implements the Neighbor-Joining\n\t method of Saitou and Nei (1987) and the UPGMA method of\n\t clustering.NEIGHBOR constructs a tree by successive\n\t clustering of lineages, setting branch lengths as the\n\t lineages join. The tree is not rearranged thereafter. The\n\t tree does not assume an evolutionary clock, so that it is in\n\t effect an unrooted tree.", "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabe0"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:distance"}], "description": "Neighbor-Joining and UPGMA methods", "title": "neighbor", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Consense output file", "name": "consense_outfile", "simple": null, "filenames": {"python": "\"consense.outfile\"", "perl": "\"consense.outfile\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Consense output tree", "name": "consense_treefile", "simple": null, "filenames": {"python": "\"consense.outtree\"", "perl": "\"consense.outtree\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Neighbor output file", "name": "outfile", "simple": null, "filenames": {"python": "\"neighbor.outfile\"", "perl": "\"neighbor.outfile\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Neighbor output tree file", "name": "treefile", "simple": null, "filenames": {"python": "\"neighbor.outtree\"", "perl": "\"neighbor.outtree\""}, "precond": {"python": "print_treefile", "perl": "$print_treefile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "neighbor", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"neighbor <neighbor.params\"", "perl": "\"neighbor <neighbor.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Distance method", "name": "distance_method", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"N\\n\")[ value == \"upgma\" ]", "perl": "($value eq \"upgma\") ? \"N\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "neighbor.params"}, {"comment": "Give a file containing a distance matrix\n\t  obtained by distance matrix programs like protdist or\n\t  dnadist", "prompt": "Distances matrix File", "name": "infile", "ctrl": {"python": "infile != \"outfile\"", "perl": "$infile ne \"outfile\""}, "simple": null, "argpos": "-10", "format": {"python": "\"ln -s \"+str(infile)+\" infile && \"", "perl": "\"ln -s $infile infile && \""}, "command": false, "precond": {"python": "infile != \"infile\"", "perl": "$infile ne \"infile\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipDistanceMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Randomize options", "name": "jumble_opt", "children": [{"comment": null, "prompt": "Randomize (jumble) input order (J)", "name": "jumble", "ctrl": {"python": "not( multiple and jumble)", "perl": "not( $multiple and $jumble)"}, "simple": null, "argpos": "20", "format": {"python": "( \"\" , \"J\\n\" + str( jumble_seed ) + \"\\n\" )[ value ]", "perl": "($value) ? \"J\\\\n$jumble_seed\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "neighbor.params"}, {"comment": null, "prompt": "Random number seed for jumble (must be odd)", "name": "jumble_seed", "ctrl": {"python": "value > 0 and (value % 2) != 0", "perl": "$value > 0 and ($value % 2) != 0"}, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "jumble", "perl": "$jumble"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Bootstrap options", "name": "bootstrap", "children": [{"comment": null, "prompt": "Analyze multiple data sets (M)", "name": "multiple", "ctrl": {"python": "not( multiple and jumble)", "perl": "not( $multiple and $jumble)"}, "simple": null, "argpos": "10", "format": {"python": "(\"\", \"M\\n\"+str(multiple_number)+\"\\n\"+str(multiple_seed)+\"\\n\")[ value ]", "perl": "($value) ? \"M\\\\n$multiple_number\\\\n$multiple_seed\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "neighbor.params"}, {"comment": null, "prompt": "How many data sets", "name": "multiple_number", "ctrl": {"python": "value <= 1000", "perl": "$value <= 1000"}, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "multiple", "perl": "$multiple"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Random number seed for multiple dataset (must be odd)", "name": "multiple_seed", "ctrl": {"python": "value > 0 and (value % 2) != 0", "perl": "$value < 0 and ($value % 2) != 0"}, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "multiple", "perl": "$multiple"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "neighbor.params"}, {"comment": null, "prompt": "Compute a consensus tree", "name": "consense", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\" , \" && cp infile neighbor.infile &&  cp neighbor.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\")[ value ]", "perl": "($value)? \" && cp infile neighbor.infile &&  cp neighbor.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" : \"\""}, "command": false, "precond": {"python": "multiple and print_treefile", "perl": "$multiple and $print_treefile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": null, "name": "consense_confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "prompt": null, "name": "consense_terminal_type", "ctrl": null, "simple": null, "argpos": "-2", "format": {"python": "\"T\\n\"", "perl": "\"T\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": "Tells the program to print a semi-graphical picture of the tree in the outfile.", "prompt": "Print out tree (3)", "name": "print_tree", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"3\\n\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \"3\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "neighbor.params"}, {"comment": "Tells the program to save the tree in a treefile (a standard representation of trees where the tree is specified by a nested pairs of parentheses, enclosing names and separated by commas).", "prompt": "Write out trees onto tree file (4)", "name": "print_treefile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"4\\n\" , \"\" )[ value ]", "perl": "($value) ? \"\" : \"4\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "neighbor.params"}, {"comment": null, "prompt": "Print out the data at start of run (1)", "name": "printdata", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"1\\n\" )[ value ]", "perl": "($value) ? \"1\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "neighbor.params"}]}, {"comment": null, "precond": null, "prompt": "Other options", "name": "other_options", "children": [{"comment": "The O (Outgroup) option specifies which species is to have the root of the tree be on the line leading to it.For example, if the outgroup is a species \"Mouse\" then the root of the tree will be placed in the middle of the branch which is connected to this species, with Mouse branching off on one side of the root and the lineage leading to the rest of the tree on the other.This option is toggle on by choosing the number of the outgroup (the species being taken in the numerical order that they occur in the input file).Outgroup-rooting will not be attempted  if it is a user-defined tree, despite your invoking the option.When it is used, the tree as printed out is still listed as being an unrooted tree, though the outgroup is connected to the bottommost node so that it is easy to visually convert the tree into rooted form.", "prompt": "Outgroup species (default, use as outgroup species 1) (O)", "name": "outgroup", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"O\\n\" +str( value )+ \"\\n\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \"O\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "distance_method == \"neighbor\"", "perl": "$distance_method eq \"neighbor\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "neighbor.params"}, {"comment": null, "prompt": "Matrix format", "name": "triangular", "ctrl": null, "simple": null, "argpos": "1", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "neighbor.params"}]}, {"comment": null, "prompt": null, "name": "confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "neighbor.params"}, {"comment": null, "prompt": null, "name": "terminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "neighbor.params"}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/phylip/doc/neighbor.html"], "type": "program", "name": "neighbor"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabe1"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:motifs"}, {"type": "mobyle1", "classification": "sequence:protein:pattern"}, {"type": "mobyle1", "classification": "sequence:protein:profiles"}], "description": "predict cleavage sites for human proteasome.", "title": "netChop", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "netChop report.", "name": "results", "simple": null, "filenames": {"python": "\"netchop.out\"", "perl": "\"netchop.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "NetChop", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "netchop", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"netChop \"", "perl": "\"netChop \""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Input Sequence", "name": "sequence", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "\" \" + str( value )", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "netchop has  been  trained using  a  novel  sequence  encoding scheme, \n       and an improved neural network training strategy. \n       The netchop 3.0 version has two different network  methods  that  can  be\n       used for prediction.  Cterm-3.0 and 20S-3.0.", "prompt": "Prediction method (-v).", "name": "Method", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -v \"+ value )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef)? \" -v $value\": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use value as threshold for cleavage sites (-t).", "name": "threshold", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "( \"\" , \" -t \"+str(value) )[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -t $value\": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use short format for output (-s).", "name": "short_output", "ctrl": null, "simple": null, "argpos": "30", "format": {"python": "( \"\",\" -s \")[ bool( value ) ]", "perl": "($value)? \" -s\": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "3.1", "references": [{"url": null, "doi": null, "label": "The role of the proteasome in generating cytotoxic T cell epitopes:\n                 Insights obtained from improved predictions of proteasomal cleavage.\n                 M. Nielsen, C. Lundegaard, S. Brunak, O. Lund, and C. Kesmir.\n                 Immunogenetics., 57(1-2):33-41, 2005."}], "source_links": ["http://www.cbs.dtu.dk/cgi-bin/nph-sw_request?netchop"], "env": [], "authors": "Morten Nielsen, mniel@cbs.dtu.dk", "command": {"path": null, "value": null}, "documentation_links": ["http://www.cbs.dtu.dk/services/NetChop/"], "type": "program", "name": "netchop"}, {"comment": "netNglyc predicts N-glycosylation sites in human proteins using artificial neural networks that examine the\n       sequence context of Asn-Xaa-Ser/Thr sequons where Xaa  is  any  amino  acid  but  proline.", "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabe2"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:motifs"}, {"type": "mobyle1", "classification": "sequence:protein:pattern"}, {"type": "mobyle1", "classification": "sequence:protein:profiles"}], "description": "predict N-glycosylation sites in proteins.", "title": "netNglyc", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>Each input sequence is displayed with  the  predicted  \n        N-glycosylation sites highlighted. For each site the following is shown:</html:p><html:ul><html:li>sequence name</html:li><html:li>position in the sequence</html:li><html:li>sequence motif</html:li><html:li>N-glycosylation potential</html:li><html:li>Jury agreement, 9 networks</html:li><html:li>Prediction strength (+, ++ or +++)</html:li></html:ul></html:div>", "prompt": "netNglyc report.", "name": "results", "simple": null, "filenames": {"python": "\"netNglyc.out\"", "perl": "\"netNglyc.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "NetNglyc", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": "plotting the N-glycosylation potential and the threshold(s) against the residue\n              number of each predicted site.", "prompt": "graphic in PostScript", "name": "postscript", "simple": null, "filenames": {"python": "\"*.ps\"", "perl": "\"*.ps\""}, "precond": {"python": "graphics"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "NetNGlyc_Graph", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["Postscript"], "edam_types": [], "card": null}}, {"comment": "plotting the N-glycosylation potential and the threshold(s) against the residue\n              number of each predicted site.", "prompt": "graphic in GIF", "name": "gif", "simple": null, "filenames": {"python": "\"*.gif\"", "perl": "\"*.gif\""}, "precond": {"python": "graphics", "perl": "$graphics"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "NetNGlyc_Graph", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["GIF"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "netnglyc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"netNglyc \"", "perl": "\"netNglyc \""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Input Sequence", "name": "sequence", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "\" \" + str( value )", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Generate  graphics,  plotting  the N-glycosylation potential and the thresh\u2010\n              old(s) against the residue number of each predicted site. Two files will  be\n              produced for each input sequence, one in PostScript and the other in GIF.", "prompt": "generate graphics (-g).", "name": "graphics", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \"-g \" )[ bool( value ) ]", "perl": "($value)? \"-g \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Show  additional thresholds (0.32, 0.75 and 0.90) in the graphs. This option\n              is ignored unless -g is also given.", "prompt": "Show additional thresholds (0.32, 0.75, 0.90) in the graph(s).", "name": "threshold", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "( \"\" , \"-a \" )[ bool( value ) ]", "perl": "( defined $value )? \"-a \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Predict on all asparagines in the input. Note that asparagines that  do  not\n              occur  within the Asn-Xaa-Ser/Thr sequon are unlikely to be glycosylated, no\n              matter what the prediction score.  The default is to  predict  only  on  the\n              asparagines in the Asn-Xaa-Ser/Thr triplet.", "prompt": "Predict on all Asn residues (-f).", "name": "aspargine", "ctrl": null, "simple": null, "argpos": "30", "format": {"python": "( \"\",\"-f \")[ bool( value ) ]", "perl": "( defined )? \"-f \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.0a", "references": [{"url": null, "doi": null, "label": "Prediction of N-glycosylation sites in human proteins.\n                 R. Gupta, E. Jung and S. Brunak.\n                 In preparation, 2004."}], "source_links": ["http://www.cbs.dtu.dk/cgi-bin/nph-sw_request?netNglyc"], "env": [], "authors": "Ramneek Gupta, ramneek@cbs.dtu.dk", "command": {"path": null, "value": null}, "documentation_links": ["http://www.cbs.dtu.dk/services/NetNGlyc/"], "type": "program", "name": "netNglyc"}, {"comment": "The NetOglyc server produces neural network predictions of mucin type GalNAc O-glycosylation sites in mammalian proteins.", "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabe3"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:motifs"}, {"type": "mobyle1", "classification": "sequence:protein:pattern"}, {"type": "mobyle1", "classification": "sequence:protein:profiles"}], "description": "predict O-glycosylation sites in proteins.", "title": "netOglyc", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>Each input sequence is displayed with the predicted sites\n       indicated,  labelled  with  ``S''  and ``T'' for serine and threonine, respectively. The signal peptide (if\n       predicted) is labelled with ``_''. The details of the prediction for each serine and threonine residue  are\n       then shown in a table. The columns are:</html:p><html:ul><html:li>sequence name</html:li><html:li>residue (S or T)</html:li><html:li>position in the sequence</html:li><html:li>G-score (general predictor)</html:li><html:li>I-score (isolated site predictor)</html:li><html:li>final answer (S/T for predicted sites, otherwise `.')</html:li><html:li>comment</html:li></html:ul><html:p>The  final  answer  is  calculated as follows.  If the G-score is &gt;0.5 the residue is predicted as glycosy&#8208;\n       lated; the higher the score the more confident the prediction. If the G-score is &lt; 0.5 but the I-score  &gt;0.5\n       and there are no predicted neighbouring sites (distance &lt;10 residues) the residue is also predicted as gly&#8208;\n       cosylated.</html:p><html:p>If a residue in a predicted signal peptide is predicted as glycosylated there is a warning in  the  comment\n       field.</html:p></html:div>", "prompt": "netOglyc report", "name": "results", "simple": null, "filenames": {"python": "\"netOglyc.out\"", "perl": "\"netOglyc.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "NetOGlyc", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": "plotting the G-score against the position in the  sequence  of  each  serine  and\n              threonine  residue.  The  I-score  is  plotted  instead  for the residues where it decides the final\n              answer.", "prompt": "graphic in Postsricpt", "name": "postscript", "simple": null, "filenames": {"python": "\"*.ps\"", "perl": "\"*.ps\""}, "precond": {"python": "graphics", "perl": "graphics"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "NetOGlyc_graphic", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["PostScript"], "edam_types": [], "card": null}}, {"comment": "plotting the G-score against the position in the  sequence  of  each  serine  and\n              threonine  residue.  The  I-score  is  plotted  instead  for the residues where it decides the final\n              answer.", "prompt": "graphic in GIF", "name": "gif", "simple": null, "filenames": {"python": "\"*.gif\"", "perl": "\"*.gif\""}, "precond": {"python": "graphics", "perl": "graphics"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "NetOGlyc_graphic", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["GIF"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "netoglyc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" netOglyc \"", "perl": "\" netOglyc \""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Input Sequence", "name": "sequence", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "\" \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Non-secretory  proteins  are unlikely to be glycosylated in vivo even though they contain potential motifs.\n       Therefore, it is possible to run the signal peptide predictor signalp on the input sequences", "prompt": "Run signalp on the input sequences (-sp).", "name": "signal_peptide", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\",\"-sp \")[ bool( value ) ]", "perl": "( $value ) ? \"-sp \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Generate graphics, plotting the G-score against the position in the sequence\n              of each serine and threonine residue. The I-score is plotted instead for the\n              residues  where  it  decides  the  final answer. For each input sequence two\n              files will be produced  ``<seqname>.ps''\n              (in PostScript) and ``<seqname>.gif'' (in GIF).", "prompt": "generate graphics (-g).", "name": "graphics", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "( \"\" , \"-g \" )[ bool( value ) ]", "perl": "( $value )? \"-g \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "3.1", "references": [{"url": null, "doi": null, "label": "Prediction,  conservation  analysis and structural characterization of \n      mammalian mucin-type O-glycosylation sites.\n       K. Julenius, A. Moelgaard, R. Gupta and S. Brunak.\n       Glycobiology, 15:153-164, 2005."}], "source_links": ["http://www.cbs.dtu.dk/cgi-bin/nph-sw_request?netNglyc"], "env": [], "authors": "Karin Julenius, kj@cbs.dtu.dk", "command": {"path": null, "value": null}, "documentation_links": ["http://www.cbs.dtu.dk/services/NetOGlyc/", "http://www.cbs.dtu.dk/databases/OGLYCBASE/"], "type": "program", "name": "netOglyc"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabe4"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:cpg_islands"}], "description": "Identify CpG islands in nucleotide sequence(s)", "title": "newcpgreport", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "NewcpgreportReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Window size (value greater than or equal to 1)", "name": "e_window", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -window=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Shift increment (value greater than or equal to 1)", "name": "e_shift", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -shift=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Minimum length (value greater than or equal to 1)", "name": "e_minlen", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -minlen=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Minimum observed/expected (value from 0. to 10.)", "name": "e_minoe", "ctrl": {"python": "value >= 0."}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -minoe=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Minimum percentage (value from 0. to 100.)", "name": "e_minpc", "ctrl": {"python": "value >= 0."}, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -minpc=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "newcpgreport"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/newcpgreport.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "newcpgreport"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabe5"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:cpg_islands"}], "description": "Identify and report CpG-rich regions in nucleotide sequence(s)", "title": "newcpgseek", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "NewcpgseekReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Cpg score (value from 1 to 200)", "name": "e_score", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -score=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "newcpgseek"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/newcpgseek.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "newcpgseek"}, {"comment": "newicktops is a tree drawing program able to draw any binary tree expressed\n          in the standard phylogenetic tree format (e.g., the format used by the PHYLIP package).\n          NJplot allows display of bootstrap scores and printing in the PostScript format.", "homepage_links": ["http://pbil.univ-lyon1.fr/software/njplot.html"], "_id": {"$oid": "51434da493546d52388cabe6"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:display"}, {"type": "mobyle1", "classification": "display:tree"}], "description": "A phylogenetic tree drawing program for biologists", "title": "newicktops", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Tree draw", "name": "tree_out", "simple": null, "filenames": {"python": "\"*.ps\"", "perl": "\"*.ps\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "command", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"newicktops\"", "perl": "\"newicktops\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Tree file", "name": "tree", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "paper format", "name": "paper_format", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -us\" )[ value != vdef ]", "perl": "($value eq $vdef) ? \" -us\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Font size used for taxon names", "name": "font_size", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -size \" + str( value ) )[ value is not None ]", "perl": "(defined $value) ? \" -size $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show branch lengths if they appear in tree file", "name": "lengths", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -lengths\" )[ value ]", "perl": "($value) ? \" -lengths\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show bootstrap values if they appear in tree file", "name": "boots", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -boot\" )[ value ]", "perl": "($value) ? \" -boot\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Don't include title in postscript output", "name": "no_title", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "( \"\" , \" -notitle\" )[ value ]", "perl": "($value) ? \" -notitle\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "the size of page for postscript", "name": "paper_size", "children": [{"comment": null, "prompt": "width", "name": "width", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "height", "name": "height", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "ps_size", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -pssize %dx%d\" %( width , height )", "perl": "\" -pssize $widthx$height\""}, "command": false, "precond": {"python": "width != None and height != None", "perl": "defined($width) and defined($height)"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.0", "references": [], "source_links": ["ftp://pbil.univ-lyon1.fr/pub/mol_phylogeny/njplot/"], "env": [], "authors": "Manolo Gouy", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "newicktops"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabe7"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Create a sequence file from a typed-in sequence", "title": "newseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "The name of of the sequence should be a single word that you will use to identify the sequence. It should have no (or few)  punctuation characters in it.", "prompt": "Name of the sequence", "name": "e_name", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -name=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enter any description of the sequence that you require.", "prompt": "Description of the sequence", "name": "e_description", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -description=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Type of sequence", "name": "e_type", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -type=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The sequence itself. \n Because of the limitation of the operating system, you will only  be able to type in a short sequence of (typically) 250 characters,  or so. \n  The keyboard will beep at you when you have reached this limit and  you will not be able to press the RETURN/ENTER key until you have  deleted a few characters.", "prompt": "Enter the sequence", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "newseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/newseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "newseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabe8"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Write to file a subset of an input stream of sequences", "title": "notseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "junkoutseq_out option", "name": "e_junkoutseq_out", "simple": null, "filenames": {"python": "e_junkoutseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_junkoutseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "Enter a list of sequence names or accession numbers to exclude from the sequences read in. The excluded sequences will be  written to the file specified in the 'junkout' parameter. The  remainder will be written out to the file specified in the  'outseq' parameter. \n  The list of sequence names can be separated by either spaces or  commas. \n  The sequence names can be wildcarded. \n  The sequence names are case independent. \n  An example of a list of sequences to be excluded is: \n  myseq, hs*, one two three \n  a file containing a list of sequence names can be specified by  giving the file name preceeded by a '@', eg: '@names.dat'", "prompt": "Sequence names to exclude", "name": "e_exclude", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -exclude=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This file collects the sequences which you have excluded from the main output file of sequences.", "prompt": "Name of the output sequence file (e_junkoutseq)", "name": "e_junkoutseq", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -junkoutseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_junkoutseq", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "notseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/notseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "notseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabe9"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Write to file a single sequence from an input stream of sequences", "title": "nthseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "The number of the sequence to output (value greater than or equal to 1)", "name": "e_number", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -number=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "nthseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/nthseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "nthseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabea"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:others"}], "description": "concatenate phylogenetic tree files", "title": "nw_cat", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output treeset", "name": "output", "simple": null, "filenames": {"python": "\"nw_cat.out\"", "perl": "\"nw_cat.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "enter a phylogenetic tree", "prompt": "First treeset", "name": "input", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "type any kind of text", "prompt": "Second treeset", "name": "input_2", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\" , \" \" + str(value))[value is not None]", "perl": "(defined $value) ? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "GNU 7.4", "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "cat"}, "documentation_links": [], "type": "program", "name": "nw_cat"}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\">Due to an incompatibility between the PHYLIP format and phyml and morePhyml named rules, \n            the using of long identifier in phyml or morePhyml failed. We proposed the following workaround:<html:ol><html:li>your alignment must be in FASTA format, if it is in other format use squizz_convert to reformat it</html:li><html:li>use fastaRename to generate an alignment with short ID and a file of ID mapping</html:li><html:li>perform your analysis with the alignment with short id</html:li><html:li>replace the short IDs in your tree (in NEWICK format) with nw_rename and the file of IDs mapping generated at the step 1.</html:li></html:ol></html:div>", "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabeb"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:others"}], "description": "helps out with the 10-character limit of the PHYLIP-PHYML formats", "title": "newick ID mapper", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Newick tree", "name": "output_tree", "simple": null, "filenames": {"python": "\"nw_rename.out\"", "perl": "\"nw_rename.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "Put here youre treefile with the short ID in NEWICK format", "prompt": "Tree file (in NEWICK format)", "name": "input_newick", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" \" + str( value )", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The file of mapping between long ID and short ID. This file can be generated with fastaRename service.", "prompt": "Labels map", "name": "input_map", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \" + str( value )", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "ID_Mapping", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.6", "references": [], "source_links": [], "env": [], "authors": "GNU", "command": {"path": null, "value": "nw_rename"}, "documentation_links": [], "type": "program", "name": "nw_rename"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabec"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Draw a White-Wimley protein hydropathy plot", "title": "octanol", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "White-wimley data file", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "WhiteWimleyDatafile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Window size (value from 1 to 200)", "name": "e_width", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -width=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display the octanol plot", "name": "e_plotoctanol", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -plotoctanol\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display the interface plot", "name": "e_plotinterface", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -plotinterface\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display the difference plot", "name": "e_plotdifference", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\" -noplotdifference\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "octanol"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/octanol.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "octanol"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabed"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:motifs"}], "description": "Identify proteins with specified sequence word composition", "title": "oddcomp", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "OddcompReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "This is a file in the format of the output produced by 'compseq' that is used to set the minimum frequencies of words in  this analysis.", "prompt": "Program compseq output file", "name": "e_infile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -infile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "CompseqReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "Set this option on (Y) if you want the window size to be set to the length of the current protein. Otherwise, leave this  option unset, in which case you'll be prompted for a window size  to use.", "prompt": "Set window size to length of current protein", "name": "e_fullwindow", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -fullwindow\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is the size of window in which to count. \n Thus if you want to count frequencies in a 40 aa stretch you  should enter 40 here.", "prompt": "Window size to consider (e.g. 30 aa) (value greater than or equal to 10)", "name": "e_window", "ctrl": {"python": "value >= 10"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -window=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "not e_fullwindow"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "The amino acid code B represents Asparagine or Aspartic acid and the code Z represents Glutamine or Glutamic acid. \n  These are not commonly used codes and you may wish not to count  words containing them, just noting them in the count of 'Other'  words.", "prompt": "Ignore the amino acids b and z and just count them as 'other'", "name": "e_ignorebz", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\" -noignorebz\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "This is the results file.", "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "oddcomp"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/oddcomp.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "oddcomp"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabee"}, "classifications": [{"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:Peak Annotation"}, {"type": "mobyle1", "classification": "Genomic Analysis:Multi-Purpose Tools"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Annotation and Alignment"}, {"type": "mobyle1", "classification": "Sequence Analysis and Comparison:Comparative Genomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Variant Analysis"}, {"type": "mobyle1", "classification": "Utilities and Tools:File Format Conversion"}, {"type": "mobyle1", "classification": "Omics:Genomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:Variant calling"}], "description": "pairToPair compares two BEDPE (Paired-End) files in search of overlaps where each end of a BEDPE feature in A overlaps with the ends of a feature in B. For example, using pairToPair, one could screen for the exact same discordant paired-end alignment in two files. This could suggest (among other things) that the discordant pair suggests the same structural variation in each file/sample.", "title": "BEDtools:pairToPair", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output", "name": "Output", "children": [{"comment": null, "prompt": "Paired-end overlap file value", "name": "pe_overlap_file", "simple": null, "filenames": {"python": "(\"overlap_regions.txt\",output_file)[output_file is not None]"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "CustomReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input", "name": "input_args", "children": [{"comment": "Refer to the BEDTools manual for BEDPE format.", "prompt": "First BED (Paired-End) data (-a)", "name": "input_bedpe_fileA", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -a \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Second BED (Paired-End) data (-b)", "name": "input_bedpe_fileB", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" -b \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "options_para", "children": [{"comment": "Minimum overlap required as fraction of A (e.g. 0.05). \t\tDefault is 1E-9 (effectively 1bp).", "prompt": "Minimum overlap required as a fraction of A (-f)", "name": "minimum_overlap", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -f \"+str(value) )[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Note: Slop is subtracted from start1 and start2 and added to end1 and end2", "prompt": "The amount of slop (in b.p.). to be added to each footprint (-slop)", "name": "slop_value", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -slop \"+str(value) )[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "- If strand is \"+\", slop is only added to the end coordinates.- If strand is \"-\", slop is only added to the start coordinates.- By default, slop is added in both directions.", "prompt": "Add slop based to each BEDPE footprint based on strand (-ss)", "name": "strandedness", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' -ss ')[value == 1]"}, "command": false, "precond": {"python": "slop_value is not None"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default, strands are enforced", "prompt": "Ignore strands when searching for overlaps (-is)", "name": "ignore_strands_in_overlaps", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -is \")[value == 1]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default, same names are allowed.", "prompt": "Require that the hits must have different names (i.e. avoid self-hits) [-rdn]", "name": "different_name", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -rdn \")[value == 1]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output", "name": "Output", "children": [{"comment": null, "prompt": "Overlap output options (-type)", "name": "overlap_option", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\",\" -type \"+ str(value) )[value is not None and value != vdef ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output file name", "name": "output_file", "ctrl": null, "simple": null, "argpos": "60", "format": {"python": "\" > \" + ( str(vdef) ,  str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "2.15.0", "references": [], "source_links": [], "env": [], "authors": "Quinlan A.R. & Hall I.M.", "command": {"path": null, "value": "pairToPair"}, "documentation_links": [], "type": "program", "name": "pairToPair"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabef"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:repeats"}], "description": "Finds inverted repeats in nucleotide sequence(s)", "title": "palindrome", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PalindromeReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Enter minimum length of palindrome (value greater than or equal to 1)", "name": "e_minpallen", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -minpallen=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Enter maximum length of palindrome", "name": "e_maxpallen", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -maxpallen=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Enter maximum gap between repeated regions (value greater than or equal to 0)", "name": "e_gaplimit", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -gaplimit=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of mismatches allowed (Positive integer)", "name": "e_nummismatches", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -nummismatches=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Report overlapping matches", "name": "e_overlap", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\" -nooverlap\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "palindrome"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/palindrome.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "palindrome"}, {"comment": "PARS is a general parsimony program which carries out the Wagner parsimony method with multiple states. Wagner parsimony allows changes among all states. The criterion is to find the tree which requires the minimum number of changes.", "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabf0"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:parsimony"}], "description": "Discrete character parsimony", "title": "pars", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Pars output file", "name": "outfile", "simple": null, "filenames": {"python": "\"pars.outfile\"", "perl": "\"pars.outfile\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Pars output tree", "name": "treefile", "simple": null, "filenames": {"python": "\"pars.outtree\"", "perl": "\"pars.outtree\""}, "precond": {"python": "print_treefile", "perl": "$print_treefile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "seqboot outfile", "name": "seqboot_out", "simple": null, "filenames": {"python": "\"seqboot.outfile\"", "perl": "\"seqboot.outfile\""}, "precond": {"python": "( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5)", "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble  >= 0 and $ seqboot_or_jumble < 5 )"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SetOfPhylipDiscreteCharMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Consense output file", "name": "consense_outfile", "simple": null, "filenames": {"python": "\"consense.outfile\"", "perl": "\"consense.outfile\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Consense output tree", "name": "consense_treefile", "simple": null, "filenames": {"python": "\"consense.outtree\"", "perl": "\"consense.outtree\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "pars", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"pars < pars.params\"", "perl": "\"pars < pars.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Warnning: if you want to perform a bootstrap (seqboot method) before your pars analysis your data must be in sequential format.", "prompt": "Input File", "name": "infile", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"ln -s \" + str( infile ) +\" infile && \"", "perl": "\"ln -s $infile infile && \""}, "command": false, "precond": {"python": "infile != \"infile\"", "perl": "$infile ne \"infile\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipDiscreteCharMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "if you intend to perform pars alone, your data must be in Phylip format interleaved or sequential. But\n    \t\tif you want to perform a bootsrap (seqboot) before the pars analysis, the data must be in Phylip sequential format.", "prompt": "Input File Format", "name": "input_format", "ctrl": {"python": "(value == 'sequential') if ( ( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5) ) else True", "perl": "( defined $seqboot_or_jumble and ( $seqboot_or_jumble  >= 0 and $seqboot_or_jumble  < 5 ) )? (value eq 'sequential') : 1"}, "simple": null, "argpos": "90", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}, {"comment": null, "precond": null, "prompt": "Pars options", "name": "pars_opt", "children": [{"comment": "PARS is a general parsimony program which carries out the Wagner parsimony method with multiple states. Wagner parsimony allows changes among all states. The criterion is to find the tree which requires the minimum number of changes. The Wagner method was originated by Eck and Dayhoff (1966) and by Kluge and Farris (1969). Here are its assumptions:1. Ancestral states are unknown.2. Different characters evolve independently.3. Different lineages evolve independently.4. Changes to all other states are equally probable (Wagner).5. These changes are a priori improbable over the evolutionary time spans involved in the differentiation of the group in question.6. Other kinds of evolutionary event such as retention of polymorphism are far less probable than these state changes.7. Rates of evolution in different lineages are sufficiently low that two changes in a long segment of the tree are far less probable than one change in a short segment.PARS can handle both bifurcating and multifurcating trees. In doing its search for most parsimonious trees, it adds species not only by creating new forks in the middle of existing branches, but it also tries putting them at the end of new branches which are added to existing forks. Thus it searches among both bifurcating and multifurcating trees. If a branch in a tree does not have any characters which might change in that branch in the most parsimonious tree, it does not save\n              that tree. Thus in any tree that results, a branch exists only if some character has a most parsimonious reconstruction that would involve change in that branch.", "prompt": "Search option (S)", "name": "search_opt", "ctrl": null, "simple": null, "argpos": "1", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}, {"comment": null, "prompt": "Number of trees to save? (V)", "name": "save_trees", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \"V\\n\"+str(value)+\"\\n\")[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \"V\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}]}, {"comment": null, "precond": null, "prompt": "Weight options", "name": "weight_opt", "children": [{"comment": "The weights follow the format described in the main documentation file, with integer weights from 0 to 35 allowed by using the characters 0, 1, 2, ..., 9 and A, B, ... Z.", "prompt": "Weighted sites (W)", "name": "weights", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\" , \"W\\n\")[ value ]", "perl": "($value) ? \"W\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}, {"comment": null, "prompt": "Weight file", "name": "weight_file", "ctrl": null, "simple": null, "argpos": "-9", "format": {"python": "\"ln -s \" + str( weight_file ) + \" weights && \"", "perl": "\"ln -s $weight_file weights && \""}, "command": false, "precond": {"python": "weights", "perl": "$weights"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipWeight", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "User tree options", "name": "user_tree_opt", "children": [{"comment": "To give your tree to the program, you must normally put it in the alignment file, after the sequences, preceded by a line indicating how many trees you give.Here, this will be automatically appended: just give a treefile and the number of trees in it.", "prompt": "Use user tree (default: no, search for best tree)? (U)", "name": "user_tree", "ctrl": {"python": "not ( user_tree and jumble )", "perl": "not ( $user_tree and $jumble )"}, "simple": null, "argpos": "1", "format": {"python": "(\"\", \"U\\n\")[ value ]", "perl": "($value) ? \"U\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}, {"comment": "Give a tree whenever the infile does not already contain the tree.", "prompt": "User Tree file", "name": "tree_file", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "(\"\", \" cat \"+ str( tree_file ) + \" >> intree && \" )[value is not None]", "perl": "(defined $value) ? \"cat $tree_file >> intree && \" : \"\""}, "command": false, "precond": {"python": "user_tree", "perl": "$user_tree"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Give this information whenever the infile does not already contain the tree.", "prompt": "How many tree(s) in the User Tree file", "name": "tree_nb", "ctrl": null, "simple": null, "argpos": "-2", "format": {"python": "\"echo \" + str( value ) + \" >> intree && \"", "perl": "\"echo $value >> intree && \""}, "command": false, "precond": {"python": "tree_file is not None", "perl": "defined $tree_file"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "By selecting this option, the bootstrap will be performed on your sequence file. So you don't need to perform a separated seqboot before.Don't give an already bootstrapped file to the program, this won't work!", "precond": null, "prompt": "Bootstrap and Jumble options", "name": "jumble_bootstrap", "children": [{"comment": "The resampling methods available are:The bootstrap.Bootstrapping was invented by Bradley Efron in 1979, and its use in phylogeny estimation was introduced by me (Felsenstein, 1985b; see also Penny and Hendy, 1985). \n          It involves creating a new data set by sampling N characters randomly with replacement, so that the resulting data set has the same size as the original,\n          but some characters have been left out and others are duplicated. The random variation of the results from analyzing these bootstrapped data sets can be\n          shown statistically to be typical of the variation that you would get from collecting new data sets.\n          The method assumes that the characters evolve independently, an assumption that may not be realistic for many kinds of data.Delete-half-jackknifing.This alternative to the bootstrap involves sampling a random half of the characters, and including them in the data but dropping the others.\n           The resulting data sets are half the size of the original, and no characters are duplicated.\n           The random variation from doing this should be very similar to that obtained from the bootstrap. \n           The method is advocated by Wu (1986). It was mentioned by me in my bootstrapping paper (Felsenstein, 1985b), and has been available\n           for many years in this program as an option. \n           Note that, for the present, block-jackknifing is not available, because I cannot figure out how to do it straightforwardly when the block size is not a divisor of the number of characters.Permuting species within characters.This method of resampling (well, OK, it may not be best to call it resampling) was introduced by Archie (1989) and Faith (1990; see also Faith and Cranston, 1991).\n          It involves permuting the columns of the data matrix separately.\n          This produces data matrices that have the same number and kinds of characters but no taxonomic structure.\n          It is used for different purposes than the bootstrap, as it tests not the variation around an estimated tree but the\n          hypothesis that there is no taxonomic structure in the data: if a statistic such as number of steps is significantly smaller in the actual data than it is in replicates that are permuted, \n          then we can argue that there is some taxonomic structure in the data (though perhaps it might be just the presence of aa pair of sibling species).Permuting characters.This simply permutes the order of the characters, the same reordering being applied to all species.\n          For many methods of tree inference this will make no difference to the outcome (unless one has rates of evolution correlated among adjacent sites).\n          It is included as a possible step in carrying out a permutation test of homogeneity of characters (such as the Incongruence Length Difference test).Permuting characters separately for each species.This is a method introduced by Steel, Lockhart, and Penny (1993) to permute data so as to destroy all phylogenetic structure, while keeping the base composition of each species the same as before.\n          It shuffles the character order separately for each species.Jumblethe tree construction programs the exact details of the search of different trees depend on the order of input of species. \n          In these programs J option enables you to tell the program to use a random number generator to choose the input order of species.", "prompt": "I want to", "name": "seqboot_or_jumble", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The seqboot and jumble seed option should be an integer between 1 and 32767, and should of form 4n+1, which means that it must give a remainder of 1 when divided by 4. \n               This can be judged by looking at the last two digits of the number. Each different seed leads to a different sequence of addition of species. \n               By simply changing the random number seed and re-running the programs one can look for other, and better trees. \n               If the seed entered is not odd, the program will not proceed.", "prompt": "Random number seed (must be odd)", "name": "seed", "ctrl": {"python": "value > 0 and (( value % 2 ) != 0 )", "perl": "$value > 0 and (($value % 2) != 0)"}, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "seqboot_or_jumble is not None", "perl": "defined $seqboot_or_jumble"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "seqboot", "ctrl": null, "simple": null, "argpos": "-5", "format": {"python": "\"seqboot <seqboot.params && mv outfile seqboot.outfile && rm infile  && ln -s seqboot.outfile infile && \"", "perl": "($value) ? \"seqboot <seqboot.params && mv outfile seqboot.outfile && rm infile  && ln -s seqboot.outfile infile && \" : \"\""}, "command": false, "precond": {"python": "( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5)", "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble  >= 0 and $ seqboot_or_jumble < 5 )"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "seqboot_method", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( 'D\\n' , 'D\\nJ\\n' , 'D\\nJ\\nJ\\n' , 'D\\nJ\\nJ\\nJ\\n' , 'D\\nJ\\nJ\\nJ\\nJ\\n' , )[ int( seqboot_or_jumble ) ]", "perl": "qw ( D\\\\n D\\\\nJ\\\\n D\\\\nJ\\\\nJ\\\\n D\\\\nJ\\\\nJ\\\\nJ\\\\n D\\\\nJ\\\\nJ\\\\nJ\\\\nJ\\\\n )[$seqboot_or_jumble]"}, "command": false, "precond": {"python": "( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5)", "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble >= 0 and $seqboot_or_jumble < 5 )"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": null, "name": "seqboot_seed", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "str( seed ) + \"\\n\"", "perl": "\"$seed\\\\n\""}, "command": false, "precond": {"python": "( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble >= 0 ) and int( seqboot_or_jumble ) < 5)", "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble  >= 0 and $ seqboot_or_jumble < 5 )"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": "This option is mandatory if you select a seqboot method. This value indicate how many set of data you will generate.\n            This option could generate huge data and should be used with discernment.  \n            If you provide 10 \"sequences\" of 1000 char lenght each (a file of ~10Kb) and select 1000 replicates wou will generate 10.000 sequences of 1000 char lenght (a file of ~10Mb which could lead to some problems to view or download the results)", "prompt": "How many replicates", "name": "seqboot_replicates", "ctrl": {"python": "value <= 1000", "perl": "$value <= 1000"}, "simple": null, "argpos": "20", "format": {"python": "\"R\\n\" + str( value ) + \"\\n\"", "perl": "\"R\\\\n$value\\\\n\""}, "command": false, "precond": {"python": "( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5)", "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble  >= 0 and $ seqboot_or_jumble < 5 )"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": null, "name": "bootconfirm", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\"y\\n\"", "perl": "\"y\\\\n\""}, "command": false, "precond": {"python": "( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5)", "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble  >= 0 and $ seqboot_or_jumble < 5 )"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": null, "name": "bootterminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": {"python": "( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5)", "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble  >= 0 and $ seqboot_or_jumble < 5 )"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": null, "name": "jumble", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "'J\\n' + str( seed ) + \"\\n\" + str( jumble_times ) +\"\\n\"", "perl": "\"J\\\\n$seed\\\\n$jumble_times\\\\n\""}, "command": false, "precond": {"python": "( seqboot_or_jumble is not None ) and ( seqboot_or_jumble == \"5\" )", "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble  eq \"5\" )"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}, {"comment": "The Seqboot or Jumble options also causes the program to ask you how many times you want to restart the jumble process.\n            If you answer 10, the program will try ten different orders of species in constructing the trees, and the results printed out will reflect this entire search process (that is, the best trees found among all 10 runs will be printed out, not the best trees from each individual run).", "prompt": "Number of times to jumble", "name": "jumble_times", "ctrl": {"python": "(jumble_times * seqboot_replicates) <= 100000 if ( ( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5) ) else (value < 1000000 )", "perl": "( (seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5)) ? ($jumble_times * $seqboot_replicates) <= 100000 : ( $value < 1000000 )"}, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "seqboot_or_jumble is not None", "perl": "defined $seqboot_or_jumble"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "multiple_dataset", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "\"M\\nD\\n\" + str( seqboot_replicates ) + \"\\n\" + str( seed ) +\"\\n\" + str( jumble_times ) +\"\\n\"", "perl": "\"M\\nD\\n\" + str( seqboot_replicates ) + \"\\n\" + str( seed ) +\"\\n\" + str( jumble_times ) +\"\\n\""}, "command": false, "precond": {"python": "seqboot_or_jumble is not None and seqboot_or_jumble != \"5\"", "perl": "defined $seqboot_or_jumble and $seqboot_or_jumble ne \"5\""}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}, {"comment": "this option make sense only if you have multiple data set ( seqboot )", "prompt": "Compute a consensus tree ( seqboot )", "name": "consense", "ctrl": null, "simple": null, "argpos": "30", "format": {"python": "( \"\" , \" && cp infile pars.infile && cp pars.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" )[ value ]", "perl": "($value) ? \" && cp infile pars.infile && cp pars.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" : \"\""}, "command": false, "precond": {"python": "( seqboot_or_jumble is not None ) and ( seqboot_or_jumble != \"5\" )", "perl": "( defined $seqboot_or_jumble and seqboot_or_jumble ne \"5\" ) and $print_treefile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": "Tells the program to print a semi-graphical picture of the tree in the outfile.", "prompt": "Print out tree (3)", "name": "print_tree", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"3\\n\", \"\")[ value ]", "perl": "($value) ? \"\" : \"3\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}, {"comment": null, "prompt": "Print out steps in each character (4)", "name": "print_step", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \"4\\n\")[ value ]", "perl": "($value) ? \"4\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}, {"comment": null, "prompt": "Print states at all nodes of tree (5)", "name": "print_states", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \"5\\n\")[ value ]", "perl": "($value) ? \"5\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}, {"comment": "Tells the program to save the tree in a treefile (a standard representation of trees where the tree is specified by a nested pairs of parentheses, enclosing names and separated by commas).", "prompt": "Write out trees onto tree file (6)", "name": "print_treefile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"6\\n\", \"\")[ value ]", "perl": "($value) ? \"\" : \"6\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}, {"comment": null, "prompt": "Print out the data at start of run (1)", "name": "printdata", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \"1\\n\")[ value ]", "perl": "($value) ? \"1\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}]}, {"comment": null, "precond": null, "prompt": "Parsimony options", "name": "parsimony_opt", "children": [{"comment": null, "prompt": "Use Threshold parsimony (T)", "name": "use_threshold", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \"T\\n\" + str(threshold) + \"\\n\")[ value ]", "perl": "($value) ? \"T\\\\n$threshold\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}, {"comment": null, "prompt": "Threshold parsimony value", "name": "threshold", "ctrl": {"python": "threshold > 1", "perl": "$threshold > 1"}, "simple": null, "argpos": "2", "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "use_threshold", "perl": "$use_threshold"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}]}, {"comment": null, "precond": null, "prompt": "Other options", "name": "other_options", "children": [{"comment": "The O (Outgroup) option specifies which species is to have the root of the tree be on the line leading to it.For example, if the outgroup is a species \"Mouse\" then the root of the tree will be placed in the middle of the branch which is connected to this species, with Mouse branching off on one side of the root and the lineage leading to the rest of the tree on the other.This option is toggle on by choosing the number of the outgroup (the species being taken in the numerical order that they occur in the input file).Outgroup-rooting will not be attempted  if it is a user-defined tree, despite your invoking the option.When it is used, the tree as printed out is still listed as being an unrooted tree, though the outgroup is connected to the bottommost node so that it is easy to visually convert the tree into rooted form.", "prompt": "Outgroup root species (O)", "name": "outgroup", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "1", "format": {"python": "(\"\", \"o\\n\" + str(value) + \"\\n\")[value is not None and value!=vdef]", "perl": "(defined $value and $value != $vdef) ? \"o\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}]}, {"comment": null, "prompt": null, "name": "confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"y\\n\"", "perl": "\"y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}, {"comment": null, "prompt": null, "name": "terminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "pars.params"}, {"comment": null, "prompt": null, "name": "consense_confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "prompt": null, "name": "consense_terminal_type", "ctrl": null, "simple": null, "argpos": "-2", "format": {"python": "\"T\\n\"", "perl": "\"T\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/phylip/doc/pars.html"], "type": "program", "name": "pars"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabf1"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Insert one sequence into another", "title": "pasteseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "Sequence to insert", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "The position in the main input sequence to insert after. \n To insert before the start use the position 0.", "prompt": "Position to insert after (value greater than or equal to 0)", "name": "e_pos", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -pos=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "pasteseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/pasteseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "pasteseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabf2"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:motifs"}], "description": "Searches protein sequences with a sequence motif", "title": "patmatdb", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "Patterns for patmatdb are based on the format of pattern used in the PROSITE database. For example:  '[DE](2)HS{P}X(2)PX(2,4)C' means two Asps or Glus in any order  followed by His, Ser, any residue other then Pro, then two of any  residue followed by Pro followed by two to four of any residue  followed by Cys. The search is case-independent, so 'AAA' matches  'aaa'.", "prompt": "Protein motif to search for", "name": "e_motif", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -motif=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "patmatdb"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/patmatdb.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "patmatdb"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabf3"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:motifs"}], "description": "Scan a protein sequence with motifs from the PROSITE database", "title": "patmatmotifs", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Provide full documentation for matching patterns", "name": "e_full", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -full\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Ignore simple patterns. If this is true then these simple post-translational modification sites are not reported: myristyl,  asn_glycosylation, camp_phospho_site, pkc_phospho_site,  ck2_phospho_site, and tyr_phospho_site.", "prompt": "Ignore simple patterns", "name": "e_prune", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\" -noprune\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "patmatmotifs"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/patmatmotifs.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "patmatmotifs"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabf4"}, "classifications": [{"type": "mobyle1", "classification": "structure:3D_structure"}], "description": "Calculate angles in beta-strands", "title": "pdb21", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output parameters", "name": "output", "children": [{"comment": null, "prompt": "Values of angles", "name": "folding", "simple": null, "filenames": {"python": "'*.xls'", "perl": "'*.xls'"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Pdb21Report", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["excel"], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "PDB File", "name": "pdb_file", "ctrl": {"python": "(bool(pdb_id) + bool(pdb_file) +bool(pdb_ids))==1", "perl": "(defined($pdb_id)? 1:0 )+(defined($pdb_file)? 1:0 )+(defined($pdb_ids)? 1:0 ) == 1"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -f \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -f $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "_3DStructure", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["PDB"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "or you can instead enter a PDB id (4 characters).", "name": "pdb_id", "ctrl": {"python": "(bool(pdb_id) + bool(pdb_file) +bool(pdb_ids)) == 1", "perl": "(defined($pdb_id)? 1:0 )+(defined($pdb_file)? 1:0 )+(defined($pdb_ids)? 1:0 ) == 1"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -n \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -n $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "or you list can enter a list of PDB ids (4 characters), one per line.", "name": "pdb_ids", "ctrl": {"python": "(bool(pdb_id) + bool(pdb_file) +bool(pdb_ids))==1", "perl": "(defined($pdb_id)? 1:0 )+(defined($pdb_file)? 1:0 )+(defined($pdb_ids)? 1:0 ) == 1"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -l \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -l $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "PDBIdsList", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": "Caudron B., Jestin J-L.", "command": {"path": null, "value": "pdb21"}, "documentation_links": [], "type": "program", "name": "pdb21"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabf5"}, "classifications": [{"type": "mobyle1", "classification": "structure:3D_structure"}], "description": "Calculate distance to sheet axis.", "title": "pdb22", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output parameters", "name": "output", "children": [{"comment": null, "prompt": "Distance to sheet axis", "name": "folding", "simple": null, "filenames": {"python": "'*.xls'", "perl": "'*.xls'"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Pdb22Report", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "PDB File", "name": "pdb_file", "ctrl": {"python": "(bool(pdb_id) + bool(pdb_file) +bool(pdb_ids))==1", "perl": "(defined($pdb_id)? 1:0 )+(defined($pdb_file)? 1:0 )+(defined($pdb_ids)? 1:0 ) == 1"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -f \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -f $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "_3DStructure", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["PDB"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "or you can instead enter a PDB id (4 characters).", "name": "pdb_id", "ctrl": {"python": "(bool(pdb_id) + bool(pdb_file) +bool(pdb_ids)) == 1", "perl": "(defined($pdb_id)? 1:0 )+(defined($pdb_file)? 1:0 )+(defined($pdb_ids)? 1:0 ) == 1"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -n \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -n $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "or you list can enter a list of PDB ids (4 characters), one per line.", "name": "pdb_ids", "ctrl": {"python": "(bool(pdb_id) + bool(pdb_file) +bool(pdb_ids))==1", "perl": "(defined($pdb_id)? 1:0 )+(defined($pdb_file)? 1:0 )+(defined($pdb_ids)? 1:0 ) == 1"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -l \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -l $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "PDBIdsList", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": "Caudron B., Jestin J-L.", "command": {"path": null, "value": "pdb22"}, "documentation_links": [], "type": "program", "name": "pdb22"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabf6"}, "classifications": [{"type": "mobyle1", "classification": "structure:3D_structure"}], "description": "Calculate SOF: Sequences with Optimal Folding properties", "title": "pdb2", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output parameters", "name": "output", "children": [{"comment": null, "prompt": "Folding properties", "name": "folding", "simple": null, "filenames": {"python": "'*.xls'", "perl": "'*.xls'"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Pdb2Report", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["excel"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "pdb2 file log", "name": "log", "simple": null, "filenames": {"python": "'*.txt'", "perl": "'*.txt'"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "pdb2Log", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "PDB File", "name": "pdbfile", "ctrl": {"python": "pdbfile is not None and pdbid is None", "perl": "not defined $pdbid and defined $pdbfile"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -f \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -f $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "_3DStructure", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["PDB"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "or you can instead enter a PDB id (4 characters).", "name": "pdbid", "ctrl": {"python": "pdbid is not None and pdbfile is None", "perl": "defined $pdbid and not defined $pdbfile"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -n \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -n $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": "Guilloux A., Caudron B., Jestin J-L.", "command": {"path": null, "value": "pdb2"}, "documentation_links": [], "type": "program", "name": "pdb2"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabf7"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:2D_structure"}, {"type": "mobyle1", "classification": "sequence:protein:motifs"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Predicts coiled coil regions in protein sequences", "title": "pepcoil", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Window size (value from 7 to 28)", "name": "e_window", "ctrl": {"python": "value >= 7"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -window=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Report coiled coil regions", "name": "e_coil", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\" -nocoil\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Yes if -coil is true", "prompt": "Show coil frameshifts", "name": "e_frame", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -frame\")[ bool(value) ]"}, "command": false, "precond": {"python": "e_coil"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Report non coiled coil regions", "name": "e_other", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -other\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "pepcoil"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/pepcoil.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "pepcoil"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabf8"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Plot amino acid properties of a protein sequence in parallel.", "title": "pepinfo", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PepinfoReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "Amino acid chemical classes data file", "name": "e_aaproperties", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -aaproperties=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "AminoAcidClassification", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Amino acid hydropathy values data file", "name": "e_aahydropathy", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -aahydropathy=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "AminoAcidHydropathy", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Window size for hydropathy averaging (value greater than or equal to 1)", "name": "e_hwindow", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -hwindow=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Plot histogram of general properties", "name": "e_generalplot", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\" -nogeneralplot\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Plot graphs of hydropathy", "name": "e_hydropathyplot", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\" -nohydropathyplot\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "pepinfo"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/pepinfo.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "pepinfo"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabf9"}, "classifications": [{"type": "mobyle1", "classification": "display:protein:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Draw a helical net for a protein sequence", "title": "pepnet", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "If this is true then the residues ACFGILMVWY are marked as squares and all other residues are unmarked. This overrides any  other markup that you may have specified using the qualifiers  '-squares', '-diamonds' and '-octags'.", "prompt": "Prompt for amphipathic residue marking", "name": "e_amphipathic", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -amphipathic\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default the aliphatic residues ILVM are marked with squares.", "prompt": "Mark as squares", "name": "e_squares", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -squares=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "not e_amphipathic"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default the residues DENQST are marked with diamonds.", "prompt": "Mark as diamonds", "name": "e_diamonds", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -diamonds=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "not e_amphipathic"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default the positively charged residues HKR are marked with octagons.", "prompt": "Mark as octagons", "name": "e_octags", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -octags=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "not e_amphipathic"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "e_goutfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "pepnet"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/pepnet.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "pepnet"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabfa"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Calculates statistics of protein properties", "title": "pepstats", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PepstatsReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "Amino acid properties", "prompt": "Amino acids properties and molecular weight data file", "name": "e_aadata", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -aadata=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "AminoAcidProperties", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Molecular weight data for amino acids", "prompt": "Molecular weights data file", "name": "e_mwdata", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -mwdata=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "MolecularWeights", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Include charge at n and c terminus", "name": "e_termini", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -notermini\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use monoisotopic weights", "name": "e_mono", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -mono\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "pepstats"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/pepstats.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "pepstats"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabfb"}, "classifications": [{"type": "mobyle1", "classification": "display:protein:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Draw a helical wheel diagram for a protein sequence", "title": "pepwheel", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Plot the wheel", "name": "e_wheel", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\" -nowheel\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The number of residues plotted per turn is this value divided by the 'turns' value.", "prompt": "Number of steps (value from 2 to 100)", "name": "e_steps", "ctrl": {"python": "value >= 2"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -steps=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The number of residues plotted per turn is the 'steps' value divided by this value.", "prompt": "Number of turns (value from 1 to 100)", "name": "e_turns", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -turns=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "e_goutfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Markup section", "name": "e_markupsection", "children": [{"comment": "If this is true then the residues ACFGILMVWY are marked as squares and all other residues are unmarked. This overrides  any other markup that you may have specified using the  qualifiers '-squares', '-diamonds' and '-octags'.", "prompt": "Prompt for amphipathic residue marking", "name": "e_amphipathic", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -amphipathic\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default the aliphatic residues ILVM are marked with squares.", "prompt": "Mark as squares", "name": "e_squares", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -squares=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "not e_amphipathic"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default the residues DENQST are marked with diamonds.", "prompt": "Mark as diamonds", "name": "e_diamonds", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -diamonds=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "not e_amphipathic"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default the positively charged residues HKR are marked with octagons.", "prompt": "Mark as octagons", "name": "e_octags", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -octags=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "not e_amphipathic"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "pepwheel"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/pepwheel.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "pepwheel"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabfc"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Draw Kyte-Doolittle hydropathy plot for a protein alignment", "title": "pepwindowall", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "File containing a sequence alignment", "prompt": "sequences option", "name": "e_sequences", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequences=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA", "MSF", "PAIR", "MARKX0", "MARKX1", "MARKX2", "MARKX3", "MARKX10", "SRS", "SRSPAIR", "SCORE", "UNKNOWN", "MULTIPLE", "SIMPLE", "MATCH"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Aaindex entry data file", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "AaindexData", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Window size (value from 1 to 200)", "name": "e_length", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -length=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Normalize data values", "name": "e_normalize", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -normalize\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "pepwindowall"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/pepwindowall.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "pepwindowall"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabfd"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Draw a hydropathy plot for a protein sequence", "title": "pepwindow", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "Aaindex entry data file", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "AaindexData", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Window size (value from 1 to 200)", "name": "e_length", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -length=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Normalize data values", "name": "e_normalize", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -normalize\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "pepwindow"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/pepwindow.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "pepwindow"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabfe"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:pattern"}, {"type": "mobyle1", "classification": "sequence:protein:pattern"}], "description": "Profile Tools", "title": "PFTOOLS", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": []}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "pfscan compares a protein or nucleic acid sequence against a profile library (default: Prosite).pfsearch compares a query profile against a DNA or protein sequence library.The result is an unsorted list of profile-sequence matches written to the standard output.", "prompt": "PFTOOLS program", "name": "pftools", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "str(value) + \" -v\"", "perl": "\"$value -v\""}, "command": true, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "fasta_format", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -f\"", "perl": "\" -f\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "pftools == \"pfscan\"", "perl": "$pftools eq \"pfscan\""}, "prompt": "PFSCAN parameters", "name": "pfscan", "children": [{"comment": "This DNA or protein sequence will be used to  search  for  matches  to  a library of PROSITE profiles.", "prompt": "Sequence File", "name": "seqfile", "ctrl": null, "simple": null, "argpos": "90", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Prosite library", "prompt": "Scan PROSITE db?", "name": "prosite", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "( \"\" , \"", "perl": "($value) ? \""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This  file  should contain one or several PROSITE profiles, against which the query sequence will be matched.  Each entry in this library should be separated  from the next by a line containing only the code.", "prompt": "Profile(s) file in PROSITE format", "name": "profiledb", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": {"python": "not prosite", "perl": "not $prosite"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PrositeProfile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "pftools == \"pfsearch\"", "perl": "$pftools eq \"pfsearch\""}, "prompt": "PFSEARCH parameters", "name": "pfsearch", "children": [{"comment": "The PROSITE profile contained in this file will be  used  to  search  for profile  to  sequence  matches  in  a biological sequence library.", "prompt": "Profile(s) file in PROSITE format", "name": "profile", "ctrl": null, "simple": null, "argpos": "90", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PrositeProfile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The  program pfsearch  tries  to  identify  matches  between the input profile and all individual sequences of this library.", "prompt": "Library of DNA or protein sequences?", "name": "aa_or_nuc_db", "ctrl": {"python": "(aa_or_nuc_db == \"protein\" and aadb != \"null\") or (aa_or_nuc_db == \"user\" and userdb is not None) or (aa_or_nuc_db == \"dna\" and nucdb != \"null\")", "perl": "($aa_or_nuc_db eq \"protein\" and $aadb ne \"null\") or ( $aa_or_nuc_db eq \"user\" and defined $userdb) or ($aa_or_nuc_db eq \"dna\" and $nucdb ne \"null\")"}, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Protein library", "name": "aadb", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "(\"\", \"", "perl": "(defined $value and $value ne $vdef) ? \""}, "command": false, "precond": {"python": "aa_or_nuc_db == \"protein\"", "perl": "$aa_or_nuc_db eq \"protein\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Nucleic library", "name": "nucdb", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "(\"\", \"", "perl": "(defined $value and $value ne $vdef) ? \""}, "command": false, "precond": {"python": "aa_or_nuc_db == \"dna\"", "perl": "$aa_or_nuc_db eq \"dna\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "User library", "name": "userdb", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "(\"\", \" \"+str(value) )[value is not None]", "perl": "(defined $value) ? \" $value\" : \"\""}, "command": false, "precond": {"python": "aa_or_nuc_db == \"user\"", "perl": "$aa_or_nuc_db eq \"user\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Reformat PSA result file to Fasta multiple sequence alignment file?", "name": "psa2msa", "ctrl": null, "simple": null, "argpos": "110", "format": {"python": "( \"\"  , \" | psa2msa - \" )[ value ]", "perl": "($value) ? \" | psa2msa - \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Control options", "name": "control", "children": [{"comment": "The value should be the numerical identifier  of  a  cut-off level  defined in the profile.  The raw or normalized score of this level will then be used to include profile to sequence matches  in  the  output list. If the specified level does not exist in the profile, the next higher (if cut_off is negative) or next lower (if cut_off is positive) level defined is used instead.", "prompt": "Cut-off level to be used for match selection (-C)", "name": "cutoff", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -C \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -C $value\" : \"\""}, "command": false, "precond": {"python": "not optimal", "perl": "not $optimal"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The value specifies which normalization mode defined in the profile should be used to compute the normalized scores for profile  to  sequence matches. This option will override the profile's PRIORITY parameter. If  the  specified  normalization  mode does not exist in the profile, an error message will be output to standard error and the search  is  interrupted.", "prompt": "Normalization mode to use for score (-M)", "name": "mode", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -M \" + str(value))[value is not None]", "perl": "(defined $value) ? \" -M $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Search the complementary strands of DNA sequences as well (-b)", "name": "compl", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -b\")[ value ]", "perl": "($value) ? \" -b\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use raw scores rather than normalized scores for match selection. Normalized scores will not be listed in the output. (-r)", "name": "raw_score", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -r\")[ value ]", "perl": "($value) ? \" -r\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Forces DISJOINT=UNIQUE (-u)", "name": "unique", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -u\")[ value ]", "perl": "($value) ? \" -u\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": "This option simultaneously forces DISJOINT=UNIQUE.", "prompt": "Report optimal alignment scores for all sequences regardless of the cut-off value (-a)?", "name": "optimal", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -a\")[ value ]", "perl": "($value) ? \" -a\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If the profile is circular, each match between a sequence and  a  profile can  be  composed  of  a stretch of individual matches of the profile. By default, pfscan reports only the total matched region. When  this  option is  set, detailed information for each individual match will be output as well.", "prompt": "Report individual matches for circular profiles (-m)?", "name": "individual_match", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -m\")[ value ]", "perl": "($value) ? \" -m\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Indicate the value of the highest cut-off level  exceeded  by  the  match score (-l)?", "name": "value_hightest_cut_off", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -l\")[ value ]", "perl": "($value) ? \" -l\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The generalized profile format includes a  text  string  field  to specify  a name for a cut-off level. The -L option causes the program to display the first two characters of this text string (usually something like !, ?, ??, etc.) at the beginning of each match description.", "prompt": "Indicate by  character  string of the highest cut-off level  exceeded  by  the  match score (-L)?", "name": "char_hightest_cut_off", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -L\")[ value ]", "perl": "($value) ? \" -L\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this option is set, the description of the profile on the header line will be limited in length. If the match information is  longer  than  the output  width specified using option -W, the profile description will not be printed. Else the description will be truncated to fit the -W value.By default, the profile description is not truncated. This option can not be used when option -k is set.", "prompt": "Limit profile description length (-d)?", "name": "Length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -d\")[ value ]", "perl": "($value) ? \" -d\" : \"\""}, "command": false, "precond": {"python": "not xpsa", "perl": "not $xpsa"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "When this option is set, all output type will use an xpsa style header line.This format uses keyword=value pairs to output  alignment  parameters.  It is useful to transfer information between different sequence alignment tools.", "prompt": "xpsa headers for output (-k)?", "name": "xpsa", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -k\")[ value ]", "perl": "($value) ? \" -k\" : \"\""}, "command": false, "precond": {"python": "not Length", "perl": "not $Length"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "List the sequences of the matched regions as well. The output will be a Pearson/Fasta-formatted sequence library. (-s)", "name": "listseq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -s\")[ value ]", "perl": "($value) ? \" -s\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "List profile-sequence alignments in pftools PSA format. (-x)", "name": "psa_format", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -x\")[ value ]", "perl": "($value) ? \" -x\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display alignments between the profile and the matched sequence regions in a human-friendly format. (-y)", "name": "between", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -y\")[ value ]", "perl": "($value) ? \" -y\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The latter position will be given as a negative offset from the  end  of  the profile. Thus the range [1,-1] means entire profile.", "prompt": "Indicate  starting  and ending position of the matched profile range. (-z)", "name": "start_end", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -z\")[ value ]", "perl": "($value) ? \" -z\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The value specifies how many residues will be  output  on  one line when any of the -s, -x or -y options is set.", "prompt": "Set alignment output width (-W)", "name": "width", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -W \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -W $value\" : \"\""}, "command": false, "precond": {"python": "listseq  or psa_format  or between", "perl": "$listseq  or $psa_format  or $between"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "2.3", "references": [{"url": null, "doi": null, "label": "Bucher P, Karplus K, Moeri N and Hofmann, K. (1996). A flexible motif search technique based on generalized profiles. Comput. Chem. 20:3-24."}], "source_links": ["http://www.isrec.isb-sib.ch/ftp-server/pftools/"], "env": [], "authors": "P. Bucher", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "pftools"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cabff"}, "classifications": [{"type": "mobyle1", "classification": "database:search:homology"}, {"type": "mobyle1", "classification": "database:search:pattern"}], "description": "Pattern-Hit Initiated BLAST", "title": "PHI-Blast", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Blast text report", "name": "txtfile", "simple": null, "filenames": {"python": "\"phiblast.txt\"", "perl": "\"phiblast.txt\""}, "precond": {"python": "view_alignments != \"7\"", "perl": "$view_alignments ne \"7\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Blast xml report", "name": "xmlfile", "simple": null, "filenames": {"python": "\"phiblast.xml\"", "perl": "\"phiblast.xml\""}, "precond": {"python": "view_alignments == \"7\"", "perl": "$view_alignments eq \"7\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastXmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Blast html report", "name": "htmlfile", "simple": null, "filenames": {"python": "\"phiblast.html\"", "perl": "\"phiblast.html\""}, "precond": {"python": "view_alignments not in [\"7\", \"8\"]", "perl": "$view_alignments !~ /^[78]$/"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastHtmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": null, "name": "imgfile", "simple": null, "filenames": {"python": "\"*.gif\"", "perl": "\"*.gif\""}, "precond": {"python": "view_alignments not in [\"7\", \"8\"]", "perl": "$view_alignments !~ /^[78]$/"}, "output_type": "file", "hidden": true, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "PHI-BLAST (Pattern-Hit Initiated BLAST) is a search program that combines matching of regular expressions with local alignments surrounding the match. The calculation of local alignments is done using a method very similar to (and much of the same code as) gapped BLAST.Program modes:. patseedp: normal phiblast mode. seedp: Restrict the search for local alignments to a subset of the pattern occurrences in the query. This program option requires the user to specify the location(s) of the interesting pattern occurrence(s) in the pattern file (for the syntax see below). When there are multiple pattern occurrences in the query it may be important to decide how many are of interest because the E-value for matches is effectively multiplied by the number of interesting pattern occurrences.", "prompt": "Program (-p)", "name": "phiblast", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"blastpgp -p \" + str(value)", "perl": "\"blastpgp -p $value\""}, "command": true, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequence File (-i)", "name": "query", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" -i \" + str(value)", "perl": "\" -i $query\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Start of required region in query (-S)", "name": "start_region", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "( \"\" , \" -S \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -S $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Location on query sequence. -1 indicates end of query", "prompt": "End of required region in query (-H)", "name": "end_region", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "( \"\" , \" -H \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -H $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Given a protein sequence S and a regular expression pattern P occurring in S, PHI-BLAST helps answer the question: What other protein sequences both contain an occurrence of P and are homologous to S in the vicinity of the pattern occurrences?Rules for pattern syntax:The syntax for patterns in PHI-BLAST follows the conventions of PROSITE. When using the stand-alone program, it is permissible to have multiple patterns in a file separated by a blank line between patterns.Valid protein characters for PHI-BLAST patterns:ABCDEFGHIKLMNPQRSTVWXYZUOther useful delimiters:[ ] means any one of the characters enclosed in the brackets e.g., [LFYT] means one occurrence of L or F or Y or T- means nothing (this is a spacer character used by PROSITE) x with nothing following means any residuex(5) means 5 positions in which any residue is allowed (and similarly for any other single number in parentheses after x)x(2,4) means 2 to 4 positions where any residue is allowed, and similarly for any other two numbers separated by a comma; the first number should be < the second number.", "prompt": "Pattern file- Prosite syntax (-k)", "name": "pattern", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" -k \" + str(value)", "perl": "\" -k $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PrositePattern", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Protein database (-d)", "name": "protein_db", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -d \" + str(value)", "perl": "\" -d $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Scoring options", "name": "scoring", "children": [{"comment": null, "prompt": "Cost to open a gap (-G)", "name": "open_a_gap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -G \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -G $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Limited values for gap existence and extension are supported for these three programs. Some supported and suggested values are:Existence Extension10 -- 110 -- 211 -- 18 -- 29 -- 2(source: NCBI Blast page)", "prompt": "Cost to extend a gap (-E)", "name": "extend_a_gap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -E \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -E $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Similarity matrix (-M)", "name": "matrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -M \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -M $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "This options also takes a string as an argument.  One may use such a string to change the specific parameters of seg or invoke other filters. Please see the 'Filtering Strings' section (below) for details.", "precond": null, "prompt": "Filtering and masking options", "name": "filter_opt", "children": [{"comment": null, "prompt": "Filter query sequence with SEG (-F)", "name": "filter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -F T\" )[ value ]", "perl": "($value) ? \" -F T\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option specifies that any lower-case letters in the input FASTA file should be masked.", "prompt": "Use lower case filtering (-U)", "name": "lower_case", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -U T\")[value]", "perl": "($value) ? \" -U T\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Selectivity options", "name": "selectivity_opt", "children": [{"comment": "The statistical significance threshold for reporting matches against database sequences; the default value is 10, such that 10 matches are expected to be found merely by chance, according to the stochastic model of Karlin and Altschul (1990). If the statistical significance ascribed to a match is greater than the EXPECT threshold, the match will not be reported. Lower EXPECT thresholds are more stringent, leading to fewer chance matches being reported. Fractional values are acceptable.", "prompt": "Expected value (-e)", "name": "Expect", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -e \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -e $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use words of size N.Zero invokes default behaviorDefault value: 3", "prompt": "Word Size (-W)", "name": "word_size", "ctrl": {"python": "value >= 2 and value <=3", "perl": "$value >= 2 and $value <=3"}, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -W \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -W $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "When  multiple   hits  method  is  used,  this parameter defines the distance from last hit on the same diagonal to the new one.Zero means single hit algorithm.", "prompt": "Multiple hits window size (-A)", "name": "window", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -A \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -A $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Blast seeks first short word pairs whose aligned score reaches at least this value", "prompt": "Threshold for extending hits (-f)", "name": "extend_hit", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -f \" + str(value) )[ value is not None and value !=vdef]", "perl": "(defined $value and $value != $vdef)? \" -f $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is the value that control the path graph region explored by Blast during a gapped extension (Xg in the NAR paper).", "prompt": "X dropoff value for gapped alignment (-X)", "name": "dropoff", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -X \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -X $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This parameter controls the dropoff for the final reported alignment. See also the -X parameter.", "prompt": "X dropoff value for final gapped alignment (-Z)", "name": "dropoff_z", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -Z \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -Z $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This parameter controls the dropoff at ungapped extension stage. See also the -X parameter.", "prompt": "Dropoff for blast ungapped extensions in bits (-y)", "name": "dropoff_y", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -y \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -y $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use zero for the real size", "prompt": "Effective length of the search space (-Y)", "name": "eff_len", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -Y \"+str(value))[value is not None and value !=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -Y $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this option is used, a value of 100 is recommended.", "prompt": "Number of best hits from a region to keep (-K)", "name": "keep_hits", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -K \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -K $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Single-hit or multiple-hit mode (-P)", "name": "mode", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -P \"+str(value))[value != \"0\"]", "perl": "($value eq \"0\") ? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of bits to trigger gapping (-N)", "name": "nb_bits", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -N \"+str(value))[value is not None and value !=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -N $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "PHI-Blast specific selectivity options", "name": "phi_spec_opt", "children": [{"comment": null, "prompt": "Maximum number of passes to use in multipass version (-j)", "name": "multipass", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -j \"+str(value))[value is not None and value !=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -j $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Constant in pseudocounts for multipass version (-c)", "name": "pseudocounts", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -c \"+str(value))[value is not None and value !=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -c $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "e-value threshold for inclusion in multipass model (-h)", "name": "e_threshold", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -h \"+str(value))[value is not None and value !=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -h $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Report options", "name": "affichage", "children": [{"comment": "Maximum number of database sequences for which one-line descriptions will be reported.", "prompt": "Number of one-line descriptions to show? (-v)", "name": "Descriptions", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -v \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -v $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum number of database sequences for which high-scoring segment pairs will be reported (-b).", "prompt": "Number of database sequences to show alignments? (-b)", "name": "Alignments", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -b \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -b $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment view options (-m)", "name": "view_alignments", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -m \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -m $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Text output", "name": "txtoutput", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -o phiblast.txt\"", "perl": "\" -o phiblast.txt\""}, "command": false, "precond": {"python": "view_alignments != \"7\"", "perl": "$view_alignments ne \"7\""}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Xml output", "name": "xmloutput", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -o phiblast.xml\"", "perl": "\" -o phiblast.xml\""}, "command": false, "precond": {"python": "view_alignments == \"7\"", "perl": "$view_alignments eq \"7\""}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Html output", "name": "htmloutput", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\" , \" && html4blast -g -o phiblast.html phiblast.txt\")[value]", "perl": "($value) ? \" && html4blast -g -o phiblast.html phiblast.txt\" : \"\""}, "command": false, "precond": {"python": "view_alignments not in [ \"7\" , \"8\" ]", "perl": "$view_alignments !~ /^[78]$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Believe the query defline (-J)", "name": "believe", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -J\")[ value ]", "perl": "($value)? \" -J\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "SeqAlign is in ASN.1 format, so that it can be read with NCBI tools (such as sequin). This allows one to view the results in different formats.", "prompt": "SeqAlign file (-J option must be true) (-O)", "name": "seqalign_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -O \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -O $value\" : \"\""}, "command": false, "precond": {"python": "believe", "perl": "$believe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [{"url": null, "doi": null, "label": "R. Baeza-Yates and G. Gonnet, Communications of the ACM 35(1992), pp. 74-82."}, {"url": null, "doi": null, "label": "S. Wu and U. Manber, Communications of the ACM\t35(1992), pp. 83-91."}], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "phiblast"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cac00"}, "classifications": [{"type": "mobyle1", "classification": "hmm:database:search"}, {"type": "mobyle1", "classification": "database:search:hmm"}], "description": "Search a protein sequence(s) against a protein database", "title": "PHMMER", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "out_file", "simple": null, "filenames": {"python": "\"*.output\"", "perl": "*.output"}, "precond": {"python": "outfile==1", "perl": "$outfile==1"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Alignment file", "name": "ali_file", "simple": null, "filenames": {"python": "\"*.alig\"", "perl": "*.alig"}, "precond": {"python": "aligfile==1", "perl": "$aligfile==1"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["STOCKHOLM"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Parseable table of per-sequence hits", "name": "seq_file", "simple": null, "filenames": {"python": "\"*.tblout\"", "perl": "*.tblout"}, "precond": {"python": "seqtab==1", "perl": "$seqtab==1"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Parseable table of per-domain hits", "name": "dom_file", "simple": null, "filenames": {"python": "\"*.domtblout\"", "perl": "*.domtblout"}, "precond": {"python": "domaintab==1", "perl": "$domaintab==1"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Query sequence(s)", "name": "qsequence", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose a protein sequence database", "name": "db", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The output format is designed to be human-readable, but is often so voluminous that reading it is impractical,\nand parsing it is a pain. The --tblout and --domtblout options save output in simple tabular formats that\nare concise and easier to parse.", "precond": null, "prompt": "Directing output", "name": "output", "children": [{"comment": "Direct the main \"human-readable\" output to a file instead of the default stdout.", "prompt": "Direct output to file (-o)", "name": "outfile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -o phmmer.output\") [ value != vdef]", "perl": "($value != $vdef) ? \" -o phmmer.output\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Save a multiple alignment of all significant hits (those satisfying inclusion thresholds)\nto a file (Stockholm format).", "prompt": "Save multiple alignment of hits to file (-A)", "name": "aligfile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -A phmmer.alig\") [ value != vdef]", "perl": "($value != $vdef) ? \" -A phmmer.alig\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Save a simple tabular (space-delimited) file summarizing the \"per-target\" output,\nwith one data line per homologous target sequence found.", "prompt": "Save parseable table of per-sequence hits to file (--tblout)", "name": "seqtab", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --tblout phmmer.tblout\") [ value != vdef]", "perl": "$value != $vdef) ? \" --tblout phmmer.tblout\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Save a simple tabular (space-delimited) file summarizing the \"per-domain\" output,\nwith one data line per homologous domain detected in a query sequence for each homologous model.", "prompt": "Save parseable table of per-domain hits to file (--domtblout)", "name": "domaintab", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --domtblout phmmer.domtblout\") [ value != vdef]", "perl": "($value != $vdef) ? \" --domtblout phmmer.domtblout\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use accessions instead of names in the main output, where available for profiles\nand/or sequences.", "prompt": "Prefer accessions over names in output (--acc)", "name": "acc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --acc\") [ value != vdef]", "perl": "($value != $vdef) ? \" --acc\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Omit the alignment section from the main output. This can greatly reduce the\noutput volume.", "prompt": "Don't output alignments, so output is smaller (--noali)", "name": "noali", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --noali\") [ value != vdef]", "perl": "($value != $vdef) ? \" --noali\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Unlimit the length of each line in the main output. The default is a limit of 120\ncharacters per line, which helps in displaying the output cleanly on terminals and\nin editors, but can truncate target profile description lines.", "prompt": "Unlimit ASCII text output line width (--notextw)", "name": "notextw", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --notextw\" ) [ value != vdef]", "perl": "($value != $vdef) ? \" --notextw\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Max width of ASCII text output lines (--textw)", "name": "textw", "ctrl": {"python": "120 <=value", "perl": "120 <=$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --textw \" + str(value) ) [ value != vdef]", "perl": "($value != $vdef) ? \" --textw $value\" : \"\""}, "command": false, "precond": {"python": "notextw == 0", "perl": "$notextw == 0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "The probability model in phmmer is constructed by inferring residue probabilities from a standard 20x20\nsubstitution score matrix, plus two additional parameters for position-independent gap open and gap extend probabilities.", "precond": null, "prompt": "Controlling scoring system", "name": "scoringsys", "children": [{"comment": "The probability has to be >= 0 and <0.5. Default value: 0.02.", "prompt": "Gap open probability (--popen)", "name": "popen", "ctrl": {"python": "0 <= value <0.5", "perl": "0 <= $value <0.5"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --popen \" + str(value)) [ value != vdef]", "perl": "($value != $vdef) ? \" --popen $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The probability has to be >= 0 and <1. Default value: 0.4.", "prompt": "Gap extend probability (--pextend)", "name": "pextend", "ctrl": {"python": "0 <= value <1", "perl": "0 <= $value <1"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --pextend \" + str(value)) [ value != vdef]", "perl": "($value != $vdef) ? \" --pextend $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "To obtain residue alignment probabilities from a substitution matrix. The default score matrix is BLOSUM62", "prompt": "Substitution score matrix (--mxfile)", "name": "matrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --mxfile \" + str(value)) [ value != vdef]", "perl": "($value != $vdef) ? \" --mxfile $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "\"Reporting\" thresholds control which hits are reported in output files (the main output, --tblout, and --\ndomtblout). Sequence hits and domain hits are ranked by statistical significance (E-value) and output is\ngenerated in two sections called \"per-target\" and \"per-domain\" output.The following options allow you to change the default E-value reporting thresholds, or to use bit score thresholds instead.", "precond": null, "prompt": "Controlling significance thresholds for reporting", "name": "report", "children": [{"comment": "In the per-target output, report target sequences <= this E-value threshold. The\n        default is 10.0, meaning that on average, about 10 false positives will be reported\n        per query, so you can see the top of the \"noise\" and decide for yourself if it's really noise.", "prompt": "Thresholds for Sequences:  E-value (-E)", "name": "e_threshold", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -E \" + str(value)) [ value != vdef]", "perl": "($value != $vdef) ? \" -E $value\" : \"\""}, "command": false, "precond": {"python": "s_threshold is None", "perl": "$s_threshold is None"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of thresholding per-profile output on E-value, report target sequences\n           with a bit score of >= this score threshold.", "prompt": "Score (-T)", "name": "s_threshold", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -T \" + str(value)) [ value is not None]", "perl": "($value) ? \" -T $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In the per-domain output, for target sequences that have already satisfied the perprofile\nreporting threshold, report individual domains with a conditional E-value < or = this threshold. The default is 10.0.A \"conditional\" E-value means the expected number of additional false positive domains\nin the smaller search space of those comparisons that already satisfied the per-target reporting threshold (and thus must have\nat least one homologous domain already).", "prompt": "Thresholds for Domains: E-value (--domE)", "name": "d_e_threshold", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --domE \" + str(value)) [ value is not None and value != vdef]", "perl": "($value != $vdef) ? \" --domE $value\" : \"\""}, "command": false, "precond": {"python": "d_s_threshold is None", "perl": "$d_s_threshold is None"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of thresholding per-domain output on E-value, report domains with\na bit score of >= this score threshold in output.", "prompt": "Score (--domT)", "name": "d_s_threshold", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --domT \" + str(value)) [ value is not None]", "perl": "($value) ? \" --domT $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Inclusion thresholds are stricter than reporting thresholds. They control which hits are included in any\noutput multiple alignment (the -A option) and which domains are marked as significant (\"!\") as opposed to questionable (\"?\") in domain output.Available if the option -A is selected.", "precond": {"python": "aligfile==1", "perl": "$aligfile==1"}, "prompt": "Controlling significance thresholds for inclusion in Output alignment", "name": "inclusion_A", "children": [{"comment": "Include sequences < or = this E-value threshold in output alignment. The default is\n0.01, meaning that on average, about 1 false positive would be expected in every 100 searches with different query sequences.", "prompt": "Thresholds for Sequences:  E-value (--incE)", "name": "a_e_threshold", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --incE \" + str(value)) [ value is not None and value != vdef]", "perl": "($value != $vdef) ? \" --incE $value\" : \"\""}, "command": false, "precond": {"python": "a_s_threshold is None", "perl": "$a_s_threshold is None"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of using E-values for setting the inclusion threshold in output alignment, use a bit score\nof >= this number as the per-target inclusion threshold. By default this option is unset.", "prompt": "Score (--incT)", "name": "a_s_threshold", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --incT \" + str(value)) [ value is not None]", "perl": "($value) ? \" --incT $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use a conditional E-value of <= this number as the per-domain inclusion threshold, in\ntargets that have already satisfied the overall per-target inclusion threshold. The default is 0.01.", "prompt": "Thresholds for Domains: E-value (--incdomE)", "name": "a_d_e_threshold", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --incdomE \" + str(value)) [ value is not None and value != vdef ]", "perl": "($value != $vdef) ? \" --incdomE $value\" : \"\""}, "command": false, "precond": {"python": "a_d_s_threshold is None", "perl": "$a_d_s_threshold is None"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of using E-values, use a bit score of >= this number as the per-domain inclusion\nthreshold. By default this option is unset.", "prompt": "Score (--incdomT)", "name": "a_d_s_threshold", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --incdomT \" + str(value)) [ value is not None]", "perl": "($value) ? \" --incdomT $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "HMMER3 searches are accelerated in a three-step filter pipeline:- the MSV filter (the fastest and most approximate),- the Viterbi filter,- and the Forward filter (full Forward scoring algorithm, slowest but most accurate),+ There is also a \"bias filter\" step between MSV and Viterbi.Targets that pass all the steps in the acceleration pipeline are then subjected to \"postprocessing\" (domain identification\nand scoring using the Forward/Backward algorithm).Essentially the only free parameters that control\nHMMER's heuristic filters are the P-value thresholds controlling the expected fraction of non-homologous\nsequences that pass the filters.- Setting the default thresholds higher will pass a higher proportion of non-homologous\nsequence, increasing sensitivity at the expense of speed,- Setting lower P-value thresholds will pass a smaller proportion, decreasing \nsensitivity and increasing speed,- Setting a filter's P-value threshold to 1.0 means it will passing all sequences, and effectively disables the filter.Changing filter thresholds only removes or includes targets from consideration; it does not alter bit\nscores, E-values, or alignments, all of which are determined solely in \"postprocessing\".", "precond": null, "prompt": "Controlling the acceleration pipeline", "name": "heuristic", "children": [{"comment": "Maximum sensitivity. Turn off all filters, including the bias filter, and run full Forward/\nBackward postprocessing on every target. This increases sensitivity slightly, at a large cost in speed.", "prompt": "Turn all heuristic filters off (less speed, more power) (--max)", "name": "max", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --max\") [ value != vdef ]", "perl": "($value != $vdef) ? \" --max\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "First filter threshold; set the P-value threshold for the MSV filter step. The default is\n0.02, meaning that roughly 2% of the highest scoring non-homologous targets are expected to pass the filter.", "prompt": "Stage 1 (MSV) threshold (--F1)", "name": "F1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --F1 \" + str(value) ) [ value != vdef ]", "perl": "($value != $vdef) ? \" --F1 $value\" : \"\""}, "command": false, "precond": {"python": "max==0", "perl": "$max==0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Second filter threshold; set the P-value threshold for the Viterbi filter step. The\ndefault is 0.001.", "prompt": "Stage 2 (Vit) threshold (--F2)", "name": "F2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --F2 \" + str(value) ) [ value != vdef ]", "perl": "($value != $vdef) ? \" --F2 $value\" : \"\""}, "command": false, "precond": {"python": "max==0", "perl": "$max==0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Third filter threshold; set the P-value threshold for the Forward filter step. The\ndefault is 1e-5.", "prompt": "Stage 3 (Fwd) threshold (--F3)", "name": "F3", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --F3 \" + str(value) ) [ value != vdef ]", "perl": "($value != $vdef) ? \" --F3 $value\" : \"\""}, "command": false, "precond": {"python": "max==0", "perl": "$max==0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Turn off the bias filter increases sensitivity somewhat, but can come at a\nhigh cost in speed, especially if the query has biased residue composition (such as a repetitive sequence region, \nor if it is a membrane protein with large regions of hydrophobicity).Without the bias filter, too many sequences may pass the filter\nwith biased queries, leading to slower than expected performance as the computationally\nintensive Forward/Backward algorithms shoulder an abnormally heavy load.", "prompt": "Turn off composition bias filter (--nobias)", "name": "nobias", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --nobias\" ) [ value != vdef ]", "perl": "($value != $vdef) ? \" --nobias\" : \"\""}, "command": false, "precond": {"python": "max==0", "perl": "$max==0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Estimating the location parameters for the expected score distributions for MSV filter scores, Viterbi filter\nscores, and Forward scores requires three short random sequence simulations.", "precond": null, "prompt": "Controlling E-value calibration for Stage 1 - MSV Gumbel mu fit", "name": "MSV", "children": [{"comment": "Sets the sequence length in simulation that estimates the location parameter mu\nfor MSV filter E-values. Default is 200.", "prompt": "Length of sequences (--EmL)", "name": "eml", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --EmL \" + str(value) ) [ value != vdef ]", "perl": "($value != $vdef) ? \" --EmL $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the number of sequences in simulation that estimates the location parameter\nmu for MSV filter E-values. Default is 200.", "prompt": "Number of sequences (--EmN)", "name": "emn", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --EmN \" + str(value) ) [ value != vdef ]", "perl": "($value != $vdef) ? \" --EmN $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Estimating the location parameters for the expected score distributions for MSV filter scores, Viterbi filter\nscores, and Forward scores requires three short random sequence simulations.", "precond": null, "prompt": "Controlling E-value calibration for Stage 2 - Viterbi Gumbel mu fit", "name": "Ecalibration2", "children": [{"comment": "Sets the sequence length in simulation that estimates the location parameter mu\nfor Viterbi filter E-values. Default is 200.", "prompt": "Length of sequences (--EvL)", "name": "evl", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --EvL \" + str(value) ) [ value != vdef ]", "perl": "($value != $vdef) ? \" --EvL $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the number of sequences in simulation that estimates the location parameter\nmu for Viterbi filter E-values. Default is 200.", "prompt": "Number of sequences (--EvN)", "name": "evn", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --EvN \" + str(value) ) [ value != vdef ]", "perl": "($value != $vdef) ? \" --EvN $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Estimating the location parameters for the expected score distributions for MSV filter scores, Viterbi filter\nscores, and Forward scores requires three short random sequence simulations.", "precond": null, "prompt": "Controlling E-value calibration for Stage 3 - Forward exponential tail tau fit", "name": "Ecalibration3", "children": [{"comment": "Sets the sequence length in simulation that estimates the location parameter tau\nfor Forward E-values. Default is 100.", "prompt": "Length of sequences (--EfL)", "name": "efl", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --EfL \" + str(value) ) [ value != vdef ]", "perl": "($value != $vdef) ? \" --EfL $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the number of sequences in simulation that estimates the location parameter\ntau for Forward E-values. Default is 200.", "prompt": "Number of sequences (--EfN)", "name": "efn", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --EfN \" + str(value) ) [ value != vdef ]", "perl": "($value != $vdef) ? \" --EfN $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the tail mass fraction to fit in the simulation that estimates the location parameter\ntau for Forward evalues. Default is 0.04.", "prompt": "Tail mass (--Eft)", "name": "eft", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --Eft \" + str(value) ) [ value != vdef ]", "perl": "($value != $vdef) ? \" --Eft $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Expert options", "name": "other", "children": [{"comment": "Turn off the \"null2\" score corrections for biased composition.", "prompt": "Turn off biased composition score corrections (--nonull2)", "name": "nonull", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --nonull2\" ) [ value != vdef]", "perl": "($value != $vdef) ? \" --nonull2\" : \"\""}, "command": false, "precond": {"python": "max==0", "perl": "$max==0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Assert that the total number of targets in your searches is this number, for the purposes of\nper-sequence E-value calculations, rather than the actual number of targets seen.", "prompt": "Number of comparisons done, for E-value calculation (-Z)", "name": "z", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -Z \" + str(value)) [ value is not None]", "perl": "($value) ? \" -Z $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Assert that the total number of targets in your searches is this number, for the purposes\nof per-domain conditional E-value calculations, rather than the number of targets that passed the reporting thresholds.", "prompt": "Number of significant sequences, for domain E-value calculation (--domZ)", "name": "d_z", "ctrl": {"python": "0 < value", "perl": "0 <$value"}, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --domZ \" + str(value)) [ value is not None]", "perl": "($value) ? \" --domZ $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Seed the random number generator with this, an integer >= 0. The default seed is 42.If >0, any stochastic simulations will be reproducible; the same command will give the\nsame results.If = 0, the random number generator is seeded arbitrarily, and\nstochastic simulations will vary from run to run of the same command.", "prompt": "Set Random Number Generator seed to (--seed)", "name": "seed", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --seed \" + str(value) ) [ value  != vdef]", "perl": "($value != $vdef) ? \" --seed $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "phmmer"}, "documentation_links": [], "type": "program", "name": "phmmer"}, {"comment": null, "homepage_links": ["http://code.google.com/p/phyml"], "_id": {"$oid": "51434da493546d52388cac01"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:likelihood"}], "description": "A simple, fast, and accurate algorithm to estimate large phylogenies by maximum likelihood", "title": "PHYML", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "outfile", "simple": null, "filenames": {"python": "\"*_phyml_stats.txt\"", "perl": "\"*_phyml_stats.txt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output tree", "name": "outtree", "simple": null, "filenames": {"python": "\"*_phyml_tree.txt\"", "perl": "\"*_phyml_tree.txt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Bootstrap output file", "name": "boot_outfile", "simple": null, "filenames": {"python": "\"*_phyml_boot_stats.txt\"", "perl": "\"*_phyml_boot_stats.txt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Bootstrap output trees", "name": "boot_outtree", "simple": null, "filenames": {"python": "\"*_phyml_boot_trees.txt\"", "perl": "\"*_phyml_boot_trees.txt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Sequence Alignment", "name": "alignment", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -i \"+str(value)", "perl": "\"-i $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["PHYLIPI"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Data type (-d)", "name": "seqtype", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -d \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -d $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Input Options", "name": "inputopt", "children": [{"comment": null, "prompt": "Number of data sets to analyse (-n)", "name": "datasets", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -n \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -n $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of bootstraps sets to analyse (only works with one data set to analyse) (-b)", "name": "bootstrap_sets", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -b \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \" -b $value\" : \"\""}, "command": false, "precond": {"python": "datasets == 1", "perl": "$datasets == 1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Control Options", "name": "control_opt", "children": [{"comment": null, "prompt": "Nucleotide substitution model (-m)", "name": "ntmodel", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -m \"+str(value))[value != vdef]", "perl": "($value ne $vdef) ? \" -m $value\" : \"\""}, "command": false, "precond": {"python": "seqtype == \"nt\"", "perl": "$seqtype eq \"nt\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Amino-acid substitution model (-m)", "name": "aamodel", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -m \"+str(value))[value != vdef]", "perl": "($value ne $vdef) ? \" -m $value\" : \"\""}, "command": false, "precond": {"python": "seqtype == \"aa\"", "perl": "$seqtype eq \"aa\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Estimated transition/transversion ratio for DNA sequences? (-t)", "name": "tstvratio1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -t e\")[ value ]", "perl": "($value) ? \" -t e\" : \"\""}, "command": false, "precond": {"python": "seqtype == \"nt\"", "perl": "$seqtype eq \"nt\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "User transition/transversion ratio for DNA sequences? (-t)", "name": "tstvratio2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -t \"+str(value))[ value is not None ]", "perl": "(defined $value) ? \" -t $value\" : \"\""}, "command": false, "precond": {"python": "seqtype == \"nt\" and not tstvratio1", "perl": "$seqtype eq \"nt\" and not $tstvratio1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Estimated proportion of invariable sites? (-v)", "name": "propinvar1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -v e\")[ value ]", "perl": "($value) ? \" -v e\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "User proportion of invariable sites? (-v)", "name": "propinvar2", "ctrl": {"python": "value >= 0 and value < 1", "perl": "$value >= 0 and $value < 1"}, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -v \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -v $value\" : \"\""}, "command": false, "precond": {"python": "not propinvar1", "perl": "not $propinvar1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of relative substitution rate categories (-c)", "name": "nbsubstcat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -c \"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -c $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Estimated Gamma distribution parameter? (-a)", "name": "gamma1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -a e\")[value]", "perl": "($value) ? \" -a e\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "User gamma distribution parameter? (-a)", "name": "gamma2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -a \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -a $value\" : \"\""}, "command": false, "precond": {"python": "not gamma1", "perl": "not $gamma1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Tree topology search operation (-s)", "name": "move", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -s \"+str(value))[value != vdef]", "perl": "($value ne $vdef) ? \" -s $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Starting tree filename (u)", "name": "usertreefile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -u \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -u $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "3.0", "references": [{"url": null, "doi": null, "label": "Guindon, S. and Gascuel, O. (2003) A simple, fast and accurate algorithm to estimate large phylogenies by maximum likelihood Syst. Biol., 52, 696-704"}], "source_links": ["http://code.google.com/p/phyml"], "env": [], "authors": "S. Guindon and O. Gascuel", "command": {"path": null, "value": "phyml"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/phyml/phyml_manual_2008.pdf"], "type": "program", "name": "phyml"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cac02"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "Pattern-Induced Multi-sequence Alignment program", "title": "PIMA", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output files", "name": "results", "simple": null, "filenames": {"python": "\"*.pima\"", "perl": "*.pima\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "Name of the input file containing the sequences to be clustered and multi-aligned.  Sequences can be in any of the following formats: IG/Stanford, GenBank/GB, NBRF, EMBL, Pearson/Fasta, PIR/CODATA. The format of the output sequence files will match the format of this input file.", "prompt": "Sequences file", "name": "sequence", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["IG", "GENBANK", "NBRF", "EMBL", "PIR", "FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "An arbitrary name used to label the cluster.", "prompt": "Cluster name", "name": "cluster_name", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Parameters", "name": "pima_params", "children": [{"comment": "[optional; if specified, then sec_struct_seq_filename must also be specified]. Locus name of one of the primary sequences for which the secondary structure is in the file seq_struct_seq_filename.", "prompt": "Reference sequence name", "name": "ref_seq_name", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" \"+str(value))[value is not None]", "perl": "(defined $value)? \" $value\" : \"\""}, "command": false, "precond": {"python": "sec_struc_seq_filename is not None", "perl": "defined $sec_struc_seq_filename"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "[optional; if specified, then ref_seq_name must also be specified] Name of a file containing secondary structure sequences for one or more of the primary sequences in the set.  The secondary structure sequences in this file must be in one of the formats listed above (see sequence_filename, above).  The locus name of each sequence must be the locus name of it's corresponding primary sequence with the suffix '.ss' (e.g. 1ldm.ss). An alpha-helix, 3-10 helix and beta-strand must be designated 'h', 'g', and 'e', respectively.  All other characters in the secondary structure sequences will be ignored with respect to the the structure-dependent gap penalty.  To allow gaps to be placed between the first and the second and the last elements of these structures, the first and last 2 elements of each should be changed to another character designation.  In the secondary structure sequence file pdb-dssp.ss provided with this package, these end cap elements are designated 'i', 'f', and 'd', for alpha-helices, 3-10 helices and beta-strands, respectfully.", "prompt": "sec_struc_seq_filename", "name": "sec_struc_seq_filename", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "( \"\"  , \" \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" $value\" : \"\""}, "command": false, "precond": {"python": "ref_seq_name is not None", "perl": "defined $ref_seq_name_"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "pima_options", "children": [{"comment": "Use a cluster score cutoff of number. This is the lowest match score to be used to incorporate a sequence into a cluster.  The default value of 0.0 will force all input sequences into 1 cluster, but the final pattern may be completely degenerate.", "prompt": "Cluster score cutoff (-c)", "name": "score_cutoff", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -c \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -c $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use a length dependent gap penalty of number. This is the cost of extending a gap.  The default value is dependent on the matrix file used.", "prompt": "Gap extension penalty (-d)", "name": "ext_gap_cost", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -d \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -d $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use a length independent gap penalty of number. This is the cost of opening a gap.  The default value is dependent on the matrix file used.", "prompt": "Gap opening penalty (-i)", "name": "gap_open_cost", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -i \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -i $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use minimum local score of number. This is the lowest score a quadrant can have before an attempt is made to join this local alignment with the local alignment at the previous step.  The default value is dependent on the matrix file used.", "prompt": "Minimum local score (-l)", "name": "min_score", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -l \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -l $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use matrix file with the name file. The default matrix file is patgen.mat and is provided with this package.  The matrix file class1.mat uses the original pima alphabet.  The matrix file class2.mat is also provided, which is similar to the matrix file class1.mat but uses the new alphabet.", "prompt": "Matrix file (-m)", "name": "mat_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -m \" + str(value) )[ value is not None and value !=vdef and value !=\"user\"]", "perl": "(defined $value and $value ne $vdef and $value ne \"user\")? \" -m $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "User matrix file.", "prompt": "User matrix file (-m)", "name": "user_mat_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -m \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -m $value\" : \"\""}, "command": false, "precond": {"python": "mat_file == \"user\"", "perl": "$mat_file eq \"user\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not use numerical extensions on each step of the alignment. (-n)", "name": "not_num_ext", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -n\" )[ value ]", "perl": "($value)? \" -n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use a secondary structure gap penalty of number. This is the cost of a gap at a position matching a secondary structure character.  The default value is dependent on the matrix file used and is always 10 times the value of the length independent gap penalty of the matrix file.", "prompt": "Secondary structure gap penalty (-t)", "name": "sec_struc_gap_cost", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -t \" + str(value) + \" \" )[ value is not None ]", "perl": "(defined $value)? \" -t $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.40", "references": [{"url": null, "doi": null, "label": "R. D. Smith and T. F. Smith. Pattern-induced multi-sequence alignment (PIMA) algorithm employing secondary structure-dependent gap penalties for use in comparative modelling. protein Engineering, vol5, number 1, pp 35-41, 1992"}], "source_links": ["ftp://ftp.ebi.ac.uk/pub/software/unix/pima/"], "env": [], "authors": "R. D. Smith and T. F. Smith", "command": {"path": null, "value": "pima"}, "documentation_links": [], "type": "program", "name": "pima"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cac03"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "Plot conservation of a sequence alignment", "title": "plotcon", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "File containing a sequence alignment", "prompt": "sequences option", "name": "e_sequences", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequences=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA", "MSF", "PAIR", "MARKX0", "MARKX1", "MARKX2", "MARKX3", "MARKX10", "SRS", "SRSPAIR", "SCORE", "UNKNOWN", "MULTIPLE", "SIMPLE", "MATCH"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "This is the scoring matrix file used when comparing sequences. By default it is the file 'EBLOSUM62' (for proteins) or  the file 'EDNAFULL' (for nucleic sequences). These files are  found in the 'data' directory of the EMBOSS installation.", "prompt": "Comparison matrix file", "name": "e_scorefile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -scorefile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "Number of columns to average alignment quality over. The larger this value is, the smoother the plot will be.", "prompt": "Window size", "name": "e_winsize", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -winsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "plotcon"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/plotcon.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "plotcon"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da493546d52388cac04"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:gene_finding"}, {"type": "mobyle1", "classification": "sequence:nucleic:translation"}], "description": "Plot potential open reading frames in a nucleotide sequence", "title": "plotorf", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Start codons", "name": "e_start", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -start=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Stop codons", "name": "e_stop", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -stop=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "plotorf"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/plotorf.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "plotorf"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac05"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise:dot_plots"}], "description": "Draw dotplots for all-against-all comparison of a sequence set", "title": "polydot", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfeat_out option", "name": "e_outfeat_out", "simple": null, "filenames": {"python": "e_outfeat"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Feature", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_offormat_outfeat"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "File containing a sequence alignment", "prompt": "sequences option", "name": "e_sequences", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequences=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "2,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Word size (value greater than or equal to 2)", "name": "e_wordsize", "ctrl": {"python": "value >= 2"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -wordsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "This specifies the size of the gap that is used to separate the individual dotplots in the display. The size is measured in  residues, as displayed in the output.", "prompt": "Gap (in residues) between dotplots (value greater than or equal to 0)", "name": "e_gap", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -gap=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Draw a box around each dotplot", "name": "e_boxit", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -noboxit\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Dump all matches as feature files", "name": "e_dumpfeat", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -dumpfeat\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output feature file (e_outfeat)", "name": "e_outfeat", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfeat=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_dumpfeat"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the feature output format", "name": "e_offormat_outfeat", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -offormat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_dumpfeat"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "e_goutfile", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "polydot"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/polydot.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "polydot"}, {"comment": null, "homepage_links": ["http://www.ii.uib.no/~inge/Pratt.html"], "_id": {"$oid": "51434da593546d52388cac06"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:pattern"}], "description": "Pattern discovery in sets of unaligned protein sequences", "title": "Pratt", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "outfiles", "simple": null, "filenames": {"python": "\"*.pat\"", "perl": "\"*.pat\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Report output file", "name": "report", "simple": null, "filenames": {"python": "\"report\"", "perl": "\"report\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "Fasta  format.  One   file  containing   all  the sequences. One sequence is specified byone line starting with '>' in position 1 and then the name of the sequence, and some lines containing the sequence in upper or lower case. The end of a sequence is identified by looking for either the start of a new sequence or the end of the file.", "prompt": "Sequence File", "name": "seq", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" fasta \"+str(value)", "perl": "\" fasta $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Pattern conservation parameters", "name": "conservation", "children": [{"comment": "Set the minimum number of sequences to match a pattern. Pratt will only report patterns that match at least the chosen number of the sequences that you have input. Pratt will not allow you to choose a value higher than the number of sequences input.", "prompt": "Minimum number of Sequences to Match (-CM)", "name": "CM", "ctrl": {"python": "value >= 2 and value <= 4", "perl": "$value >= 2 and $value <= 4"}, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -CM \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -CM $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the minimum percentage of the input sequences that should match a pattern. If you set this to, say 80, Pratt will only report patterns matching at least 80 % of the sequences input.", "prompt": "Minimum Percentage of Sequences to Match (-C%)", "name": "Cpct", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -C% \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -C% $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Pattern restrictions parameters", "name": "restrictions", "children": [{"comment": "<text lang=\"en\" />", "prompt": "Position in sequence (-PP)", "name": "PP", "ctrl": {"python": "value == vdef or (value != vdef and PF is not None)", "perl": "$value eq $vdef or ($value ne $vdef and defined $PF)"}, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -PP \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -PP $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This file contains lines to restrict pattern searches to certain regions in a sequence, say ACE2_YEAST:>ACE2_YEAST (100,200)", "prompt": "Restriction File name (if PP not off) (-PF)", "name": "PF", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -PF \" + str(value)", "perl": "\" -PF $value\""}, "command": false, "precond": {"python": "PP != \"off\"", "perl": "$PP ne \"off\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "RestrictionPattern", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Allows you to set the maximum length of a pattern. The length of the pattern C-x(2,4)-[DE] is 1+4+1=6.", "prompt": "Maximum Pattern Length (-PL)", "name": "PL", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -PL \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -PL $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Using this you can set the maximum number of symbols in a pattern. The pattern C-x(2,4)-[DE] has 2 symbols (C and [DE]).", "prompt": "Maximum number of Pattern Symbols (-PN)", "name": "PN", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -PN \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -PN $value\":\" \""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Using this option you can set the maximum length of a wildcard.", "prompt": "Maximum number of consecutive x's (-PX)", "name": "PX", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -PX \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -PX $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Using this option you can set the maximum number of flexible wildcards (matching a variable number of arbitrary sequence symbols). For instance x(2,4) is a flexible wildcard, and the pattern C-x(2,4)-[DE]-x(10)-F contains one flexible wildcard.", "prompt": "Maximum number of flexible spacers (-FN)", "name": "FN", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -FN \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -FN $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "You can set the maximum flexibility of a flexible wildcard (matching a variable number of arbitrary sequence symbols). For instance x(2,4) and x(10,12) has flexibility 2, and x(10) has flexibility 0. Increasing FL will increase the time used by Pratt.", "prompt": "Maximum Flexibility (-FL)", "name": "FL", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -FL \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -FL $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Using option FP you can set an upper limit on the product of a flexibilities for a pattern. This is related to the memory requirements of the search, and increasing the limit, increases the memory usage. Some patterns and the corresponding product of flexibilities.", "prompt": "Maximum Flexibility Product (-FP)", "name": "FP", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -FP \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -FP $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Using the B options (BN,BI,BF) on the menu you can control which pattern symbols will be used during the initial pattern search and during the refinement phase. The pattern symbols that can be used, are read from a file if the BI option is set, otherwise a default set will be used.The default set has as the 20 first elements, the single amino acid symbols, and it also contains a set of ambiguous symbols, each containing amino acids that share some physio-chemical properties", "prompt": "Input Pattern Symbol File? (-BI)", "name": "BI", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -BI on\")[ value ]", "perl": "($value)? \" -BI on\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In the file each symbol is given on a separate line concataining the letters that the symbol should match. For the example, only patterns with the symbols C and [DE] would be considered. During the initial search, pattern symbols corresponding to the first BN lines can be used.default file is: Pratt.sets.big", "prompt": "Input Pattern Symbol File name (if BI on) (-BF)", "name": "BF", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" -BF", "perl": "(defined $value) ? \" -BF $value\" : \"-BF"}, "command": false, "precond": {"python": "BI", "perl": "$BI"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "PatternSymbol", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Increasing BN will slow down the search and increase the memory usage, but allow more ambiguous pattern symbols.", "prompt": "Number of Pattern Symbols Initial Search (-BN)", "name": "BN", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -BN \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -BN $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Pattern Scoring parameters", "name": "scoring", "children": [{"comment": "The S option allows you to control the scoring of patterns. There are five possible scoring schemes to be used:info: patterns are scored by their information content as defined in (Jonassen et al, 1995). Note that a pattern's score is independent of which sequences it matches.mdl: patterns are scored by a Minimum Description Length principle derived scoring scheme, which is related to the one above, but penalises patterns scoring few sequences vs. patterns scoring many. Parameters Z0 to Z3 are required when this scoring scheme is used.tree: a pattern is scored higher if it contains more information and/or if it matches more diverse sequences. The sequence diversity is calculated from a dendrogram which has to be input.dist: similar to the tree scoring, except a matrix with pairwise the similarity between all pairs of input sequences are used instead of the tree. The matrix has to be input.ppv: a measure of Positive Predictive Value - it is assumed that the input sequences constitute a family, and are all contained in the Swiss-Prot database. PPV measures how certain one can be that a sequence belongs to the family given that it matches the pattern.For the last three scoring schemes (tree, dist, ppv), an input file is needed.", "prompt": "Scoring (-S)", "name": "S", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -S \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -S $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Tree File for Scoring equal to tree (-SF)", "name": "treefile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -SF \" + str(value)", "perl": "\" -SF $value \""}, "command": false, "precond": {"python": "S == \"tree\"", "perl": "$S eq \"tree\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A matrix with pairwise the similarity between all pairs of input sequences are used instead of the tree.", "prompt": "Distances File if Scoring equal to dist (-SF)", "name": "distfile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -SF \" + str(value)", "perl": "\" -SF $value; \""}, "command": false, "precond": {"python": "S == \"dist\"", "perl": "$S eq \"dist\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipDistanceMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default: uniprot_sprot databank.", "prompt": "Swissprot file if Scoring equal to ppv (-SF)", "name": "uniprotdb", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" -SF", "perl": "(defined $value) ? \" -SF $value\" : \" -SF"}, "command": false, "precond": {"python": "S == \"ppv\"", "perl": "$S eq \"ppv\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["SWISSPROT"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "S == \"mdl\"", "perl": "$S eq \"mdl\""}, "prompt": "MDL parameters (Z0-Z3) (if MDL scoring)", "name": "mdl_param", "children": [{"comment": null, "prompt": "Z0", "name": "Z0", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -Z0 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -Z0 $value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Z1", "name": "Z1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -Z1 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -Z1 $value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Z2", "name": "Z2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -Z2 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -Z2 $value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Z3", "name": "Z3", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -Z3 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -Z3 $value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Search parameters", "name": "search", "children": [{"comment": "If G is set to al or query, another option GF is required allowing the user to give the name of a file containing a multiple sequence alignment (in Clustal W format), or a query sequence in FastA format (without annotation). Only patterns consistent with the alignment/matching the query sequence will be considered.", "prompt": "Pattern Graph from: (-G)", "name": "G", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -G \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -G $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Alignment file must be in CLUSTALW format", "prompt": "Alignment file (if G set to al) (-GF)", "name": "GF_ali", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -GF \" + str(value)", "perl": "\" -GF $value\""}, "command": false, "precond": {"python": "G == \"al\"", "perl": "$G eq \"al\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["CLUSTAL"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Query file must be in Fasta format", "prompt": "Query sequence file (if G set query) (-GF)", "name": "GF_seq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -GF \" + str(value)", "perl": "\" -GF $value\""}, "command": false, "precond": {"python": "G == \"query\"", "perl": "$G eq \"query\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Using the E parameter you can adjust the greediness of the search. Setting E to 0 (zero), the search will be exhaustive. Increasing E increases the greediness, and decreases the time used in the search.", "prompt": "Search Greediness (-E)", "name": "E", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -E \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -E $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "When the R option is switched on, patterns found during the initial pattern search are input to a refinement algorithm where more ambiguous pattern symbols can be added. For instance the pattern C-x(4)-D might be refined to C-x-[ILV]-x-D-x(3)-[DEF]", "prompt": "Pattern Refinement (-R)", "name": "R", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" \" , \" -R off\" )[ value ]", "perl": "($value) ? \" -R off\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If the RG option is switched on, then ambiguous symbols listed in the symbols file (or in the default symbol set -- see help for option B), are used. If RG is off, only the letters needed to match the input sequences are included in the ambiguous pattern positions.For example, if [ILV] is a listed allowed symbol, and [IL] is not, [IL] can be included in a pattern if RG is off, but if RG is on, the full symbol [ILV] will be included instead.", "prompt": "Generalise ambiguous symbols (if Pattern Refinement on) (-RG)", "name": "RG", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -RG on\" )[ value ]", "perl": "($value)? \" -RG on\" : \"\""}, "command": false, "precond": {"python": "R", "perl": "$R"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": "When switched on, patterns will be output in PROSITE style (for instance C-x(2,4)-[DE]). When switched off, patterns are output in a simpler consensus pattern style (for instance Cxx--[DE] where x matches exactly one arbitrary sequence symbol and - matches zero or one arbitrary sequence symbol).", "prompt": "PROSITE Pattern Format (-OP)", "name": "OP", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -OP off \" )[ value ]", "perl": "($value) ? \" -OP off \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the maximum number of patterns to be found by Pratt", "prompt": "Maximum number patterns (-ON)", "name": "ON", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -ON \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -ON $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the max. nr of patterns for which Pratt is to produce an alignment of the sequence segments matching it.", "prompt": "Maximum number Alignments (-OA)", "name": "OA", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -OA \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -OA $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If the M option is set, then Pratt will print out the location of the sequence segments matching each of the (maximum 52) best patterns. The patterns are given labels A, B,...Z,a,b,...z in order of decreasing pattern score. Each sequence is printed on a line, one character per K-tuple in the sequence. If pattern with label C matches the third K-tuple in a sequence C is printed out. If several patterns match in the same K-tuple, only the best will be printed.", "prompt": "Print Patterns in sequences (-M)", "name": "M", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" \" , \" -M off\" )[ value ]", "perl": "($value) ? \" -M off \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the K value (ratio) used for printing the summary information about where in each sequence the pattern matches are found.", "prompt": "Ratio for printing (-MR)", "name": "MR", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -MR \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -MR $value\":\"\""}, "command": false, "precond": {"python": "M", "perl": "$M"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If set, the output is printed vertically instead of horizontally, vertical output can be better for large sequence sets.", "prompt": "Print vertically (-MV)", "name": "MV", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -MV on \" )[ value ]", "perl": "($value)? \" -MV on \" : \"\""}, "command": false, "precond": {"python": "M", "perl": "$M"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "2.1", "references": [], "source_links": ["ftp://ftp.ebi.ac.uk/pub/software/unix/pratt/"], "env": [], "authors": "K. Sturzrehm, I. Jonassen", "command": {"path": null, "value": "pratt"}, "documentation_links": [], "type": "program", "name": "pratt"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac07"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Protein secondary structure prediction from a single sequence or a set of sequences", "title": "PREDATOR", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output parameters", "name": "output", "children": [{"comment": "Short output form:Secondary structure states of amino acids are indicated by the letters\n                \"H\" (helix), \"E\" (extended or sheet), and \"_\" (coil).Long output form ( option -L selected ):Secondary structure states of amino acids are indicated by letters \"H\"\n       or   \"h\" (helix),  \"E\"  or  \"e\" (extended), and \"C\" or \"c\" (coil). The\n       prediction is shown in lower case except for those residues for  which\n       the assignment was directly copied from the PDB database. This feature\n       is added so that you can distinguish between the predictions  actually\n       made by PREDATOR and those taken from known structures.\n       The  prediction is  contained  in  the records  beginning   with   the\n       identifier PRED in the first columns. For each amino acid site of your\n       sequence,  residue  number,  three-  and   one-letter   residue  code,\n       prediction,  reliability  estimate,  and  the  number of residues from\n       related sequences  projected  onto  this  residue  through  the  local\n       alignment  procedure are shown in subsequent columns. Additionally, if\n       the STRIDE or DSSP assignments have been read using the options -x  or\n       -y  (and  -z), the last column of the PREDATOR output will contain the\n       actual  secondary  structural  assignment  for  your  sequence  if  it\n       corresponds  exactly  to  the  one  in  the  STRIDE  or DSSP file (for\n       comparison). If the known assignment is not available,  i.e.,  if  you\n       did not use the -x or -y options, question signs will be output.Both output forms:If option -h has been used, PREDATOR will show  progress  by  printing\n       dots  on  the  standard output. If your sequence has related sequences\n       with known 3D structure, PDB identifiers of these  sequences  will  be\n       printed.", "prompt": null, "name": "predator_output", "simple": null, "filenames": {"python": "'predator.out'"}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "You must enter either a protein sequences or alignment file", "precond": null, "prompt": "Input file", "name": "inputfile", "children": [{"comment": null, "prompt": "Protein sequence(s) File", "name": "sequences", "ctrl": {"python": "alignment is None", "perl": "not defined $alignment"}, "simple": null, "argpos": "100", "format": {"python": "(\"\" , \" \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" $value\" : \"\""}, "command": false, "precond": {"python": "sequences is not None and alignment is None", "perl": "defined $sequences and not defined $alignment"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Protein Alignment File", "name": "alignment", "ctrl": {"python": "sequences is None", "perl": "not defined sequences"}, "simple": null, "argpos": "101", "format": {"python": "(\"\" , \" \" + str(value))[ value is not None ]", "perl": "(defined $value) ? \" $value\" : \"\""}, "command": false, "precond": {"python": "alignment is not None and sequences is None", "perl": "defined $alignment and not defined $sequences"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA", "CLUSTAL", "MSF"], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Prediction options", "name": "prediction", "children": [{"comment": null, "prompt": "Perform single sequence prediction. Ignore other sequences in the set for computing the prediction (-s)", "name": "single", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -s\" )[ value ]", "perl": "($value) ? \" -s\" : \"\""}, "command": false, "precond": {"python": "not all", "perl": "not $all"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Do not copy assignment directly from the PDB database if query sequence is found in PDB. By default, the known conformation of 7-residue segments will be used if they are identical to a 7-residue fragment in the query sequence.", "prompt": "Do not copy assignment directly from the PDB database (-u)", "name": "dont_copy", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -u\" )[ value ]", "perl": "($value) ? \" -u\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use DSSP target assignment (default is STRIDE). The predictions made with DSSP and STRIDE target assignments are optimized to reproduce these assignments as well as possible.", "prompt": "Use DSSP target assignment (-d)", "name": "dssp", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -d\" )[ value ]", "perl": "($value) ? \" -d\" : \"\""}, "command": false, "precond": {"python": "dssp_file is not None", "perl": "defined $dssp_file"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Find a subset of sequences with no more than this identity between any pair of sequences (-n)", "name": "percentid", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -n\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -n$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Input parameters", "name": "input", "children": [{"comment": null, "prompt": "Make prediction for All sequences in the input file (-a)", "name": "all", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -a\" )[ value ]", "perl": "($value) ? \" -a\" : \"\""}, "command": false, "precond": {"python": "seqid is None", "perl": "not defined $seqid"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option is case sensitive!", "prompt": "Make prediction for this sequence (give its id) (-i)", "name": "seqid", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -i\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -i$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "STRIDE file (-x)", "name": "stride_file", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -x\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -x$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "StrideReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "DSSP file (-y)", "name": "dssp_file", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -y\"+str( value ) )[ value is not None]", "perl": "(defined $value)? \" -y$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "DsspOutput", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "PDB Chain (-z)", "name": "pdb_chain", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \" -z-\" , \" -z\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -z$value\" : \" -z-\""}, "command": false, "precond": {"python": "dssp_file is not None or stride_file is not None", "perl": "defined $dssp_file or defined $stride_file"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output parameters", "name": "output", "children": [{"comment": "Every output line contains residue number, three-letter residue name, one-letter residue name, predicted secondary structural state and reliability estimate. If a STRIDE or DSSP secondary structure assignment has been read (see other options), the known assignment will also be shown in the output for comparison. By default the short output form is used.", "prompt": "Long output form (-l)", "name": "long", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -l\" )[ value ]", "perl": "($value) ? \" -l\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output other additional information if available (-h)", "name": "other_info", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -h\" )[ value ]", "perl": "($value) ? \" -h\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "2.1.2", "references": [{"url": null, "doi": null, "label": "Frishman, D. and Argos, P. (1996) Incorporation of long-distance interactions into a secondary structure prediction algorithm. Protein Engineering, 9, 133-142."}, {"url": null, "doi": null, "label": "Frishman, D. and Argos, P. (1997) 75% accuracy in protein secondary structure prediction. Proteins, 27, 329-335."}, {"url": null, "doi": null, "label": "Frishman,D and Argos,P. (1995) Knowledge-based secondary structure assignment. Proteins: structure, function and genetics, 23, 566-579."}, {"url": null, "doi": null, "label": "Kabsch,W. and Sander,C. (1983) Dictionary of protein secondary structure: pattern recognition of hydrogen-bonded and geometrical features. Biopolymers, 22: 2577-2637."}], "source_links": ["ftp://ftp.ebi.ac.uk/pub/software/unix/predator/"], "env": [], "authors": "D. Frishman & P. Argos", "command": {"path": null, "value": "predator"}, "documentation_links": [], "type": "program", "name": "predator"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac08"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:motifs"}], "description": "Regular expression search of protein sequence(s)", "title": "preg", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Regular expression pattern", "name": "e_pattern", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -pattern=@\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Pattern", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "preg"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/preg.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "preg"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac09"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple:display"}], "description": "Draw a sequence alignment with pretty formatting", "title": "prettyplot", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequences option", "name": "e_sequences", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequences=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA", "MSF", "PAIR", "MARKX0", "MARKX1", "MARKX2", "MARKX3", "MARKX10", "SRS", "SRSPAIR", "SCORE", "UNKNOWN", "MULTIPLE", "SIMPLE", "MATCH"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "This is the scoring matrix file used when comparing sequences. By default it is the file 'EBLOSUM62' (for proteins) or  the file 'EDNAFULL' (for nucleic sequences). These files are  found in the 'data' directory of the EMBOSS installation.", "prompt": "Matrix file", "name": "e_matrixfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -matrixfile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "The number of residues to be displayed on each line", "prompt": "Number of residues to be displayed on each line", "name": "e_residuesperline", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -residuesperline=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Same as -residuesperline to give no breaks", "prompt": "Residues before a space (value greater than or equal to 1)", "name": "e_resbreak", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -resbreak=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_residuesperline"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Colour residues by their consensus value.", "name": "e_ccolours", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\" -noccolours\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Colour to display identical residues (red)", "name": "e_cidentity", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -cidentity=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Colour to display similar residues (green)", "name": "e_csimilarity", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -csimilarity=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Colour to display other residues (black)", "name": "e_cother", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -cother=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Colour residues by table oily, amide etc.", "name": "e_docolour", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -docolour\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set to BPLW for normal shading \n (black, pale, light, white) \n  so for pair = 1.5,1.0,0.5 and shade = BPLW \n  Residues score Colour \n  1.5 or over... BLACK (B) \n  1.0 to 1.5 ... BROWN (P) \n  0.5 to 1.0 ... WHEAT (L) \n  under 0.5 .... WHITE (W) \n  The only four letters allowed are BPLW, in any order.", "prompt": "Shading", "name": "e_shade", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -shade=\" + str(value).upper())[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Values to represent identical similar related (value greater than or equal to 0.0)", "name": "e_pair", "ctrl": {"python": "len(value) >= 0.0"}, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -pair=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Only match those which are identical in all sequences. (value greater than or equal to 0)", "name": "e_identity", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -identity=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display prettyboxes", "name": "e_box", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\" -nobox\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Colour the background in the boxes", "name": "e_boxcol", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -boxcol\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Colour to be used for background. (grey)", "name": "e_boxuse", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -boxuse=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display the sequence names", "name": "e_name", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "(\" -noname\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Margin size for the sequence name.", "name": "e_maxnamelen", "ctrl": null, "simple": null, "argpos": "16", "format": {"python": "(\"\", \" -maxnamelen=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display the residue number", "name": "e_number", "ctrl": null, "simple": null, "argpos": "17", "format": {"python": "(\" -nonumber\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display the date and options used", "name": "e_listoptions", "ctrl": null, "simple": null, "argpos": "18", "format": {"python": "(\" -nolistoptions\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Half the total sequence weighting", "prompt": "Plurality check value (totweight/2)", "name": "e_plurality", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "(\"\", \" -plurality=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Consensus section", "name": "e_consensussection", "children": [{"comment": null, "prompt": "Display the consensus", "name": "e_consensus", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "(\"\", \" -consensus\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Allow collisions in calculating consensus", "name": "e_collision", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "(\" -nocollision\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Values are 0:Normal collision check. (default) \n 1:Compares identical scores with the max score found. So if any  other residue matches the identical score then a collision has  occurred. \n  2:If another residue has a greater than or equal to matching  score and these do not match then a collision has occurred. \n  3:Checks all those not in the current consensus.If any of these  give a top score for matching or identical scores then a  collision has occured.", "prompt": "Use alternative collisions routine", "name": "e_alternative", "ctrl": null, "simple": null, "argpos": "22", "format": {"python": "(\"\", \" -alternative=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Print residue scores", "name": "e_showscore", "ctrl": null, "simple": null, "argpos": "23", "format": {"python": "(\"\", \" -showscore=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Set page to portrait", "name": "e_portrait", "ctrl": null, "simple": null, "argpos": "24", "format": {"python": "(\"\", \" -portrait\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "25", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "e_goutfile", "ctrl": null, "simple": null, "argpos": "26", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "27", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "prettyplot"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/prettyplot.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "prettyplot"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac0a"}, "classifications": [{"type": "mobyle1", "classification": "display:nucleic:translation"}], "description": "Write a nucleotide sequence and its translation to file", "title": "prettyseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PrettyseqReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "Whole sequence", "prompt": "Range(s) to translate", "name": "e_range", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -range=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Genetic codes", "name": "e_table", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -table=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Add a ruler", "name": "e_ruler", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -noruler\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number translations", "name": "e_plabel", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\" -noplabel\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number dna sequence", "name": "e_nlabel", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\" -nonlabel\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Width of screen (value greater than or equal to 10)", "name": "e_width", "ctrl": {"python": "value >= 10"}, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -width=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "prettyseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/prettyseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "prettyseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac0b"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:primers"}], "description": "Search DNA sequences for matches with primer pairs", "title": "primersearch", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Primer3Report", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "seqall option", "name": "e_seqall", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -seqall=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Primer pairs file", "name": "e_infile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -infile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PrimerPairs", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Allowed percent mismatch", "name": "e_mismatchpercent", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -mismatchpercent=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "primersearch"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/primersearch.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "primersearch"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac0c"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:primers"}], "description": "A primer design tool", "title": "PRIMO", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output files", "name": "results_files", "simple": null, "filenames": {"python": "\"oligo.cri\"", "perl": "\"oligo.cri\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Sequence data", "name": "input_file_name", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "all", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -all\"", "perl": "\" -all\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Cover template with walking-primers on both strands (-cover)", "name": "cover", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -cover\" )[ value ]", "perl": "($value)? \" -cover\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Print formatted/annotated sequence to log file (-print)", "name": "print", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -print\" )[ value ]", "perl": "($value)? \" -print\" : \"\""}, "command": false, "precond": {"python": "not cover", "perl": "not $cover"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Regions file (-read)", "name": "regions_file", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -read \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -read $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "PrimoRegion", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use quality data? (-noqual)", "name": "qual_file", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \" -noqual\" , \"\" )[ value ]", "perl": "($value)? \"\" : \" -noqual\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Repeats file", "name": "repeats_file", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "( \"\" , \"ln -s \" +str(value)+ \" human.rep; \" )[ value is not None ]", "perl": "(defined $value)? \"ln -s $value human.rep; \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "PrimoRepeats", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Oligo file", "name": "oligo_file", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "( \"\" , \"ln -s \" +str(value)+ \" oligo.screen; \" )[ value is not None ]", "perl": "(defined $value )? \"ln -s $value oligo.screen; \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "PrimoOligo", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "rf", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"ln -s \"+str(regions_file) + \" \" + str(input_file_name) + \".regions && \"", "perl": "\"ln -s $regions_file $input_file_name.regions && \""}, "command": false, "precond": {"python": "regions_file is not None", "perl": "defined $regions_file"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "qf", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"ln -s \"+str(qual_file) + \" \" + str(input_file_name) + \".qual && \"", "perl": "\"ln -s $qual_file $input_file_name.qual; \""}, "command": false, "precond": {"python": "qual_file", "perl": "$qual_file"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [{"url": null, "doi": null, "label": "P. Li, K. C. Kupfer, C. J. Davies, D. Burbee, G. A. Evans, and H. R. Garner. PRIMO: A primer design program that applies base quality statistics for automated large-scale DNA sequencing. Genomics 40:476-485 (1997)."}], "source_links": [], "env": [], "authors": "Kupfer, Li", "command": {"path": null, "value": "primo"}, "documentation_links": [], "type": "program", "name": "primo"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac0d"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:profiles"}, {"type": "mobyle1", "classification": "sequence:protein:profiles"}], "description": "Scan one or more sequences with a simple frequency matrix", "title": "profit", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ProfitReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "Profile or weight matrix file", "name": "e_infile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -infile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "ProfileOrMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "profit"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/profit.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "profit"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac0e"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:profiles"}, {"type": "mobyle1", "classification": "sequence:protein:profiles"}], "description": "Create frequency matrix or profile from a multiple alignment", "title": "prophecy", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ProphecyReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA", "MSF", "PAIR", "MARKX0", "MARKX1", "MARKX2", "MARKX3", "MARKX10", "SRS", "SRSPAIR", "SCORE", "UNKNOWN", "MULTIPLE", "SIMPLE", "MATCH"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Profile type", "name": "e_type", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -type=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "'Epprofile' for Gribskov type, or EBLOSUM62", "prompt": "Scoring matrix", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_type !=\"F\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Enter a name for the profile", "name": "e_name", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -name=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Profile type specific options", "name": "e_profiletypesection", "children": [{"comment": null, "prompt": "Enter threshold reporting percentage (value from 1 to 100)", "name": "e_threshold", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -threshold=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_type ==\"F\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Gap options", "name": "e_gapsection", "children": [{"comment": null, "prompt": "Gap opening penalty", "name": "e_open", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -open=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_type !=\"F\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Gap extension penalty", "name": "e_extension", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -extension=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_type !=\"F\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "prophecy"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/prophecy.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "prophecy"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac0f"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:profiles"}, {"type": "mobyle1", "classification": "sequence:protein:profiles"}], "description": "Scan one or more sequences with a Gribskov or Henikoff profile", "title": "prophet", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['FASTA', 'MSF']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out2 option", "name": "e_outfile_out2", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['PAIR', 'MARKX0', 'MARKX1', 'MARKX2', 'MARKX3', 'MARKX10', 'SRS', 'SRSPAIR', 'SCORE', 'UNKNOWN', 'MULTIPLE', 'SIMPLE', 'MATCH']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Profile or weight matrix file", "name": "e_infile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -infile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "ProfileOrMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Gap opening coefficient (value from 0.0 to 100.0)", "name": "e_gapopen", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -gapopen=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Gap extension coefficient (value from 0.0 to 100.0)", "name": "e_gapextend", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -gapextend=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output alignment file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the alignment output format", "name": "e_aformat_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -aformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "prophet"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/prophet.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "prophet"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac10"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:pattern"}], "description": "Prosite Pattern search", "title": "PROSE", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": []}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Protein Sequence File", "name": "seqfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Include abundant patterns (-s)", "name": "abundant", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -s\")[value]", "perl": "($value) ? \" -s\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Report occurrences (-m)", "name": "report", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -m \" + str(value))[value != vdef]", "perl": "($value ne $vdef) ? \" -m $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Perform case sensitive search (-c)", "name": "case", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -c\")[value]", "perl": "($value) ? \" -c\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This file require exactly one pattern per\n          line, in the following format:NAME followed by PATTERN.", "prompt": "Pattern list file (-l)", "name": "plist", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -l \" + str(value))[value is not None]", "perl": "(defined $value) ? \" -l $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "ProsePattern", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "0.02", "references": [], "source_links": ["ftp://ftp.pasteur.fr/pub/gensoft/projects/prose/"], "env": [], "authors": "K. Schuerer", "command": {"path": null, "value": "prose"}, "documentation_links": [], "type": "program", "name": "prose"}, {"comment": "This program uses protein sequences to compute\n\t  a distance matrix, under four different models of amino acid\n\t  replacement. It can also compute a table of similarity between\n\t  the amino acid sequences.The distance for each pair of species estimates the\n\t  total branch length between the two species, and can be used in the\n\t  distance matrix programs FITCH, KITSCH or NEIGHBOR.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac11"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:distance"}], "description": "Compute distance matrix from protein sequences", "title": "protdist", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Outfile", "name": "outfile", "simple": null, "filenames": {"python": "\"protdist.outfile\"", "perl": "\"protdist.outfile\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipDistanceMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "seqboot outfile", "name": "seqboot_out", "simple": null, "filenames": {"python": "\"seqboot.outfile\"", "perl": "\"seqboot.outfile\""}, "precond": {"python": "seqboot", "perl": "$seqboot"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SetOfAlignment", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "protdist", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"protdist <protdist.params\"", "perl": "\"protdist <protdist.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The input file must contained aligned sequences in PHYLIP format obtained by sequence alignment programs.", "prompt": "Alignment File", "name": "infile", "ctrl": {"python": "value not in ( \"infile\" , \"outfile\" )", "perl": "$value ne \"infile\" and $value ne \"outfile\""}, "simple": null, "argpos": "-10", "format": {"python": "\"ln -s \" + str( infile ) + \" infile && \"", "perl": "\"ln -s $infile infile && \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["PHYLIPI"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Distance model (P)", "name": "Method", "ctrl": null, "simple": null, "argpos": "2", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protdist.params"}, {"comment": null, "prompt": "Gamma distribution of rates among positions (G)", "name": "gamma_dist", "ctrl": null, "simple": null, "argpos": "2", "format": null, "command": false, "precond": {"python": "Method in [ \"J\" , \"D\" , \"C\" ]", "perl": "$Method =~ /^[JDC]$/"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protdist.params"}, {"comment": "Instead of the more widely-known coefficient alpha, PROTDIST uses the coefficient of variation (ratio of the standard deviation to the mean) of rates among amino acid positions. So if there is 20% variation in rates, the CV is is 0.20. The square of the C.V. is also the reciprocal of the better-known shape parameter, alpha, of the Gamma distribution, so in this case the shape parameter alpha = 1/(0.20*0.20) = 25. If you want to achieve a particular value of alpha, such as 10, you will want to use a CV of 1/sqrt(100) = 1/10 = 0.1.", "prompt": "Coefficient of variation of substitution rate among positions (must be positive)", "name": "gamma", "ctrl": null, "simple": null, "argpos": "1500", "format": {"python": "str( value )+ \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "gamma_dist in [ \"Y\" , \"G\" ]", "perl": "$gamma_dist =~ /^[YG]$/"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protdist.params"}, {"comment": null, "prompt": "Fraction of invariant positions", "name": "invariant", "ctrl": null, "simple": null, "argpos": "1501", "format": {"python": "str(value)+\"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "gamma_dist == \"G\"", "perl": "$gamma_dist eq \"G\"/"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protdist.params"}, {"comment": null, "precond": null, "prompt": "Bootstrap options", "name": "bootstrap", "children": [{"comment": "By selecting this option, the bootstrap will be performed on your sequence file. So you don't need to perform a separated seqboot before.Don't give an already bootstrapped file to the program, this won't work!", "prompt": "Perform a bootstrap before analysis", "name": "seqboot", "ctrl": null, "simple": null, "argpos": "-5", "format": {"python": "( \"\" , \"seqboot < seqboot.params && mv outfile seqboot.outfile && rm infile && ln -s seqboot.outfile infile && \" )[ value ]", "perl": "($value) ? \"seqboot < seqboot.params && mv outfile seqboot.outfile && rm infile  && ln -s seqboot.outfile infile && \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "1. The bootstrap. Bootstrapping was invented by Bradley Efron in 1979, and its use in phylogeny estimation was introduced by me (Felsenstein, 1985b). It involves creating a new data set by sampling N characters randomly with replacement, so that the resulting data set has the same size as the original, but some characters have been left out and others are duplicated. The random variation of the results from analyzing these bootstrapped data sets can be shown statistically to be\n              typical of the variation that you would get from collecting new data sets. The method assumes that the characters evolve independently, an assumption that may not be realistic for many kinds of data.2. Delete-half-jackknifing. This alternative to the bootstrap involves sampling a random half of the characters, and including them in the data but dropping the others. The resulting data sets are half the size of the original, and no characters are duplicated. The random variation from doing this should be very similar to that obtained from the bootstrap. The method is advocated by Wu (1986).3. Permuting species for each characters. This method of resampling (well, OK, it may not be best to call it resampling) was introduced by Archie (1989) and Faith (1990; see also Faith and Cranston, 1991). It involves permuting the columns of the data matrix separately. This produces data matrices that have the same number and kinds of characters but no taxonomic structure. It is used for different purposes than the bootstrap, as it tests not the variation around an estimated tree but the hypothesis that there is no taxonomic structure in the data: if a statistic such as number of steps is significantly smaller in the actual data than it is in replicates that are permuted, then we can argue that there is some taxonomic structure in the data (though perhaps it might be just the presence of aa pair of sibling species).4. Permuting characters order. This simply permutes the order of the characters, the same reordering being applied to all species. For many methods of tree inference this will make no difference to the outcome (unless one has rates of evolution correlated among adjacent sites). It is included as a possible step in carrying out a permutation test of homogeneity of characters (such as the Incongruence Length Difference test).5. Permuting characters separately for each species. This is a method introduced by Steel, Lockhart, and Penny (1993) to permute data so as to destroy all phylogenetic structure, while keeping the base composition of each species the same as before. It shuffles the character order separately for each species.", "prompt": "Resampling methods (J)", "name": "resamp_method", "ctrl": null, "simple": null, "argpos": "1", "format": null, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": "Random number seed (must be odd)", "name": "seqboot_seed", "ctrl": {"python": "value > 0 and (value % 2) != 0", "perl": "$value > 0 and ($value % 2) != 0"}, "simple": null, "argpos": "10000", "format": {"python": "str( value ) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": "How many replicates (R)?", "name": "replicates", "ctrl": {"python": "replicates <= 1000", "perl": "$replicates <= 1000"}, "simple": null, "argpos": "1", "format": {"python": "( \"\", \"R\\n\" +str( value )+ \"\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"R\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}]}, {"comment": null, "precond": null, "prompt": "Weight options", "name": "weight_opt", "children": [{"comment": null, "prompt": "Use weights for sites (W)", "name": "weights", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"W\\n\" )[ value ]", "perl": "($value) ? \"W\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protdist.params"}, {"comment": null, "prompt": "Weights file", "name": "weights_file", "ctrl": {"python": "value not in ( \"infile\" , \"outfile\" )", "perl": "$value ne \"infile\" and $value ne \"outfile\""}, "simple": null, "argpos": "-1", "format": {"python": "( \"\" , \"ln -s \" + str( weights_file ) + \" weights && \" )[ value is not None ]", "perl": "(defined $value) ? \"ln -s $weights_file weights && \" : \"\""}, "command": false, "precond": {"python": "weights", "perl": "$weights"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipWeight", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": null, "name": "multiple_dataset", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\"M\\nD\\n\"+ str( replicates ) + \"\\n\"", "perl": "\"M\\\\nD\\\\n$replicates\\\\n\""}, "command": false, "precond": {"python": "seqboot and replicates > 1", "perl": "$seqboot and $replicates > 1"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protdist.params"}, {"comment": null, "prompt": null, "name": "bootconfirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": null, "name": "bootterminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": null, "prompt": "Print out the data at start of run (1)", "name": "printdata", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"1\\n\" )[ value ]", "perl": "($value) ? \"1\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protdist.params"}]}, {"comment": null, "precond": {"python": "Method == \"C\"", "perl": "$Method eq \"C\""}, "prompt": "Categories model options (options available only if Categories model choosed)", "name": "categ_options", "children": [{"comment": null, "prompt": "Genetic code (U)", "name": "code", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\", \"U\\n\" + str( code ) + \"\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \"U\\\\n$code\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protdist.params"}, {"comment": "All have groups: (Glu Gln Asp Asn), (Lys Arg His), (Phe Tyr Trp) plus:George/Hunt/Barker: (Cys), (Met Val Leu Ileu), (Gly Ala Ser Thr Pro)Chemical: (Cys Met), (Val Leu Ileu Gly Ala Ser Thr), (Pro)Hall: (Cys), (Met Val Leu Ileu), (Gly Ala Ser Thr), (Pro)", "prompt": "Categorization of amino acids (A)", "name": "categorization", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \"A\\n\" +str( categorization ) +\"\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \"A\\\\n$categorization\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protdist.params"}, {"comment": null, "prompt": "Prob change category (1.0=easy) (E)", "name": "change_prob", "ctrl": {"python": "change_prob > 0.0 and change_prob < 1.0", "perl": "$change_prob > 0.0 and $change_prob < 1.0"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \"E\\n\"+ str( value ) +\"\\n\")[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"E\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protdist.params"}, {"comment": "If the Categories distance is selected another menu option, T,\n             will appear allowing the user to supply the Transition/Transversion ratio that should be assumed at the underlying DNA level.\n             The transition/transversion ratio can be any number from 0.5 upwards.", "prompt": "Transition/transversion ratio (T)", "name": "ratio", "ctrl": {"python": "value >= 0.5", "perl": "$value >= 0.5"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \"T\\n\"+str(value)+\"\\n\")[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \"T\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protdist.params"}]}, {"comment": null, "prompt": null, "name": "confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protdist.params"}, {"comment": null, "prompt": null, "name": "terminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protdist.params"}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/phylip/doc/protdist.html"], "type": "program", "name": "protdist"}, {"comment": "This program infers an unrooted phylogeny from protein sequences, using a new method intermediate between the approaches of Eck and Dayhoff (1966) and Fitch (1971).  Eck and Dayhoff (1966) allowed any amino acid to change to any other, and counted the number of such changes needed to evolve the\nprotein sequences on each given phylogeny.  This has the problem that it allows replacements which are not consistent with the genetic code, counting them equally with replacements that are consistent.  Fitch, on the other hand, counted the minimum number of nucleotide substitutions that would be needed to achieve the given protein sequences.  This counts silent changes equally with those that change the amino acid.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac12"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:parsimony"}], "description": "Protein Sequence Parsimony Method", "title": "protpars", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Outfile", "name": "outfile", "simple": null, "filenames": {"python": "\"protpars.outfile\"", "perl": "\"protpars.outfile\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Tree file", "name": "treefile", "simple": null, "filenames": {"python": "\"protpars.outtree\"", "perl": "\"protpars.outtree\""}, "precond": {"python": "print_treefile", "perl": "$print_treefile"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "seqboot outfile", "name": "seqboot_out", "simple": null, "filenames": {"python": "\"seqboot.outfile\"", "perl": "\"seqboot.outfile\""}, "precond": {"python": "seqboot", "perl": "$seqboot"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SetOfAlignment", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Consense outfile", "name": "consense_outfile", "simple": null, "filenames": {"python": "\"consense.outfile\"", "perl": "\"consense.outfile\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Consense tree file", "name": "consense_treefile", "simple": null, "filenames": {"python": "\"consense.outtree\"", "perl": "\"consense.outtree\""}, "precond": {"python": "consense", "perl": "$consense"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "protpars", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"protpars <protpars.params\"", "perl": "\"protpars <protpars.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The input file must contained aligned sequences in PHYLIP format obtained by sequence alignment programs.", "prompt": "Alignment File", "name": "infile", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"ln -s \" + str(infile) + \" infile && \"", "perl": "\"ln -s $infile infile && \""}, "command": false, "precond": {"python": "infile != \"infile\"", "perl": "$infile ne \"infile\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["PHYLIPI"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Parsimony options", "name": "protpars_opt", "children": [{"comment": null, "prompt": "Use Threshold parsimony (T)", "name": "use_threshold", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \"T\\n\" + str( threshold ) + \"\\n\" )[ value ]", "perl": "($value) ? \"T\\\\n$threshold\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protpars.params"}, {"comment": null, "prompt": "Threshold parsimony value", "name": "threshold", "ctrl": {"python": "value > 1", "perl": "$value > 1"}, "simple": null, "argpos": "2", "format": null, "command": false, "precond": {"python": "use_threshold", "perl": "$use_threshold"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protpars.params"}, {"comment": null, "prompt": "Genetic code for 'categories' model (C)", "name": "code", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \"C\\n\"+str( code ) +\"\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \"C\\\\n$code\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protpars.params"}]}, {"comment": "Use these options only if you have only one data set", "precond": null, "prompt": "Randomize options ( one dataset )", "name": "jumble_opt", "children": [{"comment": null, "prompt": "Randomize (jumble) input order of sequences (J)", "name": "jumble", "ctrl": {"python": "not (jumble and seqboot)", "perl": "not( $jumble and $seqboot)"}, "simple": null, "argpos": "20", "format": {"python": "( \"\" , \"J\\n\" + str( jumble_seed ) + \"\\n\" + str(times2jumble) + \"\\n\" )[ value ]", "perl": "($value) ? \"J\\\\n$jumble_seed\\\\n$times2jumble\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protpars.params"}, {"comment": null, "prompt": "Jumble random number seed (must be odd)", "name": "jumble_seed", "ctrl": {"python": "value > 0 and (value % 2) != 0", "perl": "$value > 0 and ($value % 2) != 0"}, "simple": null, "argpos": "19", "format": null, "command": false, "precond": {"python": "jumble", "perl": "$jumble"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of times to jumble", "name": "times2jumble", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "jumble", "perl": "$jumble"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "if you bootstrap your data ( generate multiple dataset ) don't use Randomize options", "precond": null, "prompt": "Bootstrap options ( multiple dataset )", "name": "bootstrap", "children": [{"comment": "By selecting this option, the bootstrap will be performed on your sequence file. So you don't need to perform a separated seqboot before.Don't give an already bootstrapped file to the program, this won't work!You can't use \"Randomize options\" and \"Bootstrap options\" at the same time.", "prompt": "Perform a bootstrap before analysis", "name": "seqboot", "ctrl": {"python": "not( seqboot and jumble)", "perl": "not( $seqboot and $jumble)"}, "simple": null, "argpos": "-5", "format": {"python": "( \"\" , \"seqboot < seqboot.params && mv outfile seqboot.outfile && rm infile  && ln -s seqboot.outfile infile && \" )[ value ]", "perl": "($value) ? \"seqboot <seqboot.params && mv outfile seqboot.outfile && rm infile  && ln -s seqboot.outfile infile && \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "1. The bootstrap. Bootstrapping was invented by Bradley Efron in 1979, and its use in phylogeny estimation was introduced by me (Felsenstein, 1985b). It involves creating a new data set by sampling N characters randomly with replacement, so that the resulting data set has the same size as the original, but some characters have been left out and others are duplicated. The random variation of the results from analyzing these bootstrapped data sets can be shown statistically to be\n              typical of the variation that you would get from collecting new data sets. The method assumes that the characters evolve independently, an assumption that may not be realistic for many kinds of data.2. Delete-half-jackknifing. This alternative to the bootstrap involves sampling a random half of the characters, and including them in the data but dropping the others. The resulting data sets are half the size of the original, and no characters are duplicated. The random variation from doing this should be very similar to that obtained from the bootstrap. The method is advocated by Wu (1986).3. Permuting species for each characters. This method of resampling (well, OK, it may not be best to call it resampling) was introduced by Archie (1989) and Faith (1990; see also Faith and Cranston, 1991). It involves permuting the columns of the data matrix separately. This produces data matrices that have the same number and kinds of characters but no taxonomic structure. It is used for different purposes than the bootstrap, as it tests not the variation around an estimated tree but the hypothesis that there is no taxonomic structure in the data: if a statistic such as number of steps is significantly smaller in the actual data than it is in replicates that are permuted, then we can argue that there is some taxonomic structure in the data (though perhaps it might be just the presence of aa pair of sibling species).4. Permuting characters order. This simply permutes the order of the characters, the same reordering being applied to all species. For many methods of tree inference this will make no difference to the outcome (unless one has rates of evolution correlated among adjacent sites). It is included as a possible step in carrying out a permutation test of homogeneity of characters (such as the Incongruence Length Difference test).5. Permuting characters separately for each species. This is a method introduced by Steel, Lockhart, and Penny (1993) to permute data so as to destroy all phylogenetic structure, while keeping the base composition of each species the same as before. It shuffles the character order separately for each species.", "prompt": "Resampling methods", "name": "Method", "ctrl": null, "simple": null, "argpos": "1", "format": null, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": "How many replicates (R)", "name": "replicates", "ctrl": {"python": "replicates <= 1000", "perl": "$replicates <= 1000"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"R\\n\" + str( value ) + \"\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"R\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": "Random number seed (must be odd)", "name": "seqboot_seed", "ctrl": {"python": "value > 0 and (value % 2) != 0", "perl": "$value > 0 and ($value % 2) != 0"}, "simple": null, "argpos": "1000", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": "Number of times to jumble", "name": "seqboot_times2jumble", "ctrl": {"python": "seqboot_times2jumble * ( 1 , replicates)[replicates is not None] <= 100000", "perl": "($seqboot_times2jumble * (defined $replicates) ? $replicates : 1) <= 100000"}, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "multiple_dataset", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\"M\\nD\\n\" + str( replicates ) + \"\\n\" + str( seqboot_seed ) + \"\\n\"+ str( seqboot_times2jumble ) + \"\\n\"", "perl": "\"M\\\\nD\\\\n$replicates\\\\n$seqboot_seed\\\\n$times2jumble\\\\n\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protpars.params"}, {"comment": null, "prompt": "Compute a consensus tree", "name": "consense", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\" , \" && cp infile protpars.infile && cp protpars.outtree intree && consense < consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" )[ value ]", "perl": "($value) ? \" && cp infile protpars.infile &&  cp protpars.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" : \"\""}, "command": false, "precond": {"python": "seqboot and print_treefile", "perl": "$seqboot and $print_treefile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "User tree options", "name": "user_tree_opt", "children": [{"comment": "To give your tree to the program, you must normally put it in the alignment file, after the sequences, preceded by a line indicating how many trees you give.Here, this will be automatically appended: just give a treefile and the number of trees in it.", "prompt": "Use user tree (default: no, search for best tree) (U)", "name": "user_tree", "ctrl": {"python": "not ( user_tree and seqboot )", "perl": "not ( $user_tree and $seqboot )"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"U\\n\" )[ value ]", "perl": "($value) ? \"U\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protpars.params"}, {"comment": "Give a tree whenever the infile does not already contain the tree.", "prompt": "User tree file", "name": "tree_file", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "( \"\" , \"ln -s \" + str( tree_file ) + \" intree && \")[ value is not None ]", "perl": "(defined $value) ? \"ln -s $tree_file intree && \" : \"\""}, "command": false, "precond": {"python": "user_tree", "perl": "$user_tree"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": "Tells the program to print a semi-graphical picture of the tree in the outfile.", "prompt": "Print output tree (3)", "name": "print_tree", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"3\\n\" )[ value != vdef ]", "perl": "($value != $vdef) ? \"\" : \"3\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protpars.params"}, {"comment": null, "prompt": "Print sequences at all nodes of tree (5)", "name": "print_sequences", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"5\\n\" )[ value ]", "perl": "($value) ? \"5\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protpars.params"}, {"comment": "Tells the program to save the tree in a tree file (outtree) (a standard representation of trees where the tree is specified by a nested pairs of parentheses, enclosing names and separated by commas).", "prompt": "Write out trees onto tree file (6)", "name": "print_treefile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"6\\n\" )[ value != vdef ]", "perl": "($value != $vdef) ? \"\" : \"6\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protpars.params"}, {"comment": null, "prompt": "Print out the data at start of run (1)", "name": "printdata", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"1\\n\" )[ value ]", "perl": "($value) ? \"1\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protpars.params"}, {"comment": null, "prompt": "Print out steps in each site (4)", "name": "print_steps", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"4\\n\" )[ value ]", "perl": "($value) ? \"4\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protpars.params"}]}, {"comment": null, "precond": null, "prompt": "Other options", "name": "other_options", "children": [{"comment": "The O (Outgroup) option specifies which species is to have the root of the tree be on the line leading to it.For example, if the outgroup is a species \"Mouse\" then the root of the tree will be placed in the middle of the branch which is connected to this species, with Mouse branching off on one side of the root and the lineage leading to the rest of the tree on the other.This option is toggle on by choosing the number of the outgroup (the species being taken in the numerical order that they occur in the input file).Outgroup-rooting will not be attempted  if it is a user-defined tree, despite your invoking the option.When it is used, the tree as printed out is still listed as being an unrooted tree, though the outgroup is connected to the bottommost node so that it is easy to visually convert the tree into rooted form.", "prompt": "Outgroup species (O)", "name": "outgroup", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \"O\\n\" + str( value ) +\"\\n\" )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"O\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protpars.params"}]}, {"comment": null, "prompt": null, "name": "confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"y\\n\"", "perl": "\"y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protpars.params"}, {"comment": null, "prompt": null, "name": "terminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "protpars.params"}, {"comment": null, "prompt": null, "name": "bootconfirm", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\"y\\n\"", "perl": "\"y\\\\n\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": null, "name": "bootterminal_type", "ctrl": null, "simple": null, "argpos": "-1", "format": {"python": "\"0\\n\"", "perl": "\"0\\\\n\""}, "command": false, "precond": {"python": "seqboot", "perl": "$seqboot"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "seqboot.params"}, {"comment": null, "prompt": null, "name": "consense_confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"Y\\n\"", "perl": "\"Y\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "prompt": null, "name": "consense_terminal_type", "ctrl": null, "simple": null, "argpos": "-2", "format": {"python": "\"T\\n\"", "perl": "\"T\\\\n\""}, "command": false, "precond": {"python": "consense", "perl": "$consense"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}, {"comment": null, "prompt": null, "name": "consense_outgroup", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"0\\n\" + str(outgroup) + \"\\n\"", "perl": "\"O\\\\n$outgroup\\\\n\""}, "command": false, "precond": {"python": "consense and outgroup > 1", "perl": "$consense and $outgroup > 1"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "consense.params"}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/phylip/doc/protpars.html"], "type": "program", "name": "protpars"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac13"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:motifs"}], "description": "Scans protein sequence(s) with fingerprints from the PRINTS database", "title": "pscan", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PscanReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Minimum number of elements per fingerprint (value from 1 to 20)", "name": "e_emin", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -emin=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum number of elements per fingerprint (value less than or equal to 20)", "name": "e_emax", "ctrl": {"python": "value <= 20"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -emax=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "pscan"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/pscan.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "pscan"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac14"}, "classifications": [{"type": "mobyle1", "classification": "database:search:homology"}, {"type": "mobyle1", "classification": "database:search:pattern"}], "description": "Position Specific Iterative Blast", "title": "PSI-Blast", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Blast text report", "name": "txtfile", "simple": null, "filenames": {"python": "\"psiblast.txt\"", "perl": "\"psiblast.txt\""}, "precond": {"python": "view_alignments != \"7\"", "perl": "$view_alignments ne \"7\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Blast xml report", "name": "xmlfile", "simple": null, "filenames": {"python": "\"psiblast.xml\"", "perl": "\"psiblast.xml\""}, "precond": {"python": "view_alignments == \"7\"", "perl": "$view_alignments eq \"7\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastXmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Blast html report", "name": "htmlfile", "simple": null, "filenames": {"python": "\"psiblast.html\"", "perl": "\"psiblast.html\""}, "precond": {"python": "view_alignments not in [\"7\", \"8\"]", "perl": "$view_alignments !~ /^[78]$/"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastHtmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": null, "name": "imgfile", "simple": null, "filenames": {"python": "\"*.gif\"", "perl": "\"*.gif\""}, "precond": {"python": "view_alignments not in [\"7\", \"8\"]", "perl": "$view_alignments !~ /^[78]$/"}, "output_type": "file", "hidden": true, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "The blastpgp program can do an iterative search in which sequences found in one round of searching are used to build a score model for the next round of searching. In this usage, the program is called Position-Specific Iterated BLAST, or PSI-BLAST. As explained in the accompanying paper, the BLAST algorithm is not tied to a specific score matrix. Traditionally, it has been implemented using an AxA substitution matrix where A is the alphabet size. PSI-BLAST instead uses a QxA matrix, where Q is the length of the query sequence; at each position the cost of a letter depends on the position w.r.t. the query and the letter in the subject sequence.The position-specific matrix for round i+1 is built from a constrained multiple alignment among the query and the sequences found with sufficiently low e-value in round i. The top part of the output for each round distinguishes the sequences into: sequences found previously and used in the score model, and sequences not used in the score model. The output currently includes lots of diagnostics requested by users at NCBI. To skip quickly from the output of one round to the next, search for the string 'producing', which is part of the header for each round and likely does not appear elsewhere in the output. PSI-BLAST 'converges' and stops if all sequences found at round i+1 below the e-value threshold were already in the model at the beginning of the round.", "prompt": null, "name": "psiblast", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"blastpgp\"", "perl": "\"blastpgp\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequence File (-i)", "name": "query", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" -i \" + str(value)", "perl": "\" -i $query\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Start of required region in query (-S)", "name": "start_region", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -S \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -S $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Location on query sequence. -1 indicates end of query", "prompt": "End of required region in query (-H)", "name": "end_region", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -H \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -H $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Choose a protein db for blastp or blastx.", "prompt": "Protein database (-d )", "name": "protein_db", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -d \" + str(value)", "perl": "\" -d $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Scoring option", "name": "scoring", "children": [{"comment": null, "prompt": "Cost to open a gap (-G)", "name": "open_a_gap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -G \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -G $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Limited values for gap existence and extension are supported for these three programs. Some supported and suggested values are:Existence Extension10 -- 110 -- 211 -- 18 -- 29 -- 2(source: NCBI Blast page)", "prompt": "Cost to extend a gap (-E)", "name": "extend_a_gap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -E \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -E $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Similarity matrix (-M)", "name": "matrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -M \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -M $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "This options also takes a string as an argument.  One may use such a string to change the specific parameters of seg or invoke other filters. Please see the 'Filtering Strings' section (below) for details.", "precond": null, "prompt": "Filtering and masking options", "name": "filter_opt", "children": [{"comment": null, "prompt": "Filter query sequence with SEG (-F)", "name": "filter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -F T\" )[ value ]", "perl": "($value) ? \" -F T\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option specifies that any lower-case letters in the input FASTA file should be masked.", "prompt": "Use lower case filtering (-U)", "name": "lower_case", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -U T\")[value]", "perl": "($value) ? \" -U T\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Selectivity options", "name": "selectivity_opt", "children": [{"comment": "The statistical significance threshold for reporting matches against database sequences; the default value is 10, such that 10 matches are expected to be found merely by chance, according to the stochastic model of Karlin and Altschul (1990). If the statistical significance ascribed to a match is greater than the EXPECT threshold, the match will not be reported. Lower EXPECT thresholds are more stringent, leading to fewer chance matches being reported. Fractional values are acceptable.", "prompt": "Expected value (-e)", "name": "Expect", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -e \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -e $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use words of size N.Zero invokes default behaviorDefault value: 3", "prompt": "Word Size (-W)", "name": "word_size", "ctrl": {"python": "value >= 2 and value <=3", "perl": "$value >= 2 and $value <=3"}, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -W \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -W $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "When  multiple   hits  method  is  used,  this parameter defines the distance from last hit on the same diagonal to the new one.Zero means single hit algorithm.", "prompt": "Multiple hits window size (-A)", "name": "window", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -A \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -A $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Blast seeks first short word pairs whose aligned score reaches at least this value", "prompt": "Threshold for extending hits (-f)", "name": "extend_hit", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -f \" + str(value) )[ value is not None and value !=vdef]", "perl": "(defined $value and $value != $vdef)? \" -f $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is the value that control the path graph region explored by Blast during a gapped extension (Xg in the NAR paper).", "prompt": "X dropoff value for gapped alignment (-X)", "name": "dropoff", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -X \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -X $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This parameter controls the dropoff for the final reported alignment. See also the -X parameter.", "prompt": "X dropoff value for final gapped alignment (-Z)", "name": "dropoff_z", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -Z \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -Z $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This parameter controls the dropoff at ungapped extension stage. See also the -X parameter.", "prompt": "Dropoff for blast ungapped extensions in bits (-y)", "name": "dropoff_y", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -y \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -y $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use zero for the real size", "prompt": "Effective length of the search space (-Y)", "name": "eff_len", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -Y \"+str(value))[value is not None and value !=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -Y $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this option is used, a value of 100 is recommended.", "prompt": "Number of best hits from a region to keep (-K)", "name": "keep_hits", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -K \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -K $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Single-hit or multiple-hit mode (-P)", "name": "mode", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -P \"+str(value))[value != \"0\"]", "perl": "($value eq \"0\") ? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of bits to trigger gapping (-N)", "name": "nb_bits", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -N \"+str(value))[value is not None and value !=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -N $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "PSI-Blast specific selectivity options", "name": "psi_spec_opt", "children": [{"comment": null, "prompt": "Maximum number of passes to use in  multipass version (-j)", "name": "max_passes", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -j \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -j $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "e-value threshold for inclusion in multipass model (-h)", "name": "expect_in_multipass", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -h \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -h $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This constant is the weight given to a pre-calculated residue target frequency (versus the observed one) in a column of the position specific matrix. The larger its value, the greater the emphasis given to prior knowledge of residue relationships vis a vis observed residue frequencies (beta constant in NAR paper).", "prompt": "Constant in pseudocounts for multipass version (-c)", "name": "pseudocounts", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -c \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -c $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Report options", "name": "affichage", "children": [{"comment": "Maximum number of database sequences for which one-line descriptions will be reported.", "prompt": "Number of one-line descriptions to show? (-v)", "name": "Descriptions", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -v \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -v $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum number of database sequences for which high-scoring segment pairs will be reported (-b).", "prompt": "Number of database sequences to show alignments? (-b)", "name": "Alignments", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -b \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -b $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Alignment view options (-m)", "name": "view_alignments", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -m \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -m $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Text output file", "name": "txtoutput", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -o psiblast.txt\"", "perl": "\" -o psiblast.txt\""}, "command": false, "precond": {"python": "view_alignments != \"7\"", "perl": "$view_alignments ne \"7\""}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "XML output file", "name": "xmloutput", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -o psiblast.xml\"", "perl": "\" -o psiblast.xml\""}, "command": false, "precond": {"python": "view_alignments == \"7\"", "perl": "$view_alignments eq \"7\""}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Html output", "name": "htmloutput", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\" , \" && html4blast -g -o psiblast.html psiblast.txt\")[value]", "perl": "($value) ? \" && html4blast -g -o psiblast.html psiblast.txt\" : \"\""}, "command": false, "precond": {"python": "view_alignments not in [ \"7\" , \"8\" ]", "perl": "$view_alignments !~ /^[78]$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Believe the query defline (-J)", "name": "believe", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -J\")[ value ]", "perl": "($value)? \" -J\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "SeqAlign is in ASN.1 format, so that it can be read with NCBI tools (such as sequin). This allows one to view the results in different formats.", "prompt": "SeqAlign file (-J option must be true) (-O)", "name": "seqalign_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -O \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -O $value\" : \"\""}, "command": false, "precond": {"python": "believe", "perl": "$believe"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Save PSI-Blast Matrix to file (-C)", "name": "save_matrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -C \"+ str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -C $save_matrix\" : \"\""}, "command": false, "precond": {"python": "max_passes > 1", "perl": "$max_passes > 1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Save PSI-BLAST Matrix as text to file (-Q)", "name": "save_txt_matrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -Q \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -Q $save_txt_matrix\" : \"\""}, "command": false, "precond": {"python": "max_passes > 1", "perl": "$max_passes > 1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [{"url": null, "doi": null, "label": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer,Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402."}], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "psiblast"}, {"comment": null, "homepage_links": ["http://psort.hgc.jp/"], "_id": {"$oid": "51434da593546d52388cac15"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Predicts protein subcellular localization sites from their amino acid sequence", "title": "PSORT", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Html output file", "name": "htmlfile", "simple": null, "filenames": {"python": "\"psort.html\"", "perl": "\"psort.html\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PsortHtmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Protein sequence file", "name": "seqfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Verbose mode (-w)", "name": "Verbose", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -w\")[ value ]", "perl": "($value) ? \" -w\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [{"url": null, "doi": null, "label": "A program for detecting the sorting signals of\n\tproteins and predicting their subcellular localization, trends\n\tBiochem. Sci., in press, 1999."}], "source_links": [], "env": [], "authors": "Nakai, K. and Horton, P.", "command": {"path": null, "value": "psort"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/psort/index.html"], "type": "program", "name": "psort"}, {"comment": null, "homepage_links": ["http://www.tree-puzzle.de/"], "_id": {"$oid": "51434da593546d52388cac16"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:likelihood"}], "description": "Maximum likelihood analysis for nucleotide, amino-acid and two state data", "title": "Tree-Puzzle", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "outfile", "simple": null, "filenames": {"python": "str(infile) + \".puzzle\"", "perl": "\"$infile.puzzle\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output tree", "name": "outtree", "simple": null, "filenames": {"python": "str(infile) + \".tree\"", "perl": "\"$infile.tree\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output distance", "name": "outdist", "simple": null, "filenames": {"python": "str(infile) + \".dist\"", "perl": "\"$infile.dist\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "stdinput", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" < puzzle.params\"", "perl": "\" < puzzle.params\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "confirm", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"y\\n\"", "perl": "\"y\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "Alignment File", "name": "infile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" \" + str(value)", "perl": "\" $infile\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["PHYLIPI"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "General options", "name": "general_options", "children": [{"comment": "Allows to switch between tree reconstruction/analysis by maximum likelihood and likelihood mapping.", "prompt": "Type of analysis? (b)", "name": "analysis_type", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "precond": null, "prompt": "Both Tree reconstruction and Likelihood mapping options", "name": "both_options", "children": [{"comment": "Determines whether an approximate or the exact likelihood function is used to estimate parameters of the models of sequence evolution. The approximate likelihood function is in most cases sufficient and is faster.", "prompt": "Parameter estimates? (e)", "name": "parameter_estimates", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": "Selects the methods used in the estimation of the model parameters. Neighbor-joining tree means that a NJ tree is used to estimate the parameters. Quartet sampling means that a number of random sets of four sequences are selected to estimate parameters.", "prompt": "Parameter estimation uses? (x)", "name": "parameter_estimation", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}]}, {"comment": null, "precond": {"python": "analysis_type == \"2\"", "perl": "$analysis_type eq \"2\""}, "prompt": "Likelihood mapping options", "name": "likelihood_options", "children": [{"comment": "If tree reconstruction is selected: number of puzzling steps. Parameter of the quartet puzzling tree search. Generally, the more sequences are used the more puzzling steps are advised. The default value varies depending on the number of sequences (at least 1000).If likelihood mapping is selected: number of qua rtets in a likelihood mapping analysis. Equal to the number of dots in the likelihood mapping diagram. By default 10000 dots/quartets are assumed. To use all possible quartets in clustered likelihood mapping you have to specify a value of n=0.", "prompt": "Number of quartets? (n)", "name": "quartet", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \"n\\n\" + str(value) + \"\\n\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \"n\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}]}, {"comment": null, "precond": {"python": "analysis_type == \"1\"", "perl": "$analysis_type eq \"1\""}, "prompt": "Tree reconstruction options", "name": "reconstruction_options", "children": [{"comment": "Determines how the overall tree is obtained. The topology is either computed with the quartet puzzling algorithm or a set of trees is provided by the user. If there are more than two trees in such a set, maximum likelihood branch lengths will be computed for this tree and a number of tests (KH-test, SH-test, and ELW) will be performed on the trees by default. Instead of the evaluation a consensus can be computed for all the trees for which ML branch lengths and ML value are estimated. Alternatively, a maximum likelihood distance matrix only can also be computed (no overall tree).", "prompt": "Tree search procedure? (k)", "name": "tree_search", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "User Tree file", "name": "tree_file", "ctrl": null, "simple": null, "argpos": "2000", "format": {"python": "( \"\" , str(value) +\"\\n\" )[ value is not None ]", "perl": "(defined $value)? \"$tree_file\\\\n\" : \"\""}, "command": false, "precond": {"python": "tree_search == \"3\" or tree_search == \"2\"", "perl": "$tree_search eq \"3\" or  $tree_search eq \"2\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": "Computation of clock-like maximum likelihood branch lengths. This option also invokes the likelihood ratio clock test.", "prompt": "Compute clocklike branch lengths? (z)", "name": "clocklike", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \"z\\n\" )[ value ]", "perl": "($value)? \"z\\\\n\" : \"\""}, "command": false, "precond": {"python": "tree_search != \"4\"", "perl": "$tree_search ne \"4\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": "Location of root. Only for computation of clock-like maximum likelihood branch lengths. Allows to specify the branch where the root should be placed in an unrooted tree topology. For example, in the tree (a,b,(c,d)) l = 1 places the root at the branch leading to sequence a whereas l=5 places the root at the internal branch.", "prompt": "Enter an invalid branch number to search for the best location despite of automatic search (l)", "name": "invalid", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \"l\\n\" + str(value) + \"\\n\" )[ value is not None]", "perl": "(defined $value)? \"l\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "tree_search != \"4\" and clocklike", "perl": "$tree_search ne \"4\" and $clocklike"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "precond": null, "prompt": "Quartet puzzling options", "name": "quartet_options", "children": [{"comment": "For the quartet puzzling tree search only. Only for very small data sets it is necessary to compute an exact maximum likelihood. For larger data sets this option should always be turned on.", "prompt": "Approximate quartet likelihood (v)", "name": "approximate", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"v\\n\" , \"\" )[ value ]", "perl": "($value)? \"\" : \"v\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": "Show unresolved quartets. During the quartet puzzling tree search TREE-PUZZLE counts the number of unresolved quartet trees. An unresolved quartet is a quartet where the maximum likelihood values for each of the three possible quartet topologies are so similar that it is not possible to prefer one of them (Strimmer et al., 1997). If this option is selected you will get a detailed list of all star-like quartets. Note, for some data sets there may be a lot of unresolved quartets. In this case a list of all unresolved quartets is probably not very useful and also needs a lot of disk space.", "prompt": "List unresolved quartets? (u)", "name": "unresolved", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \"u\\n\" )[ value ]", "perl": "($value)? \"u\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": "If tree reconstruction is selected: number of puzzling steps. Parameter of the quartet puzzling tree search. Generally, the more sequences are used the more puzzling steps are advised. The default value varies depending on the number of sequences (at least 1000).If likelihood mapping is selected: number of quartets in a likelihood mapping analysis. Equal to the number of dots in the likelihood mapping diagram. By default 10000 dots/quartets are assumed. To use all possible quartets in clustered likelihood mapping you have to specify a value of n=0.", "prompt": "Number of puzzling steps (n)", "name": "puzzling_step", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \"n\\n\" + str(value) + \"\\n\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \"n\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": "Writes all intermediate trees (puzzling step trees) used to compute the quartet puzzling tree into a file, either as a list of topologies ordered by number of occurrences (*.ptorder), or as list about the chronological occurrence of the topologies (*.pstep), or both.", "prompt": "List puzzling step trees? (j)", "name": "list_puzzling", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": "For displaying purposes of the unrooted quartet puzzling tree only. The default outgroup is the first sequence of the data set.", "prompt": "Display as outgroup? (o)", "name": "output", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \"o\\n\" + str(value) + \"\\n\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \"o\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}]}]}]}, {"comment": null, "precond": null, "prompt": "Substitution process options", "name": "substitution_options", "children": [{"comment": "Specifies whether nucleotide, amino acid sequences, or twostate data serve as input. The default is automatically set by inspection of the input data. After TREE-PUZZLE has selected an appropriate data type (marked by ?Auto:?) the ?d?-option changes the type in the following order: automatically selected type ! Nucleotides ! Amino acids ! automatically selected type.", "prompt": "Type of sequence input data? (d)", "name": "seqtype", "ctrl": null, "simple": null, "argpos": "-10", "format": null, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "precond": {"python": "seqtype == \"2\"", "perl": "$seqtype == \"2\""}, "prompt": "Amino acids options", "name": "protein_options", "children": [{"comment": "For amino acid sequence data the Dayhoff et al. (Dayhoff) model, the Jones et al. (JTT) model, the Adachi and Hasegawa (mtREV24) model, the Henikoff and Henikoff (BLOSUM 62), the Muller and Vingron (VT), and theWhelan and Goldman (WAG) substitution model are implemented in TREE-PUZZLE.The mtREV24 model describes the evolution of amino acids encoded on mtDNA, and BLOSUM 62 is for distantly related amino acid sequences, as well as the VT model.", "prompt": "Model of substitution for protein (m)", "name": "protein_model", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": "The maximum likelihood calculation needs the frequency of each nucleotide (amino acid, doublet) as input. TREE-PUZZLE estimates these values from the sequence input data. This option allows specification of other values.", "prompt": "Use specified Amino acid frequencies (in %) (f)", "name": "prot_freq", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "( \"\"  , \"f\\n\" )[ value ]", "perl": "($value)? \"f\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "precond": {"python": "prot_freq", "perl": "$prot_freq"}, "prompt": "Values of specified amino acid frequencies (in %)", "name": "specified_prot_freq", "children": [{"comment": null, "prompt": "pi (A)", "name": "a_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (R)", "name": "r_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (N)", "name": "n_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (D)", "name": "d_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (C)", "name": "c_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (Q)", "name": "q_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (E)", "name": "e_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (G)", "name": "g_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (H)", "name": "h_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (I)", "name": "i_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (L)", "name": "l_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (K)", "name": "k_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (M)", "name": "m_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (F)", "name": "f_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (P)", "name": "p_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (S)", "name": "s_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (T)", "name": "t_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (W)", "name": "w_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (Y)", "name": "y_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}]}]}, {"comment": null, "precond": {"python": "seqtype == \"1\"", "perl": "$seqtype eq \"1\""}, "prompt": "DNA options", "name": "dna_options", "children": [{"comment": "The following models are implemented for nucleotides: the general time reversible model (Tavaree, 1986, GTR, e.g.,) model, the Tamura and Nei (TN) model, the Hasegawa et al. (HKY) model, and the Schroniger and von Haeseler (SH) model.The SH model describes the evolution of pairs of dependent nucleotides (pairs are the first and the second nucleotide, the third and the fourth nucleotide and so on). It allows for specification of the transition-transversion ratio.The original model (Schroniger and von Haeseler, 1994) is obtained by setting the transition-transversion parameter to 0.5.The Jukes and Cantor (1969), the Felsenstein (1981), and the Kimura (1980) model are all special cases of the HKY model.", "prompt": "Model of substitution for DNA (m)", "name": "dna_model", "ctrl": null, "simple": null, "argpos": "10", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "precond": {"python": "dna_model == \"4\"", "perl": "$dna_model eq \"4\""}, "prompt": "GTR model rates", "name": "GTR_options", "children": [{"comment": null, "prompt": "A-C rate (1)", "name": "GTR_acrate", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "( \"\" , \"1\\n\"+ str(value) + \"\\n\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \"1\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "A-G rate (2)", "name": "GTR_agrate", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \"2\\n\"+ str(value) + \"\\n\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \"2\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "A-T rate (3)", "name": "GTR_atrate", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \"3\\n\"+ str(value) + \"\\n\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \"3\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "C-G rate (4)", "name": "GTR_cgrate", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \"4\\n\"+ str(value) + \"\\n\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \"4\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "C-T rate (5)", "name": "GTR_ctrate", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \"5\\n\" + str(value) +\"\\n\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \"5\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "G-T rate (6)", "name": "GTR_gtrate", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \"6\\n\" + str(value) +\"\\n\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \"6\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}]}, {"comment": null, "precond": {"python": "dna_model == \"4\"", "perl": "$dna_model eq \"4\""}, "prompt": "SH model rates", "name": "SH_options", "children": [{"comment": "This option is only available for the SH model. With this option the doublet frequencies are symmetrized. For example, the frequencies of ?AT? and ?TA? are then set to the average of both frequencies.", "prompt": "Symmetrize doublet frequencies (s)", "name": "symmetrize_frequencies", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "( \"\" , \"s\\n\" )[ value ]", "perl": "($value)? \"s\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}]}, {"comment": null, "precond": {"python": "dna_model == \"2\"", "perl": "$dna_model eq \"2\""}, "prompt": "TN model options", "name": "TN_options", "children": [{"comment": "This option is only available for the Tamura-Nei model. With this option the expected (!) transition-transversion ratio for the F84 model have to be entered and TREE-PUZZLE computes the corresponding parameters of the TN model (this depends on base frequencies of the data). This allows to compare the results of TREE-PUZZLE and the PHYLIP maximum likelihood programs which use the F84 model.", "prompt": "Constrain TN model to F84 model (p)", "name": "constrain_TN", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "( \"\" , \"p\\n\" )[ value ]", "perl": "($value)? \"p\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "Expected F84 Transition/transversion ratio", "name": "f84_ratio", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "( \"\" , str(value) + \"\\n\" )[ value is not None]", "perl": "(defined $value)? \"$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "constrain_TN", "perl": "$constrain_TN"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": "This option is only available for the TN model. This parameter is the ratio of the rates for pyrimidine transitions and purine transitions. You do not need to specify this parameter as TREE-PUZZLE estimates it from the data. For precise definition please read the section in this manual about models of sequence evolution.", "prompt": "Y/R transition parameter (r)", "name": "y_r", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "( \"\" , \"r\\n\" + str(value) +\"\\n\" )[ value is not None ]", "perl": "(defined $value)? \"r\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}]}, {"comment": "For nucleotide data only. You do not need to specify this parameter as TREE-PUZZLE estimates it from the data. The precise definition of this parameter is given in the section on models of sequence evolution in this manual.", "prompt": "Transition/transversion ratio (t)", "name": "ratio", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \"t\\n\" + str(value) + \"\\n\" )[ value is not None ]", "perl": "(defined $value) ? \"t\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "dna_model != \"3\"", "perl": "$dna_model ne \"3\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "precond": null, "prompt": "Base frequencies (in %) (f)", "name": "nuc_freq", "children": [{"comment": "The maximum likelihood calculation needs the frequency of each nucleotide (amino acid, doublet) as input. TREE-PUZZLE estimates these values from the sequence input data. This option allows specification of other values.", "prompt": "Use specified values?", "name": "use_specified_nuc", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "( \"\"  , \"f\\n\" )[ value ]", "perl": "($value)? \"f\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (A)", "name": "a_nuc_freq", "ctrl": null, "simple": null, "argpos": "51", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "use_specified_nuc", "perl": "$use_specified_nuc"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (C)", "name": "c_nuc_freq", "ctrl": null, "simple": null, "argpos": "52", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "use_specified_nuc", "perl": "$use_specified_nuc"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": null, "prompt": "pi (G)", "name": "g_nuc_freq", "ctrl": null, "simple": null, "argpos": "53", "format": {"python": "str(value) + \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": {"python": "use_specified_nuc", "perl": "$use_specified_nuc"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}]}]}]}, {"comment": null, "precond": null, "prompt": "Rate heterogeneity options", "name": "rate_options", "children": [{"comment": "TREE-PUZZLE provides several different models of rate heterogeneity: uniform rate over all sites (rate homogeneity), Gamma distributed rates, two rates (1 invariable + 1 variable), and a mixed model (1 invariable rate + Gamma distributed rates). All necessary parameters can be estimated by TREE-PUZZLE. Note that whenever invariable sites are taken into account the parameter estimation will invoke the ?e? option to use an exact likelihood function. For more detailed information please read the section in this manual about models of sequence evolution. See also option ?m? (model of substitution).", "prompt": "Model of rate heterogeneity (w)", "name": "rate_heterogeneity", "ctrl": null, "simple": null, "argpos": "20", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": "This is the so-called shape parameter of the Gamma distribution.", "prompt": "Gamma rate heterogeneity parameter alpha (a)", "name": "alpha", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "( \"\" , \"a\\n\" + str(value) +\"\\n\" )[ value is not None ]", "perl": "(defined $value)? \"a\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "rate_heterogeneity == \"2\" or rate_heterogeneity == \"4\"", "perl": "$rate_heterogeneity eq \"2\" or $rate_heterogeneity eq \"4\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": "Number of rate categories (4-16) for the discrete Gamma distribution (rate heterogeneity).", "prompt": "Number of Gamma rate categories (c)", "name": "gamma_number", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "( \"\" , \"c\\n\" + str(value) +\"\\n\" )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \"c\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "rate_heterogeneity == \"2\" or rate_heterogeneity == \"4\"", "perl": "$rate_heterogeneity eq \"2\" or $rate_heterogeneity eq \"4\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}, {"comment": "Probability of a site to be invariable. This parameter can be estimated from the data by TREE-PUZZLE (only if the approximation option for the likelihood function is turned off).", "prompt": "Fraction of invariable sites (i)", "name": "invariable", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "( \"\" , \"i\\n\" + str(value) +\"\\n\" )[ value is not None ]", "perl": "(defined $value)? \"i\\\\n$value\\\\n\" : \"\""}, "command": false, "precond": {"python": "rate_heterogeneity == \"3\" or rate_heterogeneity == \"4\"", "perl": "$rate_heterogeneity eq \"3\" or $rate_heterogeneity eq \"4\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "puzzle.params"}]}]}, "version": "5.2", "references": [{"url": null, "doi": null, "label": "Strimmer, K., and A. von Haeseler. 1996. Quartet puzzling:A quartet maximum likelihood method for reconstructing tree topologies. Mol. Biol. Evol. 13: 964-969."}], "source_links": ["http://www.tree-puzzle.de/"], "env": [], "authors": "Heiko A. Schmidt, Korbinian Strimmer and Arndt von Haeseler", "command": {"path": null, "value": "puzzle"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/puzzle/tree-puzzle.pdf"], "type": "program", "name": "puzzle"}, {"comment": "QuickTree is an efficient implementation of\n\t  the Neighbor-Joining algorithm, capable of reconstructing\n\t  phylogenies from huge alignments in time less than the age of\n\t  the universe.", "homepage_links": ["http://www.sanger.ac.uk/Software/analysis/quicktree/"], "_id": {"$oid": "51434da593546d52388cac17"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:distance"}], "description": "Rapid reconstruction of phylogenies by the Neighbor-Joining method", "title": "QuickTree", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Tree file", "name": "treefile", "simple": null, "filenames": {"python": "\"quicktree.out\"", "perl": "\"quicktree.out\""}, "precond": {"python": "out != \"m\"", "perl": "$out ne \"m\""}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Distance matrix", "name": "distoutfile", "simple": null, "filenames": {"python": "\"quicktree.out\"", "perl": "\"quicktree.out\""}, "precond": {"python": "out == \"m\"", "perl": "$out eq \"m\""}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipDistanceMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "You must enter either a distance matrix or a alignment.", "precond": null, "prompt": "Input file", "name": "inpufile", "children": [{"comment": null, "prompt": "Alignment file (-in a)", "name": "aligfile", "ctrl": {"python": "distfile is None", "perl": "not $distfile"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -in a \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -in a $value\" : \"\""}, "command": false, "precond": {"python": "distfile is None or (distfile and aligfile)", "perl": "not defined $distfile or (defined $aligfile and defined $distfile)"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["STOCKHOLM"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Give a file containing a distance matrix\n      obtained by distance matrix programs like prodist or\n      dnadist, ...", "prompt": "or Distance matrix (-in m)", "name": "distfile", "ctrl": {"python": "aligfile is None", "perl": "not defined $aligfile"}, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -in m \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -in m $value\" : \"\""}, "command": false, "precond": {"python": "aligfile is None", "perl": "not defined $aligfile"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipDistanceMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Output (-out)", "name": "out", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -out \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -out $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "out != \"m\"", "perl": "$out ne \"m\""}, "prompt": "Tree output options", "name": "treeopt", "children": [{"comment": "Bootstrapping is not available for a matrix output", "prompt": "Use the UPGMA method to construct the tree (-upgma)", "name": "upgma", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -upgma\" )[ value ]", "perl": "($value) ? \" -upgma\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Alignment options", "name": "aligopt", "children": [{"comment": "Bootstrapping is not available for a matrix output", "prompt": "Calculate bootstrap values with n iterations (-boot)", "name": "boot", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -boot \" + str(value))[ value is not None ]", "perl": "(defined $value) ? \" -boot $value\" : \"\""}, "command": false, "precond": {"python": "distfile is None and out != \"m\"", "perl": "not defined $distfile and $out ne \"m\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use the kimura translation for pairwise distances (-kimura)", "name": "kimura", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" -kimura\" )[ value ]", "perl": "($value) ? \" -kimura\" : \"\""}, "command": false, "precond": {"python": "aligfile is not None", "perl": "defined $aligfile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.1", "references": [{"url": null, "doi": null, "label": "Kevin Howe, Alex Bateman and Richard Durbin (2002).\n\tQuickTree: building huge Neighbour-Joining trees of protein\n\tsequences. Bioinformatics 18(11):1546-1547."}], "source_links": ["http://www.sanger.ac.uk/Software/analysis/quicktree/"], "env": [], "authors": "Kevin Howe, Alex Bateman, Richard Durbin", "command": {"path": null, "value": "quicktree"}, "documentation_links": [], "type": "program", "name": "quicktree"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac18"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:tree_analyser"}], "description": "Report bootstrap values found with consensus program on related tree found with phylogeny algorithm without bootstrap analysis.", "title": "rbvotree", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output tree file", "name": "outfile_name", "simple": null, "filenames": {"python": "str(outname)", "perl": "\"$outname\""}, "precond": {"python": "outname is not None", "perl": "defined $outname"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output tree file", "name": "outfile", "simple": null, "filenames": {"python": "\"rbvotree.out\"", "perl": "\"rbvotree.out\""}, "precond": {"python": "outname is  None", "perl": "not defined $outname"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Tree File (Newick standard form)(-n)", "name": "njtree", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -n \" + str(value)", "perl": "\" -n $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Consensus tree file with bootstrap values (Newick standard form)(-c)", "name": "constree", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -c \" + str(value)", "perl": "\" -c $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": null, "prompt": "Name of output tree file (-o)", "name": "outname", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -o \" + str(value)) [ value is not None]", "perl": "(defined $value)? \" -o $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.0", "references": [], "source_links": [], "env": [], "authors": "C. Maufrais", "command": {"path": null, "value": "rbvotree"}, "documentation_links": [], "type": "program", "name": "rbvotree"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac19"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:restriction"}], "description": "Find restriction sites to remove (mutate) with no translation change", "title": "recoder", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Comma separated enzyme list", "name": "e_enzymes", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -enzymes=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Display untranslated sequence", "name": "e_sshow", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -sshow\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display translated sequence", "name": "e_tshow", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -tshow\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "recoder"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/recoder.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "recoder"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac1a"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:restriction"}], "description": "Retrieve information from REBASE restriction enzyme database", "title": "redata", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "RedataReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "Enter the name of the restriction enzyme that you wish to get details of. The names often have a 'I' in them - this is a  capital 'i', not a '1' or an 'l'. The names are case-independent  ('AaeI' is the same as 'aaei')", "prompt": "Restriction enzyme name", "name": "e_enzyme", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -enzyme=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "Show other enzymes with this specificity. (Isoschizomers)", "prompt": "Show isoschizomers", "name": "e_isoschizomers", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\" -noisoschizomers\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show references", "name": "e_references", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\" -noreferences\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show suppliers", "name": "e_suppliers", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -nosuppliers\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "redata"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/redata.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "redata"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac1b"}, "classifications": [{"type": "mobyle1", "classification": "display:nucleic:restriction"}, {"type": "mobyle1", "classification": "display:nucleic:translation"}], "description": "Display restriction enzyme binding sites in a nucleotide sequence", "title": "remap", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "RemapReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Restriction enzyme methylation data file", "name": "e_mfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -mfile=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "RestrictionEnzymeMethylationData", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "The name 'all' reads in all enzyme names from the REBASE database. You can specify enzymes by giving their names with  commas between then, such as: 'HincII,hinfI,ppiI,hindiii'. \n  The case of the names is not important. You can specify a file of  enzyme names to read in by giving the name of the file holding the  enzyme names with a '@' character in front of it, for example,  '@enz.list'. \n  Blank lines and lines starting with a hash character or '!' are  ignored and all other lines are concatenated together with a comma  character ',' and then treated as the list of enzymes to search  for. \n  An example of a file of enzyme names is: \n  ! my enzymes \n  HincII, ppiII \n  ! other enzymes \n  hindiii \n  HinfI \n  PpiI", "prompt": "Comma separated enzyme list", "name": "e_enzymes", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -enzymes=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This sets the minimum length of the restriction enzyme recognition site. Any enzymes with sites shorter than this will be  ignored.", "prompt": "Minimum recognition site length (value from 2 to 20)", "name": "e_sitelen", "ctrl": {"python": "value >= 2"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -sitelen=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "This sets the minimum number of cuts for any restriction enzyme that will be considered. Any enzymes that cut fewer times  than this will be ignored.", "prompt": "Minimum cuts per re (value from 1 to 1000)", "name": "e_mincuts", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -mincuts=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This sets the maximum number of cuts for any restriction enzyme that will be considered. Any enzymes that cut more times  than this will be ignored.", "prompt": "Maximum cuts per re", "name": "e_maxcuts", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -maxcuts=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set then this forces the values of the mincuts and maxcuts qualifiers to both be 1. Any other value you may have  set them to will be ignored.", "prompt": "Force single site only cuts", "name": "e_single", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -single\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This allows those enzymes which cut at the same position on the forward and reverse strands to be considered.", "prompt": "Allow blunt end cutters", "name": "e_blunt", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\" -noblunt\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This allows those enzymes which cut at different positions on the forward and reverse strands, leaving an overhang, to be  considered.", "prompt": "Allow sticky end cutters", "name": "e_sticky", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\" -nosticky\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This allows those enzymes which have one or more 'N' ambiguity codes in their pattern to be considered", "prompt": "Allow ambiguous matches", "name": "e_ambiguity", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\" -noambiguity\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set then this allows searches for restriction enzyme recognition site and cut positions that span the end of the  sequence to be considered.", "prompt": "Allow circular dna", "name": "e_plasmid", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -plasmid\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set then RE recognition sites will not match methylated bases.", "prompt": "Use methylation data", "name": "e_methylation", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -methylation\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set, then only those enzymes with a commercial supplier will be searched for. This qualifier is ignored if you  have specified an explicit list of enzymes to search for, rather  than searching through 'all' the enzymes in the REBASE database.  It is assumed that, if you are asking for an explicit enzyme, then  you probably know where to get it from and so all enzymes names  that you have asked to be searched for, and which cut, will be  reported whether or not they have a commercial supplier.", "prompt": "Only enzymes with suppliers", "name": "e_commercial", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\" -nocommercial\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Genetic codes", "name": "e_table", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -table=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This allows you to specify the frames that are translated. If you are not displaying cut sites on the reverse sense, then the  reverse sense translations will not be displayed even if you have  requested frames 4, 5 or 6. By default, all six frames will be  displayed.", "prompt": "Translation frames (value from 1 to 6)", "name": "e_frame", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "(\"\", \" -frame=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "16", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This produces lists in the output of the enzymes that cut, those that cut but are excluded because that cut fewer times than  mincut or more times than maxcut and those enzymes that do not  cut.", "prompt": "List the enzymes that cut", "name": "e_cutlist", "ctrl": null, "simple": null, "argpos": "17", "format": {"python": "(\" -nocutlist\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This changes the output format to one where the recognition site is indicated by a row of '===' characters and the cut site  is pointed to by a '>' character in the forward sense, or a '<' in  the reverse sense strand.", "prompt": "Display re sites in flat format", "name": "e_flatreformat", "ctrl": null, "simple": null, "argpos": "18", "format": {"python": "(\"\", \" -flatreformat\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This limits the reporting of enzymes to just one enzyme from each group of isoschizomers. The enzyme chosen to represent  an isoschizomer group is the prototype indicated in the data file  'embossre.equ', which is created by the program 'rebaseextract'.  If you prefer different prototypes to be used, make a copy of  embossre.equ in your home directory and edit it. If this value is  set to be false then all of the input enzymes will be reported.  You might like to set this to false if you are supplying an  explicit set of enzymes rather than searching 'all' of them.", "prompt": "Limits reports to one isoschizomer", "name": "e_limit", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "(\" -nolimit\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This displays the 6-frame translations of the sequence in the output.", "prompt": "Display translation", "name": "e_translation", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "(\" -notranslation\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This displays the cut sites and translation of the reverse sense.", "prompt": "Display cut sites and translation of reverse sense", "name": "e_reverse", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "(\" -noreverse\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This sets the minimum size of Open Reading Frames (ORFs) to display in the translations. All other translation regions are  masked by changing the amino acids to '-' characters.", "prompt": "Minimum size of orfs (value greater than or equal to 0)", "name": "e_orfminsize", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "22", "format": {"python": "(\"\", \" -orfminsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Regions to put in uppercase. \n If this is left blank, then the sequence case is left alone. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are separated by any non-digit, non-alpha character. \n  Examples of region specifications are: \n  24-45, 56-78 \n  1:45, 67=99;765..888 \n  1,5,8,10,23,45,57,99", "prompt": "Regions to put in uppercase (eg: 4-57,78-94)", "name": "e_uppercase", "ctrl": null, "simple": null, "argpos": "23", "format": {"python": "(\"\", \" -uppercase=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Regions to colour if formatting for HTML. \n If this is left blank, then the sequence is left alone. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are followed by any valid HTML font colour. \n  Examples of region specifications are: \n  24-45 blue 56-78 orange \n  1-100 green 120-156 red \n  A file of ranges to colour (one range per line) can be specified as  '@filename'.", "prompt": "Regions to colour in html (eg: 4-57 red 78-94 green)", "name": "e_highlight", "ctrl": null, "simple": null, "argpos": "24", "format": {"python": "(\"\", \" -highlight=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display protein sequences in three-letter code", "name": "e_threeletter", "ctrl": null, "simple": null, "argpos": "25", "format": {"python": "(\"\", \" -threeletter\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number the sequences", "name": "e_number", "ctrl": null, "simple": null, "argpos": "26", "format": {"python": "(\"\", \" -number\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Width of sequence to display (value greater than or equal to 1)", "name": "e_width", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "27", "format": {"python": "(\"\", \" -width=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Line length of page (0 for indefinite) (value greater than or equal to 0)", "name": "e_length", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "28", "format": {"python": "(\"\", \" -length=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Margin around sequence for numbering (value greater than or equal to 0)", "name": "e_margin", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "29", "format": {"python": "(\"\", \" -margin=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display the ID name of the sequence", "prompt": "Display sequence id", "name": "e_name", "ctrl": null, "simple": null, "argpos": "30", "format": {"python": "(\" -noname\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display the description of the sequence", "prompt": "Display description", "name": "e_description", "ctrl": null, "simple": null, "argpos": "31", "format": {"python": "(\" -nodescription\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Offset to start numbering the sequence from", "name": "e_offset", "ctrl": null, "simple": null, "argpos": "32", "format": {"python": "(\"\", \" -offset=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use html formatting", "name": "e_html", "ctrl": null, "simple": null, "argpos": "33", "format": {"python": "(\"\", \" -html\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "34", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "remap"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/remap.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "remap"}, {"comment": null, "homepage_links": ["http://wwwabi.snv.jussieu.fr/public/Repeatoire/"], "_id": {"$oid": "51434da593546d52388cac1c"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:repeats"}], "description": "Locating DNA repeats inside of sequenced genome", "title": "repeatoire", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "General results", "name": "gle_output", "simple": null, "filenames": {"python": "\"reps.out\"", "perl": "\"reps.out\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Statistical results", "name": "stat_output", "simple": null, "filenames": {"python": "\"stats.highest\"", "perl": "\"stats.highest\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Xml output", "name": "xml_output", "simple": null, "filenames": {"python": "\"repeatoire.xml\"", "perl": "\"repeatoire.xml\""}, "precond": {"python": "xml", "perl": "$xml"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "Fasta sequence input file", "prompt": "Input sequence", "name": "infile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" --sequence=\" + str(value)", "perl": "\" --sequence=$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Main options", "name": "main", "children": [{"comment": "Forms the foundation of the repeats families. Smaller values are more sensitive\n        but allow for more noise (less specific), whereas larger values are less sensitive but more specific.", "prompt": "Seed weight", "name": "seedSize", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --z=\" + str(value))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --z=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Often one wants to only analyze repeats in the same orientation. Else, program will include\n            inverted repeats in the output.", "prompt": "Only process seed matches on same strand", "name": "onlydirect", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --onlydirect=1\")[ value ]", "perl": "(defined $value) ? \" --onlydirect=1\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If gapped extension is disabled, output will be the local multiple alignments of the gapped chains.", "prompt": "Perform gapped extension", "name": "extend", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" --extend=0\" , \"\" )[ value ]", "perl": "(defined $value and $value != $vdef) ? \"\" : \" --extend=0\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Optimize for large repeats", "name": "large-repeats", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" --large-repeats=0\" , \"\" )[ value ]", "perl": "(defined $value) ? \"\" : \" --large-repeats=0\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "To increase specificity when wanting to focus on larger repeats, this option will only return repeat families containing repeats > value", "prompt": "Minimum final repeat length", "name": "minreplen", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --minreplen=\" + str(value))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --minreplen=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Option to increase specificity. If one knows a priori that high copy repeats can be excluded from \n            the analysis, this option can be used to discard all repeat families with more repeat copies than this specified value.", "prompt": "Maximum repeat multiplicity", "name": "maxmulti", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --maxmulti=\" + str(value))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --maxmulti=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Similar to maxmulti, this option can be used to discard all repeat families that have fewer copies than this value.", "prompt": "Minimum repeat multiplicity", "name": "minmulti", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --minmulti=\" + str(value))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --minmulti=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default, the program uses palindromic spaces seed patterns to find seed matches inside of the input\n            sequence. However, this can be turned off, which will use solid seed patterns (no mismatches in the seed matches allowed).", "prompt": "Use solid/exact seeds", "name": "solid", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --solid=1\")[ value  ]", "perl": "(defined $value) ? \" --solid=1\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Expert options", "name": "expert", "children": [{"comment": null, "prompt": "Allow redundant alignments", "name": "redundant", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --allow-redundant=1\" )[ value  ]", "perl": "(defined $value) ? \" --allow-redundant=1\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Require two hits for gapped extension", "name": "two_hits", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --two-hits=1\" )[ value  ]", "perl": "(defined $value) ? \" --two-hits=1\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Chain seeds", "name": "chain", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" --chain=0\" , \"\" )[ value ]", "perl": "(defined $value) ? \"\" : \" --chain=0\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "XML format output", "name": "xml", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --xml=repeatoire.xml\" )[ value ]", "perl": "(defined $value) ? \" --xml=repeatoire.xml\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.0", "references": [{"url": null, "doi": null, "label": "Todd J. Treangen, Aaron E. Darling, Guillaume Achaz, Mark A. Ragan, Xavier\n       Messeguer, Eduardo P.C. Rocha, \"A Novel Heuristic for Local Multiple Alignment of\n       Interspersed DNA Repeats,\" IEEE/ACM Transactions on Computational Biology and\n       Bioinformatics, vol. 6, no. 2, pp. 180-189"}], "source_links": ["http://wwwabi.snv.jussieu.fr/public/Repeatoire/"], "env": [], "authors": "Todd Treangen, Aaron Darling and Eduardo PC Rocha", "command": {"path": null, "value": "repeatoire"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/repeatoire/Repeatoire_UserGuide.pdf"], "type": "program", "name": "repeatoire"}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>The program scans a dna sequence file, looking for tandemly repeated\npatterns where the period of the repeat has a user specified *size* from\n1 to 32 nucleotides.  A possible repeat is found if *lookcount*\ncharacters are repeated at a separation of *size*.</html:p><html:p>Example: Suppose size is 7 and lookcount is 3. Then the sequence<html:pre>ACGTGTCCGTA \n                 ^^^   ^^^</html:pre>could be part of a possible repeat of the pattern CGTGTC\nbecause the first 3 characters CGT are repeated at a separation of 7.</html:p><html:p>Once a possible pattern is found, the program uses dynamic programming\nto compute a similarity score of the pattern versus the sequence in\nthe area where the pattern was found.  The dynamic programming uses\nweights for single indels rather than gap functions.  This is so that\nthe program quickly identifies the repeats rather than producing an\noptimal alignment score.</html:p><html:p>If the similarity score exceeds a threshold, then a consensus pattern is\ncomputed.  This consensus is aligned with the sequence and the\nalignment is displayed.</html:p></html:div>", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac1d"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:pattern"}], "description": "Search repeats in DNA sequence", "title": "repeats", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": []}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "The data file must conform to the GenBank format.", "prompt": "Sequence File", "name": "seq", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["GENBANK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Match bonus (input as positive) (Alpha)", "name": "alpha", "ctrl": {"python": "value >= 0", "perl": "$value >= 0"}, "simple": null, "argpos": "2", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Mismatch penalty (input as positive) (Beta)", "name": "beta", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "3", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Indel penalty (input as positive) (Delta)", "name": "delta", "ctrl": {"python": "value >= 0", "perl": "$value >= 0"}, "simple": null, "argpos": "4", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Threshold score to report an alignment (Reportmax)", "name": "reportmax", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Pattern size (Size)", "name": "Size", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "A possible repeat is found if *lookcount* characters are repeated at a separation of *size*. Recommended to use values between 3 and 8", "prompt": "Number of characters to match to trigger dynamic programming (Lookcount)", "name": "lookcount", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Patterns with shorter periods are excluded ? (Noshortperiods)", "name": "noshortperiods", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\" 0\" , \" 1 \")[ value ]", "perl": "($value)? \" 1 \":\" 0\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.1", "references": [{"url": null, "doi": null, "label": "A method for fast database search for all k-nucleotide repeats, by Gary Benson and Michael S. Waterman, Nucleic Acids Research (1994) Vol. 22, No. 22, pp 4828-4836."}], "source_links": [], "env": [], "authors": "G. Benson", "command": {"path": null, "value": "repeats"}, "documentation_links": [], "type": "program", "name": "repeats"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac1e"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:restriction"}], "description": "Find restriction enzymes producing a specific overhang", "title": "restover", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "RestoverReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Restriction enzyme data file (optional)", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "RestrictionEnzymeData", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Restriction enzyme methylation data file", "name": "e_mfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -mfile=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "RestrictionEnzymeMethylationData", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Overlap sequence", "name": "e_seqcomp", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -seqcomp=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Minimum cuts per re (value from 1 to 1000)", "name": "e_min", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -min=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum cuts per re", "name": "e_max", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -max=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Force single site only cuts", "name": "e_single", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -single\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use 3' overhang e.g. bamhi has ctag as a 5' overhang, and apai has ccgg as 3' overhang.", "name": "e_threeprime", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -threeprime\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Allow blunt end cutters", "name": "e_blunt", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\" -noblunt\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Allow sticky end cutters", "name": "e_sticky", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\" -nosticky\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Allow ambiguous matches", "name": "e_ambiguity", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\" -noambiguity\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Allow circular dna", "name": "e_plasmid", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -plasmid\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set then RE recognition sites will not match methylated bases.", "prompt": "Use methylation data", "name": "e_methylation", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -methylation\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Only enzymes with suppliers", "name": "e_commercial", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "(\" -nocommercial\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Create html output", "name": "e_html", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "(\"\", \" -html\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Limits reports to one isoschizomer", "name": "e_limit", "ctrl": null, "simple": null, "argpos": "16", "format": {"python": "(\" -nolimit\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sort output alphabetically", "name": "e_alphabetic", "ctrl": null, "simple": null, "argpos": "17", "format": {"python": "(\"\", \" -alphabetic\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show fragment lengths", "name": "e_fragments", "ctrl": null, "simple": null, "argpos": "18", "format": {"python": "(\"\", \" -fragments\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "restover"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/restover.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "restover"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac1f"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:restriction"}], "description": "Report restriction enzyme cleavage sites in a nucleotide sequence", "title": "restrict", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Restriction enzyme data file (optional)", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "RestrictionEnzymeData", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Restriction enzyme methylation data file (optional)", "name": "e_mfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -mfile=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "RestrictionEnzymeMethylationData", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "This sets the minimum length of the restriction enzyme recognition site. Any enzymes with sites shorter than this will be  ignored.", "prompt": "Minimum recognition site length (value from 2 to 20)", "name": "e_sitelen", "ctrl": {"python": "value >= 2"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -sitelen=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The name 'all' reads in all enzyme names from the REBASE database. You can specify enzymes by giving their names with  commas between then, such as: 'HincII,hinfI,ppiI,hindiii'. \n  The case of the names is not important. You can specify a file of  enzyme names to read in by giving the name of the file holding the  enzyme names with a '@' character in front of it, for example,  '@enz.list'. \n  Blank lines and lines starting with a hash character or '!' are  ignored and all other lines are concatenated together with a comma  character ',' and then treated as the list of enzymes to search  for. \n  An example of a file of enzyme names is: \n  ! my enzymes \n  HincII, ppiII \n  ! other enzymes \n  hindiii \n  HinfI \n  PpiI", "prompt": "Comma separated enzyme list", "name": "e_enzymes", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -enzymes=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "This sets the minimum number of cuts for any restriction enzyme that will be considered. Any enzymes that cut fewer times  than this will be ignored.", "prompt": "Minimum cuts per re (value from 1 to 1000)", "name": "e_min", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -min=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This sets the maximum number of cuts for any restriction enzyme that will be considered. Any enzymes that cut more times  than this will be ignored.", "prompt": "Maximum cuts per re", "name": "e_max", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -max=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This gives the fragment lengths of the forward sense strand produced by complete restriction by each restriction enzyme on  its own. Results are added to the tail section of the report.", "prompt": "List individual enzymes with their fragments", "name": "e_solofragment", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -solofragment\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set then this forces the values of the mincuts and maxcuts qualifiers to both be 1. Any other value you may have  set them to will be ignored.", "prompt": "Force single site only cuts", "name": "e_single", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -single\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This allows those enzymes which cut at the same position on the forward and reverse strands to be considered.", "prompt": "Allow blunt end cutters", "name": "e_blunt", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\" -noblunt\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This allows those enzymes which cut at different positions on the forward and reverse strands, leaving an overhang, to be  considered.", "prompt": "Allow sticky end cutters", "name": "e_sticky", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\" -nosticky\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This allows those enzymes which have one or more 'N' ambiguity codes in their pattern to be considered", "prompt": "Allow ambiguous matches", "name": "e_ambiguity", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\" -noambiguity\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set then this allows searches for restriction enzyme recognition site and cut positions that span the end of the  sequence to be considered.", "prompt": "Allow circular dna", "name": "e_plasmid", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -plasmid\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set then RE recognition sites will not match methylated bases.", "prompt": "Use methylation data", "name": "e_methylation", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -methylation\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set, then only those enzymes with a commercial supplier will be searched for. This qualifier is ignored if you  have specified an explicit list of enzymes to search for, rather  than searching through 'all' the enzymes in the REBASE database.  It is assumed that, if you are asking for an explicit enzyme, then  you probably know where to get it from and so all enzymes names  that you have asked to be searched for, and which cut, will be  reported whether or not they have a commercial supplier.", "prompt": "Only enzymes with suppliers", "name": "e_commercial", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "(\" -nocommercial\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "This limits the reporting of enzymes to just one enzyme from each group of isoschizomers. The enzyme chosen to represent  an isoschizomer group is the prototype indicated in the data file  'embossre.equ', which is created by the program 'rebaseextract'.  If you prefer different prototypes to be used, make a copy of  embossre.equ in your home directory and edit it. If this value is  set to be false then all of the input enzymes will be reported.  You might like to set this to false if you are supplying an  explicit set of enzymes rather than searching 'all' of them.", "prompt": "Limits reports to one isoschizomer", "name": "e_limit", "ctrl": null, "simple": null, "argpos": "16", "format": {"python": "(\" -nolimit\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sort output alphabetically", "name": "e_alphabetic", "ctrl": null, "simple": null, "argpos": "17", "format": {"python": "(\"\", \" -alphabetic\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This gives the fragment lengths of the forward sense strand produced by complete restriction using all of the input enzymes  together. Results are added to the tail section of the report.", "prompt": "Show fragment lengths", "name": "e_fragments", "ctrl": null, "simple": null, "argpos": "18", "format": {"python": "(\"\", \" -fragments\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show sequence name", "name": "e_name", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "(\"\", \" -name\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "22", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "restrict"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/restrict.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "restrict"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac20"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Reverse and complement a nucleotide sequence", "title": "revseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "Set this to be false if you do not wish to reverse the output sequence", "prompt": "Reverse sequence", "name": "e_reverse", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\" -noreverse\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to complement the output sequence", "prompt": "Complement sequence", "name": "e_complement", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\" -nocomplement\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "revseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/revseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "revseq"}, {"comment": "RNAalifold reads aligned RNA sequences from file and  calculates \n        their minimum free energy (mfe) structure, partition function (pf) and base pairing probability matrix. \n        Currently, the input alignment  has  to  be  in  CLUSTAL  format.  \n        It returns  the  mfe  structure in bracket notation, its energy, \n        the free energy of the thermodynamic ensemble and the frequency of the mfe structure \n        in  the  ensemble  to outfile.  It  also  produces  Postscript files with plots of the resulting \n        secondary structure graph (\"alirna.ps\") and a \"dot plot\" of the  base  pairing  matrix  (\"alidot.ps\"). \n        The file \"alifold.out\" will contain a list of likely pairs sorted by credibility.CAVEATS: Since gaps are not removed for the evaluation of energies, \n        it may be of advantage to remove any columns with more than, say, \n        75% gaps from the alignment before folding with RNAalifold.Sequences are not weighted. If possible, do not mix very similar and dissimilar sequences. \n\t\tDuplicate sequences, for example, can distort the prediction.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac21"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple:display"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Calculate secondary structures for a set of aligned RNAs", "title": "RNAalifold", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Postscript file", "name": "psfiles", "simple": null, "filenames": {"python": "\"*.ps\"", "perl": "\"*.ps\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": "The  file  \"alifold.out\"  will  contain a list of likely pairs sorted by\n       credibility, suitable for viewing  with \"AliDot.pl\"", "prompt": "list of likely pairs", "name": "alifold_out", "simple": null, "filenames": {"python": "\"alifold.out\"", "perl": "\"alifold.out\""}, "precond": {"python": "partition", "perl": "$partition"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "vienna_likely_pairs", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Aligned RNA Sequences File", "name": "seq", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" \"+str( value )", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Nucleic"], "biomoby_datatypes": [], "formats": ["CLUSTAL"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control options", "name": "control", "children": [{"comment": "Set  the  weight  of  the  covariance  term in the energy function to factor. Default is 1.", "prompt": "Weight of the covariance (-cv)", "name": "covariance", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -cv \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -cv $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the penalty for non-compatible sequences in the covariance  term  of  the energy function to factor. Default is 1.", "prompt": "Penalty for non-compatible sequences in the covariance (-nc)", "name": "non_compatible", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -nc \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -nc $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Score pairs with endgaps same as gap-gap pairs.", "prompt": "Score pairs with endgaps (-E)", "name": "endgaps", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -E\" )[ value ]", "perl": "($value)? \" -E\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Calculate  the  partition function and base pairing probability matrix in addition to the mfe structure. Default is calculation  of  mfe  structure only.", "prompt": "Calculate the partition function and base pairing probability matrix (-p)", "name": "partition", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -p\" )[ value ]", "perl": "($value)? \" -p\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Rescale energy parameters to a temperature of temp C. (-T)", "name": "temperature", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -T \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -T $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not include special stabilizing energies for certain tetraloops (-4)", "name": "tetraloops", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -4\" )[ value ]", "perl": "($value)? \" -4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "How to treat 'dangling end' energies for bases adjacent to helices in free ends and multiloops: Normally only unpaired bases can participate in at most one dangling end.\n             With -d2 this check is ignored, this is the default for partition function folding (-p). \n             -d ignores dangling ends altogether. Note that by default pf and mfe folding treat dangling ends differently, \n             use -d2 (or -d) in addition to -p to ensure that both algorithms use the same energy model. \n             The -d2 options is available for RNAfold, RNAeval, and RNAinverse only.", "prompt": "How to treat dangling end energies for bases adjacent to helices in free ends and multiloops (-d)", "name": "dangling", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Input parameters", "name": "input", "children": [{"comment": "Assume circular (instead of linear) RNA molecules.", "prompt": "Circular RNA molecules (-circ)?", "name": "circ", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -circ\" )[ value ]", "perl": "($value)? \" -circ\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Produce structures without lonely pairs (helices of length 1).  For  partition  function  folding  this  only disallows pairs that can only occur isolated. Other pairs may still occasionally occur as helices  of  length 1.", "prompt": "Avoid structures without lonely pairs (helices of length 1) (-noLP)", "name": "noLP", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noLP\" )[ value ]", "perl": "($value)? \" -noLP\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs (-noGU)", "name": "noGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noGU\" )[ value ]", "perl": "($value)? \" -noGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs at the end of helices (-noCloseGU)", "name": "noCloseGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noCloseGU\" )[ value ]", "perl": "($value)? \" -noCloseGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Allow other pairs in addition to the usual AU,GC,and GU pairs. pairs is a comma seperated list of additionally allowed pairs. If a the first character is a '-' then AB will imply that AB and BA are allowed pairs. e.g. RNAfold -nsp -GA will allow GA and AG pairs. Nonstandard pairs are given 0 stacking energy.", "prompt": "Non standard pairs (comma seperated list) (-nsp)", "name": "nsp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -nsp \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -nsp $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Read energy parameters from paramfile, instead of using the default parameter set. A sample parameterfile should accompany your distribution. See the RNAlib documentation for details on the file format.", "prompt": "Energy parameter file (-P)", "name": "parameter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "EnergyParameterFile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "use specified Ribosum Matrix instead of normal energy model. Matrices to use\n              should be 6x6 matrices, the order of the terms is AU, CG, GC, GU, UA, UG.", "prompt": "use specified Ribosum Matrix instead of normal energy model.", "name": "ribosum_matrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "ribosum_matrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "use  Ribosum  scoring  matrix. The matrix is chosen according to the minimal\n              and maximal pairwise identities of the sequences in the  file.   When  using\n              Ribosum  scores,  best  benchmark results were achieved with options -cv 0.6\n              -nc 0.5 (see above).", "prompt": "use  Ribosum  scoring  matrix.", "name": "use_ribosum_matrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -r \")[ value ]", "perl": "(defined $value)? \" -r $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The programm reads first the sequence then the a string containg constraints on the structure encoded with the symbols:| (the corresponding base has to be paired x (the base is unpaired)< (base i is paired with a base j>i)> (base i is paired with a base j<i)matching brackets ( ) (base i pairs base j)Pf folding ignores constraints of type '|' '<' and '>', but disallow all pairs conflicting with a constraint of type 'x' or '( )'. This is usually sufficient to enforce the constraint.", "prompt": "Calculate structures subject to constraints (-C)", "name": "constraints", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -C <\" + str( value) )[ value is not None ]", "perl": "(defined $value)? \" -C < $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Constraint", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": null, "prompt": "Print most informative sequence instead of simple consensus (-mis)?", "name": "informative", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -mis\" )[ value ]", "perl": "($value)? \" -mis\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Produce a colored version of the consensus strcture plot \"alirna.ps\" (default black and white).", "prompt": "Produce a colored version of the consensus strcture plot (-color)?", "name": "color", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -color\" )[ value ]", "perl": "($value)? \" -color\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Produce a colored and structure annotated alignment in PostScript  format  in the file \"aln.ps\".", "prompt": "Produce a colored and structure annotated alignment in PostScript format (-aln) ?", "name": "aln", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -aln\" )[ value ]", "perl": "($value)? \" -aln\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [{"url": null, "doi": null, "label": "D.H. Mathews, J. Sabina, M. Zuker and H. Turner \"Expanded Sequence Dependence of Thermodynamic Parameters Provides Robust Prediction of RNA Secondary Structure\" JMB, 288, pp 911-940, 1999"}, {"url": null, "doi": null, "label": "vo L. Hofacker, Martin Fekete, and Peter F. Stadler \"Secondary Structure Prediction for Aligned RNA Sequences\" J.Mol.Biol. 319: 1059-1066 (2002)."}], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "RNAalifold"}, "documentation_links": ["http://www.tbi.univie.ac.at/RNA/RNAalifold.html"], "type": "program", "name": "rnaalifold"}, {"comment": "RNAcofold works much like RNAfold, but allows to specify two RNA sequences wich  are then  allowed to  form  a dimer structure. \n        RNA sequences are read from infile in the usual format, i.e. each line of file corresponds to one sequence,\n        except for  lines starting  with  \">\"  which  contain  the  name of the next sequence. \n        To compute the hybrid structure of two molecules, the two sequences must be concatenated using  the & character as separator.\n        RNAcofold can compute minimum free energy (mfe) structures, as well as partition function (pf) and base pairing probability matrix (using the -p switch).Since dimer formation is concentration dependent, RNAcofold can be used to compute equilibrium concentrations for all five  monomer  and  (homo/hetero)-dimer  species,\n         given input concentrations for the monomers.Output  consists of the mfe structure in bracket notation as well as PostScript structure plots and \"dot plot\" files containing the pair probabilities,\n        see the RNAfold man page for details. In the dot plots a cross marks the chain break between the two concatenated sequences.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac22"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Calculate secondary structures of two RNAs with dimerization", "title": "RNAcofold", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": null, "prompt": "Poscript output file", "name": "psfiles", "simple": null, "filenames": {"python": "\"*.ps\"", "perl": "\"*.ps\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "Each line of file corresponds to one sequence, \n        except for lines starting with \">\" which contain the name of the next sequence. \n        To compute the hybrid structure of two molecules, \n        the two sequences must be concatenated using the & character as separator.", "prompt": "RNA Sequence File", "name": "seq", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" < \" + str(value)", "perl": "\" < $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "CofoldSequence", "superclass": "AbstractText"}, "biotypes": ["Nucleic"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control options", "name": "control", "children": [{"comment": "Compute the partition function and free energies not only of the hetero-dimer\n             consisting of the two input sequences (the \"AB dimer\"), but also of the homodimers  AA  and  BB\n              as well as A and B monomers.  The output will contain the free energies for each of these species,\n              as well as 5  dot  plots  containing the  conditional pair probabilities, called ABname5.ps,\n              AAname5.ps and so on. For later use, these dot plot files also  contain  the  free  energy  of\n              the ensemble as a comment. Using -a automatically toggles the -p option.", "prompt": "Compute the partition function and free energies (-a)", "name": "partition_free", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -a\" )[ value ]", "perl": "($value)? \" -a\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In addition to everything listed under the -a option, \n            read in initial monomer concentrations and compute the expected equilibrium \n            concentrations of  the  5 possible species (AB, AA, BB, A, B). \n            Start concentrations are read from stdin (unless the -f option is used) in\n            [mol/l],  equilibrium  concentrations  are given  realtive  to the sum of \n            the two inputs. An arbitrary number of initial concentrations can be \n            specified (one pair of concentrations per line).", "prompt": "Compute the expected equilibrium concentrations of  AB, AA, BB, A, B. (-c)", "name": "equilibrium", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -c\" )[ value ]", "perl": "($value)? \" -c\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Calculate the partition function and base pairing probability\n             matrix in addition to the mfe structure. Default is calculation  of  mfe  \n             structure only. Prints a coarse representation of the pair probabilities \n             in form of a pseudo bracket notation, the ensemble free energy, the frequency\n             of the mfe  structure,  and  the  structural  diversity.  \n             See the description of pf_fold() and mean_bp_dist() in the RNAlib documentation \n             for details. Note that unless you also specify -d2 or -d0, the partition function\n             and mfe calculations will use a slightly different energy model. \n             See the dis- cussion of dangling end options below.", "prompt": "Calculate the partition function and base pairing probability matrix (-p)", "name": "partition", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -p\" )[ value ]", "perl": "($value)? \" -p\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Calculate the partition function but not the pair probabilities, \n            saving about 50% in runtime. Prints the ensemble free energy -kT ln(Z).", "prompt": "Calculate the pf without pairing matrix (-p0)", "name": "pf", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -p0\" )[ value ]", "perl": "($value)? \" -p0\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Rescale energy parameters to a temperature of temp C. (-T)", "name": "temperature", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -T \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -T $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not include special stabilizing energies for certain tetraloops (-4)", "name": "tetraloops", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -4\" )[ value ]", "perl": "($value)? \" -4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "How to treat 'dangling end' energies for bases adjacent to helices in free ends and multiloops: Normally only unpaired bases can participate in at most one dangling end. With -d2 this check is ignored, this is the default for partition function folding (-p). -d ignores dangling ends altogether. Note that by default pf and mfe folding treat dangling ends differently, use -d2 (or -d) in addition to -p to ensure that both algorithms use the same energy model. The -d2 options is available for RNAfold, RNAeval, and RNAinverse only.", "prompt": "How to treat dangling end energies for bases adjacent to helices in free ends \n          and multiloops (-d)", "name": "dangling", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In the calculation of the pf use scale*mfe as an estimate for the ensemble \n            free energy (used to avoid overflows). The default is 1.07, usefull values are 1.0 to 1.2. \n            Occasionally needed for long sequences.", "prompt": "Use scale*mfe as an estimate for the free energy (-S)", "name": "scale", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -S \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -S $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Input parameters", "name": "input", "children": [{"comment": "The programm reads first the sequence then the a string containg constraints on the structure encoded with the symbols:| (the corresponding base has to be paired x (the base is unpaired)< (base i is paired with a base j>i)> (base i is paired with a base j<i)matching brackets ( ) (base i pairs base j)Pf folding ignores constraints of type '|' '<' and '>', but disallow all pairs conflicting with a constraint of type 'x' or '( )'. This is usually sufficient to enforce the constraint.", "prompt": "Calculate structures subject to constraints (-C)", "name": "constraints", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -C\" )[ value ]", "perl": "($value)? \" -C\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Produce structures without lonely pairs (helices of length 1).  \n            For partition function folding this only disallows pairs that can only occur isolated. \n            Other pairs may still occasionally occur as helices of length 1.", "prompt": "Avoid lonely pairs (helices of length 1) (-noLP)", "name": "noLP", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noLP\" )[ value ]", "perl": "($value)? \" -noLP\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs (-noGU)", "name": "noGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noGU\" )[ value ]", "perl": "($value)? \" -noGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs at the end of helices (-noCloseGU)", "name": "noCloseGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noCloseGU\" )[ value ]", "perl": "($value)? \" -noCloseGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Allow other pairs in addition to the usual AU,GC,and GU pairs. \n            pairs is a comma seperated list of additionally allowed pairs. \n            If a the first character is a '-' then AB will imply that AB and BA are allowed \n            pairs. e.g. RNAfold -nsp -GA will allow GA and AG pairs. \n            Nonstandard pairs are given 0 stacking energy.", "prompt": "Non standard pairs (comma seperated list) (-nsp)", "name": "nsp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -nsp \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -nsp $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<html:p xmlns:html=\"http://www.w3.org/1999/xhtml\">Read energy parameters from paramfile, instead of using the default parameter set.<html:a href=\"http://www.tbi.univie.ac.at/~ivo/RNA/RNAlib/Param-Files.html\" target=\"ParamFile\">( documentation for details on the file format.)</html:a></html:p>", "prompt": "Energy parameter file (-P)", "name": "parameter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "EnergyParameterFile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": null, "prompt": "Do not produce postscript drawing of the mfe structure.", "name": "no_ps", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noPS \")[ value ]", "perl": "($value)? \" -noPS \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [{"url": null, "doi": null, "label": "I.L. Hofacker, W. Fontana, P.F. Stadler, S. Bonhoeffer, M. Tacker, P. Schuster (1994) Fast Folding and Comparison of RNA Secondary Structures. Monatshefte f. Chemie 125: 167-188"}, {"url": null, "doi": null, "label": "S.H.Bernhart, Ch. Flamm, P.F. Stadler, I.L. Hofacker Partition Function and Base Pairing Probabilities of RNA Heterodimers Algorithms Mol. Biol. (2006)"}, {"url": null, "doi": null, "label": "D.H. Mathews, J. Sabina, M. Zuker and H. Turner \"Expanded Sequence Dependence of Thermodynamic Parameters Provides Robust Prediction of RNA Secondary Structure\" JMB, 288, pp 911-940, 1999"}], "source_links": [], "env": [], "authors": "Ivo L Hofacker, Peter F Stadler, Stephan Bernhart", "command": {"path": null, "value": "RNAcofold"}, "documentation_links": ["http://www.tbi.univie.ac.at/RNA/RNAcofold.html"], "type": "program", "name": "rnacofold"}, {"comment": "RNAdistance reads  RNA  secondary structures  from stdin and  calculates one or more measures  for their dissimilarity, based  on  tree  or  string  editing  (alignment).  In  addition  it calculates a \"base pair distance\" given by the number of base pairs present in one structure, but not the other. For structures of different length base pair distance is not recommended.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac23"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Calculate distances between RNA secondary structures", "title": "RNAdistance", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Other options", "name": "others_options", "children": [{"comment": "Only when  comparison between all structures is requested (-Xm). This uses AnalyseDists distributed with the Vienna package.", "precond": {"python": "compare == \"m\"", "perl": "$compare eq \"m\""}, "prompt": "Analyse the distance matrix", "name": "matrix_options", "children": [{"comment": null, "prompt": "Postcript output file", "name": "psfiles", "simple": null, "filenames": {"python": "\"*.ps\"", "perl": "\"*.ps\""}, "precond": {"python": "compare == \"m\" and Method != \"s\"", "perl": "$compare eq \"m\" and $Method ne \"s\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, {"comment": null, "prompt": "Alignment output file", "name": "ali_outfile", "simple": null, "filenames": {"python": "str(alignment_name)", "perl": "$alignment_name"}, "precond": {"python": "alignment_name is not None", "perl": "$alignment_name"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "RnadistanceReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "rnadistance", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"RNAdistance \"", "perl": "\"RNAdistance \""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The program accepts structures in bracket format, where matching brackets symbolize base pairs and unpaired bases are represented by a dot '.', or coarse grained representations where hairpins, interior loops, bulges, multiloops, stacks and external bases are represented by (H), (I), (B), (M), (S), and (E), respectively. These can be optionally weighted. Full structures can be represented in the same fashion using the identifiers (U) and (P) for unpaired and paired bases, respectively. Examples:.((..(((...)))..((..)))). full structure (usual format);(U)((U2)((U3)P3)(U2)((U2)P2)P2) HIT structure;((H)(H)M) or ((((H)S)((H)S)M)S) coarse grained structure;(((((H3)S3)((H2)S2)M4)S2)E2) weighted coarse grained.", "prompt": "RNA structures File", "name": "struct", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" < \" +str(value)", "perl": "\" < $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "RNAStructure", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Other options", "name": "others_options", "children": [{"comment": "Use the full, HIT, weighted coarse, or coarse representation to calculate the distance. Capital letters indicate string alignment otherwise tree editing is used. Any combination of distances can be specified.  -DP  selects  the  base pair distance. The default if \"f\".", "prompt": "Representation for distance calculation (-D)", "name": "distance", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -D\" +str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -D$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "p: compare  the  structures pairwise (p), that is first with 2nd, third with 4th etc. This is the default.m: calculate the distance matrix between all structures. The output is formatted as a lower triangle matrix.f: compare each structure to the first one.c: compare continuously, that is i-th with (i+1)th structure.", "prompt": "Which comparisons (-X)", "name": "compare", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -X\" +str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -X$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Only when  comparison between all structures is requested (-Xm). This uses AnalyseDists distributed with the Vienna package.", "precond": {"python": "compare == \"m\"", "perl": "$compare eq \"m\""}, "prompt": "Analyse the distance matrix", "name": "matrix_options", "children": [{"comment": "AnalyseDists reads a distance matrix (given as lower triangle matrix) from stdin and writes a split decomposition and a cluster analysis of this distance matrix to stdout.", "prompt": "Do this analysis (AnalyseDists program)?", "name": "do_analyse", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" | AnalyseDists\")[value]", "perl": "($value)? \" | AnalyseDists\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "AnalyseDist methods to be used (-X)", "name": "Method", "ctrl": null, "simple": null, "argpos": "2001", "format": {"python": "(\"\", \" -X\"+str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -X$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Use the Bruce Shapiro's cost matrix for comparing coarse structures (-S)", "name": "shapiro", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -S\" )[ value ]", "perl": "($value)? \" -S\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Print an 'alignment' with gaps of the structures, to show matching substructures. The aligned structures are written to file, if specified. Otherwise output is written to stdout, unless the -Xm option is set in which case 'backtrack.file' is used.", "prompt": "Structure alignment file (-B)", "name": "alignment_name", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -B \" +str(value) )[ value is not None]", "perl": "(defined $value)? \" -B $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [{"url": null, "doi": null, "label": "Shapiro B A, (1988) An algorithm for comparing multiple RNA secondary structures, CABIOS 4, 381-393 Shapiro B A, Zhang K (1990) Comparing multiple RNA secondary structures using tree comparison, CABIOS 6, 309-318"}, {"url": null, "doi": null, "label": "Fontana W, Konings D A M, Stadler P F, Schuster P, (1993) Statistics of RNA secondary structures, Biopolymers 33, 1389-1404 I.L. Hofacker, W. Fontana, P.F. Stadler, S. Bonhoeffer, M. Tacker, P. Schuster (1994) Fast Folding and Comparison of RNA Secondary Structures. Monatshefte f. Chemie 125, 167-188"}], "source_links": [], "env": [], "authors": "Hofacker, Fontana, Hofacker, Stadler", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "rnadistance"}, {"comment": "RNAduplex reads  two RNA  sequences from  file and\n       computes optimal and suboptimal secondary structures for their hybridization. The calculation is simplified  by  allowing  only inter-molecular base pairs.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac24"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Compute the structure upon hybridization of two RNA strands", "title": "RNAduplex", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Postscript file", "name": "psfiles", "simple": null, "filenames": {"python": "\"*.ps\"", "perl": "\"*.ps\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "RNA Sequence File", "name": "seq", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" < \"+ str(value)", "perl": "\" < $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control options", "name": "control", "children": [{"comment": "Compute suboptimal structures with energy with range kcal/mol of the optimum. Default is calculation of mfe structure only.", "prompt": "Suboptimal structures (-e)", "name": "suboptimal", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -e \" + str(value))[ value is not None and value != vdef ]", "perl": "(defined $value and $value!=$vdef)? \" -e $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Rescale energy parameters to a temperature of temp C. (-T)", "name": "temperature", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -T \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -T $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not include special stabilizing energies for certain tetraloops (-4)", "name": "tetraloops", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -4\" )[ value ]", "perl": "($value)? \" -4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Input parameters", "name": "input", "children": [{"comment": null, "prompt": "Do not allow GU pairs (-noGU)", "name": "noGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noGU\" )[ value ]", "perl": "($value)? \" -noGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs at the end of helices (-noCloseGU)", "name": "noCloseGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noCloseGU\" )[ value ]", "perl": "($value)? \" -noCloseGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Read energy parameters from paramfile, instead of using the default parameter set. A sample parameterfile should accompany your distribution. See the RNAlib documentation for details on the file format.", "prompt": "Energy parameter file (-P)", "name": "parameter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "EnergyParameterFile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": null, "name": "readseq", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"", "perl": "\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": "Ivo Hofacker", "command": {"path": null, "value": "RNAduplex"}, "documentation_links": [], "type": "program", "name": "rnaduplex"}, {"comment": "RNAeval  evaluates  the  free  energy  of  an  RNA molecule in fixed secondary structure.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac25"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Calculate energy of RNA sequences on given secondary structure", "title": "RNAeval", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": []}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "rnaeval", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"RNAeval\"", "perl": "\"RNAeval\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sequences and structures are read alternately from stdin.\n        The energy in Kcal/Mol is written to stdout.\n        The program will continue to read new sequences and structures until  a  line\n       consisting of the single character \"@\" or an end of file condition is encountered.\n       If the input sequence or structure contains the separator character \"&\" the program\n       calculates the energy of the co-folding of two RNA strands, where the \"&\" marks the\n       boundary between the two strands.", "prompt": "Sequences/Structures File", "name": "seqstruct", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" < \" + str(value)", "perl": "\" < $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "RNAStructure", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Other options", "name": "others_options", "children": [{"comment": null, "prompt": "Rescale energy parameters to a temperature of temp C. (-T)", "name": "temperature", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -T \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -T $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not include special stabilizing energies for certain tetraloops (-4)", "name": "tetraloops", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -4\" )[ value ]", "perl": "($value)? \" -4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "How to treat 'dangling end' energies for bases adjacent to helices in free \n            ends and multiloops: Normally only unpaired bases can participate in at most one dangling end.-d     Do  not  give  stabilizing energies to unpaired bases adjacent to helices in\n              multiloops and free ends (\"dangling ends\"). Same as  -d0,  opposite  of  -d1\n              (the default).-d2    Treat dangling ends as in the partition function algorithm, i.e. bases adjacent \n           to helices in multiloops and free ends give a stabilizing  energy  contribution, \n           regardless whether they're paired or unpaired.-d3    Allow coaxial stacking of adjacent helices in multi-loops.", "prompt": "How to treat dangling end energies for bases adjacent to helices in free ends and multiloops (-d)", "name": "dangling", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Let multiloop energies depend logarithmically on the size, \n            instead of the usual linear energy function.", "prompt": "Let multiloop energies depend logarithmically on the size (-logML)", "name": "logML", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -logML\" )[ value ]", "perl": "($value)? \" -logML\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "-circ  Assume a cricular (rather than linear) RNA molecule.", "name": "circular", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -circ\" )[ value ]", "perl": "($value)? \" -circ\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<html:p xmlns:html=\"http://www.w3.org/1999/xhtml\">Read energy parameters from paramfile, instead of using the default parameter set.<html:a href=\"http://www.tbi.univie.ac.at/~ivo/RNA/RNAlib/Param-Files.html\" target=\"ParamFile\">( documentation for details on the file format.)</html:a></html:p>", "prompt": "Energy parameter file (-P)", "name": "parameter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "EnergyParameterFile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": null, "prompt": "Print out energy contribution of each loop in the structure.", "name": "verbose", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -v \")[ value ]", "perl": "($value)? \" -v \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}]}, "version": null, "references": [{"url": null, "doi": null, "label": "I.L. Hofacker, W. Fontana, P.F. Stadler, S. Bonhoeffer, M. Tacker, P. Schuster (1994) Fast Folding and Comparison of RNA Secondary Structures. Monatshefte f. Chemie 125: 167-188"}], "source_links": [], "env": [], "authors": "Hofacker, Stadler", "command": {"path": null, "value": null}, "documentation_links": ["http://www.tbi.univie.ac.at/RNA/RNAeval.html"], "type": "program", "name": "rnaeval"}, {"comment": "RNAfold reads RNA sequences, calculates their minimum free energy (mfe) structure and prints the mfe structure in bracket notation and its free energy. It also produces PostScript files with plots of the resulting secondary structure graph and a \"dot plot\" of the base pairing matrix.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac26"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Calculate secondary structures of RNAs", "title": "RNAfold", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": null, "prompt": "Result file", "name": "outfile_name", "simple": null, "filenames": {"python": "str(seqin)+'.tmp'", "perl": "\"$seqin.tmp\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SequenceWithStructureConstraint", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Result file", "name": "outfile", "simple": null, "filenames": {"python": "\"rnafold.out\"", "perl": "\"rnafold.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "RnafoldOutput", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, {"comment": null, "prompt": "Postscript file", "name": "psfiles", "simple": null, "filenames": {"python": "\"*.ps\"", "perl": "\"*.ps\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "The string for the structure constraint must be of the length of the sequence.Rq: No constraint should be applied during structure predictions.Structure constraint:| : paired with another base> : base i is paired with a base j>ix : base must not pair< : base i is paired with a base j<i. : no constraint at allmatching brackets ( ): base i pairs base j", "prompt": "RNA/DNA Sequence File", "name": "seqin", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" <\"+str(value)", "perl": "\" <$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "SequenceWithStructureConstraint", "superclass": "AbstractText"}, "biotypes": ["RNA", "DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control options", "name": "control", "children": [{"comment": "Calculate the partition function and base pairing probability matrix \n            in addition to the mfe structure. Default is calculation of mfe structure only. \n            Prints a coarse representation of the pair probabilities in form of a pseudo bracket \n            notation, the ensemble free energy, the frequency of the mfe structure, and the \n            structural diversity. Note that unless you also specify -d2 or -d0, the partition \n            function and mfe calculations will use a slightly different energy model. See the \n            discussion of dangling end options below.", "prompt": "Calculate the partition function and base pairing probability matrix (-p)", "name": "partition", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -p\" )[ value ]", "perl": "($value)? \" -p\" : \"\""}, "command": false, "precond": {"python": "not pf", "perl": "not $pf"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Calculate  the partition function but not the pair probabilities, \n            saving about 50% in runtime. Prints the  ensemble free energy -kT ln(Z).", "prompt": "Calculate  the partition function but not the pair probabilities (-p0)", "name": "pf", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -p0\" )[ value ]", "perl": "(defined $value)? \" -p0\" : \"\""}, "command": false, "precond": {"python": "not partition", "perl": "not $partition"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In addition to pair probabilities compute stack probabil-\n              ities, i.e. the probability that a  pair  (i,j  and  the\n              immediately interior pair (i+1,j-1) are formed simultane-\n              ously. A second postscript dot plot called \"name_dp2.ps\",\n              or  \"dot2.ps\"  (if the sequence does not have a name), is\n              produced that contains pair probabilities  in  the  upper\n              right half and stack probabilities in the lower left.", "prompt": "In addition to pair probabilities compute stack probabilities (-p2)", "name": "p2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -p2 \" )[ value ]", "perl": "(defined $value)? \" -p2\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Calculate  an  MEA (maximum expected accuracy) structure,\n              where the expected accuracy is  computed  from  the  pair\n              probabilities:   each   base  pair  (i,j)  gets  a  score\n              2*gamma*p_ij and the score of an unpaired base  is  given\n              by  the  probability of not forming a pair. The parameter\n              gamma tunes the importance of correctly  predicted  pairs\n              versus  unpaired  bases.  Thus, for small values of gamma\n              the MEA structure will contain only pairs with very  high\n              probability.   The  default value is gamma=1.  Using -MEA\n              implies -p for computing the pair probabilities.", "prompt": "Calculate an MEA (maximum expected accuracy) structure", "name": "mea", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -MEA \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -MEA $value\" : \"\""}, "command": false, "precond": {"python": "partition", "perl": "defined $partition"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Rescale energy parameters to a temperature of temp C. (-T)", "name": "temperature", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -T \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -T $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not include special stabilizing energies for certain tetraloops (-4)", "name": "tetraloops", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -4\" )[ value ]", "perl": "($value)? \" -4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "How to treat 'dangling end' energies for bases adjacent to helices in free ends and multiloops: Normally only unpaired bases can participate in at most one dangling end. With -d2 this check is ignored, this is the default for partition function folding (-p). -d ignores dangling ends altogether. Note that by default pf and mfe folding treat dangling ends differently, use -d2 (or -d) in addition to -p to ensure that both algorithms use the same energy model.", "prompt": "How to treat dangling end energies for bases adjacent to helices in free ends and multiloops (-d)", "name": "dangling", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In the calculation of the pf use scale*mfe as an estimate for the ensemble free energy (used to avoid overflows). The default is 1.07, usefull values are 1.0 to 1.2. Occasionally needed for long sequences. You can also recompile the programm to use double precision.", "prompt": "Use scale*mfe as an estimate for the free energy (-S)", "name": "scale", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -S \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -S $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Input parameters", "name": "input", "children": [{"comment": "The programm reads first the sequence then the a string containg constraints on the structure encoded with the symbols:| (the corresponding base has to be paired x (the base is unpaired)< (base i is paired with a base j>i)> (base i is paired with a base j<i)matching brackets ( ) (base i pairs base j)Pf folding ignores constraints of type '|' '<' and '>', but disallow all pairs conflicting with a constraint of type 'x' or '( )'. This is usually sufficient to enforce the constraint.", "prompt": "Calculate structures subject to constraints (-C)", "name": "constraints", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -C\" )[ value ]", "perl": "($value)? \" -C\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Produce structures without lonely pairs (helices of length 1). For partition function folding this only disallows pairs that can only occur isolated. Other pairs may still occasionally occur as helices of length 1.", "prompt": "Avoid lonely pairs (helices of length 1) (-noLP)", "name": "noLP", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noLP\" )[ value ]", "perl": "($value)? \" -noLP\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs (-noGU)", "name": "noGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noGU\" )[ value ]", "perl": "($value)? \" -noGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs at the end of helices (-noCloseGU)", "name": "noCloseGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noCloseGU\" )[ value ]", "perl": "($value)? \" -noCloseGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Allow other pairs in addition to the usual AU, GC and GU pairs. Pairs is a comma seperated list of additionally allowed pairs. If a the first character is a '-' then AB will imply that AB and BA are allowed pairs. e.g. RNAfold -nsp -GA will allow GA and AG pairs. Nonstandard pairs are given 0 stacking energy.", "prompt": "Non standard pairs (comma seperated list) (-nsp)", "name": "nsp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -nsp \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -nsp $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Read energy parameters from paramfile, instead of using the default parameter set.", "prompt": "Energy parameter file (-P)", "name": "parameter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "EnergyParameter", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": null, "name": "readseq", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"mv %s %s.ori &&", "perl": "\"mv $seqin $seqin.ori &&"}, "command": false, "precond": {"python": "not constraints", "perl": "not $constraints/"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [{"url": null, "doi": null, "label": "I.L. Hofacker, W. Fontana, P.F. Stadler, S. Bonhoeffer, M. Tacker, P. Schuster (1994) Fast Folding and Comparison of RNA Secondary Structures. Monatshefte f. Chemie 125: 167-188"}, {"url": null, "doi": null, "label": "A. Walter, D Turner, J Kim, M Lyttle, P Muller, D Mathews, M Zuker Coaxial stacking of helices enhances binding of oligoribonucleotides. PNAS, 91, pp 9218-9222, 1994"}, {"url": null, "doi": null, "label": "M. Zuker, P. Stiegler (1981) Optimal computer folding of large RNA sequences using thermodynamic and auxiliary information, Nucl Acid Res 9: 133-148"}, {"url": null, "doi": null, "label": "J.S. McCaskill (1990) The equilibrium partition function and base pair binding probabilities for RNA secondary structures, Biopolymers 29: 11051119 D.H. Turner N. Sugimoto and S.M. Freier (1988) RNA structure prediction, Ann Rev Biophys Biophys Chem 17: 167-192"}, {"url": null, "doi": null, "label": "D. Adams (1979) The hitchhiker's guide to the galaxy, Pan Books, London"}], "source_links": [], "env": [], "authors": "Hofacker, Fontana, Bonhoeffer, Stadler", "command": {"path": null, "value": "RNAfold"}, "documentation_links": ["http://www.tbi.univie.ac.at/RNA/RNAfold.html"], "type": "program", "name": "rnafold"}, {"comment": "RNAheat   reads  RNA  sequences   from  stdin  and calculates their  specific heat in  the temperature range t1  to t2, from the partition function by numeric differentiation. The result is written in file as a list of pairs of temperature in C and specific heat in Kcal/(Mol*K).", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac27"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Calculate specific heat of RNAs", "title": "RNAheat", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": []}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "rnaheat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"RNAheat\"", "perl": "\"RNAheat\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "RNA Sequences File", "name": "seq", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" < \" + str(value)", "perl": "\" < $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control options", "name": "control", "children": [{"comment": null, "prompt": "Lowest temperature (-Tmin)", "name": "temp_min", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -Tmin \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -Tmin $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Highest temperature (-Tmax)", "name": "temp_max", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -Tmax \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -Tmax $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Calculate partition function every stepsize degrees Celcius (-h)", "name": "stepsize", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -h \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -h $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The program fits a parabola to 2*ipoints+1 data points to calculate 2nd derivatives. Increasing this parameter produces a smoother curve.", "prompt": "Produces a smoother curve by increasing ipoints (-m)", "name": "ipoints", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -m \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -m $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not include special stabilizing energies for certain tetraloops (-4)", "name": "tetraloops", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -4\" )[ value ]", "perl": "($value)? \" -4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "How to treat 'dangling end' energies for bases adjacent to helices in free ends and multiloops: Normally only unpaired bases can participate in at most one dangling end. With -d2 this check is ignored, this is the default for partition function folding (-p). -d ignores dangling ends altogether. Note that by default pf and mfe folding treat dangling ends differently, use -d2 (or -d) in addition to -p to ensure that both algorithms use the same energy model. The -d2 options is available for RNAfold, RNAeval, and RNAinverse only.", "prompt": "How to treat dangling end energies for bases adjacent to helices in free ends and multiloops (-d)", "name": "dangling", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Input parameters", "name": "input", "children": [{"comment": null, "prompt": "Do not allow GU pairs (-noGU)", "name": "noGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noGU\" )[ value ]", "perl": "($value)? \" -noGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs at the end of helices (-noCloseGU)", "name": "noCloseGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noCloseGU\" )[ value ]", "perl": "($value)? \" -noCloseGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Allow other pairs in addition to the usual AU,GC,and GU pairs. pairs is a comma seperated list of additionally allowed pairs. If a the first character is a '-' then AB will imply that AB and BA are allowed pairs. e.g. RNAfold -nsp -GA will allow GA and AG pairs. Nonstandard pairs are given 0 stacking energy.", "prompt": "Non standard pairs (comma seperated list) (-nsp)", "name": "nsp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -nsp \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -nsp $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Read energy parameters from paramfile, instead of using the default parameter set. A sample parameterfile should accompany your distribution. See the RNAlib documentation for details on the file format.", "prompt": "Parameter file (-P)", "name": "parameter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "EnergyParameterFile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": null, "name": "readseq", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"", "perl": "\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.7", "references": [{"url": null, "doi": null, "label": "I.L. Hofacker, W. Fontana, P.F. Stadler, S. Bonhoeffer, M. Tacker, P. Schuster (1994) Fast Folding and Comparison of RNA Secondary Structures. Monatshefte f. Chemie 125: 167-188"}, {"url": null, "doi": null, "label": "J.S. McCaskill (1990) The equilibrium partition function and base pair binding probabilities for RNA secondary structures, Biopolymers 29: 11051119 D. Adams (1979) The hitchhiker's guide to the galaxy, Pan Books, London"}], "source_links": [], "env": [], "authors": "Hofacker, Stadler", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "rnaheat"}, {"comment": "RNAinverse searches for sequences  folding  into  a  predefined  structure,  thereby inverting  the folding algorithm. Target structures (in bracket notation) and starting sequences for the search are read alternately from  file.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac28"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Find RNA sequences with given secondary structure", "title": "RNAinverse", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": []}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "rnainverse", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"RNAinverse\"", "perl": "\"RNAinverse\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Target structures and starting sequences for the search.", "prompt": "Structures File", "name": "seq", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" < \" + str(value)", "perl": "\" < $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "RNAStructure", "superclass": "AbstractText"}, "biotypes": ["RNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control options", "name": "control", "children": [{"comment": "Use  minimum  energy  (-Fm), partition function folding (-Fp) or both (-Fmp). In  partition  function  mode,  the  probability  of  the  target   structure exp(-E(S)/kT)/Q  is  maximized. This probability is written in brackets after the found sequence and Hamming distance. In most cases you'll want to use the -f option in conjunction with -Fp, see below. The default is -Fm.", "prompt": "Folding method (-F)", "name": "folding", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -F\" + str(value))[ value is not None]", "perl": "(defined $value and $value ne $vdef)? \" -F$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In combination with -FpF=-kT*ln(Q)", "prompt": "Stop search when sequence is found with E(s)-F smaller than this value (-f)", "name": "final", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -f \" + str(value))[ value is not None]", "perl": "(defined $value)? \" -f $value\" : \"\""}, "command": false, "precond": {"python": "folding == 'mp' or folding == 'p'", "perl": "$folding eq 'mp' or $folding eq 'p'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Search repeatedly for the same structure. If repeats is negative search until -repeats  exact  solutions  are  found,  no  output  is done for unsuccessful searches. Be aware, that the program will not terminate if the target  structure can not be found.", "prompt": "Search repeatedly for the same structure (-R)", "name": "repeats", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -R \" + str(value))[ value is not None]", "perl": "(defined $value)? \" -R $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Find sequences using only bases from this alphabet (-a)", "name": "alphabet", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -a \" + str(value))[ value is not None]", "perl": "(defined $value)? \" -a $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Other options", "name": "others_options", "children": [{"comment": null, "prompt": "Rescale energy parameters to a temperature of temperature Celcius (-T)", "name": "temperature", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -T \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -T $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not include special stabilizing energies for certain tetraloops (-4)", "name": "tetraloops", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -4\" )[ value ]", "perl": "($value)? \" -4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "How to treat 'dangling end' energies for bases adjacent to helices in free ends and multiloops: Normally only unpaired bases can participate in at most one dangling end. With -d2 this check is ignored, this is the default for partition function folding (-p). -d ignores dangling ends altogether. Note that by default pf and mfe folding treat dangling ends differently, use -d2 (or -d) in addition to -p to ensure that both algorithms use the same energy model. The -d2 options is available for RNAfold, RNAeval, and RNAinverse only.", "prompt": "How to treat dangling end energies for bases adjacent to helices in free ends and multiloops (-d)", "name": "dangling", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs (-noGU)", "name": "noGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noGU\" )[ value ]", "perl": "($value)? \" -noGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs at the end of helices (-noCloseGU)", "name": "noCloseGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noCloseGU\" )[ value ]", "perl": "($value)? \" -noCloseGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Allow other pairs in addition to the usual AU,GC,and GU pairs. pairs is a comma seperated list of additionally allowed pairs. If a the first character is a '-' then AB will imply that AB and BA are allowed pairs. e.g. RNAfold -nsp -GA will allow GA and AG pairs. Nonstandard pairs are given 0 stacking energy.", "prompt": "Non standard pairs (comma seperated list) (-nsp)", "name": "nsp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -nsp \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -nsp $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Read energy parameters from paramfile, instead of using the default parameter set. A sample parameterfile should accompany your distribution. See the RNAlib documentation for details on the file format.", "prompt": "Parameter file (-P)", "name": "parameter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "EnergyParameterFile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [{"url": null, "doi": null, "label": "I.L. Hofacker, W. Fontana, P.F. Stadler, S. Bonhoeffer, M. Tacker, P. Schuster (1994) Fast Folding and Comparison of RNA Secondary Structures. Monatshefte f. Chemie 125: 167-188"}, {"url": null, "doi": null, "label": "A. Walter, D Turner, J Kim, M Lyttle, P Muller, D Mathews, M Zuker Coaxial stacking of helices enhances binding of oligoribonucleotides. PNAS, 91, pp 9218-9222, 1994"}, {"url": null, "doi": null, "label": "M. Zuker, P. Stiegler (1981) Optimal computer folding of large RNA sequences using thermodynamic and auxiliary information, Nucl Acid Res 9: 133-148"}, {"url": null, "doi": null, "label": "J.S. McCaskill (1990) The equilibrium partition function and base pair binding probabilities for RNA secondary structures, Biopolymers 29: 11051119 D.H. Turner N. Sugimoto and S.M. Freier (1988) RNA structure prediction, Ann Rev Biophys Biophys Chem 17: 167-192"}, {"url": null, "doi": null, "label": "D. Adams (1979) The hitchhiker's guide to the galaxy, Pan Books, London"}], "source_links": [], "env": [], "authors": "Hofacker", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "rnainverse"}, {"comment": "RNALfold computes locally stable RNA secondary structure with a  maximal  base  pair span.Output  consists of a list of secondary structure components of size <= L, one entry per line. Each output line contains the predicted  local  structure  its  energy  in kcal/mol and the starting position of the local structure.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac29"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Calculate locally stable secondary structures of RNAs", "title": "RNALfold", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Postscript file", "name": "psfiles", "simple": null, "filenames": {"python": "\"*.ps\"", "perl": "\"*.ps\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "RNA Sequence File", "name": "seq", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" < \" + str(value)", "perl": "\" < $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control options", "name": "control", "children": [{"comment": "Set  the  maximum  allowed  separation  of a base pair to span. I.e. no pairs (i,j) with j-i>span will be allowed.", "prompt": "Maximum  allowed  separation  of a base pair to span (-L)", "name": "span", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -L \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -L $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Rescale energy parameters to a temperature of temperature Celcius (-T)", "name": "temperature", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -T \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -T $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not include special stabilizing energies for certain tetraloops (-4)", "name": "tetraloops", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -4\" )[ value ]", "perl": "($value)? \" -4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "How to treat 'dangling end' energies for bases adjacent to helices in free ends and multiloops: Normally only unpaired bases can participate in at most one dangling end. With -d2 this check is ignored, this is the default for partition function folding (-p). -d ignores dangling ends altogether. Note that by default pf and mfe folding treat dangling ends differently, use -d2 (or -d) in addition to -p to ensure that both algorithms use the same energy model. The -d2 options is available for RNAfold, RNAeval, and RNAinverse only.", "prompt": "How to treat dangling end energies for bases adjacent to helices in free ends and multiloops (-d)", "name": "dangling", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Input parameters", "name": "input", "children": [{"comment": null, "prompt": "Do not allow GU pairs (-noGU)", "name": "noGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noGU\" )[ value ]", "perl": "($value)? \" -noGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs at the end of helices (-noCloseGU)", "name": "noCloseGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noCloseGU\" )[ value ]", "perl": "($value)? \" -noCloseGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Allow other pairs in addition to the usual AU,GC,and GU pairs. pairs is a comma seperated list of additionally allowed pairs. If a the first character is a '-' then AB will imply that AB and BA are allowed pairs. e.g. RNAfold -nsp -GA will allow GA and AG pairs. Nonstandard pairs are given 0 stacking energy.", "prompt": "Non standard pairs (comma seperated list) (-nsp)", "name": "nsp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -nsp \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -nsp $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Read energy parameters from paramfile, instead of using the default parameter set. A sample parameterfile should accompany your distribution. See the RNAlib documentation for details on the file format.", "prompt": "Energy parameter file (-P)", "name": "parameter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "EnergyParameterFile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": null, "name": "readseq", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"", "perl": "\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.7", "references": [{"url": null, "doi": null, "label": "I.L. Hofacker, B. Priwitzer, and P.F. Stadler \"Prediction of Locally Stable RNA Secondary Structures for Genome-Wide Surveys\" Bioinformatics, 20, 186-190 (2004)"}], "source_links": [], "env": [], "authors": "Ivo L Hofacker, Peter F Stadler", "command": {"path": null, "value": "RNALfold"}, "documentation_links": [], "type": "program", "name": "rnalfold"}, {"comment": "RNApdist  reads  RNA sequences from stdin and calculates structure distances between the thermodynamic ensembles of their secondary structures.  To do this the partition function and matrix of base pairing probabilities is computed for each sequence. The probability matrix is then condensed into a vector holding for each base the  proba-bilities  of  being  unpaired,  paired upstream, or paired downstream, respectively. These profiles are compared by a standard alignment algorithm.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac2a"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Calculate distances between thermodynamic RNA secondary structures ensembles", "title": "RNApdist", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Postscript output file", "name": "psfiles", "simple": null, "filenames": {"python": "\"*.ps\"", "perl": "\"*.ps\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Result alignment file", "name": "alnoutfile", "simple": null, "filenames": {"python": "str(alignment_file)", "perl": "\"$alignment_file\""}, "precond": {"python": "alignment_file is not None", "perl": "defined $alignment_file"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "RNA Sequences File", "name": "seq", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" < \" + str(value)", "perl": "\" < $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Comparison options", "name": "comparison_options", "children": [{"comment": null, "prompt": "Which comparisons (-X)", "name": "compare", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -X\" + str(value) )[value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -X$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Print an 'alignment' with gaps of the structures, to show matching substructures.(  ) essentially upstream (downstream) paired bases{  } weakly upstream (downstream) paired bases|    strongly paired bases without preference,    weakly paired bases without preference.    essentially unpaired bases.", "prompt": "Alignment file (-B)", "name": "alignment_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -B \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -B $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Other options", "name": "others_options", "children": [{"comment": null, "prompt": "Rescale energy parameters to a temperature of temperature Celcius (-T)", "name": "temperature", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -T \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -T $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not include special stabilizing energies for certain tetraloops (-4)", "name": "tetraloops", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -4\" )[ value ]", "perl": "($value)? \" -4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "How to treat 'dangling end' energies for bases adjacent to helices in free ends and multiloops: Normally only unpaired bases can participate in at most one dangling end. With -d2 this check is ignored, this is the default for partition function folding (-p). -d ignores dangling ends altogether. Note that by default pf and mfe folding treat dangling ends differently, use -d2 (or -d) in addition to -p to ensure that both algorithms use the same energy model. The -d2 options is available for RNAfold, RNAeval, and RNAinverse only.", "prompt": "How to treat dangling end energies for bases adjacent to helices in free ends and multiloops (-d)", "name": "dangling", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs (-noGU)", "name": "noGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noGU\" )[ value ]", "perl": "($value)? \" -noGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs at the end of helices (-noCloseGU)", "name": "noCloseGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noCloseGU\" )[ value ]", "perl": "($value)? \" -noCloseGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Allow other pairs in addition to the usual AU,GC,and GU pairs. pairs is a comma seperated list of additionally allowed pairs. If a the first character is a '-' then AB will imply that AB and BA are allowed pairs. e.g. RNAfold -nsp -GA will allow GA and AG pairs. Nonstandard pairs are given 0 stacking energy.", "prompt": "Non standard pairs (comma seperated list) (-nsp)", "name": "nsp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -nsp \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -nsp $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Read energy parameters from paramfile, instead of using the default parameter set. A sample parameterfile should accompany your distribution. See the RNAlib documentation for details on the file format.", "prompt": "Parameter file (-P)", "name": "parameter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "EnergyParameterFile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": null, "name": "readseq", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"", "perl": "\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [{"url": null, "doi": null, "label": "Bonhoeffer S, McCaskill J S, Stadler P F, Schuster P, (1993) RNA multistructure landscapes, Euro Biophys J:22,13-24"}], "source_links": [], "env": [], "authors": "Stadler, Hofacker, Bonhoeffer", "command": {"path": null, "value": "RNApdist"}, "documentation_links": [], "type": "program", "name": "rnapdist"}, {"comment": "RNAplfold computes local pair probabilities for base pairs with a maximal span of L. The  probabilities  are  averaged  over  all windows of size L that contain the base pair.Output consists of a dot plot in postscript file, where the averaged pair probabilities can easily be parsed and visually inspected.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac2b"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Compute average pair probabilities for local base pairs in long sequences", "title": "RNAplfold", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Postscript file", "name": "psfiles", "simple": null, "filenames": {"python": "\"*.ps\"", "perl": "\"*.ps\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "RNA Sequence File", "name": "seq", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" < \" + str(value)", "perl": "\" < $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["RNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control options", "name": "control", "children": [{"comment": null, "prompt": "Size of windows for average pair probabilities. (-W)", "name": "winsize", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -W \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -W $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Allow only pairs (i,j) with j-i<=span. (-L)", "name": "span", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -L \" + str(value) )[ value is not None and value <= winsize ]", "perl": "(defined $value and $value <= $winsize)? \" -L $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Report only base pairs with an average probability > cutoff. (-c)", "name": "cutoff", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -c \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -c $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Length to compute the mean probability of unpaired base. (-u)", "name": "width", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -u \" + str(value) )[ value is not None]", "perl": "(defined $value)? \" -u $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Rescale energy parameters to a temperature of temperature Celcius (-T)", "name": "temperature", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -T \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -T $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not include special stabilizing energies for certain tetraloops (-4)", "name": "tetraloops", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -4\" )[ value ]", "perl": "($value)? \" -4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "How to treat 'dangling end' energies for bases adjacent to helices in free ends and multiloops: Normally only unpaired bases can participate in at most one dangling end. With -d2 this check is ignored, this is the default for partition function folding (-p). -d ignores dangling ends altogether. Note that by default pf and mfe folding treat dangling ends differently, use -d2 (or -d) in addition to -p to ensure that both algorithms use the same energy model. The -d2 options is available for RNAfold, RNAeval, and RNAinverse only.", "prompt": "How to treat dangling end energies for bases adjacent to helices in free ends and multiloops (-d)", "name": "dangling", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Input parameters", "name": "input", "children": [{"comment": null, "prompt": "Do not allow GU pairs (-noGU)", "name": "noGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noGU\" )[ value ]", "perl": "($value)? \" -noGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs at the end of helices (-noCloseGU)", "name": "noCloseGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noCloseGU\" )[ value ]", "perl": "($value)? \" -noCloseGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Allow other pairs in addition to the usual AU,GC,and GU pairs. pairs is a comma seperated list of additionally allowed pairs. If a the first character is a '-' then AB will imply that AB and BA are allowed pairs. e.g. RNAfold -nsp -GA will allow GA and AG pairs. Nonstandard pairs are given 0 stacking energy.", "prompt": "Non standard pairs (comma seperated list) (-nsp)", "name": "nsp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -nsp \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -nsp $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Read energy parameters from paramfile, instead of using the default parameter set. A sample parameterfile should accompany your distribution. See the RNAlib documentation for details on the file format.", "prompt": "Energy parameter file (-P)", "name": "parameter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "EnergyParameterFile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Toggles -u option, output is switched from probabilities\n              to their logarithm, which are NOT exactly the mean  energies needed to the respective stretch of bases!", "prompt": "Output is switched from probabilities to their logarithm", "name": "logout", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -O \" )[ value ]", "perl": "(defined $value)? \" -O \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": null, "name": "readseq", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"", "perl": "\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [{"url": null, "doi": null, "label": "S. H. Bernhart, I.L. Hofacker, and P.F. Stadler (2006) \"Local Base Pairing Probabilities in Large RNAs\" Bioinformatics 22: 614-615"}, {"url": null, "doi": null, "label": "A.F. Bompfunewerer, R. Backofen, S.H. Bernhart, J. Hertel, I.L. Hofacker, P.F. Stadler, S. Will (2007) \"Variations on {RNA} Folding and Alignment: Lessons from Benasque\" J. Math. Biol."}], "source_links": [], "env": [], "authors": "Stephan H Bernhart, Ivo L Hofacker, Peter F Stadler.", "command": {"path": null, "value": "RNAplfold"}, "documentation_links": [], "type": "program", "name": "rnaplfold"}, {"comment": "RNAplot  reads RNA sequences and structures from stdin in the format as\n       produced by RNAfold and produces drawings of  the  secondary  structure\n       graph.   The  coordinates  are  produced  using  either E. Bruccolerias\n       naview routines, or a simple radial layout method.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac2c"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:2D_structure"}], "description": "Draw RNA Secondary Structures", "title": "RNAplot", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": null, "prompt": "Result file", "name": "outfile", "simple": null, "filenames": {"python": "\"rna.*\"", "perl": "\"rna.*\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "RnaplotdOutput", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "RNA sequences and structures from output in the format as\n       produced by RNAfold", "name": "seqin", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" <\"+str(value)", "perl": "\" <$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "RnafoldOutput", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Choose  the  layout  algorithm.  Simple  radial  layout if 0, or\n              naview if 1.  Default is 1.", "prompt": "Choose  the  layout  algorithm", "name": "layout", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -t \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -t $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Specify output format", "name": "outformat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -o \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -o $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.8.4", "references": [{"url": null, "doi": null, "label": "I.L. Hofacker, W. Fontana, P.F. Stadler, S. Bonhoeffer, M. Tacker, P. Schuster (1994) Fast Folding and Comparison of RNA Secondary Structures. Monatshefte f. Chemie 125: 167-188"}, {"url": null, "doi": null, "label": "A. Walter, D Turner, J Kim, M Lyttle, P Muller, D Mathews, M Zuker Coaxial stacking of helices enhances binding of oligoribonucleotides. PNAS, 91, pp 9218-9222, 1994"}, {"url": null, "doi": null, "label": "M. Zuker, P. Stiegler (1981) Optimal computer folding of large RNA sequences using thermodynamic and auxiliary information, Nucl Acid Res 9: 133-148"}, {"url": null, "doi": null, "label": "J.S. McCaskill (1990) The equilibrium partition function and base pair binding probabilities for RNA secondary structures, Biopolymers 29: 11051119 D.H. Turner N. Sugimoto and S.M. Freier (1988) RNA structure prediction, Ann Rev Biophys Biophys Chem 17: 167-192"}, {"url": null, "doi": null, "label": "D. Adams (1979) The hitchhiker's guide to the galaxy, Pan Books, London"}], "source_links": [], "env": [], "authors": "Hofacker, Fontana, Bonhoeffer, Stadler", "command": {"path": null, "value": "RNAplot"}, "documentation_links": ["http://bioweb2.pasteur.fr/gensoft/sequence/nucleic/2D_structure.html#ViennaRNa"], "type": "program", "name": "rnaplot"}, {"comment": "RNAsubopt reads RNA sequences from file and (in the default -e mode) calculates all suboptimal secondary structures within a user defined energy range above the minimum free energy (mfe).It prints the suboptimal structures in bracket  notation  followed by  the  energy in kcal/mol to stdout. Be careful, the number of structures returned grows exponentially with both sequence length and energy range.Alternatively, when used with the -p option, RNAsubopt produces  Boltzmann  weighted samples of secondary structures.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac2d"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Calculate suboptimal secondary structures of RNAs", "title": "RNAsubopt", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Postscript file", "name": "psfiles", "simple": null, "filenames": {"python": "\"*.ps\"", "perl": "\"*.ps\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "rnasubopt", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"RNAsubopt\"", "perl": "\"RNAsubopt\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "RNA Sequences File", "name": "seq", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" < \" + str(value)", "perl": "\" < $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["RNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control options", "name": "control", "children": [{"comment": null, "prompt": "Calculate suboptimal structures within this range kcal/mol of the mfe (-e)", "name": "mfe", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -e \" + str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -e $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Rescale energy parameters to a temperature of temperature Celcius (-T)", "name": "temperature", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -T \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -T $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not include special stabilizing energies for certain tetraloops (-4)", "name": "tetraloops", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -4\" )[ value ]", "perl": "($value)? \" -4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Change treatment of dangling ends, as in RNAfold and RNAeval.  The default is -d2  (as  in  partition  function  folding).  If -d1 or -d3 are specified the structures are generated as with -d2 but  energies  are  re-evaluated  before printing.", "prompt": "How to treat dangling end energies for bases adjacent to helices in free ends and multiloops (-d)", "name": "dangling", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option does not effect structure generation, only the energies that is printed out. Since logML lowers energies somewhat, some structures may be missing.", "prompt": "Recalculate energies of structures using a logarithmic energy function for multi-loops (-logML)", "name": "logML", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -logML\")[ value ]", "perl": "($value)? \" -logML\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Only print structures with energy within prange of the mfe.  Useful  in  conjunction  with  -logML,  -d1  or -d3: while the -e option specifies the range before energies are re-evaluated, -ep  specifies  the  maximum  energy  after re-evaluation.", "prompt": "Only print structures with energy within this prange of the mfe (-ep)", "name": "ep", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -ep \" + str(value))[ value is not None]", "perl": "(defined $value)? \" -ep $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Since the sort in is done in memory, this\n              becomes impractical when the number of structures  produced  goes  into  millions.", "prompt": "Sort the structures by energy (-s)", "name": "sort", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -s\")[value]", "perl": "($value)? \" -s\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Input parameters", "name": "input", "children": [{"comment": "Only  produce  structures  without  lonely  pairs (helices of length 1). This reduces the number of structures drastically and should therefore be used for longer sequences and larger energy ranges.", "prompt": "Avoid lonely pairs (helices of length 1) (-noLP)", "name": "noLP", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -noLP\")[value]", "perl": "($value)? \" -noLP\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs (-noGU)", "name": "noGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -noGU\")[value]", "perl": "($value)? \" -noGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs at the end of helices (-noCloseGU)", "name": "noCloseGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -noCloseGU\")[value]", "perl": "($value)? \" -noCloseGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Allow other pairs in addition to the usual AU,GC,and GU pairs. pairs is a comma seperated list of additionally allowed pairs. If a the first character is a '-' then AB will imply that AB and BA are allowed pairs. e.g. RNAfold -nsp -GA will allow GA and AG pairs. Nonstandard pairs are given 0 stacking energy.", "prompt": "Non standard pairs (comma seperated list) (-nsp)", "name": "nsp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -nsp \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -nsp $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Read energy parameters from paramfile, instead of using the default parameter set. A sample parameterfile should accompany your distribution. See the RNAlib documentation for details on the file format.", "prompt": "Parameter file (-P)", "name": "parameter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "EnergyParameterFile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Calculate z score", "name": "z", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -z\" )[ value ]", "perl": "(defined $value)? \" -z\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": null, "name": "readseq", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"", "perl": "\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [{"url": null, "doi": null, "label": "S. Wuchty, W. Fontana, I. L. Hofacker and P. Schuster Complete Suboptimal Folding of RNA and the Stability of Secondary Structures, Biopolymers, 49, 145-165 (1999)"}], "source_links": [], "env": [], "authors": "Wuchty, Hofacker, Fontana", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "rnasubopt"}, {"comment": "RNAup  calculates the thermodynamics of RNA-RNA interactions, by decomposing the \n        binding into two stages.(1) First the  probability  that  a\n       potential binding sites remains unpaired (equivalent to the free energy\n       needed to open the site) is computed.(2) Then  this  accessibility  is\n       combined  with  the  interaction  energy  to  obtain  the total binding\n       energy.All calculations are done by computing partition functions over\n       all possible conformations.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac2e"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:2D_structure"}], "description": "Calculate the thermodynamics of RNA-RNA interactions", "title": "RNAup", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "RNAup output", "name": "outfiles", "simple": null, "filenames": {"python": "\"RNA*.out\"", "perl": "\"RNA*.out\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "RNAupOut", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "Each line of file corresponds to one sequence, except for lines starting with \">\" which contain the name of the next sequence. To compute the hybrid structure of two molecules, the two sequences must be concatenated using the & character as separator.", "prompt": "RNA Sequences File", "name": "seq", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\" < \" + str(value)", "perl": "\" < $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "RNASequence", "superclass": "AbstractText"}, "biotypes": ["RNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Options for calculation of free energies", "name": "freeEnergie", "children": [{"comment": "Specifies  the  length  (len)  of the unstructured region in the\n              output. The  default  value  is  4.  The  probability  of  being\n              unpaired  is plotted on the right border of the unpaired region.\n              You can specify up to 20 different length values:   use  \"-\"  to\n              specify  a range of continuous values (e.g. -u 4-8) or specify a\n              list of comma separated values (e.g. -u 4,8,15).", "prompt": "Specifies  the  length of the unstructured region  (-u)", "name": "partition_free", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -u \"+ str(value) )[ value is not None and value != vdef ]", "perl": "($value)? \" -u $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "by default only the full probability of being unpaired is  plot-\n              ted. The -c option allows to get the different contributions (c)\n              to the probability of being unpaired: The  full  probability  of\n              being  unpaired  (\"S\")  is  the  sum of the probability of being\n              unpaired in the exterior  loop  (\"E\"),  within  a  hairpin  loop\n              (\"H\"),  within  an  interior  loop  (\"I\") and within a multiloop\n              (\"M\"). Any combination of these letters may be given.", "prompt": "Option allows to get the different contributions to the probability of being unpaired. (-c)", "name": "shime", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -c \" +str(value)  )[ value is not None ]", "perl": "($value)? \" -c $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options for calculation of interaction", "name": "interaction", "children": [{"comment": "Determines the maximal length of the region of interaction,  the\n              default is 25.", "prompt": "Determines the maximal length of the region of interaction (-w)", "name": "Length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -w \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -w $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Include the probability of unpaired regions in both (b) RNAs. By\n              default only the probability of being unpaired in the longer RNA\n              (target) is used.", "prompt": "Include the probability of unpaired regions in both RNAs (-b)", "name": "unpaired", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -b \" )[ value ]", "perl": "(defined $value and $value != $vdef)? \" -b \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "These  options extend the region of interaction in the target by\n              len residues to the 5' and 3' side, respectively. The underlying\n              assumption  is  that  it  is favorable for an interaction if not\n              only the direct region of contact is unpaired  but  also  a  few\n              residues 5' and 3' of this region.", "prompt": "Extend the region of interaction in the target by len residues  to the 5' side", "name": "side5", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -5 \" + str(value) )[ value is not None ]", "perl": "(defined $value and $value != $vdef)? \" -5 $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "These  options extend the region of interaction in the target by\n              len residues to the 5' and 3' side, respectively. The underlying\n              assumption  is  that  it  is favorable for an interaction if not\n              only the direct region of contact is unpaired  but  also  a  few\n              residues 5' and 3' of this region.", "prompt": "Extend the region of interaction in the target by len residues  to the  3' side", "name": "side3", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -3 \" + str(value) )[ value is not None ]", "perl": "(defined $value and $value != $vdef)? \" -3 $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Xp: Pairwise (p) interaction is calculated:\n              The first sequence interacts with the 2nd, the  third  with  the\n              4th  etc.  If  -Xp  is selected two interacting sequences may be\n              given in a single line separated by \"&\" or each sequence may  be\n              given on an extra line.Xf: The interaction of each sequence with the\n              first one is calculated (e.g. interaction of one mRNA with  many\n              small RNAs). Each sequence has to be given on an extra line.", "prompt": "Interaction  mode", "name": "interaction", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use  the  first  sequence  in  the  input file as the target. No\n              length check is done", "prompt": "Use  the  first  sequence  in  the  input file as the target", "name": "target", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -target \" )[ value ]", "perl": "(defined $value and $value != $vdef)? \" -target \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "General option", "name": "general", "children": [{"comment": null, "prompt": "Rescale energy parameters to a temperature of temp C. (-T)", "name": "temperature", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -T \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -T $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not include special stabilizing energies for certain tetraloops (-4)", "name": "tetraloops", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -4\" )[ value ]", "perl": "($value)? \" -4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "How to treat 'dangling end' energies for bases adjacent to helices in free ends and multiloops: Normally only unpaired bases can participate in at most one dangling end. With -d2 this check is ignored, this is the default for partition function folding (-p). -d ignores dangling ends altogether. Note that by default pf and mfe folding treat dangling ends differently, use -d2 (or -d) in addition to -p to ensure that both algorithms use the same energy model. The -d2 options is available for RNAfold, RNAeval, and RNAinverse only.", "prompt": "How to treat dangling end energies for bases adjacent to helices in free ends and multiloops (-d)", "name": "dangling", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In the calculation of the pf use scale*mfe as an estimate for the ensemble free energy (used to avoid overflows). The default is 1.07, usefull values are 1.0 to 1.2. Occasionally needed for long sequences. You can also recompile the programm to use double precision (see the README file).", "prompt": "Use scale*mfe as an estimate for the free energy (-S)", "name": "scale", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -S \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -S $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Produce structures without lonely pairs (helices of length 1).  For  partition  function  folding  this  only disallows pairs that can only occur isolated. Other pairs may still occasionally occur as helices  of  length 1.", "prompt": "Avoid lonely pairs (helices of length 1) (-noLP)", "name": "noLP", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noLP\" )[ value ]", "perl": "($value)? \" -noLP\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs (-noGU)", "name": "noGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noGU\" )[ value ]", "perl": "($value)? \" -noGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not allow GU pairs at the end of helices (-noCloseGU)", "name": "noCloseGU", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noCloseGU\" )[ value ]", "perl": "($value)? \" -noCloseGU\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Allow other pairs in addition to the usual AU,GC,and GU pairs. pairs is a comma seperated list of additionally allowed pairs. If a the first character is a '-' then AB will imply that AB and BA are allowed pairs. e.g. RNAfold -nsp -GA will allow GA and AG pairs. Nonstandard pairs are given 0 stacking energy.", "prompt": "Non standard pairs (comma seperated list) (-nsp)", "name": "nsp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -nsp \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -nsp $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Read energy parameters from paramfile, instead of using the default parameter set. A sample parameterfile should accompany your distribution. See the RNAlib documentation for details on the file format.", "prompt": "Energy parameter file (-P)", "name": "parameter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -P $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "EnergyParameterFile", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.8.4", "references": [{"url": null, "doi": null, "label": "I.L. Hofacker, W. Fontana, P.F. Stadler, S. Bonhoeffer, M. Tacker, P. Schuster (1994) Fast Folding and Comparison of RNA Secondary Structures. Monatshefte f. Chemie 125: 167-188"}, {"url": null, "doi": null, "label": "S.H.Bernhart, Ch. Flamm, P.F. Stadler, I.L. Hofacker Partition Function and Base Pairing Probabilities of RNA Heterodimers Algorithms Mol. Biol. (2006)"}, {"url": null, "doi": null, "label": "D.H. Mathews, J. Sabina, M. Zuker and H. Turner \"Expanded Sequence Dependence of Thermodynamic Parameters Provides Robust Prediction of RNA Secondary Structure\" JMB, 288, pp 911-940, 1999"}], "source_links": [], "env": [], "authors": "Ivo L Hofacker, Peter F Stadler, Stephan Bernhart", "command": {"path": null, "value": "RNAup"}, "documentation_links": ["http://bioweb2.pasteur.fr/gensoft/sequence/nucleic/2D_structure.html#ViennaRNa"], "type": "program", "name": "rnaup"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac2f"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:composition"}], "description": "Statistical Analysis of Protein Sequences", "title": "SAPS", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Summary table output", "name": "tablefile", "simple": null, "filenames": {"python": "\"*.table\"", "perl": "\"*.table\""}, "precond": {"python": "table", "perl": "$table"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Protein sequence(s) File", "name": "seq", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control options", "name": "control", "children": [{"comment": null, "prompt": "Use this specie for quantile comparisons (-s)", "name": "specie", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -s \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -s $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default, SAPS treats only lysine (K) and arginine (R) as positively charged residues. If the command line flag -H is set, then histidine (H) is also treated as positively charged in all parts of the program involving the charge alphabet.", "prompt": "Count H as positive charge (-H)", "name": "H_positive", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -H\")[ value ]", "perl": "($value)? \" -H\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Clusters of particular amino acid types may be evaluated by means of the same tests that are used to detect clustering of charged residues (binomial model and scoring statistics). These tests are invoked by setting this flag; for example, to test (separately) for clusters of alanine (A) and serine (S), set this parameter to AS. The binomial test is also programmed for certain combinations of amino acids: AG (flag -a a), PEST (flag -a p), QP (flag -a q), ST (flag -a s).", "prompt": "Analyze spacings of amino acids X, Y, .... (-a)", "name": "analyze", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -a \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -a $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output", "children": [{"comment": "The output will come with documentation that annotates each part of the program; this flag should be set when SAPS is used for the first time as it provides helpful explanations with respect to the statistics being used and the layout of the output.", "prompt": "Generate documented output (-d)", "name": "documented", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -d\")[ value ]", "perl": "($value)? \" -d\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This flag specifies terse output that is limited to the analysis of the charge distribution and of high scoring segments.", "prompt": "Generate terse output (-t)", "name": "terse", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -t\")[ value ]", "perl": "($value)? \" -t\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Generate verbose output (-v)", "name": "verbose", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -v\")[ value ]", "perl": "($value)? \" -v\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This flag is used in conjunction with the analysis of sets of proteins ; if specified, the file saps.table is appended with computer-readable lines describing the input files and their significant features.", "prompt": "Append computer-readable table summary output (-T)", "name": "table", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -T\")[ value ]", "perl": "($value)? \" -T\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [{"url": null, "doi": null, "label": "Brendel, V., Bucher, P., Nourbakhsh, I., Blaisdell, B.E., Karlin, S. (1992) Methods and algorithms for statistical analysis of protein sequences. Proc. Natl. Acad. Sci. USA 89: 2002-2006."}], "source_links": [], "env": [], "authors": "V. Brendel", "command": {"path": null, "value": "saps"}, "documentation_links": [], "type": "program", "name": "saps"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac30"}, "classifications": [{"type": "mobyle1", "classification": "protein:data:processing"}], "description": "Statistical merge of SAXS curves", "title": "saxs_merge", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": {"python": "outlevel == \"sparse\"", "perl": "outlevel eq \"sparse\""}, "prompt": "Output", "name": "sparse_output", "children": [{"comment": null, "prompt": "Report", "name": "sparse_summary", "simple": null, "filenames": {"python": "\"summary.txt\"", "perl": "\"summary.txt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": "selection de donn\u00e9es d'entr\u00e9es 3 cols q i err", "prompt": "Merged data", "name": "sparse_merge", "simple": null, "filenames": {"python": "\"data_merged.dat\"", "perl": "\"data_merged.dat\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SAXSMerge", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": "interpolation 3 cols q i err", "prompt": "Interpolation", "name": "sparse_mean", "simple": null, "filenames": {"python": "\"mean_merged.dat\"", "perl": "\"mean_merged.dat\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SAXSIntepolation", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, {"comment": null, "precond": {"python": "outlevel == \"normal\"", "perl": "outlevel eq \"normal\""}, "prompt": "Output", "name": "normal_output", "children": [{"comment": null, "prompt": "Report", "name": "normal_summary", "simple": null, "filenames": {"python": "\"summary.txt\"", "perl": "\"summary.txt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": "selection de donn\u00e9es d'entr\u00e9es q i err eorigin eoriname eextrapol", "prompt": "Merged data", "name": "normal_merge", "simple": null, "filenames": {"python": "\"data_merged.dat\"", "perl": "\"data_merged.dat\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SAXSMerge", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": "interpolation q i err eorigin eoriname eextrapol", "prompt": "Interpolation", "name": "normal_mean", "simple": null, "filenames": {"python": "\"mean_merged.dat\"", "perl": "\"mean_merged.dat\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SAXSIntepolation", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, {"comment": null, "precond": {"python": "outlevel == \"full\"", "perl": "outlevel eq \"full\""}, "prompt": "Output", "name": "full_output", "children": [{"comment": null, "prompt": "Report", "name": "full_summary", "simple": null, "filenames": {"python": "\"summary.txt\"", "perl": "\"summary.txt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": "q i err eorigin eoriname eextrapol", "prompt": "Merged data", "name": "full_merge", "simple": null, "filenames": {"python": "\"data_merged.dat\"", "perl": "\"data_merged.dat\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SAXSMerge", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": "q i err eorigin eoriname eextrapol", "prompt": "Interpolation", "name": "full_mean", "simple": null, "filenames": {"python": "\"mean_merged.dat\"", "perl": "\"mean_merged.dat\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SAXSIntepolation", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, {"comment": null, "precond": {"python": "allfiles", "perl": "allfiles"}, "prompt": "Output", "name": "all_files_output", "children": [{"comment": null, "prompt": "Merged data", "name": "all_file_data", "simple": null, "filenames": {"python": "\"data_*\"", "perl": "\"data_*\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SAXSMerge", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Interpolation", "name": "all_files_mean", "simple": null, "filenames": {"python": "\"mean_*\"", "perl": "\"mean_*\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SAXSIntepolation", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Required parameters", "name": "required", "children": [{"comment": null, "prompt": "stop after the given step", "name": "stop", "ctrl": null, "simple": null, "argpos": "200", "format": {"python": "( \"\" , \" --stop=\"+value )[value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef)? \" --stop=$value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Cleanup step comes after rescaling step (default is False)", "name": "postpone_cleanup", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --postpone_cleanup \")[ value ]", "perl": "( $value)? \" --postpone_cleanup \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "SAXS curves", "name": "SAXS_1", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" %s=%d \"%(value , nb_expe_1))[value is not None]", "perl": "(defined value)? \"$value=$nb_expe_1\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Intensity", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "number of recordings", "name": "nb_expe_1", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "11", "format": null, "command": false, "precond": {"python": "SAXS_1 is not None", "perl": "defined SAXS_1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "SAXS curves", "name": "SAXS_2", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "( \"\" , \" %s=%d \"%(value , nb_expe_2))[value is not None]", "perl": "(defined value)? \"$value=$nb_expe_2\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Intensity", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "number of recordings", "name": "nb_expe_2", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "21", "format": null, "command": false, "precond": {"python": "SAXS_2 is not None", "perl": "defined SAXS_2"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "SAXS curves", "name": "SAXS_3", "ctrl": null, "simple": null, "argpos": "30", "format": {"python": "( \"\" , \" %s=%d \"%(value , nb_expe_3))[value is not None]", "perl": "(defined value)? \"$value=$nb_expe_3\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Intensity", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "number of recordings", "name": "nb_expe_3", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "31", "format": null, "command": false, "precond": {"python": "SAXS_3 is not None", "perl": "defined SAXS_3"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "SAXS curves", "name": "SAXS_4", "ctrl": null, "simple": null, "argpos": "40", "format": {"python": "( \"\" , \" %s=%d \"%(value , nb_expe_4))[value is not None]", "perl": "(defined value)? \"$value=$nb_expe_4\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Intensity", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "number of recordings", "name": "nb_expe_4", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "41", "format": null, "command": false, "precond": {"python": "SAXS_4 is not None", "perl": "defined SAXS_4"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "SAXS curves", "name": "SAXS_5", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "( \"\" , \" %s=%d \"%(value , nb_expe_5))[value is not None]", "perl": "(defined value)? \"$value=$nb_expe_5\"\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Intensity", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "number of recordings", "name": "nb_expe_5", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "51", "format": null, "command": false, "precond": {"python": "SAXS_5 is not None", "perl": "defined SAXS_5"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "SAXS curves", "name": "SAXS_6", "ctrl": null, "simple": null, "argpos": "60", "format": {"python": "( \"\" , \" %s=%d \"%(value , nb_expe_6))[value is not None]", "perl": "(defined value)? \"$value=$nb_expe_6\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Intensity", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "number of recordings", "name": "nb_expe_6", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "61", "format": null, "command": false, "precond": {"python": "SAXS_6 is not None", "perl": "defined SAXS_6"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "SAXS curves", "name": "SAXS_7", "ctrl": null, "simple": null, "argpos": "70", "format": {"python": "( \"\" , \" %s=%d \"%(value , nb_expe_7))[value is not None]", "perl": "(defined value)? \"$value=$nb_expe_7\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Intensity", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "number of recordings", "name": "nb_expe_7", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "71", "format": null, "command": false, "precond": {"python": "SAXS_7 is not None", "perl": "defined SAXS_7"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "SAXS curves", "name": "SAXS_8", "ctrl": null, "simple": null, "argpos": "80", "format": {"python": "( \"\" , \" %s=%d \"%(value , nb_expe_8))[value is not None]", "perl": "(defined value)? \"$value=$nb_expe_8\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Intensity", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "number of recordings", "name": "nb_expe_8", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "81", "format": null, "command": false, "precond": {"python": "SAXS_8 is not None", "perl": "defined SAXS_8"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "SAXS curves", "name": "SAXS_9", "ctrl": null, "simple": null, "argpos": "90", "format": {"python": "( \"\" , \" %s=%d \"%(value , nb_expe_9))[value is not None]", "perl": "(defined value)? \"$value=$nb_expe_9\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Intensity", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "number of recordings", "name": "nb_expe_9", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "91", "format": null, "command": false, "precond": {"python": "SAXS_9 is not None", "perl": "defined SAXS_9"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "SAXS curves", "name": "SAXS_10", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "( \"\" , \" %s=%d \"%(value , nb_expe_10))[value is not None]", "perl": "(defined value)? \"$value=$nb_expe_10\"\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Intensity", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "number of recordings", "name": "nb_expe_10", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": "101", "format": null, "command": false, "precond": {"python": "SAXS_10 is not None", "perl": "defined SAXS_10"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced parameters", "name": "advanced", "children": [{"comment": null, "precond": null, "prompt": "General", "name": "advanced_general", "children": [{"comment": null, "prompt": "First line of output files is a header", "name": "general_header", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --header \")[ value ]", "perl": "($value)? \" --header \"\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output data files for parsed input files as well.", "name": "allfiles", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --allfiles \")[ value ]", "perl": "($value)? \" --allfiles \"\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:ul><html:li>'sparse' is for q,I,err columns</html:li><html:li>'normal' adds eorigin, eoriname and eextrapol (default)</html:li><html:li>'full' outputs all flag</html:li></html:ul></html:div>", "prompt": "Set the output level", "name": "outlevel", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --outlevel=\"+value)[ value is not None and value != vdef]", "perl": "(defined $value and $value neq $vdef) \" --outlevel=$value\"\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Discard or keep SAXS curves' points based on their SNR.\n                     Points with an error of zero are discarded as well", "precond": null, "prompt": "Cleanup (Step 1)", "name": "advanced_cleanup", "children": [{"comment": null, "prompt": "type I error (default 1e-7)", "name": "aalpha", "ctrl": {"python": "value>= 0 and value <=1", "perl": "$value>= 0 && $value <=1"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --aalpha=\"+str(value))[ value is not None and value != vdef]", "perl": "(defined $value and value != $vdef )\" --aalpha=$value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Estimate the mean function and the noise level of each SAXS curve.", "precond": null, "prompt": "Fitting (Step 2)", "name": "advanced_fitting", "children": [{"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\">Which mean parameters are optimized.<html:ul><html:li>One of Flat (the offset parameter A is optimized)</html:li><html:li>Simple (default, optimizes A, G and Rg)</html:li><html:li>Generalized (optimizes G, Rg and d)</html:li><html:li>Full (optimizes G, Rg, d and s)</html:li></html:ul></html:div>", "prompt": "boptimize", "name": "boptimize", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" --boptimize=\"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and value neq $vdef)? \" --boptimize=$value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Perform model comparison, which allows to choose a\n                         mean function that does not overfit the data. If\n                         bcomp is given, boptimize is taken to be the most\n                         complex model. (Default: don't perform it.)", "prompt": "Perform model comparison", "name": "bcomp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --bcomp \")[ value is not None and value != vdef ]", "perl": "(defined $value)? \" --bcomp \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Compute error bars on all parameters even in case where model comparison was disabled.", "name": "berror", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --berror \")[ value ]", "perl": "(defined $value)? \" --berror \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "blimit_fitting", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" --blimit_fitting=%d \"%(value)", "perl": "\" --blimit_fitting=$value \""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "blimit_hessian", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" --blimit_hessian=80 \"", "perl": "\" --blimit_hessian=80 \""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Find the most probable scaling factor of all curves wrt the first curve.", "precond": null, "prompt": "Rescaling (Step 3)", "name": "advanced_rescaling", "children": [{"comment": null, "prompt": "Which rescaling model to use to calculate gamma.", "name": "cmodel", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --cmodel=$value \")[value]", "perl": "(value?) \" --cmodel=$value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Classify the mean curves by comparing them using a two-sided two-sample student t test", "precond": null, "prompt": "Classification (Step 4)", "name": "advanced_classification", "children": [{"comment": null, "prompt": "type I error (default 0.05)", "name": "dalpha", "ctrl": {"python": "value>= 0 and value <=1", "perl": "$value>= 0 && $value <=1"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --dalpha=\"+str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) \" --dalpha=$value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Find the most probable scaling factor of all curves wrt the first", "precond": null, "prompt": "Merging (Step 5)", "name": "advanced_merging", "children": [{"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\">Which mean parameters are optimized.<html:ul><html:li>One of Flat (the offset parameter A is optimized)</html:li><html:li>Simple (optimizes A, G and Rg)</html:li><html:li>Generalized (default, optimizes G, Rg and d)</html:li><html:li>Full (optimizes G, Rg, d and s)</html:li></html:ul></html:div>", "prompt": "eoptimize", "name": "eoptimize", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" --eoptimize=\"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and value neq $vdef)? \" --eoptimize=$value \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Perform model comparison, which allows to choose a\n                         mean function that does not overfit the data. If\n                         ecomp is given, eoptimize is taken to be the most\n                         complex model. (Default: don't perform it.)", "prompt": "Perform model comparison", "name": "ecomp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --ecomp \")[ value is not None and value != vdef ]", "perl": "(defined $value)? \" --ecomp \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Compute error bars on all parameters even in case where model comparison was disabled.", "name": "eerror", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --eerror \")[ value ]", "perl": "(defined $value)? \" --eerror \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "elimit_fitting", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" --elimit_fitting=%d \"%(value)", "perl": "\" --elimit_fitting=$value \""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "elimit_hessian", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" --elimit_hessian=80 \"", "perl": "\" --elimit_hessian=80 \""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Don't extrapolate at all, even at low angle.", "name": "enoextrapolate", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --enoextrapolate \")[value]", "perl": "(value?) \" --enoextrapolate \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Expert parameters", "name": "expert", "children": [{"comment": null, "precond": null, "prompt": "General", "name": "advanced_general", "children": [{"comment": null, "prompt": "Skip next option and use q values of the first datafile instead.", "name": "use_npoints", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of points to output for the mean function.", "name": "npoints", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \" --npoints=-1 \" , \" --npoints=\"+str(value) )[use_npoints and value > 0]", "perl": "($use_npoints and $value > 0)? \" --npoints=$value \": \" --npoints=-1 \""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "lower bound for lambda parameter in steps 2 and 5", "name": "lambdamin", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --lambdamin=\"+str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Discard or keep SAXS curves' points based on their SNR.\n                     Points with an error of zero are discarded as well", "precond": null, "prompt": "Cleanup (Step 1)", "name": "expert_cleanup", "children": [{"comment": null, "prompt": "when a value after CUT is discarded, the rest of the curve is discarded as well (default is 0.1)", "name": "acutof", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --acutoff=\"+str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" --acutoff=$value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Estimate the mean function and the noise level of each SAXS curve.", "precond": null, "prompt": "Fitting (Step 2)", "name": "expert_fitting", "children": [{"comment": null, "prompt": "Average over all possible parameters instead of just\n                        taking the most probable set of parameters.", "name": "baverage", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --baverage \")[ value is not None and value!= vdef ]", "perl": "(defined $value and $value != $vdef)? \" --baverage \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Initial value for d", "name": "bd", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\", \" --bd=\"+str(value))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef)? \" --bd=$value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Initial value for s", "name": "bs", "ctrl": {"python": "value >= 0", "perl": "$value >= 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\", \" --bs=\"+str(value))[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef)? \" --bs=$value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Find the most probable scaling factor of all curves wrt the first", "precond": null, "prompt": "Rescaling (Step 3)", "name": "expert_rescaling", "children": [{"comment": null, "prompt": "Define which input curve the other curves will be recaled to.", "name": "creference", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --creference=\"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != vdef) \" --creference=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of points to use to compute gamma (default 200)", "name": "cnpoints", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\", \" --cnpoints=\"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != vdef)? \" --cnpoints=$value \":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Collect compatible data and produce best estimate of mean function.", "precond": null, "prompt": "Merging (Step 5)", "name": "expert_merging", "children": [{"comment": null, "prompt": "Average over all possible parameters instead of just\n                        taking the most probable set of parameters.", "name": "eaverage", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --eaverage \")[ value is not None and value!= vdef ]", "perl": "(defined $value and $value != $vdef)? \" --eaverage \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Example: if NUM=50 and the highest acceptable data\n                           point is at q=0.3, the mean will be estimated up to q=0.45.\n                           Default is 0 (just extrapolate at low angle).", "prompt": "Extrapolate NUM percent outside of the curve's bounds.", "name": "eextrapolate", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\", \" --eextrapolate=\"+str(value))[value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" --eextrapolate=$value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": "Yannick G. Spill, Seung Joong Kim, Dina Schneidman-Duhovny, Daniel\nRussel, Ben Webb, Andrej Sali and Michael Nilges", "command": {"path": null, "value": "saxs_merge.py"}, "documentation_links": [], "type": "program", "name": "saxs_merge"}, {"comment": "Scan_for_matches is a utility to search for patterns in DNA and protein sequences.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac31"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:pattern"}, {"type": "mobyle1", "classification": "sequence:nucleic:pattern"}], "description": "Scan Nucleotide or Protein Sequences for Matching Patterns", "title": "scan_for_matches", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "outfile", "simple": null, "filenames": {"python": "str(outfile_name)", "perl": "outfile_name"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Input sequence", "name": "sequence", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\" < \" + str(value)", "perl": "\" < $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Some examples of pattern:- Simple Patterns Built by Matching Ranges and Reverse Complements:p1=4...7 3...8 ~p1 (three \"pattern units\" with: 4...7 which \"match 4 to 7 characters and call them p1\", 3...8 which \"match 3 to 8 characters\" and  ~pi \"match the reverse complement of p1\" )- Defining Pairing Rules and Allowing Mismatches, Insertions, and Deletionsr1={au,ua,gc,cg,gu,ug,ga,ag}p1=2...3 0...4 p2=2...5 1...5 r1~p2 0...4 ~p1 (p1=2...3     match 2 or 3 characters (call it p1), 0...4        match 0 to 4 characters, p2=2...5     match 2 to 5 characters (call it p2), 1...5        match 1 to 5 characters, r1~p2        match the reverse complement of p2 using rule r1, allowing G-A and A-G pairs, 0...4        match 0 to 4 characters, ~p1          match the reverse complement of p1 allowing only G-C, C-G, A-T, and T-A pairs)- Mismatches and bulgesp1=10...10 3...8 ~p1[1,2,1] (the third pattern unit must match 10 characters, allowing one \"mismatch\" (a pairing other than G-C, C-G, A-T, or T-A))-Searching for repeats:p1=6...6 3...8 p1   (find exact 6 character repeat separated by to 8 characters)p1=6...6 3..8 p1[1,0,0]   (allow one mismatch)p1=3...3 p1[1,0,0] p1[1,0,0] p1[1,0,0] (match 12 characters that are the remains of a 3-character sequence occurring 4 times)p1=4...8 0...3 p2=6...8 p1 0...3 p2 (This would match things like ATCT G TCTTT ATCT TG TCTTT)-Searching for particular sequences:p1=6...8 GAGA ~p1    (match a hairpin with GAGA as the loop)RRRRYYYY             (match 4 purines followed by 4 pyrimidines)TATAA[1,0,0]         (match TATAA, allowing 1 mismatch)", "prompt": "Pattern file", "name": "pat_file", "ctrl": null, "simple": null, "argpos": "99", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "ScanPattern", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control options", "name": "control_options", "children": [{"comment": null, "prompt": "Search complementary strand (-c)", "name": "complementary_strand", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -c\" )[ value ]", "perl": "($value) ? \" -c\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Protein sequence? (-p)", "name": "protein", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -p\" )[ value ]", "perl": "($value) ? \" -p\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Outfile name", "name": "outfile_name", "ctrl": null, "simple": null, "argpos": "101", "format": {"python": "\" > \" + str(value)", "perl": "\" > $value\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": ["ftp://ftp.mcs.anl.gov/pub/Genomics/PatScan/"], "env": [], "authors": null, "command": {"path": null, "value": "scan_for_matches"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/scan_for_matches/scan_for_matches.txt"], "type": "program", "name": "scan_for_matches"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac32"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:regulation"}], "description": "Genomewide identification of cisregulatory motifs and modules", "title": "scangen", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": {"python": "model == '--motgen'", "perl": "$model == '--motgen'"}, "prompt": "Modgen options", "name": "motgen", "children": [{"comment": null, "prompt": "Distinfo output file", "name": "distinfo", "simple": null, "filenames": {"python": "\"finalMotifs.dat\"", "perl": "\"finalMotifs.dat\""}, "precond": {"python": "model == '--motgen'", "perl": "$model == '--motgen'"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ScangenMotifDefinition", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph output", "name": "GraphOutput0", "simple": null, "filenames": {"python": "\"mat-auto-0*\"", "perl": "\"mat-auto-0*\""}, "precond": {"python": "model == '--motgen'", "perl": "$model == '--motgen'"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "graph_format"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph output", "name": "GraphOutput1", "simple": null, "filenames": {"python": "\"mat-auto-1*\"", "perl": "\"mat-auto-1*\""}, "precond": {"python": "model == '--motgen'", "perl": "$model == '--motgen'"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, {"comment": null, "precond": {"python": "model == ' '", "perl": "$model == ' '"}, "prompt": "Scangen options", "name": "scangen", "children": [{"comment": null, "prompt": "Scangen output file", "name": "scangenOutfile", "simple": null, "filenames": {"python": "\"hist*\"", "perl": "\"result*\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ScnagenReport", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Execution mode", "name": "model", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value !=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" $value \" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "General options", "name": "general", "children": [{"comment": null, "prompt": "Width of the motif", "name": "width", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -w \" + str( value ) )[value is not None]", "perl": "(defined $value) ? \" -w $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Threshold used for motif scanning", "name": "threeshold", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -t \" + str( value ) )[value is not None]", "perl": "(defined $value) ? \" -t $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Extent of the motif search within an alignment", "name": "extent", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -x \" + str( value ) )[value is not None]", "perl": "(defined $value) ? \" -x $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "model == '--motgen'", "perl": "$model == '--motgen'"}, "prompt": "Modgen options", "name": "motgen", "children": [{"comment": null, "prompt": "Evolutionary model used for motif generation", "name": "evolutionary", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -e \" + str(value) )[ value is not None and value !=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -e $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "list of sequence coordinates in the format:sequence_name chromosome_arm start_pos stop_pos", "prompt": "File of enhancer coordinates", "name": "coord_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --coord-file \" + str( value ) )[value is not None]", "perl": "(defined $value) ? \" --coord-file $value\" : \"\""}, "command": false, "precond": {"python": "align_file is None", "perl": "$align_file is not defined"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Coordinates", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Data filter", "name": "filter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" && gawk '$3<1000 {print $2,$0}' motmeldb.txt | sort -g | sed  -e 's,^.* ,,' > bestmotspval.dat  && distinfo -t 9.0 -w 10 bestmotspval.dat > finalMotifs.dat\"", "perl": "\" && gawk '$3<1000 {print $2,$0}' motmeldb.txt | sort -g | sed 's/^.* //' > bestmotspval.dat\" && distinfo -t 9.0 -w 10 bestmotspval.dat > finalMotifs.dat\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Filer to Graphic", "name": "filter2graph", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" && gawk '{print $8,$9,$10,$11}' finalMotifs.dat > matrices.txt\"", "perl": "\" && gawk '{print $8,$9,$10,$11}' finalMotifs.dat > matrices.txt"}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Graph output format", "name": "graph_format", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Graph output width motif", "name": "graph_word", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Graphic plot", "name": "graphic", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" && motpic-warg -w %s -f %s matrices.txt\" % (graph_word,graph_format)", "perl": "\" && motpic-warg -w %s -f %s  matrices.txt\" % (graph_word,graph_format)"}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "model == ' '", "perl": "$model == ' '"}, "prompt": "Scangen options", "name": "scangen", "children": [{"comment": null, "prompt": "Width of selected enhancers", "name": "scanwidth", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -s \" + str( value ) )[value is not None and value !=vdef]", "perl": "(defined $value) ? \" -s $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Step of scanned genome", "name": "scanstep", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --scanstep=\" + str( value ) )[value is not None and value !=vdef]", "perl": "(defined $value) ? \" --scanstep=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of motifs to consider", "name": "nbmots", "ctrl": {"python": "value >= 15"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -n \" + str( value ) )[value is not None and value !=vdef]", "perl": "(defined $value) ? \" -n $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "File containing a list of genes annotated with a relevant phenotype", "name": "phenotype", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -p", "perl": "\" -p"}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Phenotype", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "File containing a list of motif definitons", "name": "motifs", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -m \" + str( value ) )[value is not None]", "perl": "(defined $value) ? \" -m $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "ScangenMotifDefinition", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.0", "references": [{"url": null, "doi": null, "label": "Genomewide identification of cis regulatory motifs and modules underlying gene coregulation\n      using statistics and phylogeny, National Academy of Sciences of the United States of America. August 17, 2010 vol. 107 no. 33 14615-14620"}], "source_links": [], "env": [], "authors": "H Rouault, K Mazouni, L Couturier, V Hakim and V Schweisguth", "command": {"path": null, "value": "scangen"}, "documentation_links": [], "type": "program", "name": "scangen"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac33"}, "classifications": [{"type": "mobyle1", "classification": "genetics:detection"}], "description": "Scan genomic regions in a query-file against a DB-file which contains\n        chromosome locations for various genomics features", "title": "scan_region", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "output_file", "simple": null, "filenames": {"python": "\"scan_region.out\"", "perl": "\"scan_region.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Cnv", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "A file containing CNV calls, that could be generated by the\n                test operation of detect_cnv program.", "prompt": "CNV calls file (cnv)", "name": "cnvfile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \" $value \" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Cnv", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Reference genes for CNV calls generated using hg18 (Mar 2006, NCBI build 36) human genome assembly", "name": "reffile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \"", "perl": "(defined $value) ? \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "--refgene:  specify that the database file is in refGene format from UCSC genome\n               browser.--refcds:  specify that the database file is in refGene format from UCSC genome\n               browser, but user is only interested in the overlap of coding\n               region (first exon to last exon).--refexon:   specify that the database file is in refGene format from UCSC genome\n               browser, but user is only interested in the overlap of query\n               with exons.--knowngene:  specify that the database file is in knownGene format from UCSC\n               genome browser.", "prompt": "Flags specifying type of databases", "name": "reference", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None  and value !=vdef]", "perl": "(defined $value and $value ne $vdef) ? \" $value \" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Database-specific arguments", "name": "dbfile-specific", "children": [{"comment": "This argument is used in conjunction with the --refgene argument,\n         to specify that the alternative gene symbol in the\n               \"name2\" field in the refGene file be printed in the output.", "prompt": "Use name2 annotation in refGene file in output", "name": "name2", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" --name2  \" )[ value]", "perl": "($value) ? \"--name2  \" : \"\""}, "command": false, "precond": {"python": "reference == '--refgene'", "perl": "$reference eq '--refgene'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify a cross-reference file for the RefGene track in UCSC\n               genome browser, so that in the output, the gene identifier\n               (gene name or refseq id) are replaced by the gene symbol specified\n                in the link file. (If not found in the reflink file, the\n               gene identifiers are still used).", "prompt": "Specify a cross-reference file for the RefGene track in UCSC genome browser", "name": "reflink", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" --reflink", "perl": "($value) ? \"--reflink"}, "command": false, "precond": {"python": "reference != '--knowngene'", "perl": "$reference ne '--knowngene'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify a cross-reference file for the knownGene track in UCSC\n               genome browser, so that in the output, the gene identifier\n               (gene name or refseq id) are replaced by the gene symbol specified\n                in the kgxref file. (If not found in the kgxref file, the\n               gene identifiers are still used).", "prompt": "Specify a cross-reference file for the knownGene track in UCSC  genome browser", "name": "kgxref", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" --kgxref", "perl": "($value) ? \"--kgxref"}, "command": false, "precond": {"python": "reference == '--knowngene'", "perl": "$reference eq '--knowngene'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Criteria for defining query-db match", "name": "query-db-match", "children": [{"comment": "Condense overlapped regions in the query file into non-over-lapped\n         regions. When this argument is set, the annotation for\n               each query (the strings after the chromosome location in each\n               line of the query file) will not in the output.", "prompt": "Condense and eliminate overlapping regions in query", "name": "condense_query", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" --condense_query \" )[ value]", "perl": "($value) ? \"--condense_query \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify the score threshold in the database file to include in the\n               search for overlaps. This argument is file format dependent.", "prompt": "Score threshold for database in UCSC annotation file", "name": "score_threshold", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" --score_threshold \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \" --score_threshold $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify the normalized score threshold in the database file to\n               include in the search for overlaps. This argument is file format dependent.", "prompt": "Normalized score threshold for database in UCSC annotation file", "name": "normscore_threshold", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" --normscore_threshold \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \" --normscore_threshold $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Expansion of query to find match", "name": "expansion_query", "children": [{"comment": "Expand the query region on the left side (5 megabases in forward strand,\n               3 megabases in reverse strand) to find overlap (used in conjunction with\n               --refgene or --knowngene argument).", "prompt": "Expand left side of query regions (overwrite --expandmax)", "name": "expandleft", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" --expandleft \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \" --expandleft $value \" : \"\""}, "command": false, "precond": {"python": "(reference == '--knowngene' or reference == '--refgene') and (not expandmax)", "perl": "($reference eq '--knowngene' or $reference eq '--refgene') and (not $expandmax)"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Expand the query region on the right side (3 megabases in forward\n               strand, 5 megabases in reverse strand) to find overlap (used in conjunction\n                with --refgene or --knowngene argument).", "prompt": "Expand right side of query regions (overwrite --expandmax)", "name": "expandright", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" --expandright \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \" --expandright $value \" : \"\""}, "command": false, "precond": {"python": "(reference == '--knowngene' or reference == '--refgene') and (not expandmax)", "perl": "($reference eq '--knowngene' or $reference eq '--refgene') and (not $expandmax)"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum expansion size of the query region on both side to find\n               at least one overlap (used in junction with --refgene or\n               --knowngene argument). After query expansion, only the closet\n               gene will be printed; other genes, even if overlapping with the\n               query after expansion, will not be printed.", "prompt": "Size of maximum expansion for query region to find overlap", "name": "expandmax", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" --expandmax \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \" --expandmax $value \" : \"\""}, "command": false, "precond": {"python": "reference == '--knowngene' or reference == '--refgene'", "perl": "$reference eq '--knowngene' or $reference eq '--refgene'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Expand the chromosome region specified in the database-file to find\n               overlap with the query regions.", "prompt": "Expand definition of gene/cds/exon at both sides", "name": "expanddb", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" --expanddb \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \" --expanddb $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Input/output options", "name": "output_option", "children": [{"comment": "Instead of printing the query region, only print the overlapped\n               portion of the query region and template region.", "prompt": "Print overlapped portion of region only", "name": "overlap", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" --overlap \" )[ value]", "perl": "($value) ? \"--overlap \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Print the region in database file, rather than query file, when an\n               overlapped hit is found.", "prompt": "Print database region (default is to print query region)", "name": "dbregion", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" --dbregion \" )[ value]", "perl": "($value) ? \"--dbregion \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Append the score and normscore for the overlapped template\n               region to the output for database files downloaded as UCSC tables.", "prompt": "Append extra information from annotation file to output", "name": "append", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" --append \" )[ value]", "perl": "($value) ? \"--append \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Force to print query info when Print database region is used", "name": "queryinfo", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "( \"\" , \" --queryinfo \" )[ value]", "perl": "($value) ? \"--queryinfo \" : \"\""}, "command": false, "precond": {"python": "dbregion", "perl": "$dbregion"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "scan_region.pl"}, "documentation_links": [], "type": "program", "name": "scan_region"}, {"comment": "Seq-Gen is a program that will simulate the evolution of nucleotide or amino acid sequences along a phylogeny, using common models of the substitution process.", "homepage_links": ["http://tree.bio.ed.ac.uk/software/seqgen/"], "_id": {"$oid": "51434da593546d52388cac34"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:likelihood"}], "description": "Sequence-Generator", "title": "SeqGen", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output parameters", "name": "output", "children": [{"comment": null, "prompt": "Output alignment file", "name": "outfile", "simple": null, "filenames": {"python": "\"seqgen.out\"", "perl": "\"seqgen.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "test", "#children": ["PHYLIPI"], "@eq": "p", "@param": "output_format"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "seqgen", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"seq-gen\"", "perl": "\"seq-gen\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Input tree file", "name": "intree", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"< \" + str(value)", "perl": "\"< $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK", "NEXUS"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Input parameters", "name": "input", "children": [{"comment": "This option allows the user to set the length in nucleotides that each simulated sequence should be.", "prompt": "Sequence length (-l)", "name": "Length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -l \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -l $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option specifies how many separate datasets should be simulated for each tree in the tree file.", "prompt": "Number of simulated datasets per tree (-n)", "name": "datasets", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -n \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -n $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Number of partion specifies how many partitions of each data set should be simulated. each partition must have its own tree and number specifying how many sites are in partition. Multiple sets of trees are being inputed with varying numbers of partitions, then this should specify the maximum number of partitions that will be required", "prompt": "Number of partitions for each dataset (-p)", "name": "partition_numb", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -p \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -p $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option allows the user to set a value with which to scale the branch lengths in order to make them equal the expected number of substitutions per site for each branch. Basically Seq-Gen multiplies each branch length by this value.For example if you give an value of 0.5 then each branch length would be halved before using it to simulate the sequences.", "prompt": "Scale branch lengths  (number greater > 0) (-s)", "name": "scale_branch", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -s \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -s $value\":\"\""}, "command": false, "precond": {"python": "scale_tree is None", "perl": "not defined $scale_tree"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option allows the user to set a value which is the desired length of each tree in units of substitutions per site. The term 'tree length' here is the distance from the root to any one of the tips in units of mean number of substitutions per site. This option can only be used when the input trees are rooted and ultrametric (no difference in rate amongst the lineages). This has the effect of making all the trees in the input file of the same length before simulating data.The option multiplies each branch length by a value equal to SCALE divided by the actual length of the tree.", "prompt": "Total tree scale  (a decimal number greater > 0)  (-d)", "name": "scale_tree", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -d \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -d $value\":\"\""}, "command": false, "precond": {"python": "scale_branch != 1.0", "perl": "$scale_branch != 1.0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option allows the user to use a supplied sequence as the ancestral sequence at the root (otherwise a random sequence is used). The value is an integer number greater than zero which refers to one of the sequences supplied as input with the tree.Method: The user can supply a sequence alignment as input, as well as the trees. This should be in relaxed PHYLIP format. The trees can then be placed in this file at the end, after a line stating how many trees there are. The file may look like this:4 50Taxon1 ATCTTTGTAGTCATCGCCGTATTAGCATTCTTAGATCTAATaxon2 ATCCTAGTAGTCGCTTGCGCACTAGCCTTCCGAAATCTAGTaxon3 ACTTCTGTGTTTACTGAGCTACTAGCTTCCCTAAATCTAGTaxon4 ATTCCTATATTCGCTAATTTCTTAGCTTTCCTGAATCTGG1(((Taxon1:0.2,Taxon2:0.2):0.1,Taxon3:0.3):0.1,Taxon4:0.4);Note that the labels in the alignment do not have to match those in the tree (the ones in the tree will be used for output)   there doesn't even have to be the same number of taxa in the alignment as in the trees. The sequence length supplied by the alignment will be used to obtain the simulated sequence length (unless the  l option is set). The  k option also refers to one of the sequences to specify the ancestral sequence. (see Appendix A)", "prompt": "Ancestral Sequence number (-k)", "name": "input_seq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -k \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -k $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Substitution model options", "name": "substitution", "children": [{"comment": null, "prompt": "Model of  substitution (-m)", "name": "model", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\"  , \" -m \" + str(value) )[ value is not None ]", "perl": "(defined $value )? \" -m $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Using this option the user may specify a shape for the gamma rate heterogeneity. The default is no site-specific rate heterogeneity. Enter a decimal number.", "prompt": "Shape of the gamma distribution to use  with  gamma rate heterogeneity (-a)", "name": "shape", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\" , \" -a \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -a $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Using this option the user may specify the number of categories for the discrete gamma rate heterogeneity model. The default is no site-specific rate heterogeneity (or the continuous model if only the -a option is specified. Enter an integer number between 2 and 32", "prompt": "Number of categories  for  the  discrete gamma  rate  heterogeneity model (-g)", "name": "categories", "ctrl": {"python": "value >= 2 and value <= 32", "perl": "$value >= 2 and $value <= 32"}, "simple": null, "argpos": "1", "format": {"python": "(\"\" , \" -g \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -g $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify the proportion of sites that should be invariable. These sites will be chosen randomly with this expected frequency. The default is no invariable sites. Invariable sites are sites thar cannot change as opposed to sites which don't exhibit any changes due to chance (and perhaps a low rate). Enter a real number between 0.0 and  1.0", "prompt": "Proportion of sites that should be invariable (-i)", "name": "invar_site", "ctrl": {"python": "value >= 0.0 and value <= 1.0", "perl": "$value >= 0.0 and $value <= 1.0"}, "simple": null, "argpos": "1", "format": {"python": "(\"\" , \" -i \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -i $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Nucleotid model specific options", "name": "nucleotide_opt", "children": [{"comment": "Using this option the user may specify the relative rates for each codon position. This allows codon-specific rate heterogeneity to be simulated. The default is no site-specific rate heterogeneity.You can only have codon rates when using nucleotide models of substitution.", "precond": null, "prompt": "Rates for codon position heterogeneity (-c)", "name": "rate", "children": [{"comment": "Enter a decimal numberYou can only have codon rates when using nucleotide models of substitution.", "prompt": "First position", "name": "rate1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enter a decimal number", "prompt": "Second position", "name": "rate2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enter a decimal number", "prompt": "Third position (enter a decimal number)", "name": "rate3", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Rates", "name": "rateAll", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -c %f %f %f \" %(rate1,rate2,rate3)", "perl": "\" -c $rate1 $rate2 $rate3\""}, "command": false, "precond": {"python": "rate1 is not None and rate2 is not None and rate3 is not None", "perl": "defined $rate1  and defined $rate2 and defined $rate3"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "This option allows the user to set a value for the transition transversion ratio (TS/TV). This is only valid when either the HKY or F84 model has been selected.", "prompt": "Transition transversion ratio (TS/TV) for HKY or F84 model (-t)", "name": "transratio", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -t \" + str(value))[ value is not None ]", "perl": "(defined $value)? \" -t $value\":\"\""}, "command": false, "precond": {"python": "model =='HKY' or model == 'F84'", "perl": "$model eq 'HKY' or $model eq 'F84'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option allows the user to set 6 values for the general reversable model's rate matrix. This is only valid when either the REV model has been selected.The values are six decimal numbers for the rates of transition from A to C, A to G, A to T, C to G, C to T and G to T respectively, separated by spaces or commas. The matrix is symmetrical so the reverse transitions equal the ones set (e.g. C to A equals A to C) and therefore only six values need be set. These values will be scaled such that the last value (G to T) is 1.0 and the others are set relative to this.", "prompt": "6 values  for  the general reversable model's rate matrix (ACTG x ACTG)  separated by one space (-r)", "name": "matrix", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\" , \" -r \" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -r $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option is used to specify the relative frequencies of the four nucleotides. By default, Seq-Gen will assume these to be equal. If the given values don't sum to 1.0 then they will be scaled so that they do.You must give the frequencies for the 4 nucleotides", "precond": null, "prompt": "Relative frequencies of nucleotides (-f)", "name": "frequencies", "children": [{"comment": null, "prompt": "Frequencies of the A nucleotide", "name": "freqA", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Frequencies of the C nucleotide", "name": "freqC", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Frequencies of the G nucleotide", "name": "freqG", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Frequencies of the T nucleotide", "name": "freqT", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Frequencies", "name": "freqAll", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -f \" + str(freqA) + \",\" + str(freqC) + \",\" + str(freqG) + \",\" + str(freqT)", "perl": "\" -f $freqA,$freqC,$freqG,$freqT\""}, "command": false, "precond": {"python": "freqA is not None and freqC is not None and freqG is not None and freqT is not None", "perl": "defined $freqA and defined $freqC and defined $freqG and defined $freqT"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Miscellaneous options", "name": "miscellaneous_opt", "children": [{"comment": "This option allows to specify a seed for the random number generator. Using the same seed (with the same input) will result in identical simulated datasets. This is useful because you can recreate a set of simulations, you must use exactly the same model options", "prompt": "Random number seed (-z)", "name": "random_seed", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \"-z \" + str(value))[ value is not None ]", "perl": "(defined $value)? \"-z $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output parameters", "name": "output", "children": [{"comment": null, "prompt": "Output file format (-o)", "name": "output_format", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -o\" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -o$value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Non verbose output (-q)", "name": "quiet", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\" , \" -q\")[ value ]", "perl": "($value)? \" -q\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option allows to obtain the sequences for each of the internal nodes in the tree. The sequences are written out along with the sequences for the tips of the tree in relaxed PHYLIP format.", "prompt": "Write the ancestral sequences (-wa)", "name": "write_ancest", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -wa\")[ value ]", "perl": "($value)? \" -wa\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option allows to obtain the relative\n\t      rate of substitution for each sites as used in each\n\t      simulation. This will go to stderr and will be produced\n\t      for each replicate simulation.", "prompt": "Write the sites rates (-wr)", "name": "write_sites", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -wr\")[ value ]", "perl": "($value)? \" -wr\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.3.2", "references": [{"url": null, "doi": null, "label": "Rambaut, A. and Grassly, N. C. (1996) Seq-Gen: An application for the Monte Carlo simulation of DNA sequence evolution along phylogenetic trees. Comput. Appl. Biosci."}], "source_links": ["http://tree.bio.ed.ac.uk/download.html?name=seqgen&version=v1.3.2&id=41&num=1"], "env": [], "authors": "A. Rambaut, N. C. Grassly", "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/seq-gen/index.html"], "type": "program", "name": "seqgen"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac35"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise:local"}], "description": "All-against-all word comparison of a sequence set", "title": "seqmatchall", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['FASTA', 'MSF']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out2 option", "name": "e_outfile_out2", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['PAIR', 'MARKX0', 'MARKX1', 'MARKX2', 'MARKX3', 'MARKX10', 'SRS', 'SRSPAIR', 'SCORE', 'UNKNOWN', 'MULTIPLE', 'SIMPLE', 'MATCH']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "2,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Word size (value greater than or equal to 2)", "name": "e_wordsize", "ctrl": {"python": "value >= 2"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -wordsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output alignment file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the alignment output format", "name": "e_aformat_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -aformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "seqmatchall"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/seqmatchall.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "seqmatchall"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac36"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Reads and writes (returns) many sets of sequences", "title": "seqretsetall", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "Use feature information", "name": "e_feature", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -feature\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "2,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "seqretsetall"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/seqretsetall.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "seqretsetall"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac37"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Reads sequences and writes them to individual files", "title": "seqretsplit", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "\"*.\" + str( e_osformat_outseq).lower()"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "Use feature information", "name": "e_feature", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -feature\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Read one sequence and stop", "name": "e_firstonly", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -firstonly\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "seqretsplit"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/seqretsplit.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "seqretsplit"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac38"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Reads and writes (returns) sequences", "title": "seqret", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "Use feature information", "name": "e_feature", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -feature\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Read one sequence and stop", "name": "e_firstonly", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -firstonly\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "seqret"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/seqret.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "seqret"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac39"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple:display"}], "description": "Display a multiple sequence alignment in pretty format", "title": "showalign", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ShowalignReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "The sequence alignment to be displayed.", "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA", "MSF", "PAIR", "MARKX0", "MARKX1", "MARKX2", "MARKX3", "MARKX10", "SRS", "SRSPAIR", "SCORE", "UNKNOWN", "MULTIPLE", "SIMPLE", "MATCH"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "This is the scoring matrix file used when comparing sequences. By default it is the file 'EBLOSUM62' (for proteins) or  the file 'EDNAFULL' (for nucleic sequences). These files are  found in the 'data' directory of the EMBOSS installation.", "prompt": "Similarity scoring matrix file", "name": "e_matrix", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -matrix=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "If you give the number in the alignment or the name of a sequence, it will be taken to be the reference sequence. The  reference sequence is always shown in full and is the one against  which all the other sequences are compared. If this is set to 0  then the consensus sequence will be used as the reference  sequence. By default the consensus sequence is used as the  reference sequence.", "prompt": "The number or the name of the reference sequence", "name": "e_refseq", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -refseq=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is true then the reference sequence is displayed at the bottom of the alignment instead of the top.", "prompt": "Display the reference sequence at the bottom", "name": "e_bottom", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -nobottom\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "What to show", "name": "e_show", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -show=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output order of the sequences", "name": "e_order", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -order=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set True, then when -show is set to 'Similarities' or 'Non-identities' and a residue is similar but  not identical to the reference sequence residue, it will be  changed to lower-case. If -show is set to 'All' then  non-identical, non-similar residues will be changed to lower-case.  If this is False then no change to the case of the residues is  made on the basis of their similarity to the reference sequence.", "prompt": "Show similar residues in lower-case", "name": "e_similarcase", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\" -nosimilarcase\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is true then the consensus line is displayed.", "prompt": "Display the consensus line", "name": "e_consensus", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\" -noconsensus\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "Regions to put in uppercase. \n If this is left blank, then the sequence case is left alone. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are separated by any non-digit, non-alpha character. \n  Examples of region specifications are: \n  24-45, 56-78 \n  1:45, 67=99;765..888 \n  1,5,8,10,23,45,57,99", "prompt": "Regions to put in uppercase (eg: 4-57,78-94)", "name": "e_uppercase", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -uppercase=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this option is true then a line giving the positions in the alignment is displayed every 10 characters above the  alignment.", "prompt": "Number the sequences", "name": "e_number", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\" -nonumber\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this option is true then a ruler line marking every 5th and 10th character in the alignment is displayed.", "prompt": "Display ruler", "name": "e_ruler", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\" -noruler\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Width of sequence to display (value greater than or equal to 1)", "name": "e_width", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -width=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This sets the length of the left-hand margin for sequence names. If the margin is set at 0 then no margin and no names are  displayed. If the margin is set to a value that is less than the  length of a sequence name then the sequence name is displayed  truncated to the length of the margin. If the margin is set to -1  then the minimum margin width that will allow all the sequence  names to be displayed in full plus a space at the end of the name  will automatically be selected.", "prompt": "Length of margin for sequence names (value greater than or equal to -1)", "name": "e_margin", "ctrl": {"python": "value >= -1"}, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -margin=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use html formatting", "name": "e_html", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -html\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Regions to colour if formatting for HTML. \n If this is left blank, then the sequence is left alone. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are followed by any valid HTML font colour. \n  Examples of region specifications are: \n  24-45 blue 56-78 orange \n  1-100 green 120-156 red \n  A file of ranges to colour (one range per line) can be specified  as '@filename'.", "prompt": "Regions to colour in html (eg: 4-57 red 78-94 green)", "name": "e_highlight", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "(\"\", \" -highlight=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set a cut-off for the % of positive scoring matches below which there is no consensus. The default plurality is taken as 50%  of the total weight of all the sequences in the alignment.", "prompt": "Plurality check % for consensus (value from 0.0 to 100.0)", "name": "e_plurality", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "16", "format": {"python": "(\"\", \" -plurality=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the threshold for the scores of the positive matches above which the consensus is in upper-case and below which the  consensus is in lower-case. By default this is set to be half of  the (weight-adjusted) number of sequences in the alignment.", "prompt": "Threshold above which the consensus is given in uppercase", "name": "e_setcase", "ctrl": null, "simple": null, "argpos": "17", "format": {"python": "(\"\", \" -setcase=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Provides the facility of setting the required number of identities at a position for it to give a consensus. Therefore, if  this is set to 100% only columns of identities contribute to the  consensus.", "prompt": "Required % of identities at a position for consensus (value from 0.0 to 100.0)", "name": "e_identity", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "18", "format": {"python": "(\"\", \" -identity=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this option is true then gap characters can appear in the consensus. The alternative is 'N' for nucleotide, or 'X' for  protein", "prompt": "Use gap characters in consensus", "name": "e_gaps", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "(\" -nogaps\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "showalign"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/showalign.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "showalign"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac3a"}, "classifications": [{"type": "mobyle1", "classification": "display:feature_table"}], "description": "Display features of a sequence in pretty format", "title": "showfeat", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ShowfeatReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "By default any feature source in the feature table is shown. You can set this to match any feature source you wish to  show. \n  The source name is usually either the name of the program that  detected the feature or it is the feature table (eg: EMBL) that  the feature came from. \n  The source may be wildcarded by using '*'. \n  If you wish to show more than one source, separate their names  with the character '|', eg: \n  gene* | embl", "prompt": "Source of feature to display", "name": "e_sourcematch", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -sourcematch=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default any feature type in the feature table is shown. You can set this to match any feature type you wish to show. \n  See http://www.ebi.ac.uk/embl/WebFeat/ for a list of the EMBL  feature types and see Appendix A of the Swissprot user manual in  http://www.expasy.org/sprot/userman.html for a list of the Swissprot  feature types. \n  The type may be wildcarded by using '*'. \n  If you wish to show more than one type, separate their names with  the character '|', eg: \n  *UTR | intron", "prompt": "Type of feature to display", "name": "e_typematch", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -typematch=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tags are the types of extra values that a feature may have. For example in the EMBL feature table, a 'CDS' type of feature  may have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number', '/evidence', '/exception', '/function', '/gene',  '/label', '/map', '/note', '/number', '/partial', '/product',  '/protein_id', '/pseudo', '/standard_name', '/translation',  '/transl_except', '/transl_table', or '/usedin'. Some of these  tags also have values, for example '/gene' can have the value of  the gene name. \n  By default any feature tag in the feature table is shown. You can  set this to match any feature tag you wish to show. \n  The tag may be wildcarded by using '*'. \n  If you wish to show more than one tag, separate their names with  the character '|', eg: \n  gene | label", "prompt": "Tag of feature to display", "name": "e_tagmatch", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -tagmatch=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tag values are the values associated with a feature tag. Tags are the types of extra values that a feature may have. For  example in the EMBL feature table, a 'CDS' type of feature may  have the tags '/codon', '/codon_start', '/db_xref', '/EC_number',  '/evidence', '/exception', '/function', '/gene', '/label', '/map',  '/note', '/number', '/partial', '/product', '/protein_id',  '/pseudo', '/standard_name', '/translation', '/transl_except',  '/transl_table', or '/usedin'. Only some of these tags can have  values, for example '/gene' can have the value of the gene name.  By default any feature tag value in the feature table is shown.  You can set this to match any feature tag value you wish to show. \n  The tag value may be wildcarded by using '*'. \n  If you wish to show more than one tag value, separate their names  with the character '|', eg: \n  pax* | 10", "prompt": "Value of feature tags to display", "name": "e_valuematch", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -valuematch=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sorting features", "name": "e_sort", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -sort=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Join coding regions together", "name": "e_joinfeatures", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -joinfeatures\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Regions to annotate by marking. \n If this is left blank, then no annotation is added. \n  A set of regions is specified by a set of pairs of positions  followed by optional text. \n  The positions are integers. \n  They are followed by any text (but not digits when on the  command-line). \n  Examples of region specifications are: \n  24-45 new domain 56-78 match to Mouse \n  1-100 First part 120-156 oligo \n  A file of ranges to annotate (one range per line) can be specified  as '@filename'.", "prompt": "Regions to mark (eg: 4-57 promoter region 78-94 first exon)", "name": "e_annotation", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -annotation=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Use html formatting", "name": "e_html", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -html\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display the ID name of the sequence.", "prompt": "Show sequence id", "name": "e_id", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\" -noid\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display the description of the sequence.", "prompt": "Show description", "name": "e_description", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\" -nodescription\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display the scale line.", "prompt": "Show scale line", "name": "e_scale", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\" -noscale\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "You can expand (or contract) the width of the ASCII-character graphics display of the positions of the features  using this value. \n  For example, a width of 80 characters would cover a standard page  width and a width a 10 characters would be nearly unreadable. \n  If the width is set to less than 4, the graphics lines and the  scale line will not be displayed.", "prompt": "Width of graphics lines (value greater than or equal to 0)", "name": "e_width", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -width=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set, then features from the same source and of the same type and sense are all printed on the same line. For  instance if there are several features from the EMBL feature table  (ie. the same source) which are all of type 'exon' in the same  sense, then they will all be displayed on the same line. This  makes it hard to distinguish overlapping features. \n  If this is set to false then each feature is displayed on a  separate line making it easier to distinguish where features start  and end.", "prompt": "Display features with the same type on one line", "name": "e_collapse", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -collapse\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display forward sense features.", "prompt": "Display forward sense features", "name": "e_forward", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "(\" -noforward\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display reverse sense features.", "prompt": "Display reverse sense features", "name": "e_reverse", "ctrl": null, "simple": null, "argpos": "16", "format": {"python": "(\" -noreverse\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display unknown sense features. (ie. features with no directionality - all protein  features are of this type and some nucleic features (for example,  CG-rich regions)).", "prompt": "Display unknown sense features", "name": "e_unknown", "ctrl": null, "simple": null, "argpos": "17", "format": {"python": "(\" -nounknown\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this if you wish to display the strand of the features. Protein features are always directionless (indicated by '0'),  forward is indicated by '+' and reverse is '-'.", "prompt": "Display strand of features", "name": "e_strand", "ctrl": null, "simple": null, "argpos": "18", "format": {"python": "(\"\", \" -strand\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this if you wish to display the origin of the features. \n  The source name is usually either the name of the program that  detected the feature or it is the name of the feature table (eg:  EMBL) that the feature came from.", "prompt": "Display source of features", "name": "e_origin", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "(\"\", \" -origin\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this if you wish to display the start and end position of the features. If several features are being displayed on the  same line, then the start and end positions will be joined by a  comma, for example: '189-189,225-225'.", "prompt": "Display position of features", "name": "e_position", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "(\"\", \" -position\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display the type of the features.", "prompt": "Display type of features", "name": "e_type", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "(\" -notype\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display the tags and values of the features.", "prompt": "Display tags of features", "name": "e_tags", "ctrl": null, "simple": null, "argpos": "22", "format": {"python": "(\"\", \" -tags\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display the tag values of the features. If this is set to be false, only the tag  names will be displayed. If the tags are not displayed, then the  values will not be displayed. The value of the 'translation' tag  is never displayed as it is often extremely long.", "prompt": "Display tag values of features", "name": "e_values", "ctrl": null, "simple": null, "argpos": "23", "format": {"python": "(\" -novalues\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default if any tag/value pair in a feature matches the specified tag and value, then all the tags/value pairs of that  feature will be displayed. If this is set to be true, then only  those tag/value pairs in a feature that match the specified tag  and value will be displayed.", "prompt": "Only display the matching tags", "name": "e_stricttags", "ctrl": null, "simple": null, "argpos": "24", "format": {"python": "(\"\", \" -stricttags\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "25", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "26", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "showfeat"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/showfeat.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "showfeat"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac3b"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:gene_finding"}, {"type": "mobyle1", "classification": "sequence:nucleic:translation"}], "description": "Display a nucleotide sequence and translation in pretty format", "title": "showorf", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ShoworfReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "\"0: None, 1: F1,2: F2,3: F3,4: R1,5: R2,6: R3\"", "prompt": "Select frames to translate (value from 0 to 6)", "name": "e_frames", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -frames=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Genetic codes", "name": "e_table", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -table=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Add a ruler", "name": "e_ruler", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\" -noruler\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number translations", "name": "e_plabel", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\" -noplabel\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number dna sequence", "name": "e_nlabel", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\" -nonlabel\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Width of screen (value greater than or equal to 10)", "name": "e_width", "ctrl": {"python": "value >= 10"}, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -width=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "showorf"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/showorf.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "showorf"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac3c"}, "classifications": [{"type": "mobyle1", "classification": "display"}], "description": "Displays protein sequences with features in pretty format", "title": "showpep", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ShowpepReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Things to display", "name": "e_format", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -format=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify a list of one or more code characters in the order in which you wish things to be displayed one above the other down  the page. For example if you wish to see things displayed in the  order: sequence, ticks line, blank line; then you should enter  'S,T,B'.S: SequenceB: Blank lineT: Ticks lineN: Number ticks lineF: FeaturesA: AnnotationFor example if you wish to see things displayed in the  order: sequence, ticks line, blank line; then you should enter 'S,T,B'.", "prompt": "Specify your own things to display (value from 1 to 100)", "name": "e_things", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -things=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_format==\"0\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "Regions to put in uppercase. \n If this is left blank, then the sequence case is left alone. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are separated by any non-digit, non-alpha character. \n  Examples of region specifications are: \n  24-45, 56-78 \n  1:45, 67=99;765..888 \n  1,5,8,10,23,45,57,99", "prompt": "Regions to put in uppercase (eg: 4-57,78-94)", "name": "e_uppercase", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -uppercase=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Regions to colour if formatting for HTML. \n If this is left blank, then the sequence is left alone. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are followed by any valid HTML font colour. \n  Examples of region specifications are: \n  24-45 blue 56-78 orange \n  1-100 green 120-156 red \n  A file of ranges to colour (one range per line) can be specified  as '@filename'.", "prompt": "Regions to colour in html (eg: 4-57 red 78-94 green)", "name": "e_highlight", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -highlight=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Regions to annotate by marking. \n If this is left blank, then no annotation is added. \n  A set of regions is specified by a set of pairs of positions  followed by optional text. \n  The positions are integers. \n  They are followed by any text (but not digits when on the  command-line). \n  Examples of region specifications are: \n  24-45 new domain 56-78 match to Mouse \n  1-100 First part 120-156 oligo \n  A file of ranges to annotate (one range per line) can be specified  as '@filename'.", "prompt": "Regions to mark (eg: 4-57 promoter region 78-94 first exon)", "name": "e_annotation", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -annotation=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Feature display options", "name": "e_featuresection", "children": [{"comment": "By default any feature source in the feature table is shown. You can set this to match any feature source you wish to  show. \n  The source name is usually either the name of the program that  detected the feature or it is the feature table (eg: EMBL) that  the feature came from. \n  The source may be wildcarded by using '*'. \n  If you wish to show more than one source, separate their names  with the character '|', eg: \n  gene* | embl", "prompt": "Source of feature to display", "name": "e_sourcematch", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -sourcematch=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default any feature type in the feature table is shown. You can set this to match any feature type you wish to  show. \n  See http://www.ebi.ac.uk/embl/WebFeat/ for a list of the  EMBL feature types and see Appendix A of the Swissprot user  manual in http://www.expasy.org/sprot/userman.html  for a list of the Swissprot feature types. \n  The type may be wildcarded by using '*'. \n  If you wish to show more than one type, separate their names  with the character '|', eg: \n  *UTR | intron", "prompt": "Type of feature to display", "name": "e_typematch", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -typematch=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Minimum score of feature to display (see also maxscore)", "prompt": "Minimum score of feature to display", "name": "e_minscore", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -minscore=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum score of feature to display. \n If both minscore and maxscore are zero (the default),  then any score is ignored", "prompt": "Maximum score of feature to display", "name": "e_maxscore", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -maxscore=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tags are the types of extra values that a feature may have.  By default any feature tag in the feature table is shown. You  can set this to match any feature tag you wish to show. \n  The tag may be wildcarded by using '*'. \n  If you wish to show more than one tag, separate their names with  the character '|', eg: \n  gene | label", "prompt": "Tag of feature to display", "name": "e_tagmatch", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -tagmatch=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tag values are the values associated with a feature tag. Tags are the types of extra values that a feature may have.  By default any feature tag value in the  feature table is shown. You can set this to match any feature  tag value you wish to show. \n  The tag value may be wildcarded by using '*'. \n  If you wish to show more than one tag value, separate their  names with the character '|', eg: \n  pax* | 10", "prompt": "Value of feature tags to display", "name": "e_valuematch", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -valuematch=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default if any tag/value pair in a feature matches the specified tag and value, then all the tags/value pairs of that  feature will be displayed. If this is set to be true, then only  those tag/value pairs in a feature that match the specified tag  and value will be displayed.", "prompt": "Only display the matching tags", "name": "e_stricttags", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -stricttags\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Display protein sequences in three-letter code", "name": "e_threeletter", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -threeletter\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number the sequences", "name": "e_number", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "(\"\", \" -number\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Width of sequence to display (value greater than or equal to 1)", "name": "e_width", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "16", "format": {"python": "(\"\", \" -width=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Line length of page (0 for indefinite) (value greater than or equal to 0)", "name": "e_length", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "17", "format": {"python": "(\"\", \" -length=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Margin around sequence for numbering (value greater than or equal to 0)", "name": "e_margin", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "18", "format": {"python": "(\"\", \" -margin=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display the ID name of the sequence", "prompt": "Show sequence id", "name": "e_name", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "(\" -noname\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display the description of the sequence", "prompt": "Show description", "name": "e_description", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "(\" -nodescription\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Offset to start numbering the sequence from", "name": "e_offset", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "(\"\", \" -offset=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use html formatting", "name": "e_html", "ctrl": null, "simple": null, "argpos": "22", "format": {"python": "(\"\", \" -html\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "23", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "24", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "showpep"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/showpep.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "showpep"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac3d"}, "classifications": [{"type": "mobyle1", "classification": "display:nucleic:restriction"}, {"type": "mobyle1", "classification": "display:nucleic:translation"}], "description": "Displays sequences with features in pretty format", "title": "showseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ShowseqReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Restriction enzyme methylation data file (optional)", "name": "e_mfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -mfile=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "RestrictionEnzymeMethylationData", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Things to display", "name": "e_format", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -format=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify a list of one or more code characters in the order in which you wish things to be displayed one above the other down  the page.S: SequenceB: Blank line1: Frame1 translation2: Frame2 translation3: Frame3 translation-1: Compframe1  translation-2: Compframe2 translation-3: Compframe3  translationT: Ticks lineN: Number ticks lineC: Complement  sequenceF: FeaturesR: Restriction enzyme cut sites in forward  sense-R: Restriction enzyme cut sites in reverse senseA: AnnotationFor example if you wish to see things displayed in the  order: sequence, complement sequence, ticks line, frame 1  translation, blank line; then you should enter 'S,C,T,1,B'.", "prompt": "Specify your own things to display (value from 1 to 100)", "name": "e_things", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -things=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_format==\"0\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "Regions to translate (if translating). \n If this is left blank the complete sequence is translated. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are separated by any non-digit, non-alpha character. \n  Examples of region specifications are: \n  24-45, 56-78 \n  1:45, 67=99;765..888", "prompt": "Regions to translate (eg: 4-57,78-94)", "name": "e_translate", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -translate=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Regions to translate (if translating). \n If this is left blank the complete sequence is translated. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are separated by any non-digit, non-alpha character. \n  Examples of region specifications are: \n  78-56, 45-24, \n  888..765, 99=67; 45:1", "prompt": "Regions to translate in reverse direction (eg: 78-94,4-57)", "name": "e_revtranslate", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -revtranslate=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Regions to put in uppercase. \n If this is left blank, then the sequence case is left alone. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are separated by any non-digit, non-alpha character. \n  Examples of region specifications are: \n  24-45, 56-78 \n  1:45, 67=99;765..888 \n  1,5,8,10,23,45,57,99", "prompt": "Regions to put in uppercase (eg: 4-57,78-94)", "name": "e_uppercase", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -uppercase=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Regions to colour if formatting for HTML. \n If this is left blank, then the sequence is left alone. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are followed by any valid HTML font colour. \n  Examples of region specifications are: \n  24-45 blue 56-78 orange \n  1-100 green 120-156 red \n  A file of ranges to colour (one range per line) can be specified  as '@filename'.", "prompt": "Regions to colour in html (eg: 4-57 red 78-94 green)", "name": "e_highlight", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -highlight=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Regions to annotate by marking. \n If this is left blank, then no annotation is added. \n  A set of regions is specified by a set of pairs of positions  followed by optional text. \n  The positions are integers. \n  They are followed by any text (but not digits when on the  command-line). \n  Examples of region specifications are: \n  24-45 new domain 56-78 match to Mouse \n  1-100 First part 120-156 oligo \n  A file of ranges to annotate (one range per line) can be specified  as '@filename'.", "prompt": "Regions to mark (eg: 4-57 promoter region 78-94 first exon)", "name": "e_annotation", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -annotation=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The name 'all' reads in all enzyme names from the REBASE database. You can specify enzymes by giving their names with  commas between then, such as: 'HincII,hinfI,ppiI,hindiii'. \n  The case of the names is not important. You can specify a file of  enzyme names to read in by giving the name of the file holding the  enzyme names with a '@' character in front of it, for example,  '@enz.list'. \n  Blank lines and lines starting with a hash character or '!' are  ignored and all other lines are concatenated together with a comma  character ',' and then treated as the list of enzymes to search  for. \n  An example of a file of enzyme names is: \n  ! my enzymes \n  HincII, ppiII \n  ! other enzymes \n  hindiii \n  HinfI \n  PpiI", "prompt": "Comma separated restriction enzyme list", "name": "e_enzymes", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -enzymes=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Genetic codes", "name": "e_table", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -table=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Feature display options", "name": "e_featuresection", "children": [{"comment": "By default any feature source in the feature table is shown. You can set this to match any feature source you wish to  show. \n  The source name is usually either the name of the program that  detected the feature or it is the feature table (eg: EMBL) that  the feature came from. \n  The source may be wildcarded by using '*'. \n  If you wish to show more than one source, separate their names  with the character '|', eg: \n  gene* | embl", "prompt": "Source of feature to display", "name": "e_sourcematch", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -sourcematch=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default any feature type in the feature table is shown. You can set this to match any feature type you wish to  show. \n  See http://www.ebi.ac.uk/embl/WebFeat/ for a list of the  EMBL feature types and see Appendix A of the Swissprot user  manual in http://www.expasy.org/sprot/userman.html  for a list of the Swissprot feature types. \n  The type may be wildcarded by using '*'. \n  If you wish to show more than one type, separate their names  with the character '|', eg: \n  *UTR | intron", "prompt": "Type of feature to display", "name": "e_typematch", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -typematch=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default any feature type in the feature table is shown. You can set this to match any feature sense you wish to  show. 0 - any sense, 1 - forward sense, -1 - reverse sense", "prompt": "Sense of feature to display (value from -1 to 1)", "name": "e_sensematch", "ctrl": {"python": "value >= -1"}, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -sensematch=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Minimum score of feature to display (see also maxscore)", "prompt": "Minimum score of feature to display", "name": "e_minscore", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "(\"\", \" -minscore=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum score of feature to display. \n If both minscore and maxscore are zero (the default),  then any score is ignored", "prompt": "Maximum score of feature to display", "name": "e_maxscore", "ctrl": null, "simple": null, "argpos": "16", "format": {"python": "(\"\", \" -maxscore=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tags are the types of extra values that a feature may have. For example in the EMBL feature table, a 'CDS' type of  feature may have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number', '/evidence', '/exception', '/function', '/gene',  '/label', '/map', '/note', '/number', '/partial', '/product',  '/protein_id', '/pseudo', '/standard_name', '/translation',  '/transl_except', '/transl_table', or '/usedin'. Some of these  tags also have values, for example '/gene' can have the value of  the gene name. \n  By default any feature tag in the feature table is shown. You  can set this to match any feature tag you wish to show. \n  The tag may be wildcarded by using '*'. \n  If you wish to show more than one tag, separate their names with  the character '|', eg: \n  gene | label", "prompt": "Tag of feature to display", "name": "e_tagmatch", "ctrl": null, "simple": null, "argpos": "17", "format": {"python": "(\"\", \" -tagmatch=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tag values are the values associated with a feature tag. Tags are the types of extra values that a feature may have. For  example in the EMBL feature table, a 'CDS' type of feature may  have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number', '/evidence', '/exception', '/function', '/gene',  '/label', '/map', '/note', '/number', '/partial', '/product',  '/protein_id', '/pseudo', '/standard_name', '/translation',  '/transl_except', '/transl_table', or '/usedin'. Only some of  these tags can have values, for example '/gene' can have the  value of the gene name. By default any feature tag value in the  feature table is shown. You can set this to match any feature  tag value you wish to show. \n  The tag value may be wildcarded by using '*'. \n  If you wish to show more than one tag value, separate their  names with the character '|', eg: \n  pax* | 10", "prompt": "Value of feature tags to display", "name": "e_valuematch", "ctrl": null, "simple": null, "argpos": "18", "format": {"python": "(\"\", \" -valuematch=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default if any tag/value pair in a feature matches the specified tag and value, then all the tags/value pairs of that  feature will be displayed. If this is set to be true, then only  those tag/value pairs in a feature that match the specified tag  and value will be displayed.", "prompt": "Only display the matching tags", "name": "e_stricttags", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "(\"\", \" -stricttags\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "precond": null, "prompt": "Restriction map options", "name": "e_remapsection", "children": [{"comment": "This changes the output format to one where the recognition site is indicated by a row of '===' characters and  the cut site is pointed to by a '>' character in the forward  sense, or a '<' in the reverse sense strand.", "prompt": "Display re sites in flat format", "name": "e_flatreformat", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "(\"\", \" -flatreformat\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This sets the minimum number of cuts for any restriction enzyme that will be considered. Any enzymes that cut fewer times  than this will be ignored.", "prompt": "Minimum cuts per re (value from 1 to 1000)", "name": "e_mincuts", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "21", "format": {"python": "(\"\", \" -mincuts=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This sets the maximum number of cuts for any restriction enzyme that will be considered. Any enzymes that cut more times  than this will be ignored.", "prompt": "Maximum cuts per re", "name": "e_maxcuts", "ctrl": null, "simple": null, "argpos": "22", "format": {"python": "(\"\", \" -maxcuts=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This sets the minimum length of the restriction enzyme recognition site. Any enzymes with sites shorter than this will  be ignored.", "prompt": "Minimum recognition site length (value from 2 to 20)", "name": "e_sitelen", "ctrl": {"python": "value >= 2"}, "simple": null, "argpos": "23", "format": {"python": "(\"\", \" -sitelen=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set then this forces the values of the mincuts and maxcuts qualifiers to both be 1. Any other value you may  have set them to will be ignored.", "prompt": "Force single re site only cuts", "name": "e_single", "ctrl": null, "simple": null, "argpos": "24", "format": {"python": "(\"\", \" -single\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This allows those enzymes which cut at the same position on the forward and reverse strands to be considered.", "prompt": "Allow blunt end re cutters", "name": "e_blunt", "ctrl": null, "simple": null, "argpos": "25", "format": {"python": "(\" -noblunt\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This allows those enzymes which cut at different positions on the forward and reverse strands, leaving an  overhang, to be considered.", "prompt": "Allow sticky end re cutters", "name": "e_sticky", "ctrl": null, "simple": null, "argpos": "26", "format": {"python": "(\" -nosticky\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This allows those enzymes which have one or more 'N' ambiguity codes in their pattern to be considered", "prompt": "Allow ambiguous re matches", "name": "e_ambiguity", "ctrl": null, "simple": null, "argpos": "27", "format": {"python": "(\" -noambiguity\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set then this allows searches for restriction enzyme recognition site and cut positions that span the end of  the sequence to be considered.", "prompt": "Allow circular dna", "name": "e_plasmid", "ctrl": null, "simple": null, "argpos": "28", "format": {"python": "(\"\", \" -plasmid\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set then RE recognition sites will not match methylated bases.", "prompt": "Use methylation data", "name": "e_methylation", "ctrl": null, "simple": null, "argpos": "29", "format": {"python": "(\"\", \" -methylation\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is set, then only those enzymes with a commercial supplier will be searched for. This qualifier is ignored if you  have specified an explicit list of enzymes to search for,  rather than searching through 'all' the enzymes in the REBASE  database. It is assumed that, if you are asking for an explicit  enzyme, then you probably know where to get it from and so all  enzymes names that you have asked to be searched for, and which  cut, will be reported whether or not they have a commercial  supplier.", "prompt": "Only use restriction enzymes with suppliers", "name": "e_commercial", "ctrl": null, "simple": null, "argpos": "30", "format": {"python": "(\" -nocommercial\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This limits the reporting of enzymes to just one enzyme from each group of isoschizomers. The enzyme chosen to represent  an isoschizomer group is the prototype indicated in the data  file 'embossre.equ', which is created by the program  'rebaseextract'. If you prefer different prototypes to be used,  make a copy of embossre.equ in your home directory and edit it.  If this value is set to be false then all of the input enzymes  will be reported. You might like to set this to false if you are  supplying an explicit set of enzymes rather than searching  'all' of them.", "prompt": "Limits re hits to one isoschizomer", "name": "e_limit", "ctrl": null, "simple": null, "argpos": "31", "format": {"python": "(\" -nolimit\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "This sets the minimum size of Open Reading Frames (ORFs) to display in the translations. All other translation regions are  masked by changing the amino acids to '-' characters.", "prompt": "Minimum size of orfs (value greater than or equal to 0)", "name": "e_orfminsize", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "32", "format": {"python": "(\"\", \" -orfminsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display protein sequences in three-letter code", "name": "e_threeletter", "ctrl": null, "simple": null, "argpos": "33", "format": {"python": "(\"\", \" -threeletter\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number the sequences", "name": "e_number", "ctrl": null, "simple": null, "argpos": "34", "format": {"python": "(\"\", \" -number\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Width of sequence to display (value greater than or equal to 1)", "name": "e_width", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "35", "format": {"python": "(\"\", \" -width=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Line length of page (0 for indefinite) (value greater than or equal to 0)", "name": "e_length", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "36", "format": {"python": "(\"\", \" -length=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Margin around sequence for numbering (value greater than or equal to 0)", "name": "e_margin", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "37", "format": {"python": "(\"\", \" -margin=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display the ID name of the sequence", "prompt": "Show sequence id", "name": "e_name", "ctrl": null, "simple": null, "argpos": "38", "format": {"python": "(\" -noname\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display the description of the sequence", "prompt": "Show description", "name": "e_description", "ctrl": null, "simple": null, "argpos": "39", "format": {"python": "(\" -nodescription\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Offset to start numbering the sequence from", "name": "e_offset", "ctrl": null, "simple": null, "argpos": "40", "format": {"python": "(\"\", \" -offset=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use html formatting", "name": "e_html", "ctrl": null, "simple": null, "argpos": "41", "format": {"python": "(\"\", \" -html\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "42", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "43", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "showseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/showseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "showseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac3e"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:mutation"}, {"type": "mobyle1", "classification": "sequence:protein:mutation"}], "description": "Shuffles a set of sequences maintaining composition", "title": "shuffleseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Number of shuffles", "name": "e_shuffle", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -shuffle=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "shuffleseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/shuffleseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "shuffleseq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac3f"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:motifs"}], "description": "Reports on signal cleavage sites in a protein sequence", "title": "sigcleave", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "Minimum scoring weight value for the predicted cleavage site", "prompt": "Minimum weight (value from 0. to 100.)", "name": "e_minweight", "ctrl": {"python": "value >= 0."}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -minweight=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "Specifies the sequence is prokaryotic and changes the default scoring data file name", "prompt": "Use prokaryotic cleavage data", "name": "e_prokaryote", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -prokaryote\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "sigcleave"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/sigcleave.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "sigcleave"}, {"comment": "signalp  predicts  the  presence and location of signal peptide cleavage sites in amino acid sequences from\n       different organisms: Gram-positive prokaryotes, Gram-negative prokaryotes, and eukaryotes.The  method  incorporates a prediction of cleavage sites and a signal peptide/non-signal peptide prediction based on a \n       combination of several artificial neural networks.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac40"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:motifs"}, {"type": "mobyle1", "classification": "sequence:protein:pattern"}], "description": "predict signal peptides in proteins", "title": "signalp", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p><html:strong>Neural network output</html:strong></html:p><html:p>For  each input sequence the neural network (nn) module of signalp will first return three scores between 0\n       and 1 for each sequence position:</html:p><html:ul><html:li><html:strong>C-score (raw cleavage site score)</html:strong>The output score from networks trained to recognize cleavage sites  vs.  other  sequence  positions.\n              Trained  to be high at position +1 (immediately after the cleavage site), and low at all other posi&#8208;\n              tions.</html:li><html:li><html:strong>S-score (signal peptide score)</html:strong>The output score from networks trained to recognize signal peptide vs. non-signal-peptide positions.\n              Trained  to be high at all positions before the cleavage site, and low at positions after the cleav&#8208;\n              age site and in the N-terminals of non-secretory proteins.</html:li><html:li><html:strong>Y-score (combined cleavage site score)</html:strong>The prediction of cleavage site location is optimized by observing where the C-score is high and the\n              S-score  changes from a high to a low value.  The Y-score formalizes this by combining the height of\n              the C-score with the slope of the S-score.<html:br />Specifically, the Y-score is a geometric average between the C-score and a  smoothed  derivative  of\n              the  S-score  (i.e.  the difference between the mean S-score over d positions before and d positions\n              after the current position, where d varies with the chosen network ensemble).</html:li></html:ul><html:p>signalp will then report the maximal C-, S-, and Y-scores, the mean S-score in the interval between  the\n       N-terminal  and  the site with the maximal Y-score and, finally, the D-score, the average of the S-mean and\n       Y-max score.</html:p><html:p>The high detail level of the output is intended to allow for interpretation  of  borderline  cases  by  the\n       user.</html:p><html:p>If  the sequence is predicted to have a signal peptide, the predicted cleavage site\n       is located immediately before the position with the maximal Y-score.</html:p></html:div>", "prompt": "signalp report", "name": "results", "simple": null, "filenames": {"python": "\"signalp.out\"", "perl": "\"signalp.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "signalp", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "graphic in GIF", "name": "gif", "simple": null, "filenames": {"python": "\"*.gif\"", "perl": "\"*.gif\""}, "precond": {"python": "graphics == \"gif\" or graphics == \"gif+eps\"", "perl": "$graphics eq \"gif\" or $graphics eq \"gif+eps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "signalp_graphic", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["GIF"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "graphic in eps", "name": "eps", "simple": null, "filenames": {"python": "\"*.gif\"", "perl": "\"*.gif\""}, "precond": {"python": "graphics == \"gif+eps\"", "perl": "$graphics eq \"gif+eps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "signalp_graphic", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EPS"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "a FASTA file with mature sequences based on  the  predictions", "name": "mature_result", "simple": null, "filenames": {"python": "\"%s_mature.fasta\"%sequence", "perl": "\"${sequence}_mature.fasta\""}, "precond": {"python": "mature", "perl": "$mature"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "a GFF (name-start-end) file with the predicted signal peptides", "name": "n_s_e_result", "simple": null, "filenames": {"python": "\"%s.gff\"%sequence", "perl": "\"${sequence}.gff\""}, "precond": {"python": "n_s_e", "perl": "$n_s_e"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Feature", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["GFF"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "signalp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" signalp \"", "perl": "\" signalp \""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Input Sequence", "name": "sequence", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\" \" + str( value )", "perl": "\" $value \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use networks and models trained on sequences from the specified type of organisms", "name": "type", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -t \" + value", "perl": "(defined $value)? \" -t \" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>The valid formats are:</html:p><html:ul><html:li><html:strong>short :</html:strong>Write  only  one line of concluding scores per sequence. Intended for\n                     analysis of large datasets where machine-readable output is required.<html:em>This is the default</html:em>.</html:li><html:li><html:strong>long :</html:strong>Write the scores for each position in each sequnce.</html:li><html:li><html:strong>all :</html:strong>Write predictions for both Signalp-TM and SignalP-noTM networks. Five\n                     columns with cleavage site (CS) and Signal Peptide (SP)  predictions\n                     for  both  SigP-noTM  and  SigP-TM methods and TM prediction for each\n                     position.</html:li><html:li><html:strong>summary :</html:strong>Write only the concluding scores for each sequence.  This  is  essen&#8208;\n                     tially the same information as the 'short' format.</html:li></html:ul></html:div>", "prompt": "Produce output in the specified format.", "name": "format", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \"\" , \" -f \" + value)[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef)? \" -f $value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:ul><html:li><html:strong>gif :</html:strong>Save  plots  in  Graphics Interchange Format (GIF) under the names 'plot.method.#.gif', where\n                     method is nn or hmm, and # is the number of the input sequence.</html:li><html:li><html:strong>gif+eps :</html:strong>Save plots in both GIF and EPS formats as described above.</html:li></html:ul></html:div>", "prompt": "generate graphics (-g).", "name": "graphics", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "( \"\" , \" -g \"+str( value ) )[ bool( value ) ]", "perl": "( defined $value and $value ne $vdef) ? \" -g $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>Input sequences may include or not TM regions.</html:p><html:ul><html:li><html:strong>best :</html:strong>The method decides which neural networks predictions  give  the  best\n                     result  choosing  predictions  from either SignalP-TM or SignalP-noTM\n                     networks. For 'gram+' organisms it is always SignalP-TM networks.<html:em>(default)</html:em></html:li><html:li><html:strong>notm :</html:strong>The SignalP-noTM neural networks are specifically chosen.</html:li></html:ul></html:div>", "prompt": "Use the specified prediction method.", "name": "Method", "ctrl": null, "simple": null, "argpos": "30", "format": {"python": "( \"\" , \" -s \" + value)[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -s $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>user defined D-cutoff for noTM networks. A score above the specified\n            cutoff will result in a positive prediction of a signal peptide. The cutoff\n            determines the yes/no answer only, the prediction process is not affected.\n            The default cutoffs are:</html:p><html:ul><html:li><html:strong>euk</html:strong>: 0.45</html:li><html:li><html:strong>gram+</html:strong>: 0.57</html:li><html:li><html:strong>gram-</html:strong>: 0.57</html:li></html:ul></html:div>", "prompt": "cutoff for noTM networks", "name": "noTM_cutoff", "ctrl": {"python": "value >= 0 and value <= 1"}, "simple": null, "argpos": "50", "format": {"python": "( \"\" , \" -u \" + str( value ) )[ value is not None]", "perl": "(defined $value and $value ne $vdef) ? \" -u\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\">user defined D-cutoff for TM networks. A score above  the  specified\n              cutoff  will result in a positive prediction of a signal peptide. The cutoff\n              determines the yes/no answer only, the prediction process is  not  affected.\n              The default cutoffs are:<html:ul><html:li><html:strong>euk</html:strong>: 0.50</html:li><html:li><html:strong>gram+</html:strong>: 0.45</html:li><html:li><html:strong>gram-</html:strong>: 0.51</html:li></html:ul></html:div>", "prompt": "cutoff for TM networks", "name": "TM_cutoff", "ctrl": {"python": "value >= 0 and value <= 1"}, "simple": null, "argpos": "50", "format": {"python": "( \"\" , \" -U \" + str( value ) )[ value is not None]", "perl": "(defined $value and $value ne $vdef) ? \" -c\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "truncate the input sequences to the specified length from the  N-ter\u2010\n              minal. The default is 70 residues. The value of \"0\" disables truncation.", "prompt": "Truncate  each  sequence  to  maximally n N-terminal residues", "name": "truncate", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "60", "format": {"python": "( \"\" , \" -c \" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -c\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "generate a FASTA file with mature sequences based on  the  predictions.", "name": "mature", "ctrl": null, "simple": null, "argpos": "70", "format": {"python": "( \"\" , \" -m %s_mature.fasta\"%sequence)[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "generate a GFF (name-start-end) file with the predicted signal peptides.", "name": "n_s_e", "ctrl": null, "simple": null, "argpos": "70", "format": {"python": "( \"\" , \" -n %s.gff\"%sequence)[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "4.0", "references": [{"url": null, "doi": "10.1038/nmeth.1701", "label": "SignalP 4.0: discriminating signal peptides from transmembrane regions\n       Thomas Nordahl Petersen, S\u00f8ren Brunak, Gunnar von Heijne & Henrik Nielsen\n       Nature Methods, 8:785-786, 2011"}, {"url": null, "doi": null, "label": "Improved prediction of signal peptides: SignalP 3.0.\n        Jannick Dyrl\u00f8v Bendtsen, Henrik Nielsen, Gunnar von Heijne and S\u00f8ren Brunak.\n        J. Mol. Biol., 340:783-795, 2004."}, {"url": null, "doi": null, "label": "Identification of prokaryotic and eukaryotic signal peptides and prediction of their cleavage sites.\n        Henrik Nielsen, Jacob Engelbrecht, S\u00f8ren Brunak and Gunnar von Heijne.\n        Protein Engineering, 10:1-6, 1997."}, {"url": null, "doi": null, "label": "Prediction of signal peptides and signal anchors by a hidden Markov model.\n        Henrik Nielsen and Anders Krogh.\n        Proceedings of the Sixth International Conference on Intelligent Systems for Molecular Biology (ISMB 6),\n        AAAI Press, Menlo Park, California, pp. 122-130, 1998."}], "source_links": ["http://www.cbs.dtu.dk/cgi-bin/nph-sw_request?signalp"], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://www.cbs.dtu.dk/services/SignalP/"], "type": "program", "name": "signalp"}, {"comment": "sig  is a program to search  multiple occurences of\n\tmultiple motifs in a set of sequences.", "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac41"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:pattern"}, {"type": "mobyle1", "classification": "sequence:protein:pattern"}], "description": "Multiple Prosite motifs searching", "title": "sig", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": []}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Protein Sequences", "name": "seqfile", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\">File format :<html:ul><html:li>one pattern per line.</html:li><html:li>A pattern consists in motifs definition separated by distance constraints.</html:li><html:li>The format is strictly the following: motif_1 (min,max) motif_2 ... (min,max) motif_n, and so on.</html:li></html:ul>The sig motif syntax follow the syntax used in the PROSITE database :<html:h3>Pattern syntax</html:h3><html:ol><html:li>The standard IUPAC one-letter codes for the amino acids are used in PROSITE.</html:li><html:li>The symbol `x' is used for a position where any amino acid is accepted.</html:li><html:li>Ambiguities are indicated by listing the acceptable amino acids for a \n    given position, between square brackets `[ ]'. For example: [ALT] \n    stands for Ala or Leu or Thr.</html:li><html:li>Ambiguities are also indicated by listing between a pair of curly \n    brackets `{ }' the amino acids that are not accepted at a given \n    position. For example: {AM} stands for any amino acid except Ala and Met.</html:li><html:li>Each element in a pattern is separated from its neighbor by a `-'.</html:li><html:li>Repetition of an element of the pattern can be indicated by following \n    that element with a numerical value or, if it is a gap ('x'),\n     by a numerical range between parentheses.<html:br /><html:dl><html:dt>Examples:</html:dt><html:dd>x(3) corresponds to x-x-x</html:dd><html:dd>x(2,4) corresponds to x-x or x-x-x or x-x-x-x</html:dd><html:dd>A(3) corresponds to A-A-A</html:dd><html:dt>Note: You can only use a range with 'x', i.e. A(2,4) is not a valid pattern element.</html:dt></html:dl></html:li><html:li>When a pattern is restricted to either the N- or C-terminal of a sequence, \n   that pattern either starts with a `&lt;' symbol or respectively ends with a `&gt;' symbol. \n   In some rare cases (<html:em>e.g.</html:em>PS00267 or PS00539), '&gt;' can also occur inside square brackets for the C-terminal element. \n'F-[GSTV]-P-R-L-[G&gt;]' means that either 'F-[GSTV]-P-R-L-G' or 'F-[GSTV]-P-R-L&gt;' are considered.</html:li></html:ol>the sig pattern ( motifs with distance constraints).<html:ul><html:li><html:strong>[RK]-x-V-x-[FW] (0,) F-x-x-[RK]-x-[RK]</html:strong>:\n    no distance constraints are set between motif [RK]-X-V-X-[FW] and motif F-X-X-[RK]-X-[RK]</html:li><html:li><html:strong>[RK]-x-V-x-[FW] (5,15) F-X-X-[RK]-X-[RK]</html:strong>:\n            motif [RK]-X-V-X-[FW] and motif F-X-X-[RK]-X-[RK] should be separated by a gap\n            whose length is longer or equal to 5 and shorter or equal to 15.</html:li></html:ul></html:div>", "prompt": "Pattern File (-f)", "name": "patterns", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -f \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -f $value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "SigPattern", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Allows motifs from pattern to be overlapping (-i)", "name": "overlapping", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -i\")[ value ]", "perl": "($value) ? \" -i\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Searches motifs in ordered and reverse search order, conserving the distance constraints (-r)", "name": "reverse", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -r\")[ value ]", "perl": "($value) ? \" -r\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.0", "references": [], "source_links": ["ftp://ftp.pasteur.fr/pub/gensoft/projects/sig/"], "env": [], "authors": "Eric Deveaud", "command": {"path": null, "value": "sig"}, "documentation_links": [], "type": "program", "name": "sig"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac42"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:restriction"}], "description": "Find restriction sites to insert (mutate) with no translation change", "title": "silent", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Comma separated enzyme list", "name": "e_enzymes", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -enzymes=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Display untranslated sequence", "name": "e_sshow", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -sshow\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display translated sequence", "name": "e_tshow", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -tshow\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display all mutations", "name": "e_allmut", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -allmut\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "silent"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/silent.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "silent"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac43"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:composition"}], "description": "Finds siRNA duplexes in mRNA", "title": "sirna", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Sequence input options", "name": "e_seqinsection", "children": [{"comment": "This option allows you to select only the 21 base probes that start with a purine and so can be expressed from Pol III  expression vectors. This is the NARN(17)YNN pattern that has  been suggested by Tuschl et al.", "prompt": "Select probes for pol iii expression vectors", "name": "e_poliii", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -poliii\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option allows you to select only those 23 base regions that start with AA. If this option is not selected then  regions that start with AA will be favoured by giving them a  higher score, but regions that do not start with AA will also be  reported.", "prompt": "Select only regions that start with aa", "name": "e_aa", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -aa\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option allows you to select only those 23 base regions that end with TT. If this option is not selected then  regions that end with TT will be favoured by giving them a  higher score, but regions that do not end with TT will also be  reported.", "prompt": "Select only regions that end with tt", "name": "e_tt", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -tt\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this option is FALSE then only those 23 base regions that have no repeat of 4 or more of any bases in a row will be  reported. No regions will ever be reported that have 4 or more  G's in a row.", "prompt": "Allow regions with 4 repeats of a base", "name": "e_polybase", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\" -nopolybase\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "The output is a table of the forward and reverse parts of the 21 base siRNA duplex. Both the forward and reverse sequences  are written 5' to 3', ready to be ordered. The last two bases have  been replaced by 'dTdT'. The starting position of the 23 base  region and the %GC content is also given. If you wish to see the  complete 23 base sequence, then either look at the sequence in the  other output file, or use the qualifier '-context' which will  display the 23 bases of the forward sequence in this report  with the first two bases in brackets. These first two bases do not  form part of the siRNA probe to be ordered.", "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is a file of the sequences of the 23 base regions that the siRNAs are selected from. You may use it to do searches of  mRNA databases (e.g. REFSEQ) to confirm that the probes are unique  to the gene you wish to use it on.", "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The output report file gives the sequences of the 21 base siRNA regions ready to be ordered. This does not give you an  indication of the 2 bases before the 21 bases. It is often  interesting to see which of the suggested possible probe regions  have an 'AA' in front of them (i.e. it is useful to see which of  the 23 base regions start with an 'AA'). This option displays the  whole 23 bases of the region with the first two bases in brackets,  e.g. '(AA)' to give you some context for the probe region. YOU  SHOULD NOT INCLUDE THE TWO BASES IN BRACKETS WHEN YOU PLACE AN  ORDER FOR THE PROBES.", "prompt": "Show the two bases before the output 21 base probe", "name": "e_context", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -context\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "sirna"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/sirna.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "sirna"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac44"}, "classifications": [{"type": "mobyle1", "classification": "display:nucleic:gene_finding"}, {"type": "mobyle1", "classification": "display:nucleic:translation"}], "description": "Display a DNA sequence with 6-frame translation and ORFs", "title": "sixpack", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SixpackReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "Genetics code used for the translation", "prompt": "Genetic codes", "name": "e_table", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -table=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Count the beginning of a sequence as a possible ORF, even if it's inferior to the minimal ORF size.", "prompt": "Orf at the beginning of the sequence", "name": "e_firstorf", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\" -nofirstorf\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Count the end of a sequence as a possible ORF, even if it's not finishing with a STOP, or inferior to the minimal ORF size.", "prompt": "Orf at the end of the sequence", "name": "e_lastorf", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -nolastorf\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Displays only ORFs starting with an M.", "prompt": "Orf start with an m", "name": "e_mstart", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -mstart\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "ORF sequence output", "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Display also the translation of the DNA sequence in the 3 reverse frames", "prompt": "Display translation of reverse sense", "name": "e_reverse", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\" -noreverse\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Minimum size of Open Reading Frames (ORFs) to display in the translations.", "prompt": "Minimum size of orfs (value greater than or equal to 1)", "name": "e_orfminsize", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -orfminsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Regions to put in uppercase. \n If this is left blank, then the sequence case is left alone. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are separated by any non-digit, non-alpha character. \n  Examples of region specifications are: \n  24-45, 56-78 \n  1:45, 67=99;765..888 \n  1,5,8,10,23,45,57,99", "prompt": "Regions to put in uppercase (eg: 4-57,78-94)", "name": "e_uppercase", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -uppercase=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Regions to colour if formatting for HTML. \n If this is left blank, then the sequence is left alone. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are followed by any valid HTML font colour. \n  Examples of region specifications are: \n  24-45 blue 56-78 orange \n  1-100 green 120-156 red \n  A file of ranges to colour (one range per line) can be specified as  '@filename'.", "prompt": "Regions to colour in html (eg: 4-57 red 78-94 green)", "name": "e_highlight", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -highlight=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Number the sequence at the beginning and the end of each line.", "prompt": "Number the sequences", "name": "e_number", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\" -nonumber\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Number of nucleotides displayed on each line", "prompt": "Width of sequence to display (value greater than or equal to 1)", "name": "e_width", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -width=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Line length of page (0 for indefinite) (value greater than or equal to 0)", "name": "e_length", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "15", "format": {"python": "(\"\", \" -length=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Margin around sequence for numbering. (value greater than or equal to 0)", "name": "e_margin", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "16", "format": {"python": "(\"\", \" -margin=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display the ID name of the sequence.", "prompt": "Display sequence id", "name": "e_name", "ctrl": null, "simple": null, "argpos": "17", "format": {"python": "(\" -noname\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set this to be false if you do not wish to display the description of the sequence.", "prompt": "Display description", "name": "e_description", "ctrl": null, "simple": null, "argpos": "18", "format": {"python": "(\" -nodescription\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Number from which you want the DNA sequence to be numbered.", "prompt": "Offset to start numbering the sequence from", "name": "e_offset", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "(\"\", \" -offset=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use html formatting", "name": "e_html", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "(\"\", \" -html\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "sixpack"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/sixpack.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "sixpack"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac45"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Reads and writes (returns) sequences, skipping first few", "title": "skipseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "Use feature information", "name": "e_feature", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -feature\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Number of sequences to skip at start", "name": "e_skip", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -skip=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "skipseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/skipseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "skipseq"}, {"comment": "smile is a program that was primarily made to extract promoter sequences from sequences. The interest of this program is to infer simultaneously several motifs (calledboxes) that respects distance constraints. The user has to select criterias. In a first step of extraction, all signals respecting these criterias are found.  In a second step, they are all statistically evaluated,  aiming  to  detect  the ones that are exceptionally represented in the original sequences.", "homepage_links": ["http://www-igm.univ-mlv.fr/~marsan/smile_english.html"], "_id": {"$oid": "51434da593546d52388cac46"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:pattern"}, {"type": "mobyle1", "classification": "sequence:protein:pattern"}], "description": "Inference of structured signals in multiple sequences", "title": "SMILE", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Result file", "name": "result", "simple": null, "filenames": {"python": "\"smile.result\"", "perl": "\"smile.result\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Shuffle result file", "name": "shufflefiles", "simple": null, "filenames": {"python": "\"smile.result.shuffle\"", "perl": "\"smile.result.shuffle\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "smile", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"smile smile.params\"", "perl": "\"smile smile.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This file must contain at least two sequences, as you cannot detect motifs which are common to several sequences in one sequence!", "prompt": "Sequences File", "name": "seq", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\"FASTA file\\t\\t\\t\" + str(value) + \"\\n\"", "perl": "\"FASTA file\\t\\t\\t$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": "smile.params"}, {"comment": null, "prompt": "Alphabet", "name": "alphabet", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\"Alphabet file\\t\\t\\t", "perl": "\"Alphabet file\\t\\t\\t"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "smile.params"}, {"comment": null, "prompt": "Maximum number of N in a motif for degenerated DNA or protein alphabet.", "name": "how_many_N", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\"Composition in *\\t\\t\" + str(value)+\"\\n\"", "perl": "\"Composition in *\\t\\t$value\\\\n\""}, "command": false, "precond": {"python": "alphabet != \"dna.alphabet\"", "perl": "$alphabet ne \"dna.alphabet\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "smile.params"}, {"comment": null, "prompt": "Maximum number of purine (R) in a motif for degenerated DNA", "name": "how_many_R", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\"Composition in AG\\t\\t\" + str(value)+\"\\n\"", "perl": "\"Composition in AG\\t\\t$value\\\\n\""}, "command": false, "precond": {"python": "alphabet == \"dnadeg.alphabet\"", "perl": "$alphabet eq \"dnadeg.alphabet\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "smile.params"}, {"comment": null, "prompt": "Maximum number of pyrimidine (Y) in a motif for degenerated DNA", "name": "how_many_Y", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\"Composition in CT\\t\\t\" + str(value)+\"\\n\"", "perl": "\"Composition in CT\\t\\t$value\\\\n\""}, "command": false, "precond": {"python": "alphabet == \"dnadeg.alphabet\"", "perl": "$alphabet eq \"dnadeg.alphabet\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "smile.params"}, {"comment": "The  percentage of sequences where at least one occurrence of a motif must appear to make it valid. 100 means that a motif must have occurrences in every sequences.", "prompt": "Minimum percentage of sequences containing a motif (quorum)", "name": "quorum", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\"Quorum\\t\\t\\t\\t\" + str(value)+\"\\n\"", "perl": "\"Quorum\\t\\t\\t\\t$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "smile.params"}, {"comment": "The minimal length of the whole motif, i.e. the sum of minimal lengths of each  box. Warning:  the  length  of  the gaps between boxes mustn't me taken into account. The total minimal length may differ of the sum of boxs's minimal length:  you  can,  for instance, infer motifs made of two boxes, with min length of boxes equals to 4 and a total min length equals to 10.", "prompt": "Total min length", "name": "minlen", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "\"Total min length\\t\\t\" + str(value)+\"\\n\"", "perl": "\"Total min length\\t\\t$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "smile.params"}, {"comment": "Same explanation as \"Total min length\". Excepted that a 0 length means \"infinity\"", "prompt": "Total max length", "name": "maxlen", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "( \"\" , \"Total max length\\t\\t\" + str(value)+\"\\n\" )[ value is not None ]", "perl": "(defined $value)? \"Total max length\\t\\t$value\\\\n\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "smile.params"}, {"comment": "Total maximum number of substitutions for the motif.", "prompt": "Total substitutions", "name": "subst", "ctrl": {"python": "subst is not None and subst <= minlen", "perl": "defined $subst and $subst <= $minlen"}, "simple": null, "argpos": "13", "format": {"python": "\"Total substitutions\\t\\t\" + str(value)+\"\\n\"", "perl": "\"Total substitutions\\t\\t$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "smile.params"}, {"comment": "The  number of boxes that compose the motifs to infer. Imposed 1 for xml.", "prompt": null, "name": "boxes", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "\"Boxes\\t\\t\\t\\t1\\n\"", "perl": "\"Boxes\\t\\t\\t\\t\\1\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "smile.params"}, {"comment": "The number of shufflings of the original sequences to realize for the evaluation  of the statistical significance of the motifs found.", "prompt": "Number of shufflings", "name": "shuffling", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "( \"\" , \"Shufflings\\t\\t\\t\"+ str(value)+\"\\n\")[value is not None]", "perl": "(defined $value)?  \"Shufflings\\t\\t\\t$value\\\\n\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "smile.params"}, {"comment": "Length of the words to conserve during shufflings (usually 2).", "prompt": "Length of the words to conserve during shufflings", "name": "kmer", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "(\"\" , \"Size k-mer\\t\\t\\t\"+ str(value)+\"\\n\")[value is not None]", "perl": "(defined $value)?  \"Size k-mer\\t\\t\\t$value\\\\n\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "smile.params"}]}, "version": "1.47", "references": [{"url": null, "doi": null, "label": "Marsan L, Sagot MF (2001). Algorithms for extracting structured motifs using a suffix-tree with application to promoter and regulatory site consensus identification. J. of Computational Biology, 7:345-360."}], "source_links": ["http://www-igm.univ-mlv.fr/~marsan/smile_english.html"], "env": [], "authors": "L. Marsan, J. Allali", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "smile"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac47"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Split sequence(s) into smaller sequences", "title": "splitter", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "Use feature information", "name": "e_feature", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -feature\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Size to split at (value greater than or equal to 1)", "name": "e_size", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -size=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Overlap between split sequences (value greater than or equal to 0)", "name": "e_overlap", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -overlap=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Include overlap in output sequence size", "name": "e_addoverlap", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -addoverlap\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "splitter"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/splitter.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "splitter"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac48"}, "classifications": [{"type": "mobyle1", "classification": "alignment:formatter"}, {"type": "mobyle1", "classification": "sequence:formatter"}], "description": "Sequence/Alignment format checker", "title": "SQUIZZ", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": []}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Sequence/Alignment", "name": "infile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enabled by default", "prompt": "Disable strict format checks (-s)", "name": "strict", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -s\")[value is not None and value !=vdef]", "perl": "(defined $value and $value != $vdef) ? \" -s\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "0.99", "references": [], "source_links": [], "env": [], "authors": "N. Joly", "command": {"path": null, "value": "squizz"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/squizz/seqfmt.html", "http://bioweb2.pasteur.fr/docs/squizz/alifmt.html"], "type": "program", "name": "squizz_checker"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac49"}, "classifications": [{"type": "mobyle1", "classification": "alignment:formatter"}, {"type": "mobyle1", "classification": "sequence:formatter"}], "description": "Sequence/Alignment format converter", "title": "SQUIZZ", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": {"python": "not infile_aln or (infile_seq and infile_aln)", "perl": "not $infile_aln or ($infile_seq and $infile_aln)"}, "prompt": "Sequence section", "name": "seq", "children": [{"comment": null, "prompt": "Sequence(s) file", "name": "seq_outfile", "simple": null, "filenames": {"python": "\"squizz_convert.out\"", "perl": "\"squizz_convert.out\""}, "precond": {"python": "infile_seq is not None", "perl": "defined $infile_seq"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "convert_seq"}], "edam_types": [], "card": "1,n"}}]}, {"comment": null, "precond": {"python": "not infile_seq or (infile_seq and infile_aln)", "perl": "not $infile_seq or ($infile_seq and $infile_aln)"}, "prompt": "Alignment section", "name": "aln", "children": [{"comment": null, "prompt": "Alignment file", "name": "aln_outfile", "simple": null, "filenames": {"python": "\"squizz_convert.out\"", "perl": "\"squizz_convert.out\""}, "precond": {"python": "infile_aln is not None and convert_aln is not None", "perl": "defined $infile_aln and defined $convert_aln"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "convert_aln"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Sequence(s) file", "name": "seq2_outfile", "simple": null, "filenames": {"python": "\"squizz_convert.out\"", "perl": "\"squizz_convert.out\""}, "precond": {"python": "infile_aln is not None and convert_seq2 is not None", "perl": "defined $infile_aln and defined $convert_seq2"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "convert_seq2"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": {"python": "not infile_aln or (infile_seq and infile_aln)", "perl": "not $infile_aln or ($infile_seq and $infile_aln)"}, "prompt": "Sequence section", "name": "seq", "children": [{"comment": null, "prompt": "Input", "name": "infile_seq", "ctrl": {"python": "not infile_aln", "perl": "not $infile_aln"}, "simple": null, "argpos": "2", "format": {"python": "\" \"+str(value)", "perl": "\" ($value)\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "IG", "NBRF", "PIR", "RAW", "SWISSPROT"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Convert sequence into sequence format (-c)", "name": "convert_seq", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -S -c \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -S -c $value\" : \"\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "not infile_seq or (infile_seq and infile_aln)", "perl": "not $infile_seq or ($infile_seq and $infile_aln)"}, "prompt": "Alignment section", "name": "aln", "children": [{"comment": null, "prompt": "Input", "name": "infile_aln", "ctrl": {"python": "not infile_seq", "perl": "not $infile_seq"}, "simple": null, "argpos": "2", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["CLUSTAL", "PHYLIPI", "PHYLIPS", "MSF", "NEXUS", "STOCKHOLM", "FASTA", "MEGA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Convert alignment into alignment format (-c)", "name": "convert_aln", "ctrl": {"python": "convert_aln is not None and convert_seq2 is None", "perl": "defined $convert_aln and not defined $convert_seq2"}, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -A -c \"+str(value))[value is not None]", "perl": "(defined $value) ? \"-A -c $value\" : \"\""}, "command": false, "precond": {"python": "convert_seq2 is None or (convert_aln is not None and convert_seq2 is not None)", "perl": "not defined $convert_seq2 or (defined $convert_aln and defined $convert_seq2)"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Convert alignment into sequence format (-c)", "name": "convert_seq2", "ctrl": {"python": "convert_aln is None and convert_seq2 is not None", "perl": "not defined $convert_aln and defined $convert_seq2"}, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -c \"+str(value))[value is not None]", "perl": "(defined $value) ? \" -c $value\" : \"\""}, "command": false, "precond": {"python": "convert_aln is None or (convert_aln is not None and convert_seq2 is not None)", "perl": "not defined $convert_aln or (defined $convert_aln and defined $convert_seq2)"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "0.99", "references": [], "source_links": [], "env": [], "authors": "N. Joly", "command": {"path": null, "value": "squizz"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/squizz/seqfmt.html", "http://bioweb2.pasteur.fr/docs/squizz/alifmt.html"], "type": "program", "name": "squizz_convert"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac4a"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise:global"}], "description": "Needleman-Wunsch rapid global alignment of two sequences", "title": "stretcher", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['FASTA', 'MSF']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out2 option", "name": "e_outfile_out2", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['PAIR', 'MARKX0', 'MARKX1', 'MARKX2', 'MARKX3', 'MARKX10', 'SRS', 'SRSPAIR', 'SCORE', 'UNKNOWN', 'MULTIPLE', 'SIMPLE', 'MATCH']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "bsequence option", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": "This is the scoring matrix file used when comparing sequences. By default it is the file 'EBLOSUM62' (for proteins) or  the file 'EDNAFULL' (for nucleic sequences). These files are  found in the 'data' directory of the EMBOSS installation.", "prompt": "Matrix file", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "12 for protein, 16 for nucleic", "prompt": "Gap penalty (Positive integer)", "name": "e_gapopen", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -gapopen=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "2 for protein, 4 for nucleic", "prompt": "Gap length penalty (Positive integer)", "name": "e_gapextend", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -gapextend=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output alignment file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the alignment output format", "name": "e_aformat_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -aformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "stretcher"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/stretcher.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "stretcher"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac4b"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:primers"}], "description": "Search a DNA database for matches with a set of STS primers", "title": "stssearch", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "StssearchReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "seqall option", "name": "e_seqall", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -seqall=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Primer pairs file", "name": "e_infile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -infile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PrimerPairs", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "stssearch"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/stssearch.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "stssearch"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da593546d52388cac4c"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise:local"}], "description": "Calculate approximate local pair-wise alignments of larger sequences", "title": "supermatcher", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['FASTA', 'MSF']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out2 option", "name": "e_outfile_out2", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['PAIR', 'MARKX0', 'MARKX1', 'MARKX2', 'MARKX3', 'MARKX10', 'SRS', 'SRSPAIR', 'SCORE', 'UNKNOWN', 'MULTIPLE', 'SIMPLE', 'MATCH']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "errorfile_out option", "name": "e_errorfile_out", "simple": null, "filenames": {"python": "e_errorfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SupermatcherError", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "bsequence option", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "2,n"}, "paramfile": null}, {"comment": "This is the scoring matrix file used when comparing sequences. By default it is the file 'EBLOSUM62' (for proteins) or  the file 'EDNAFULL' (for nucleic sequences). These files are  found in the 'data' directory of the EMBOSS installation.", "prompt": "Matrix file", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Minimum alignment score to report an alignment.", "prompt": "Minimum alignment score (value greater than or equal to 0)", "name": "e_minscore", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -minscore=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "10.0 for any sequence type", "prompt": "Gap opening penalty (value from 0.0 to 100.0)", "name": "e_gapopen", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -gapopen=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "0.5 for any sequence type", "prompt": "Gap extension penalty (value from 0.0 to 10.0)", "name": "e_gapextend", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -gapextend=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Alignment width (value greater than or equal to 1)", "name": "e_width", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -width=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Word length for initial matching (value greater than or equal to 3)", "name": "e_wordlen", "ctrl": {"python": "value >= 3"}, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -wordlen=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output alignment file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the alignment output format", "name": "e_aformat_outfile", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -aformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Error file to be written to", "prompt": "errorfile option", "name": "e_errorfile", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\" , \" -errorfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "supermatcher"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/supermatcher.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "supermatcher"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac4d"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:codon_usage"}, {"type": "mobyle1", "classification": "sequence:nucleic:gene_finding"}], "description": "Draw synonymous codon usage statistic plot for a nucleotide sequence", "title": "syco", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_plot and e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_plot and e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_plot and e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_plot and e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_plot and e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SycoReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": "Codon usage file", "prompt": "cfile option", "name": "e_cfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -cfile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Averaging window", "name": "e_window", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -window=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show common codon usage", "name": "e_uncommon", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -uncommon\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Minimum value for a common codon (value from 0.0 to .99)", "name": "e_minimum", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -minimum=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Produce plot", "name": "e_plot", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\" -noplot\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "not e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "syco"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/syco.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "syco"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac4e"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:profiles"}], "description": "Sequence profiles to detect bacterial flagella and non-flagellar type III secretion systems", "title": "T3SSscan - FLAGscan", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Options controlling output", "name": "controlOutput", "children": [{"comment": null, "prompt": "Output file", "name": "output_file_name", "simple": null, "filenames": {"python": "str(outfile_name)", "perl": "$outfile_name"}, "precond": {"python": "outfile_name is not None", "perl": "defined $outfile_name"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output parseable table of per-sequence hits", "name": "output_perseqfile_name", "simple": null, "filenames": {"python": "str(perseqfile_name)", "perl": "$perseqfile_name"}, "precond": {"python": "perseqfile_name", "perl": "$perseqfile_name"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output parseable table of per-domain hits", "name": "output_perdomfile_name", "simple": null, "filenames": {"python": "str(perdomfile_name)", "perl": "$perdomfile_name"}, "precond": {"python": "perdomfile_name", "perl": "$perdomfile_name"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Program description", "name": "prog_desc", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequence file", "name": "seqfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:ul><html:li>\"NF-T3SS\" to query non-flagellar Type III secretion system profiles only,</html:li><html:li>\"Flagellum\" to query flagellar profiles only,</html:li><html:li>\"NF-T3SS+Flagellum\" to query all profiles in a single step.</html:li></html:ul></html:div>", "prompt": "HMM database", "name": "HMMDB", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Options for reporting thresholds", "name": "thresholds_report", "children": [{"comment": "In the per-target output, report target profiles with an E-value of <= value. The\n        default is 10.0, meaning that on average, about 10 false positives will be reported\n        per query, so you can see the top of the 'noise' and decide for yourself if it's really\n        noise.", "prompt": "E_value cutoff (-E)", "name": "E_value_cutoff", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -E \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -E $value\" : \"\""}, "command": false, "precond": {"python": "Bit_cutoff is None and model_specific != '--cut_ga' and model_specific != '--cut_nc'", "perl": "not defined $Bit_cutoff and $model_specific ne '--cut_ga' and $model_specific ne '--cut_nc'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of thresholding per-profile output on E-value, instead report target profiles\n        with a bit score of >= value.", "prompt": "Bit score cutoff (-T)", "name": "Bit_cutoff", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -T \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -T $value\" : \"\""}, "command": false, "precond": {"python": "E_value_cutoff == 10.0 and model_specific != '--cut_ga' and model_specific != '--cut_nc'", "perl": "$E_value_cutoff == 10.0 and $model_specific ne '--cut_ga' and $model_specific ne '--cut_nc'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In the per-domain output, for target profiles that have already satisfied the perprofile\n            reporting threshold, report individual domains with a conditional E-value\n            of <= value. The default is 10.0. A 'conditional' E-value means the expected\n            number of additional false positive domains in the smaller search space of those\n            comparisons that already satisfied the per-profile reporting threshold (and thus\n            must have at least one homologous domain already).", "prompt": "E-value cutoff for the per-domain ranked hit list (--domE)", "name": "domE", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --domE \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --domE $value\" : \"\""}, "command": false, "precond": {"python": "domT is None and model_specific != '--cut_ga' and model_specific != '--cut_nc'", "perl": "not defined $domT and $model_specific ne '--cut_ga' and $model_specific ne '--cut_nc'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of thresholding per-domain output on E-value, instead report domains with\n              a bit score of >= value.", "prompt": "Bit score cutoff for the per-domain ranked hit list  (--domT)", "name": "domT", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --domT \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --domT $value\" : \"\""}, "command": false, "precond": {"python": "domE == 10.0 and model_specific != '--cut_ga' and model_specific != '--cut_nc'", "perl": "$domE == 10.0 and $model_specific ne '--cut_ga' and $model_specific ne '--cut_nc'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "'Inclusion' thresholds are stricter than reporting thresholds. Inclusion thresholds \n            control which hits are considered to be reliable enough to be included in an output alignment or a \n            subsequent search round. In hmmscan, which does not have any alignment output  nor any iterative\n            search steps, inclusion thresholds have little effect. They only affect what domains get\n            marked as significant ('!') or questionable ('?') in domain output.", "precond": null, "prompt": "Options controlling inclusion (significance) thresholds.", "name": "thresholds_inclusion", "children": [{"comment": "Use an E-value of <= value as the per-target inclusion threshold. The default is\n              0.01, meaning that on average, about 1 false positive would be expected in every\n              100 searches with different query sequences.", "prompt": "Include sequences lower than this E-value threshold (--incE)", "name": "incE", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --incE \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and value != vdef) ? \" --incE $value\" : \"\""}, "command": false, "precond": {"python": "incT is None and model_specific != '--cut_ga'", "perl": "not defined $incT and $model_specific ne '--cut_ga'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use a conditional E-value of <= value as the per-domain inclusion threshold, in\n              targets that have already satisfied the overall per-target inclusion threshold. The\n              default is 0.01.", "prompt": "Include domains lower than this E-value threshold  (--incdomE)", "name": "incdomE", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --incdomE \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and value != vdef) ? \" --incdomE $value\" : \"\""}, "command": false, "precond": {"python": "incdomT is not None and model_specific is None", "perl": "defined $incdomT and not defined model_specific"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of using E-values for setting the inclusion threshold, instead use a bit score\n                of >= the value as the per-target inclusion threshold. It would be unusual to use bit\n                score thresholds with hmmscan, because you don't expect a single score threshold\n                to work for different profiles; different profiles have slightly different expected score\n                distributions.", "prompt": "Include sequences upper than this score threshold  (--incT)", "name": "incT", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --incT \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --incT $value\" : \"\""}, "command": false, "precond": {"python": "incE == 0.01 and model_specific != '--cut_ga'", "perl": "$incE == 0.01 and $model_specific ne '--cut_ga'"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instead of using E-values, instead use a bit score of >= value as the per-domain\n                inclusion threshold. As with --incT above, it would be unusual to use a single bit\n                score threshold in hmmscan.", "prompt": "Include domans upper than this score threshold  (--incdomT)", "name": "incdomT", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --incdomT \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --incdomT $value\" : \"\""}, "command": false, "precond": {"python": "incdomE == 0.01 and model_specific is None", "perl": "$incdomE == 0.01 and not defined $model_specific"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Curated profile databases may define specific bit score thresholds for each profile, superseding any thresholding\n            based on statistical significance alone. To use these options, the profile must contain the appropriate\n            (GA, TC, and/or NC) optional score threshold annotation; this is picked up by hmmbuild from Stockholm\n            format alignment files. Each thresholding option has two scores: the per-sequence threshold x1 value and the\n            per-domain threshold x2 value. These act as if -T x1 --incT x1 --domT x2 --incdomT x2 has been\n            applied specifically using each model's curated thresholds.cut ga: Use the GA (gathering) bit scores in the model to set per-sequence (GA1) and\n            per-domain (GA2) reporting and inclusion thresholds. GA thresholds are generally\n            considered to be the reliable curated thresholds defining family membership; for\n            example, in Pfam, these thresholds define what gets included in Pfam Full alignments\n            based on searches with Pfam Seed models.cut_nc: Use the NC (noise cutoff) bit score thresholds in the model to set per-sequence\n            (NC1) and per-domain (NC2) reporting and inclusion thresholds. NC thresholds\n            are generally considered to be the score of the highest-scoring known false positive.cut_tc: Use the NC (trusted cutoff) bit score thresholds in the model to set per-sequence\n            (TC1) and per-domain (TC2) reporting and inclusion thresholds. TC thresholds are\n            generally considered to be the score of the lowest-scoring known true positive that\n            is above all known false positives.", "prompt": "Options for model-specific thresholding", "name": "model_specific", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\""}, "command": false, "precond": {"python": "not Bit_cutoff and E_value_cutoff == 10.0 and incdomT is None and incdomE == 0.01", "perl": "not defined $Bit_cutoff and not $E_value_cutoff == 10.0 and not defined $incdomT and  $incdomE == 0.01"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "HMMER3 searches are accelerated in a three-step filter pipeline: the MSV filter, the Viterbi filter, and\n            the Forward filter. The first filter is the fastest and most approximate; the last is the full Forward scoring\n            algorithm. There is also a 'bias filter' step between MSV and Viterbi. Targets that pass all the steps\n            in the acceleration pipeline are then subjected to 'postprocessing' -- domain identification and scoring\n            using the Forward/Backward algorithm. Changing filter thresholds only removes or includes targets from\n            consideration; changing filter thresholds does not alter bit scores, E-values, or alignments, all of which are\n            determined solely in 'postprocessing'.", "precond": null, "prompt": "Options controlling acceleration heuristics", "name": "acceleration", "children": [{"comment": "Turn off all filters, including the bias filter, and run full Forward/Backward postprocessing\n              on every target. This increases sensitivity somewhat, at a large cost in speed.", "prompt": "Turn all heuristic filters off (less speed, more power) (--max)", "name": "max", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --max \" )[ value ]", "perl": "($value) ? \" --max\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the P-value threshold for the MSV filter step. The default is 0.02, meaning that\n            roughly 2% of the highest scoring nonhomologous targets are expected to pass the filter.", "prompt": "Stage 1 (MSV) threshold", "name": "F1", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --F1 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef ) ? \" --F1 $value\" : \"\""}, "command": false, "precond": {"python": "not max", "perl": "not max"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the P-value threshold for the Viterbi filter step. The default is 0.001.", "prompt": "Stage 1 (Vit) threshold", "name": "F2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --F2 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef ) ? \" --F2 $value\" : \"\""}, "command": false, "precond": {"python": "not max", "perl": "not max"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the P-value threshold for the Forward filter step. The default is 1e-5.", "prompt": "Stage 1 (Fwd) threshold", "name": "F3", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --F3 \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef ) ? \" --F3 $value\" : \"\""}, "command": false, "precond": {"python": "not max", "perl": "not max"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Turn off the bias filter. This increases sensitivity somewhat, but can come at a\n            high cost in speed, especially if the query has biased residue composition (such\n            as a repetitive sequence region, or if it is a membrane protein with large regions\n            of hydrophobicity). Without the bias filter, too many sequences may pass the filter\n            with biased queries, leading to slower than expected performance as the computationally\n            intensive Forward/Backward algorithms shoulder an abnormally heavy\n            load.", "prompt": "Turn off composition bias filter (--nobias)", "name": "nobias", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --nobias \" )[ value ]", "perl": "($value) ? \" --nobias\" : \"\""}, "command": false, "precond": {"python": "not max", "perl": "not max"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Other expert options", "name": "expert", "children": [{"comment": "Turn off the 'null2' score corrections for biased composition.", "prompt": "Turn off biased composition score corrections (--nonull2)", "name": "nonull2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --nonull2 \" )[ value ]", "perl": "($value) ? \" --nonull2\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Assert that the total number of targets in your searches is the value, for the purposes of\n          per-sequence E-value calculations, rather than the actual number of targets seen.", "prompt": "Control of E_value calculation (-Z)", "name": "E_value_calculation", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -Z \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -Z $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Assert that the total number of targets in your searches is the value, for the purposes\n          of per-domain conditional E-value calculations, rather than the number of targets\n          that passed the reporting thresholds.", "prompt": "Set Z score of significant sequences, for domain E-value calculation  (--domZ)", "name": "domZ", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --domZ \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --domZ $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the random number seed to value. Some steps in postprocessing require Monte\n               Carlo simulation. The default is to use a fixed seed (42), so that results are exactly\n               reproducible. Any other positive integer will give different (but also reproducible)\n               results. A choice of 0 uses a 'randomly chosen' seed.", "prompt": "Set RNG seed number (--seed)", "name": "seed", "ctrl": {"python": "0 <= value", "perl": "0 <= $value"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --seed \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --seed $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options controlling output", "name": "controlOutput", "children": [{"comment": null, "prompt": "Name of the sequence(s) file (-o)", "name": "outfile_name", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \" \" , \" -o \" + str(value) )[ value is not None ]", "perl": "(defined $value ) ? \" -o $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Save a simple tabular (space-delimited) file summarizing the 'per-target' output,\n        with one data line per homologous target model found", "prompt": "File name of parseable table of per-sequence hits (--tblout)", "name": "perseqfile_name", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" --tblout \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --tblout $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Save a simple tabular (space-delimited) file summarizing the 'per-domain' output,\n          with one data line per homologous domain detected in a query sequence for each\n          homologous model.", "prompt": "File name of parseable table of per-domain hits (--domtblout)", "name": "perdomfile_name", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" --domtblout \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" --domtblout $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Use accessions instead of names in the main output, where available for profiles\n        and/or sequences", "prompt": "Prefer accessions over names in output", "name": "acc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --acc \" )[ value ]", "perl": "($value) ? \" --acc \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Omit the alignment section from the main output. This can greatly reduce the\n        output volume.", "prompt": "Don't output alignments, so output is smaller", "name": "noali", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --noali \" )[ value ]", "perl": "($value) ? \" --noali \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Unlimit the length of each line in the main output. The default is a limit of 120\n                characters per line, which helps in displaying the output cleanly on terminals and\n                in editors, but can truncate target profile description lines.", "prompt": "Unlimit ASCII text output line width (--notextw)", "name": "notextw", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --notextw \" )[ value ]", "perl": "($value) ? \" --notextw \" : \"\""}, "command": false, "precond": {"python": "textw == 120", "perl": "textw == 120"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set the main output's line length limit to value> characters per line. The default is\n         120.", "prompt": "Set max width of ASCII text output lines (--textw)", "name": "textw", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --textw \" + str(value) )[ value is not None and value !=vdef ]", "perl": "(defined $value and $value != $vdef) ? \" --textw $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [{"url": null, "doi": "10.1371/journal.pgen.1002983", "label": "The Non-Flagellar Type III Secretion System Evolved from the Bacterial Flagellum and Diversified into Host-Cell Adapted Systems.\n           Abby SS, Rocha EPC (2012). \n           PLoS Genet 8(9): e1002983"}, {"url": null, "doi": null, "label": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:h4>HMMER is an implementation of profile HMM methods for sensitive database searches using multiple sequence alignments as queries.</html:h4><html:div class=\"reference\">Eddy, S. R. (2011). Accelerated Profile HMM Searches. PLoS Comput. Biol., 7(10): e1002195.</html:div></html:div>"}, {"url": null, "doi": null, "label": "Eddy, S. R. (2008). A probabilistic model of local sequence alignment that simplifies statistical significance estimation. PLoS Comput. Biol., 4:e1000069."}, {"url": null, "doi": null, "label": "Eddy, S. R. (1998). Profile hidden Markov models. Bioinformatics, 14:755-763."}], "source_links": [], "env": [], "authors": "Abby, S.S and Rocha, E.P.", "command": {"path": null, "value": "hmmscan"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/hmmer/Userguide.pdf"], "type": "program", "name": "T3SSscan-FLAGscan"}, {"comment": null, "homepage_links": ["http://tacg.sourceforge.net/"], "_id": {"$oid": "51434da693546d52388cac4f"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:pattern"}], "description": "Restriction Enzyme analysis", "title": "TACG", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Tacg output file", "name": "outfile", "simple": null, "filenames": {"python": "\"tacg.out\"", "perl": "\"tacg.out\""}, "precond": {"python": "not html", "perl": "not $html"}, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "TacgTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Postscript file", "name": "psfile", "simple": null, "filenames": {"python": "\"*.ps\"", "perl": "\"*.ps\""}, "precond": {"python": "ps", "perl": "$ps"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Html file", "name": "htmlfile", "simple": null, "filenames": {"python": "\"*.html\"", "perl": "\"*.html\""}, "precond": {"python": "html", "perl": "$html"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "TacgHtmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "DNA Sequence", "name": "sequence", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\" < \" + str( value ) + \" \"", "perl": "\" < $value \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Input options", "name": "input_options", "children": [{"comment": "Select  the beginning  of a subsequence  from a larger sequence file. The smallest sequence that tacg can handle is 4 bases, 10 for the ladders map (-l). This allows analysis of primers and linkers.", "prompt": "Beginning of a subsequence in your sequence (-b)", "name": "beginning", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -b \" + str( value ) )[ value is not None ]", "perl": "(defined $value)? \" -b $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "End of a subsequence in your sequence (-e)", "name": "end", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -e \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -e $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Form (or topology) of DNA (-f)", "name": "topology", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -f \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -f $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The  pattern  matching  is adaptive; given a small window of nondegenerate sequence, the algorithm will match very fast; if degenerate  sequence  is  detected,  it  will switch  to a slower, iterative approach.  This results in speed that is proportional to degeneracy for most cases.", "prompt": "Degeneracy flag - controls input and analysis of degenerate sequence input (-D)", "name": "degeneracy", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -D \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne  $vdef)? \" -D $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Codon Usage table to use for translation (-C)", "name": "codon", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -C \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -C $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": null, "prompt": "Order the output by number of cuts/fragments (-c)", "name": "order_by_cut", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -c\" )[ value ]", "perl": "($value)? \" -c\" : \"\""}, "command": false, "precond": {"python": "print_fragments != 0 or sites  or ladder_map  or gel_map", "perl": "$print_fragments != 0 or $sites  or $ladder_map  or $gel_map"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The number  is truncated to a # exactly divisible by 15 (-w 100  will  be interpreted as -w 90) and actual printed output will be about 20 characters wider. Also applies to output of the ladder and gel maps, so if you are trying to  get  more accuracy  and  your  output device can display small fonts, you may want to use this flag to widen the output.", "prompt": "Output width (-w)", "name": "width", "ctrl": {"python": "value >= 60 and value <= 210", "perl": "$value >= 60 and $value <= 210"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -w \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -w $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Histogram output (-G)", "name": "graphic", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -G\" + str(binsize) +\",\" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -G$binsize,$value\" : \"\""}, "command": false, "precond": {"python": "binsize is not None", "perl": "defined $binsize"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "N bases for which hits should be pooled (integer)", "prompt": "Step size in histogram", "name": "binsize", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "graphic", "perl": "$graphic"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Controls the output for sequences (in a  collection)  that  have  no  hits  for  the options  selected.", "prompt": "Controls the output for sequences (-i)", "name": "idonly", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -i \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne  $vdef)? \" -i $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Generates  HTML  tags (-H)", "name": "html", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -H\")[value]", "perl": "($value)? \" -H\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Generates  a  postscript plasmid map (--ps)", "name": "ps", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" --ps\")[value]", "perl": "($value)? \" --ps\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Enzymes Selection options", "name": "selection_options", "children": [{"comment": null, "prompt": "Maximum number of cuts allowed in sequence (-M)", "name": "max_cut", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -M \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -M $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Minimum number of cuts in sequence for the enzyme to be selected (-m)", "name": "min_cut", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -m \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -m $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The 'magnitude' of the recognition sequence depends on the number of defined bases that make up the site. Degenerate bases can also contribute:acgt each count '1' magnitude pointyrwsmk each count '1/2' magnitude pointbdhu each count '1/4' magnitude pointn doesn't count at allThose enzymes sequences' patterns that 'sum' to the equivalent of at least the given magnitude pass the testThe values are upwardly inclusive (5=5,6,7,8 6=6,7,8 ...)", "prompt": "Select enzymes by magnitude of recognition site (-n)", "name": "magnitude", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -n \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -n $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Select enzymes by overhang generated (-o)", "name": "overhang", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -o \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -o $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Analyses", "name": "analyses", "children": [{"comment": "Prints  the  summary  of site information, describing how many  times   each pattern matches the sequence.  Those that match zero times are shown first.  In Ver >2, only those that match at least once are shown in the second part (the 0 matchers are  not reiterated)", "prompt": "Summary of site information (-s)", "name": "summary", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -s\" )[ value ]", "perl": "($value)? \" -s\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Print/sort table of fragments (-F)", "name": "print_fragments", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -F \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -F $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Table of actual cut sites (-S)", "name": "sites", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -S 1\" )[ value ]", "perl": "($value)? \" -S 1\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specify if you want a ladder map of selected enzymes, much like the GCG MAPPLOT output.  Also appends a summary of those enzymes that match a few times.  The number of matches that is included in the  summary  is  length-sensitive  in  the  distributed source  code.", "prompt": "Ladder map of selected enzymes (-l)", "name": "ladder_map", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -l\" )[ value ]", "perl": "($value)? \" -l\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Print a pseudo-graphic gel map (-g)", "name": "gel_map", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -g \" + str(cutoff) )[ value ]", "perl": "($value)? \" -g $cutoff\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "You can cut off any size in 10^n increments (as you might want to cut off very large fragments if you were doing chromosomal digests).", "prompt": "Low-end cutoff in number of bases for gel map (>= 10)", "name": "cutoff", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "gel_map", "perl": "$gel_map"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Linear map", "name": "linear_map_options", "children": [{"comment": "This spews the most output (about 10x  the  #  of input  characters) and depending on what other options are specified, can be of moderate to very  little use. If you want the co-translation, you'll have to specify it via the -T flag below.  The Linear map also no longer shows ALL the  patterns  that match from the pattern file.  It now obeys the same filtering rules that the Sites, Fragments, Ladder Map and other analyses do.", "prompt": "Specify if you want linear map (-L)", "name": "linear_map", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -L\" )[ value ]", "perl": "($value)? \" -L\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Requests frames 1, 1-3, or 1-6 to be cotranslated with the Linear Map using 1  or  3 letter codes.", "prompt": "Linear co-translation (-T)", "name": "translation", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -T \" + str(translation_frames) + \",\" + str(three_letter) )[ value ]", "perl": "($value)? \" -T $translation_frames,$three_letter\" : \"\""}, "command": false, "precond": {"python": "linear_map  and three_letter is not None and translation_frames is not None", "perl": "$linear_map  and defined  $three_letter and defined $translation_frames"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Translation in how many frames", "name": "translation_frames", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "translation", "perl": "$translation"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Translation code ( 1 or 3-letter)", "name": "three_letter", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "translation", "perl": "$translation"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Open Reading Frames", "name": "orf_options", "children": [{"comment": null, "prompt": "Do an ORF analysis (-O)", "name": "orf", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -O \" + str(frame)+\",\"+ str(min_size) )[ value ]", "perl": "($value)? \" -O $frame,$min_size\" : \"\""}, "command": false, "precond": {"python": "frame is not None and min_size is not None", "perl": "defined $frame and defined $min_size"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Frames to search", "name": "frame", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "orf", "perl": "$orf"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "MultipleChoice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Min ORF size", "name": "min_size", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "orf", "perl": "$orf"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Pattern Search", "name": "pattern_search_options", "children": [{"comment": null, "prompt": "Do a pattern search (-p)", "name": "pattern_search", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -p \" + str(Name)+\",\"+ str(pattern) +\",\" + str(errors) )[ value ]", "perl": "($value)? \" -p $Name,$pattern,$errors\" : \"\""}, "command": false, "precond": {"python": "Name is not None  and pattern is not None and errors is not None", "perl": "defined $Name and defined $pattern and defined $errors"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Pattern (<30 IUPAC character)", "name": "pattern", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "pattern_search", "perl": "$pattern_search"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Max number of errors that are tolerated (<6) (-p)", "name": "errors", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "pattern_search", "perl": "$pattern_search"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Label of pattern", "name": "Name", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "pattern_search", "perl": "$pattern_search"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Search for spatial relationships between factors (-P)", "name": "proximity_options", "children": [{"comment": "Use  this  option to search for spacial relationships between factors, 2 at a time (up to a total of 10).", "prompt": "Do a proximity search", "name": "proximity", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -P \" + str(nameA)+\",\" + str(distance)+ \",\" + str(nameB) )[ value ]", "perl": "($value)? \" -P $nameA,$distance,$nameB\" : \"\""}, "command": false, "precond": {"python": "nameA is not None and distance is not None and nameB is not None", "perl": "defined $nameA and defined $distance and defined $nameB"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Distance specification: [+-][lg]Dist_Lo[-Dist_Hi+ NameA is DOWNSTREAM of NameB (default is either)- NameA is UPSTREAM of NameB (ditto)l NameA is LESS THAN Dist_Lo from NameB (default)g NameA is GREATER THAN Dist_Lo from NameB", "prompt": "Distance between factors", "name": "distance", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "proximity", "perl": "$proximity"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "NameA must be enzymes names (Rebase db)", "prompt": "Name of first factor (nameA)", "name": "nameA", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "proximity", "perl": "$proximity"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "NameB must be enzymes names (Rebase db)", "prompt": "Name of second factor (nameB)", "name": "nameB", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"\"", "perl": "\"\""}, "command": false, "precond": {"python": "proximity", "perl": "$proximity"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}]}]}, "version": "4.1.0", "references": [], "source_links": ["http://sourceforge.net/projects/tacg/files/"], "env": [], "authors": "Mangalam", "command": {"path": null, "value": "tacg"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/tacg/tacg4.0.main.html"], "type": "program", "name": "tacg"}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>targetp  predicts  the subcellular location of eukaryotic protein sequences. The assignment is based on the\n       predicted presence of any of the N-terminal presequences: chloroplast transit peptide (cTP),  mitochondrial\n       targeting  peptide (mTP) or secretory pathway signal peptide (SP).</html:p><html:p>targetp comes in two versions, one for plant proteins (-P) and one for non-plant proteins (-N). In the lat&#8208;\n       ter  case cTP is a forbidden prediction. For the sequences predicted to contain an N-terminal presequence a\n       prediction of its length can be provided (-c).</html:p><html:p><html:strong>CAVEATS :</html:strong><html:br />Submit if possible 130 N-terminal residues. The suggested length is  due  to  the  fact  that  targetp  was\n       trained  taking into account the 130 N-terminal residues, and the fact that using longer sequences does not\n       influence the prediction in any way (apart from making it slower). The cTP and mTP  cleavage  site  predic&#8208;\n       tions  are restricted to search for a potential cleavage site within the 100 or 120 N-terminal amino acids,\n       respectively.</html:p></html:div>", "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac50"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:localization"}], "description": "predicts the subcellular location of eukaryotic proteins.", "title": "targetp", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>The output is in plain text; it will go to stdout. For each input sequence the following is printed (on one line):</html:p><html:ul><html:li><html:strong>Name :</html:strong>Sequence name truncated to 20 characters.</html:li><html:li><html:strong>Len :</html:strong>Sequence length.</html:li><html:li><html:strong>cTP, mTP, SP, other :</html:strong>Final NN scores on which the final prediction is based (Loc, see below). Note that  the  scores  are\n              not  really  probabilities,  and  they do not necessarily add to one. However, the location with the\n              highest score is the most likely according to targetp, and the relationship between the scores  (the\n              reliability class, see below) may be an indication of how certain the prediction is.</html:li><html:li><html:strong>Loc :</html:strong>Prediction of localization, based on the scores above; the codes are:<html:ul><html:li><html:strong>C :</html:strong>Chloroplast, i.e. the sequence contains cTP, a chloroplast transit peptide;</html:li><html:li><html:strong>M :</html:strong>Mitochondrion, i.e. the sequence contains mTP, a mitochondrial targeting peptide;</html:li><html:li><html:strong>S :</html:strong>Secretory pathway, i.e. the sequence contains SP, a signal peptide;</html:li><html:li><html:strong>_ :</html:strong>any other location;</html:li><html:li><html:strong>* :</html:strong>\"don't know\". This character appears if cutoff\n                  restrictions were demanded (-p, -t, -s, -o, see\n                  below) and the winning network output score was below the requested cutoff for that category.</html:li></html:ul></html:li><html:li><html:strong>RC :</html:strong>Reliability  class,  from 1 to 5, where 1 indicates the strongest prediction. RC is a measure of the\n              size of the difference ('diff') between the highest (winning) and the second highest output  scores.\n              There are 5 reliability classes, defined as follows:<html:ol><html:li>diff &gt; 0.8</html:li><html:li>0.800 &gt; diff &gt; 0.600</html:li><html:li>0.600 &gt; diff &gt; 0.400</html:li><html:li>0.400 &gt; diff &gt; 0.200</html:li><html:li>0.200 &gt; diff</html:li></html:ol>Thus, the lower the value of RC the safer the prediction.</html:li><html:li><html:strong>TPlen :</html:strong>predicted presequence length (only when the -c option is given).</html:li></html:ul></html:div>", "prompt": "targetp report", "name": "results", "simple": null, "filenames": {"python": "\"targetp.out\"", "perl": "\"targetp.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "targetp", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "targetp", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"targetp \"", "perl": "\"targetp \""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Input Sequence", "name": "sequence", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "\" \" + str( value )", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use the plant or non-plant version.", "name": "type", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "( \" -N \", \" -P \")[ value == 'p' ]", "perl": "( $value eq 'p')? \" -P \": \" -N \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Include cleavage site prediction (-c).", "name": "cleavege", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "( \"\" , \" -c \")[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef)? \" -c \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "predefined set of cutoffs that yielded this specificity on the TargetP test sets.", "precond": null, "prompt": "Cutoffs", "name": "cutoffs", "children": [{"comment": null, "prompt": null, "name": "predefined_cutoff", "ctrl": null, "simple": null, "argpos": "30", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The user cutoffs will be ignored if a predefine set of cutoffs is specified", "precond": {"python": "not predefined_cutoff"}, "prompt": "define your own Cutoffs", "name": "user_cutoffs", "children": [{"comment": "In  order to increase the specificity of cTP prediction, use Pcut as a cutoff for predicting cTP: if\n              the winning score is the chloroplast (cTP) score, specifying Pcut means that the score also  has  to\n              be above that value; if not, the sequence will be left unpredicted, and an asterisk (*) will be out\u2010\n              put in the Loc column.The value of Pcut must be between 0.0 and 1.0.", "prompt": "cTP", "name": "cTP", "ctrl": {"python": "value >= 0.0 or value <= 1.0", "perl": "$value >= 0.0 or $value <= 1.0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -p \" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef)? \" -p $value \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In  order to increase the specificity of mTP prediction, use Tcut as a cutoff for predicting mTP: if\n              the winning score is the mithochondrial (mTP) score, specifying Tcut means that the score also  has  to\n              be above that value; if not, the sequence will be left unpredicted, and an asterisk (*) will be out\u2010\n              put in the Loc column.The value of Tcut must be between 0.0 and 1.0.", "prompt": "mTP", "name": "mTP", "ctrl": {"python": "value >= 0.0 or value <= 1.0", "perl": "$value >= 0.0 or $value <= 1.0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -t \" + str( value ) )[ value is not None and value != vdef ]", "perl": "( defined $value and $value ne $vdef)? \" -t $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In  order to increase the specificity of SP prediction, use Scut as a cutoff for predicting SP: if\n              the winning score is the Secretory pathway (SP) score, specifying Scut means that the score also  has  to\n              be above that value; if not, the sequence will be left unpredicted, and an asterisk (*) will be out\u2010\n              put in the Loc column.The value of Scut must be between 0.0 and 1.0.", "prompt": "SP", "name": "SP", "ctrl": {"python": "value >= 0.0 or value <= 1.0", "perl": "$value >= 0.0 or $value <= 1.0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -s \" + str( value ) )[ value is not None and value != vdef ]", "perl": "( defined $value and $value ne $vdef)? \" -s $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In  order to increase the specificity of any other location prediction, use Ocut as \n              a cutoff for predicting any other location : if\n              the winning score is the other location score, specifying Ocut means that the score also  has  to\n              be above that value; if not, the sequence will be left unpredicted, and an asterisk (*) will be out\u2010\n              put in the Loc column.The value of Ocut must be between 0.0 and 1.0.", "prompt": "other", "name": "other", "ctrl": {"python": "value >= 0.0 or value <= 1.0", "perl": "$value >= 0.0 or $value <= 1.0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -o \" + str( value ) )[ value is not None and value != vdef ]", "perl": "( defined $value and $value ne $vdef)? \" -o $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}]}, "version": "1.1", "references": [{"url": null, "doi": null, "label": "Predicting subcellular localization of proteins based on their N-terminal amino acid sequence.\n        Olof Emanuelsson, Henrik Nielsen, S\u00f8ren Brunak and Gunnar von Heijne.\n        J. Mol. Biol., 300: 1005-1016, 2000."}, {"url": null, "doi": null, "label": "Identification of prokaryotic and eukaryotic signal peptides and prediction of their cleavage sites.\n         Henrik Nielsen, Jacob Engelbrecht, S\u00f8ren Brunak and Gunnar von Heijne.\n         Protein Engineering, 10:1-6, 1997."}], "source_links": ["http://www.cbs.dtu.dk/cgi-bin/nph-sw_request?targetp"], "env": [], "authors": "Olof Emanuelsson, olof@sbc.su.se", "command": {"path": null, "value": null}, "documentation_links": ["http://www.cbs.dtu.dk/services/TargetP/"], "type": "program", "name": "targetp"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac51"}, "classifications": [{"type": "mobyle1", "classification": "database:search:display"}], "description": "taxoptimizer reports taxonomic information for each Blast HIT", "title": "taxoptimizer", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "taxoptimizer secondary output", "prompt": "SequencesWithNoTaxoOutput", "name": "OutputNoTaxonomy", "simple": null, "filenames": {"python": "\"ptaxoptimizer_NoTaxo.out\""}, "precond": {"python": "NoTaxonomyInfo is not None"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": "Reports Taxonomic annotation and concatenates to blast results", "prompt": "Output file", "name": "OutputFile", "simple": null, "filenames": {"python": "\"ptaxoptimizer.out\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "outputformat"}], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "Tabulated file", "prompt": "Blast Result input file", "name": "inputFile", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "' -i ' + str(value)"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Output Options", "name": "ptaxoptimizerOptions", "children": [{"comment": "Column number to parse (default second column: 2)", "prompt": "Column number to parse (default second column: 2)", "name": "columnNumber", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "' -c ' + str(value)"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Specified Database name for finding taxonomy in only one database.", "prompt": "Specific database to reduce the query", "name": "database", "ctrl": null, "simple": null, "argpos": "40", "format": {"python": "('',' -d '+ str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Add description (DE) in output", "prompt": "Add description in output", "name": "description", "ctrl": null, "simple": null, "argpos": "70", "format": {"python": "('',' -e ')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Only write lines with taxonomy information in output file", "prompt": "Limit the output only to sequences with taxonomic information", "name": "OnlyTaxonomyInformation", "ctrl": null, "simple": null, "argpos": "70", "format": {"python": "('',' -x ')[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Outputs sequences with no taxonomic information", "prompt": "Reports sequences with no taxo output in another output file", "name": "NoTaxonomyInfo", "ctrl": null, "simple": null, "argpos": "80", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Output File Name", "name": "OutputFileName", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.0", "references": [], "source_links": [], "env": [], "authors": "C. Maufrais", "command": {"path": null, "value": "taxoptimizer"}, "documentation_links": [], "type": "program", "name": "taxoptimizer"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac52"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:gene_finding"}], "description": "Identify protein-coding regions using Fickett TESTCODE statistic", "title": "tcode", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_plot and e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_plot and e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_plot and e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_plot and e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_plot and e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "The default data file is Etcode.dat and contains coding probabilities for each base. The probabilities are for both  positional and compositional information.", "prompt": "Testcode data file", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "TestcodeData", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "This is the number of nucleotide bases over which the TESTCODE statistic will be performed each time. The window will  then slide along the sequence, covering the same number of bases  each time.", "prompt": "Length of sliding window (value greater than or equal to 200)", "name": "e_window", "ctrl": {"python": "value >= 200"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -window=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "The selected window will, by default, slide along the nucleotide sequence by three bases at a time, retaining the frame  (although the algorithm is not frame sensitive). This may be  altered to increase or decrease the increment of the slide.", "prompt": "Stepping increment for the window (value greater than or equal to 1)", "name": "e_step", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -step=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "On selection a graph of the sequence (X axis) plotted against the coding score (Y axis) will be displayed. Sequence  above the green line is coding, that below the red line is  non-coding.", "prompt": "Graphical display", "name": "e_plot", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -plot\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "not e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "not e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_plot"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "tcode"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/tcode.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "tcode"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac53"}, "classifications": [{"type": "mobyle1", "classification": "display:information"}], "description": "Search the textual description of sequence(s)", "title": "textsearch", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "TextsearchReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "The search pattern is a regular expression. Use a | to indicate OR. \n  For example: \n  human|mouse \n  will find text with either 'human' OR 'mouse' in the text", "prompt": "Enter a pattern to search for", "name": "e_pattern", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -pattern=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Do a case-sensitive search", "name": "e_casesensitive", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -casesensitive\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Format output as an html table", "name": "e_html", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -html\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is a way of shortening the command line if you only want a few things to be displayed. Instead of specifying: \n  '-nohead -noname -nousa -noacc -nodesc' \n  to get only the name output, you can specify \n  '-only -name'", "prompt": "Display the specified columns", "name": "e_only", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -only\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display column headings", "name": "e_heading", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -heading\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display the usa of the sequence", "name": "e_usa", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -usa\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'accession' column", "name": "e_accession", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -accession\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'name' column", "name": "e_name", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -name\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display 'description' column", "name": "e_description", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -description\")[ bool(value) ]"}, "command": false, "precond": {"python": "not e_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "textsearch"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/textsearch.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "textsearch"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac5a"}, "classifications": [{"type": "mobyle1", "classification": "alignment:multiple"}], "description": "Generate an alignment of nucleic coding regions from aligned proteins", "title": "tranalign", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "bsequence option", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA", "MSF", "PAIR", "MARKX0", "MARKX1", "MARKX2", "MARKX3", "MARKX10", "SRS", "SRSPAIR", "SCORE", "UNKNOWN", "MULTIPLE", "SIMPLE", "MATCH"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Genetic codes", "name": "e_table", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -table=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "tranalign"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/tranalign.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "tranalign"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac54"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:transcription"}], "description": "Identify transcription factor binding sites in DNA sequences", "title": "tfscan", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "A \"quality\" value ranging from 1 to 6 and reflecting the experimental reliability of a certain\nprotein-DNA interaction. These values have the following meaning:1 -- functionally confirmed factor binding site2 -- binding of pure protein (purified or recombinant)3 -- immunologically characterized binding activity of a cellular extract4 -- binding activity characterized via a known binding sequence5 -- binding of uncharacterized extract protein to a bone fide element6 -- no quality assigned.", "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Transcription factor class", "name": "e_menu", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -menu=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Transfac database data file (optional)", "name": "e_custom", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -custom=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_menu==\"C\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "TransfacData", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Number of mismatches (value greater than or equal to 0)", "name": "e_mismatch", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -mismatch=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Display matches equal to or above this length (value greater than or equal to 1)", "name": "e_minlength", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -minlength=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "tfscan"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/tfscan.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "tfscan"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac55"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:tree_analyser"}], "description": "Analysis of trees with dated tips", "title": "TipDate", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Tree file", "name": "outtree", "simple": null, "filenames": {"python": "\"tipdate.out\"", "perl": "\"tipdate.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "TipDate  requires a  sequence alignment together with a description of the quartets and dates to be used. The idea is that the user may supply an alignment of a large number of species and then define multiple quartets to be constructed from them.Note that the sequences names have a date at the end (in this case in years). TipDate looks for any number at the end of the names and assumes these are dates. They can be decimal (i.e. 98.2) is 98 and 1/5 (if you want months specify the whole date in months). The units are arbitrary because the rates and dates estimated by the program will be specified in the same units the program doesn't need to know what they are.", "prompt": "Alignment file", "name": "alignment", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" <\" + str(value)", "perl": "\" <$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "TipdateAlignment", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control options", "name": "control_options", "children": [{"comment": "Model This option sets the model of nucleotide substitution with a choice of either F84, HKY (also known as HKY85) or REV (markov general reversable model). The first two models are quite similar but not identical.  They both require a transition transversion ratio and relative base frequencies as parameters.  Other models such as K2P, F81 and JC69 are special cases of HKY and can be obtained by setting the nucleotide frequencies equal (for K2P) or the transition transversion ratio to 1.0 (for F81) or both (for JC69).", "prompt": "MODEL (-m)", "name": "model", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -m\" + str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef)? \" -m$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option specifies the Molecular Clock model (Single Rate, SR model). This model is the equivalent of the DNAMLK program in PHYLIP or specifying the molecular clock option in PAUP*. The default (i.e., not specifying k) gives the Non-Clock model (Different Rate, DR model).", "prompt": "Molecular clock model (-k)", "name": "constant_rate", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -k\" )[ value ]", "perl": "($value) ? \" -k\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option specifies the Variable Rate Dated Tip\n(VRDT) model. This model assumes that the rate of substitution changes linearly\nas we go back through time. The rate of change of rate is given as a proportion\nof the rate of substitution at the present. This rate can be positive or negative but not all data sets will have the power to estimate this parameter.Using this option will estimate the rate of evolution as a maximum likelihood parameter. You can also constrain the estimation of this parameter to be only positive or only negative", "prompt": "Variable Rate Tip Date Model (+w)", "name": "change_rate_estim", "ctrl": {"python": "( tip_date or tip_date_specified )", "perl": "$tip_date or $tip_date_specified"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value !=vdef and value != \"-w\"]", "perl": "($value ne $vdef and $value ne \"-w\") ? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Where value is an real number that gives the rate of change of rate as proportion of rate at present per unit time.", "prompt": "Variable Rate Tip Date Model with user value (-w)", "name": "user_rate_value", "ctrl": {"python": "tip_date or tip_date_specified", "perl": "$tip_date or $tip_date_specified"}, "simple": null, "argpos": null, "format": {"python": "\" -w \" + str(value)", "perl": "\" -w $value\""}, "command": false, "precond": {"python": "change_rate_estim == \"-w\"", "perl": "$change_rate_estim eq \"-w\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Estimate confidence intervals for the rate of change of rate parameter in the Variable Rate Dated Tip model (requires +w option).", "prompt": "Estimate confidence intervals ( require +w option) (-iw)", "name": "change_confidence", "ctrl": {"python": "change_rate_estim is not None and change_rate_estim != \"-w\"", "perl": "(defined $change_rate_estim and $change_rate_estim ne \"-w\")"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -iw\" )[ value ]", "perl": "($value)? \" -iw\" : \"\""}, "command": false, "precond": {"python": "change_confidence", "perl": "defined $change_confidence"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option specifies the Single Rate Date Tips (SRDT) model. The default value is the Non-Clock model. The input tree and sequences must have names that end with dates. Using this option will estimate the rate of evolution as a maximum likelihood parameter.", "prompt": "Tip Date Model with estimation of the rate of evolution (+s)", "name": "tip_date", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" +s\" )[ value  ]", "perl": "($value) ? \" +s\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option specifies which parameters should have confidence intervals estimated. The default is not to estimate confidence intervals. These options can be used in combination.", "prompt": "Estimate confidence intervals for the absolute rate of substitution (-is)", "name": "substitution_confidence", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -is\" )[ value ]", "perl": "($value)? \" -is\" : \"\""}, "command": false, "precond": {"python": "tip_date", "perl": "$tip_date"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Estimate confidence intervals for date of root of tree (-id)", "name": "date_confidence", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -id\" )[ value ]", "perl": "($value)? \" -id\" : \"\""}, "command": false, "precond": {"python": "tip_date", "perl": "$tip_date"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option specifies the value to use to obtain the confidence intervals around the estimate of rate of molecular evolution (and corresponding date of root of the tree).Where value is a real number >= 0 that specifies the log likelihood ratio that gives the confidence interval. The default is 1.92 which corresponds to half c2 with 1 degree of freedom. A value of 0 will disable the calculation of confidence intervals.", "prompt": "Limit to use estimating confidence intervals (-l)", "name": "limit", "ctrl": {"python": "value >= 0", "perl": "$value >= 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -l \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -l $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Where the value is an real number that gives the rate of molecular evolution in substitutions per site per unit time (whatever the units of time that are represented by the input tip dates).Variable Rate Tip Date Model This option specifies the Variable Rate Dated Tip (VRDT) model. This model assumes that the rate of substitution changes linearly as we go back through time. The rate of change of rate is given as a proportion of the rate of substitution at the present. This rate can be positive or negative but not all data sets will have the power to estimate this parameter. This model must be used in conjunction with the +s or -s options, above.", "prompt": "Tip date Model without estimation of the rate of evolution: user value (-s)", "name": "tip_date_specified", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -s \" + str(value) )[ value is not None]", "perl": "(defined $value) ? \" -s $value\" : \"\""}, "command": false, "precond": {"python": "not tip_date", "perl": "not $tip_date"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Alternatively TipDate can find the maximum likelihood position of the root. This tries all possible positions (2n-3) so increases the duration of analysis.", "prompt": "Estimate root tree (+r)", "name": "root_value_estimate", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" +r\" )[ value  ]", "perl": "($value) ? \" +r\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The input tree must be rooted. This option is used to specify an outgroup sequence to root the tree with (sorry this is not very sophisticated: if you need to use more than one outgroup, root the tree before hand).Where value is an integer number which refers to the sequence that will be used to root the tree (starting at 1).", "prompt": "Specify rooting of tree To perform the molecular clock and tip date models (-r)", "name": "root_value", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -r \" + str(value) )[ value is not None and value !=vdef]", "perl": "(defined $value and $value!=$vdef) ? \" -r $value\" : \"\""}, "command": false, "precond": {"python": "not root_value_estimate", "perl": "not $root_value_estimate"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "CODON CATEGORIES = 112, 123, 120, etc. [default: homogeneity] (-p)", "name": "codon_categories", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -p \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -p $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Using this option the user may specify the relative rates for each codon position. This allows codon-specific rate heterogeneity to be modelled. The default is no site-specific rate heterogeneity.", "prompt": "CODON-specific Rate Heterogeneity: #1 #2 #3 separated by commas (-c)", "name": "codon_rate", "ctrl": {"python": "len(value.split(',')) == 3", "perl": "$value ~= /\\d+(,\\d+){2}/"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -c\" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -c$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Estimate seperate models for each site category (-e)", "name": "seperate", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -e\" )[ value ]", "perl": "($value)? \" -e\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Using this option the user may specify the\n\t      number of categories for the discrete gamma rate heterogeneity model. Enter an integer between 2 and 32 that specifies the number of categories to use with the discrete gamma rate heterogeneity model.", "prompt": "Discrete Gamma Rate Heterogeneity (2 to 32) (-g)", "name": "gamma", "ctrl": {"python": "value <= 32 and value >= 2", "perl": "$value <= 32 and $value >= 2"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -g \" + str(value) )[ value is not None ]", "perl": "(defined $value)? \" -g $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Using this option the user may specify a shape for the gamma rate heterogeneity called alpha. The default is no site-specific rate\nheterogeneity. Where value is a real number >0 that specifies the shape of the gamma distribution to use with gamma rate heterogeneity.", "prompt": "Gamma Rate Heterogeneity (-a)", "name": "alpha", "ctrl": {"python": "value > 0", "perl": "$value > 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -a \" + str(value) )[value is not None]", "perl": "(defined $value)? \" -a $value\" : \"\""}, "command": false, "precond": {"python": "gamma is not None", "perl": "defined $gamma"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Number of Datasets (-n)", "name": "datasets", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -n \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -n $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "User branch-lengths [default = estimate] (-ul)", "name": "user_branch", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -ul\" ) [value]", "perl": "($value) ? \" -ul\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Equal frequencies of nucleotide (-f=)", "name": "equal_freq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -f=\" )[ value ]", "perl": "($value)? \" -f=\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option is used to specify the relative\n\t      frequencies of the four nucleotides. By default, TipDate will estimate them empirically from the data.  If the given values don't sum to 1.0 then they will be scaled so that they do.Value is four decimal numbers for the frequencies of A, C, G and T respectively, separated by commas.", "prompt": "Relative nucleotide frequencies: #A #C #G #T separated by commas (-f)", "name": "freq_bases", "ctrl": {"python": "len(value.split(',')) == 4", "perl": "$value ~= /\\d+(,\\d+){3}/"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -f\" + str(value) )[ value is not None]", "perl": "(defined $value)? \" -f$value\" : \"\""}, "command": false, "precond": {"python": "not equal_freq", "perl": "not $equal_freq"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option allows the user to set a value for the transition transversion ratio (TS/TV). This is only valid when either the HKY or F84 model has been selected. Value is a decimal number greater than zero.", "prompt": "Transition/transversion ratio for F84/HKY model (-t)", "name": "transition_transversion", "ctrl": {"python": "value >= 0", "perl": "$value >= 0"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -t\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef)? \" -t$value\" : \"\""}, "command": false, "precond": {"python": "model == \"F84\" or model == \"HKY\"", "perl": "$model eq \"F84\" or $model eq \"HKY\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Where value are size decimal numbers for the instantaneous rates of change from A to C, A to G, A to T, C to G, C to T and G to T respectively, separated by commas. The matrix is symmetrical so the reverse changes occur at the same instantaneous rate as forward changes (e.g. C to A equals A to C) and therefore only six values need be set. These values will be scaled such that the last value (G to T) is 1.0 and the others are set relative to this.", "prompt": "Rate matrix values for REV model: 6 values separated by commas (-t)", "name": "rate_matrix", "ctrl": {"python": "len(value.split(',')) == 6", "perl": "$value ~= /\\d+(,\\d+){5}/"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -t\" + str(value) )[ value is not None]", "perl": "(defined $value)? \" -t$value\" : \"\""}, "command": false, "precond": {"python": "model == \"REV\"", "perl": "$model eq \"REV\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": null, "prompt": "Print final branch lengths (-vb)", "name": "branch", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -vb\" )[ value ]", "perl": "($value)? \" -vb\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Write likelihoods for each Site (-vs)", "name": "likelihoods", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -vs\" )[ value ]", "perl": "($value)? \" -vs\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Don't Write trees (-vw)", "name": "notrees", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -vw\" )[ value ]", "perl": "($value)? \" -vw\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show indication of progress (-vp)", "name": "progress", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -vp\" )[ value ]", "perl": "($value)? \" -vp\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.2", "references": [{"url": null, "doi": null, "label": "Andrew Rambaut, 2000. Estimating the rate of molecular evolution: Incorporating non-contemporaneous sequences into maximum likelihood phylogenies. Bioinformatics."}], "source_links": [], "env": [], "authors": "Andrew Rambaut", "command": {"path": null, "value": "tipdate"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/tipdate/TipDate.v1.2.Manual.pdf"], "type": "program", "name": "tipdate"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac56"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Predict and plot transmembrane segments in protein sequences", "title": "tmap", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": "File containing a sequence alignment", "prompt": "sequences option", "name": "e_sequences", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequences=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA", "MSF", "PAIR", "MARKX0", "MARKX1", "MARKX2", "MARKX3", "MARKX10", "SRS", "SRSPAIR", "SCORE", "UNKNOWN", "MULTIPLE", "SIMPLE", "MATCH"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "tmap"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/tmap.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "tmap"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac57"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "prediction of transmembrane helices in proteins.", "title": "tmhmm", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p><html:strong>Long output format</html:strong></html:p><html:p>The first few lines gives some statistics:</html:p><html:ul><html:li>Length: the length of the protein sequence.</html:li><html:li>Number of predicted TMHs: The number of predicted transmembrane helices.</html:li><html:li>Exp number of AAs in TMHs: The expected number of amino acids intransmembrane\n              helices. If this number is larger than 18 it is very likely to be a transmembrane\n              protein (OR have a signal peptide).</html:li><html:li>Exp number, first 60 AAs: The expected number of amino acids in transmembrane\n              helices in the first 60 amino acids of the protein. If this number more\n              than a few, you should be warned that a predicted transmembrane helix in\n              the N-term could be a signal peptide.</html:li><html:li>Total prob of N-in: The total probability that the N-term is on the cytoplasmic\n              side of the membrane.</html:li><html:li>POSSIBLE N-term signal sequence: a warning that is produced when \"Exp number,\n              first 60 AAs\" is larger than 10.</html:li></html:ul><html:p><html:strong>Short output format</html:strong></html:p><html:p>In the short output format one line is produced for each protein with no\n           graphics. Each line starts with the sequence identifier and then these\n           fields:</html:p><html:ul><html:li>\"len=\": the length of the protein sequence.</html:li><html:li>\"ExpAA=\": The expected number of amino acids intransmembrane helices (see\n             above).</html:li><html:li><html:tt>\"First60=\"</html:tt>: The expected number of amino acids in transmembrane\n             helices in the first 60 amino acids of the protein (see above).</html:li><html:li><html:tt>\"PredHel=\":</html:tt>The number of predicted transmembrane helices by N-best.</html:li><html:li>\"Topology=\": The topology predicted by N-best.</html:li></html:ul><html:p>For the example above the short output would be (except that it would be\n         on one line):</html:p><html:p><html:tt>COX2_BACSU</html:tt><html:br /><html:tt>len=278</html:tt><html:br /><html:tt>ExpAA=68.69</html:tt><html:br /><html:tt>First60=39.89</html:tt><html:br /><html:tt>PredHel=3</html:tt><html:br /><html:tt>Topology=i7-29o44-66i87-109o</html:tt></html:p><html:p>The topology is given as the position of the transmembrane helices separated\n        by 'i' if the loop is on the inside or 'o' if it is on the outside. The\n        above example '<html:tt>i7-29o44-66i87-109o' means that it starts on the inside,\n        has a predicted TMH at position 7 to 29, the outside, then a TMH at position\n        44-66 etc.</html:tt></html:p></html:div>", "prompt": "tmhmm report.", "name": "results", "simple": null, "filenames": {"python": "\"tmhmm.out\"", "perl": "\"tmhmm.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "tmhmm", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>The plot shows the posterior probabilities\n           of inside/outside/TM helix. Here one can see possible weak TM helices that\n           were not predicted, and one can get an idea of the certainty of each\n           segment in the prediction.</html:p><html:p>At the top of the plot (between 1 and 1.2) the N-best prediction is shown.</html:p><html:p>The plot is obtained by calculating the total probability that a\n           residue sits in helix, inside, or outside summed over all possible\n           paths through the model. Sometimes it seems like the plot and the\n           prediction are contradictory, but that is because the plot shows probabilities\n           for each residue, whereas the prediction is the over-all most probable\n           structure. Therefore the plot should be seen as a complementary source\n           of information.</html:p></html:div>", "prompt": "Plot of probabilities", "name": "eps", "simple": null, "filenames": {"python": "\"*.eps\"", "perl": "\"*.eps\""}, "precond": {"python": "output_opt == \"0\"", "perl": "output_opt == \"0\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "tmhmm_graphic", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EPS"], "edam_types": [], "card": null}}, {"comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>The plot shows the posterior probabilities\n           of inside/outside/TM helix. Here one can see possible weak TM helices that\n           were not predicted, and one can get an idea of the certainty of each\n           segment in the prediction.</html:p><html:p>At the top of the plot (between 1 and 1.2) the N-best prediction is shown.</html:p><html:p>The plot is obtained by calculating the total probability that a\n           residue sits in helix, inside, or outside summed over all possible\n           paths through the model. Sometimes it seems like the plot and the\n           prediction are contradictory, but that is because the plot shows probabilities\n           for each residue, whereas the prediction is the over-all most probable\n           structure. Therefore the plot should be seen as a complementary source\n           of information.</html:p></html:div>", "prompt": "tmhmm graphic.", "name": "png", "simple": null, "filenames": {"python": "\"*.png\"", "perl": "\"*.png\""}, "precond": {"python": "output_opt == \"0\"", "perl": "output_opt == \"0\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "tmhmm_graphic", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": ["png"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "tmhmm", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"tmhmm \"", "perl": "\"tmhmm \""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Input Sequence", "name": "sequence", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "\" \" + str( value )", "perl": "\" $value \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "output options", "name": "output_opt", "ctrl": null, "simple": null, "argpos": "10", "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use old model (version 1).", "name": "v1", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "( \"\",\" -v1 \")[ bool( value ) ]", "perl": "($value)? \" -v1 \": \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "2.0", "references": [{"url": null, "doi": null, "label": ""}, {"url": null, "doi": null, "label": ""}], "source_links": ["http://www.cbs.dtu.dk/cgi-bin/nph-sw_request?tmhmm"], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://www.cbs.dtu.dk/services/TMHMM//"], "type": "program", "name": "tmhmm"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac58"}, "classifications": [{"type": "mobyle1", "classification": "Omics:Transcriptomics"}, {"type": "mobyle1", "classification": "Omics:Genomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Mapping and Assembly"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:RNA-seq"}, {"type": "mobyle1", "classification": "RNA Analysis:Functional RNAs:noncoding RNAs"}, {"type": "mobyle1", "classification": "RNA Analysis:Functional RNAs:Protein-coding RNAs"}], "description": "TopHat is a fast splice junction mapper for RNA-Seq reads.", "title": "TopHat", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output", "name": "output_para", "children": [{"comment": null, "prompt": "TopHatJunctions", "name": "bamout", "simple": null, "filenames": {"python": "\"accepted_hits.bam\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAlignment", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "TopHatOutput", "name": "junctions", "simple": null, "filenames": {"python": "\"junctions.bed\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input", "name": "input_para", "children": [{"comment": null, "prompt": "Input file format", "name": "read_format", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -C\")[value == \"csfasta\" or value == \"csfastq\"]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If uploading a custom genome, please load a single file containing the index and the FASTA file.", "prompt": "Select a reference genome:", "name": "ref_genome", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "(\"\",\" \" + str(value))[value is not None and value != \"upload\"]"}, "command": false, "precond": {"python": "read_format in ['fastq','fasta']"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Upload a custom reference genome", "name": "custom_ref_genome", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "(\"\",\" \" + str(value))[value is not None]"}, "command": false, "precond": {"python": "ref_genome == \"upload\" and read_format in ['fastq','fasta']"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If uploading a custom genome, please load a single zip file containing the index and the FASTA file.", "prompt": "Select a reference genome:", "name": "color_ref_genome", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "(\"\",\" \" + str(value))[value is not None and value != \"upload\"]"}, "command": false, "precond": {"python": "read_format in ['csfasta','csfastq']"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Upload a custom colorspace genome", "name": "custom_color_genome", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "(\"\",\" \" + str(value))[value is not None]"}, "command": false, "precond": {"python": "color_ref_genome == \"upload\" and read_format in ['csfasta','csfastq']"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Is this library mate-paired?", "name": "mate_type", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "TopHat will treat the reads as strand specific. Every read alignment will have an XS attribute tag. Consider supplying library type options below to select the correct RNA-seq protocol.Unstranded - \tReads from the left-most end of the fragment (in transcript coordinates) map to the transcript strand, and the right-most end maps to the opposite strand.First Strand - Same as above except we enforce the rule that the right-most end of the fragment (in transcript coordinates) is the first sequenced (or only sequenced for single-end reads). Equivalently, it is assumed that only the strand generated during first strand synthesis is sequenced.Second Strand - Same as above except we enforce the rule that the left-most end of the fragment (in transcript coordinates) is the first sequenced (or only sequenced for single-end reads). Equivalently, it is assumed that only the strand generated during second strand synthesis is sequenced.", "prompt": "Library Type: (--library-type)", "name": "library_type", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --library-type \" + str(value))[value is not None and value != vdef]"}, "command": false, "precond": {"python": "mate_type == \"paired\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "colorspace read files (CSFASTA) come with separate qual files", "prompt": "Do you have separate quality value files?", "name": "color_quals", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\" -Q\")[value]"}, "command": false, "precond": {"python": "read_format == \"csfasta\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Color qual file:", "name": "qual_file_left", "ctrl": null, "simple": null, "argpos": "110", "format": {"python": "\" \" + str(value)"}, "command": false, "precond": {"python": "color_quals == 1 and read_format == \"csfasta\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Right color qual file:", "name": "qual_file_right", "ctrl": null, "simple": null, "argpos": "111", "format": {"python": "\" \" + str(value)"}, "command": false, "precond": {"python": "mate_type == \"paired\" and color_quals == 1 and read_format == \"csfasta\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Quality value format (for FASTQ format)", "name": "quality_format", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" \" + str(value))[value != vdef]"}, "command": false, "precond": {"python": "read_format == \"fastq\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Must have Sanger-scaled quality values with ASCII offset 33.Upload the left RNA sequence data file for paired-end library, or the RNA sequence file for single-end.", "prompt": "Left RNA-Sequence file:", "name": "input_rnaseq_left", "ctrl": null, "simple": null, "argpos": "102", "format": {"python": "\" \" + str(value)"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Must have Sanger-scaled quality values with ASCII offset 33.This is the right RNA sequence data file for paired-end library.", "prompt": "Right RNA-Sequence file:", "name": "input_rnaseq_right", "ctrl": null, "simple": null, "argpos": "103", "format": {"python": "\" \" + str(value)"}, "command": false, "precond": {"python": "mate_type == \"paired\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeSequence", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "options_para", "children": [{"comment": null, "prompt": "number of threads to run", "name": "num_threads", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -p 10\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Reads are initially mapped, allowing up to this many mismatches in each read alignment.", "prompt": "Initial read mismatches (--initial-read-mismatches):", "name": "init_read_mismatches", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --initial-read-mismatches \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default is to use \"v\". In the \"-n\" alignment mode, an alignment's \"stratum\" is defined as the number of mismatches in the \"seed\" region, i.e. the leftmost L bases, where L is set with the -l option. In the -v alignment mode, an alignment's stratum is defined as the total number of mismatches in the entire alignment. Please refer to the Bowtie manual about the \"-n\" and \"-v\" alignment modes", "prompt": "Use \"-n\" of Bowtie for initial read mapping? (--bowtie-n)", "name": "initial_read_mapping", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\" --bowtie-n\")[value==1]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Instructs TopHat to allow up to this many alignments to the reference for a given read, and suppresses all alignments for reads with more than this many alignments. The default is 20 for read mapping (and it uses two time larger number (40) for segment mapping).", "prompt": "Maximum number of alignments to be allowed: (-g)", "name": "max_alignment_count", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -g \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "TopHat filters out junctions supported by too few alignments. Suppose a junction spanning two exons, is supported by S reads. Let the average depth of coverage of exon A be D, and assume that it is higher than B. If S / D is less than the minimum isoform fraction, the junction is not reported. A value of zero disables the filter. The default is 0.15.", "prompt": "Minimum isoform fraction - filter out junctions supported by too few alignments: (-F)", "name": "min_isoform_fraction", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -F \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum insertion length (--max-insertion-length)", "name": "max_insertion_length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --max-insertion-length \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maxiumum deletion length (--max-deletion-length)", "name": "max_deletion_length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --max-deletion-length \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Junction Options", "name": "junction_para", "children": [{"comment": "The options below allow you validate your own junctions with your RNA-Seq data. Note that the chromosome names in the files provided with the options below must match the names in the Bowtie index. These names are case-senstitive", "prompt": "Input junction (-j/-G):", "name": "junction_format", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "read_format in ['fastq','fasta']"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The options below allow you validate your own junctions with your RNA-Seq data. Note that the chromosome names in the files provided with the options below must match the names in the Bowtie index. These names are case-senstitive", "prompt": "Input junction (-j/-G):", "name": "color_junction_format", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": {"python": "read_format in ['csfasta','csfastq']"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Enter Junction data", "name": "junc_data", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\" -G \" + str(value), \" -j \" + str(value))[value is not None and junction_format == \"raw\"]"}, "command": false, "precond": {"python": "(junction_format in [ \"gtf\" , \"raw\" ] and read_format in ['fastq','fasta']) or (color_junction_format in [\"gtf\", \"raw\"] and read_format in ['csfastq','csfasta'])"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The name prefix which will indicate where the transcriptome data files will be stored. The file is optional and is in case you want to save an index and use it later", "prompt": "Transcriptome index name prefix: (--transcriptome-index)", "name": "transcript_index", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --transcriptome-index=\"+ str(value))[value is not None and value != '']"}, "command": false, "precond": {"python": "(junction_format == 'gtf' and read_format in ['fastq','fasta']) or (color_junction_format == 'gtf' and read_format in ['csfastq','csfasta'])"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Only look for reads across junctions indicated in the supplied GTF or junctions file? (--no-novel-juncs)", "name": "skip_default_novel_junc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\" --no-novel-juncs\")[value==1]"}, "command": false, "precond": {"python": "(junction_format is not None and junction_format != \"null\") or (color_junction_format is not None and color_junction_format != \"null\")"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "When mapping reads on the transcriptome, some repetitive or low complexity reads that would be discarded in the context of the genome may appear to align to the transcript sequences and thus may end up reported as mapped to those genes only. This option directs TopHat to first align the reads to the whole genome in order to determine and exclude such multi-mapped reads (according to the value of the -g/--max-multihits option).", "prompt": "Pre-filter to exclude multi-mapped reads: (-M)", "name": "prefilter_multi", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\" -M\")[value]"}, "command": false, "precond": {"python": "(junction_format not in [\"raw\",\"null\"] and read_format in ['fastq','fasta']) or (color_junction_format not in [\"raw\",\"null\"] and read_format in ['csfastq','csfasta'])"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Only align the reads to the transcriptome and report only those mappings as genomic mappings.", "prompt": "Map only to the transcriptome: (-T)", "name": "transcript_mapping", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\",\" -T\")[value]"}, "command": false, "precond": {"python": "(junction_format not in [\"raw\",\"null\"] and read_format in ['fastq','fasta']) or (color_junction_format not in [\"raw\",\"null\"] and read_format in ['csfastq','csfasta'])"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "When aligned to the transcriptome any reads found with more then this number of mappings will be discarded", "prompt": "Maximum number of mappings allowed for a read: (-x)", "name": "trans_max_hits", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -x \" + str(value))[value is not None and value != vdef]"}, "command": false, "precond": {"python": "(junction_format not in [\"raw\",\"null\"] and read_format in ['fastq','fasta']) or (color_junction_format not in [\"raw\",\"null\"] and read_format in ['csfastq','csfasta'])"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum number of mismatches allowed when reads are aligned to the transcriptome.", "prompt": "Maximum number of mismatches allowed: (-n)", "name": "trans_mismatch", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -n \" + str(value))[value is not None and value != vdef]"}, "command": false, "precond": {"python": "(junction_format not in [\"raw\",\"null\"] and read_format in ['fastq','fasta']) or (color_junction_format not in [\"raw\",\"null\"] and read_format in ['csfastq','csfasta'])"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Spliced Alignment Options", "name": "spliced_align_para", "children": [{"comment": "Read segments are mapped independently, allowing up to this many mismatches in each segment alignment. The default is 2.", "prompt": "Number of mismatches allowed in each segment alignment for reads mapped independently: (--segment-mismatches)", "name": "segment_mismatch", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --segment-mismatches \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Each read is cut up into segments, each at least this long. These segments are mapped independently. The default is 25.", "prompt": "Minimum length of read segments: (--segment-length)", "name": "segment_min_length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --segment-length \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The \"anchor length\". TopHat will report junctions spanned by reads with at least this many bases on each side of the junction. Note that individual spliced alignments may span a junction with fewer than this many bases on one side. However, every junction involved in spliced alignments is supported by at least one read with this many bases on each side. This must be at least 3 and the default is 8.", "prompt": "Minimum anchor length (-a)", "name": "min_anchor_length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -a \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "During closure search for paired end reads, exonic hops in the potential splice graph must be at least this long. The default is 50.", "prompt": "Minimum closure exon: (--min-closure-exon)", "name": "min_closure_exon", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --min-closure-exon \" + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum intron length. When searching for junctions ab initio, TopHat will ignore donor/acceptor pairs farther than this many bases apart, except when such a pair is supported by a split segment alignment of a long read. The default is 500000.", "prompt": "The maximum intron length: (-I)", "name": "max_intron_length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -I \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The minimum intron length. TopHat will ignore donor/acceptor pairs closer than this many bases apart. The default is 70.", "prompt": "The minimum intron length: (-i)", "name": "min_intron_length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -i \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum number of mismatches that may appear in the \"anchor\" region of a spliced alignment. The default is 0.", "prompt": "Maximum number of mismatches that can appear in the anchor region of spliced alignment: (-m)", "name": "max_anchor_mismatches", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -m \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The minimum intron length that may be found during split-segment search. The default is 50.", "prompt": "Minimum intron length that may be found during split-segment (default) search: (--min-segment-intron)", "name": "min_segment_intron_length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --min-segment-intron \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum intron length that may be found during split-segment search. The default is 500000.", "prompt": "Maximum intron length that may be found during split-segment (default) search: (--max-segment-intron)", "name": "max_segment_intron_length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --max-segment-intron \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum intron length that may be found during coverage search. The default is 20000. --min-coverage-intron", "prompt": "Maximum intron length that may be found during coverage search: (--max-coverage-intron)", "name": "max_coverage_intron_length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --max-coverage-intron \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The minimum intron length that may be found during closure search.", "prompt": "Minimum intron length that may be found during coverage search: (-min-coverage-intron)", "name": "min_coverage_intron_length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --min-coverage-intron \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The minimum intron length that may be found during closure search.", "prompt": "Minimum closure intron: (--min-closure-intron)", "name": "min_closure_intron", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --min-closure-intron \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The maximum intron length that may be found during closure search.", "prompt": "Maximum closure intron: (--max-closure-intron)", "name": "max_closure_intron", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --max-closure-intron \" + str(value))[value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Indel Options", "name": "indel_para", "children": [{"comment": "Supply TopHat with a list of insertions with respect to the reference. Indels are specified one per line, in a tab-delimited format, identical to that of junctions. Records look like:  <chrom> <left> <right> <+/-> left and right are zero-based coordinates, and specify the last character of the left sequenced to be spliced to the first character of the right sequence, inclusive.", "prompt": "Known insertions: (--insertions)", "name": "known_insertions", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Known insertions file:", "name": "insertions_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" --insertions \" + str(value)"}, "command": false, "precond": {"python": "known_insertions == 1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Supply TopHat with a list of deletions with respect to the reference. Indels are specified one per line, in a tab-delimited format, identical to that of junctions. Records look like:  <chrom> <left> <right> <+/-> left and right are zero-based coordinates, and specify the last character of the left sequenced to be spliced to the first character of the right sequence, inclusive.", "prompt": "Known deletions: (--deletions)", "name": "known_deletions", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Known deletions file:", "name": "deletions_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" --deletions \" + str(value)"}, "command": false, "precond": {"python": "known_deletions == 1"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Report", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enables the coverage based search for junctions. Use when coverage search is disabled by default (such as for reads 75bp or longer), for maximum sensitivity.", "prompt": "Coverage search?", "name": "coverage_search", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" \"+str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Enables the mate pair closure-based search for junctions. Closure-based search should only be used when the expected inner distance between mates is small (<= 50bp)", "prompt": "Use closure search? (--closure-search)", "name": "allow_closure_search", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --closure-search \")[value == 1]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "With this option, the pipeline will attempt to find alignments incident to microexons. Works only for reads 50bp or longer.", "prompt": "Use microexon search? (--microexon-search)", "name": "allow_microexon_search", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --microexon-search \")[value == 1]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "TopHat will use a slower but potentially more sensitive algorithm to find junctions in addition to its standard search. Consider using this if you expect that your experiment produced a lot of reads from pre-mRNA, that fall within the introns of your transcripts.", "prompt": "Use butterfly search? (--butterfly-seach)", "name": "allow_butterfly_search", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --butterfly-search \")[value == 1]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Paired-End Options", "name": "paired_end_para", "children": [{"comment": "This is the expected (mean) inner distance between mate pairs. For, example, for paired end runs with fragments selected at 300bp, where each end is 50bp, you should set -r to be 200. There is no default, and this parameter is required for paired end runs.", "prompt": "Expected Mean Inner Distance between Mate Pairs: (-r/--mate-inner-dist)", "name": "mate_pair_distance", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -r \"+str(value))[value is not None and value != vdef]"}, "command": false, "precond": {"python": "mate_type == \"paired\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The standard deviation for the distribution on inner distances between mate pairs. The default is 20bp.", "prompt": "Std. Dev for Distance between Mate Pairs: (--mate-std-dev)", "name": "mate_pair_std_dev", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" --mate-std-dev \"+str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "SAM Header Options", "name": "sam_header_para", "children": [{"comment": null, "prompt": "Read group ID: (--rg-id)", "name": "read_group_id", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" --rg-id \"+str(value))[value is not None and value != '']"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sample ID: (--rg-sample)", "name": "read_group_sample_id", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" --rg-sample \"+str(value))[value is not None and value != '']"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Library ID: (--rg-library)", "name": "read_group_library", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" --rg-library \"+str(value))[value is not None and value != '']"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "No tabs allowed.", "prompt": "Descriptive string: (--rg-description)", "name": "read_group_description", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" --rg-description \"+str(value))[value is not None and value != '']"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "e.x. Illumina lane ID", "prompt": "Platform unit: (--rg-platform-unit)", "name": "read_group_platform_unit", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" --rg-platform-unit \"+str(value))[value is not None and value != '']"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequencing center name: (--rg-center)", "name": "read_group_center", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" --rg-center \"+str(value))[value is not None and value != '']"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "ISO 8601 date of the sequencing run.", "prompt": "Sequencing run date: (--rg-date)", "name": "read_group_date", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" --rg-date \"+str(value))[value is not None and value != '']"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequencing platform description: (--rg-platform)", "name": "read_group_platform", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" --rg-platform \"+str(value))[value is not None and value != '']"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output", "name": "output_para", "children": [{"comment": "Causes TopHat to preserve its intermediate files produced during the run. By default, they are deleted upon exit.", "prompt": "Preserve intermediate file? (--keep-tmp)", "name": "preserve_intermediate_file", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --keep-tmp\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Output BAM is not coordinate-sorted.", "prompt": "Do not sort BAM? (--no-sort-bam)", "name": "no_sort_bam", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --no-sort-bam\")[value]"}, "command": false, "precond": {"python": "no_convert_bam == 0"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not convert to BAM format? (--no-convert-bam)", "name": "no_convert_bam", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" --no-convert-bam\")[value]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "TopHatOutputDir", "name": "outdir_tophat", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -o ./ \""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.4.1", "references": [], "source_links": [], "env": [], "authors": "Trapnell C., Pachter L. & Salzberg S.L.", "command": {"path": null, "value": "export PATH=$PATH; tophat"}, "documentation_links": [], "type": "program", "name": "tophat"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac59"}, "classifications": [{"type": "mobyle1", "classification": "sequence:protein:2D_structure"}, {"type": "mobyle1", "classification": "structure:2D_structure"}], "description": "Topology prediction of membrane proteins", "title": "TopPred", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Graphic output files", "name": "graphicfiles", "simple": null, "filenames": {"python": "'*.' + profile_format", "perl": "*.$profile_format"}, "precond": {"python": "graph_output", "perl": "$graph_output"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "profile_format"}], "edam_types": [], "card": "0,n"}}, {"comment": null, "prompt": "Hydrophobicity output files", "name": "hydrophobicity_files", "simple": null, "filenames": {"python": "'*.hydro*'", "perl": "*.hydro*"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": "1,n"}}, {"comment": null, "prompt": "Output file in html format", "name": "html_file", "simple": null, "filenames": {"python": "'*.html'", "perl": "*.html"}, "precond": {"python": "outformat == 'html'", "perl": "outformat eq 'html'"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "ToppredHtmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Command", "name": "toppred", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"toppred\"", "perl": "\"toppred\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sequence", "name": "query", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" \"+ str( value )", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "prompt": "Produce hydrophobicity graph image (-g)", "name": "graph_output", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Produce image of each topology (-t)", "name": "topo_output", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\" -t none\",\"\")[ value ]", "perl": "($value) ? \"\" : \" -t none\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Control options", "name": "control", "children": [{"comment": null, "prompt": "Hydrophobicity scale (-H)", "name": "scale", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -H \" + str( value ) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \"-H $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Organism: eukaryot (default is prokaryot) (-e)", "name": "organism", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "( \"\" , \" -e\" )[ value ]", "perl": "($value) ? \" -e\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Certain cutoff (-c)", "name": "certain", "ctrl": {"python": "certain > putative", "perl": "$certain > $putative"}, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -c \" + str(value) ) [ value is not None and value!= vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -c $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Putative cutoff (-p)", "name": "putative", "ctrl": {"python": "certain > putative", "perl": "$certain > $putative"}, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -p \" + str(value) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \"-p $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Core window size: (-n)", "name": "core", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -n \" + str(value) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -n $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Wedge window size: (-q)", "name": "triangle", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -q \" + str(value) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -q $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Critical loop length (-s)", "name": "loop_length", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -s \" + str(value) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -s $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Critical transmembrane spacer (-d)", "name": "Segment_distance", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -d \" + str( value ) )[ value is not None and value!= vdef ]", "perl": "(defined $value and $value != $vdef) ? \" -d $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": null, "prompt": "Output format (-O)", "name": "outformat", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "( \"\" , \" -O \" + str(value) )[ value is not None and value != vdef ]", "perl": "(defined $value and $value ne $vdef) ? \" -O $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Hydrophobicity Profile file format (-g)", "name": "profile_format", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "( \" -g none\" , \" -g \" + str(value) )[ graph_output ]", "perl": "($graph_output) ? \" -g $value\" : \" -g none\""}, "command": false, "precond": {"python": "graph_output", "perl": "$graph_output"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "0.01", "references": [{"url": null, "doi": null, "label": "von Heijne, G. (1992) Membrane Protein Structure Prediction: Hydrophobicity Analysis and the 'Positive Inside' Rule. J.Mol.Biol. 225, 487-494."}, {"url": null, "doi": null, "label": "Claros, M.G., and von Heijne, G. (1994) TopPred II: An Improved Software For Membrane Protein Structure Predictions. CABIOS 10, 685-686."}, {"url": null, "doi": null, "label": "Deveaud and Schuerer (Institut Pasteur) new implementation of the original toppred program, based on G. von Heijne algorithm."}], "source_links": ["ftp://ftp.pasteur.fr/pub/gensoft/projects/toppred/"], "env": [], "authors": "Heijne, Wallin, Claros, Deveaud, Schuerer", "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/toppred/toppred.pdf"], "type": "program", "name": "toppred"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac5b"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:translation"}], "description": "Translate nucleic acid sequences", "title": "transeq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Translation frames (value from 1 to 6)", "name": "e_frame", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -frame=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Genetic codes", "name": "e_table", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -table=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Regions to translate. \n If this is left blank, then the complete sequence is translated. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are separated by any non-digit, non-alpha character. \n  Examples of region specifications are: \n  24-45, 56-78 \n  1:45, 67=99;765..888 \n  1,5,8,10,23,45,57,99 \n  Note: you should not try to use this option with any other frame  than the default, -frame=1", "prompt": "Regions to translate (eg: 4-57,78-94)", "name": "e_regions", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -regions=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This removes all 'X' and '*' characters from the right end of the translation. The trimming process starts at the end and  continues until the next character is not a 'X' or a '*'", "prompt": "Trim trailing x's and *'s", "name": "e_trim", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -trim\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This changes all STOP codon positions from the '*' character to 'X' (an unknown residue). This is useful because some  programs will not accept protein sequences with '*' characters in  them.", "prompt": "Change all *'s to x's", "name": "e_clean", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -clean\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "The default definition of frame '-1' is the reverse-complement of the set of codons used in frame 1. (Frame -2  is the set of codons used by frame 2, similarly frames -3 and 3).  This is a common standard, used by the Staden package and other  programs. If you prefer to define frame '-1' as using the set of  codons starting with the last codon of the sequence, then set this  to be true.", "prompt": "Define frame '-1' as starting in the last codon", "name": "e_alternative", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -alternative\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "transeq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/transeq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "transeq"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac5c"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise"}, {"type": "mobyle1", "classification": "phylogeny:parsimony"}], "description": "Phylogenetic alignment of homologous sequences", "title": "treealign", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output tree file", "name": "filetree", "simple": null, "filenames": {"python": "\"*.tree\"", "perl": "\"*.tree\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Output alignment file", "name": "fileali", "simple": null, "filenames": {"python": "\"*.ali\"", "perl": "\"*.ali\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "The sequences should\nbe homologous and there should be a history to be found. If you give it a set\nof COMPLETELY unrelated sequences, it is possible that it will not be able to\nalign them, since it cannot allocate enough memory.The sequences should not vary in length because they have been sequenced\nunequally much.  Length differences should be due to evolution. Thus it should\nnot be used to look for local homologies.", "prompt": "Sequences File", "name": "fileseq", "ctrl": null, "simple": null, "argpos": "30", "format": {"python": "str(value)+ \"\\n\"", "perl": "\"$value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NBRF"], "edam_types": [], "card": null}, "paramfile": "par.dat"}, {"comment": null, "prompt": "Sequence type", "name": "seqtype", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "str(value)", "perl": "\"$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "par.dat"}, {"comment": null, "prompt": "Number of sequences", "name": "nuseq", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "par.dat"}, {"comment": null, "prompt": "Gap open penalty", "name": "gap_open", "ctrl": {"python": "value >= 0", "perl": "$value >= 0"}, "simple": null, "argpos": "13", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "par.dat"}, {"comment": null, "prompt": "Gap extension penalty", "name": "gap_ext", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "\" \" + str(value) + \"\\n\"", "perl": "\" $value\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "par.dat"}, {"comment": null, "precond": null, "prompt": "Other options", "name": "other_options", "children": [{"comment": null, "prompt": "Present ancestral sequences", "name": "ancesterout", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "( \"0\" , \"1\" )[ value ]", "perl": "($value) ? \"1\" : \"0\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "par.dat"}]}]}, "version": null, "references": [{"url": null, "doi": null, "label": "Hein, J.: Unified approach to alignment and phylogenies. Meth. Enzymol. 183:626-645 (1990)."}, {"url": null, "doi": null, "label": "Hein, J.: A new method that simultaneously aligns and reconstruct ancestral sequences for any number of homologous sequences, when the phylogeny is given. Mol. Biol. Evol. 6:649-668 (1989)."}, {"url": null, "doi": null, "label": "Hein, J.: A tree reconstruction method that is economical in the number of pairwise comparisons used. Mol. Biol. Evol. 6:669-684 (1989)."}], "source_links": [], "env": [], "authors": "J. Hein", "command": {"path": null, "value": "treealign"}, "documentation_links": [], "type": "program", "name": "treealign"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac5d"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Remove poly-A tails from nucleotide sequences", "title": "trimest", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "This is the minimum length that a poly-A (or poly-T) tail must have before it is removed. If there are mismatches in the  tail than there must be at least this length of poly-A tail before  the mismatch for the mismatch to be considered part of the tail.", "prompt": "Minimum length of a poly-a tail (value greater than or equal to 1)", "name": "e_minlength", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -minlength=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If there are this number or fewer contiguous non-A bases in a poly-A tail then, if there are '-minlength' 'A' bases before  them, they will be considered part of the tail and removed . \n  For example the terminal 4 A's of GCAGAAAA would be removed with  the default values of -minlength=4 and -mismatches=1 (There are  not at least 4 A's before the last 'G' and so only the A's after  it are considered to be part of the tail). The terminal 9 bases of  GCAAAAGAAAA would be removed; There are at least -minlength A's  preceeding the last 'G', so it is part of the tail.", "prompt": "Number of contiguous mismatches allowed in a tail (value greater than or equal to 0)", "name": "e_mismatches", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -mismatches=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "When a poly-T region at the 5' end of the sequence is found and removed, it is likely that the sequence is in the reverse  sense. This option will change the sequence to the forward sense  when it is written out. If this option is not set, then the sense  will not be changed.", "prompt": "Write the reverse complement when poly-t is removed", "name": "e_reverse", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -noreverse\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The poly-A region can be 'masked' by converting the sequence characters to lower-case. Some non-EMBOSS programs e.g.  fasta can interpret this as a masked region. The sequence is  unchanged apart from the case change. You might like to ensure  that the whole sequence is in upper-case before masking the  specified regions to lower-case by using the '-supper' sequence  qualifier.", "prompt": "Change poly-a tail to lower-case", "name": "e_tolower", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -tolower\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": "If this is set true, then the 5' end of the sequence is inspected for poly-T tails. These will be removed if they are  longer than any 3' poly-A tails. If this is false, then the 5' end  is ignored.", "prompt": "Remove poly-t tails at the 5' end of the sequence.", "name": "e_fiveprime", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\" -nofiveprime\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "trimest"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/trimest.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "trimest"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac5e"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Remove unwanted characters from start and end of sequence(s)", "title": "trimseq", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": "This determines the size of the region that is considered when deciding whether the percentage of ambiguity is greater than  the threshold. A value of 5 means that a region of 5 letters in  the sequence is shifted along the sequence from the ends and  trimming is done only if there is a greater or equal percentage of  ambiguity than the threshold percentage.", "prompt": "Window size (value greater than or equal to 1)", "name": "e_window", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -window=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This is the threshold of the percentage ambiguity in the window required in order to trim a sequence.", "prompt": "Percent threshold of ambiguity in window", "name": "e_percent", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -percent=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In nucleic sequences, trim off not only N's and X's, but also the nucleotide IUPAC ambiguity codes M, R, W, S, Y, K, V, H,  D and B. In protein sequences, trim off not only X's but also B  and Z.", "prompt": "Trim off all ambiguity codes, not just n or x", "name": "e_strict", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -strict\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "In protein sequences, trim off not only X's, but also the *'s", "prompt": "Trim off asterisks", "name": "e_star", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -star\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Trim at the start", "name": "e_left", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\" -noleft\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Trim at the end", "name": "e_right", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\" -noright\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "trimseq"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/trimseq.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "trimseq"}, {"comment": "tRNAscan-SE identifies transfer RNA genes in genomic DNA or RNA sequences.  It combines the specificity of the Cove probabilistic RNA prediction package (Eddy & Durbin, 1994) with the speed and sensitivity of tRNAscan 1.3 (Fichant & Burks, 1991) plus an implementation of an algorithm described by Pavesi and colleagues\n(1994) which searches for eukaryotic pol III tRNA promoters (our implementation referred to as EufindtRNA).  tRNAscan and EufindtRNA are used as first-pass prefilters to identify \"candidate\" tRNA regions of the sequence.  These subsequences are then passed to Cove for further analysis, and output if Cove confirms the initial tRNA prediction.", "homepage_links": ["http://selab.janelia.org/software.html#trnascan"], "_id": {"$oid": "51434da693546d52388cac5f"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:pattern"}], "description": "Detection of transfer RNA genes", "title": "tRNAscan-SE", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Results files", "name": "results", "simple": null, "filenames": {"python": "\"*.fpos\"", "perl": "\"*.fpos\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "First pass scan result", "name": "first_pass_scan_results", "simple": null, "filenames": {"python": "\"*.fpass.out\"", "perl": "\"*.fpass.out\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "TrnaScanFirstPassResult", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Sequence File", "name": "sequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Search Mode options", "name": "search_options", "children": [{"comment": "This parameter loosens the search parameters for EufindtRNA to improve detection of prokaryotic tRNAs. Use this option when scanning prokaryotic sequences or both eukaryotic and prokaryotic sequences in the same sequence file. This option also disables pseudogene checking automatically since criteria for pseudogene checking were developed for eukaryotic pseudogenes.Use of this mode with prokaryotic sequences will also improve bounds prediction of the 3' end (the terminal CCA triplet).", "prompt": "Improve detection of prokaryotic tRNAs (-P)", "name": "prokaryotic", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -P\")[ value ]", "perl": "($value) ? \" -P\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option selects an archaeal-specific covariance model for tRNA analysis, as well as slightly loosening the EufindtRNA search cutoffs.", "prompt": "Select archeal-specific covariance model (-A)", "name": "archeal", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -A\" )[ value ]", "perl": "($value) ? \" -A\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This parameter bypasses the fast first-pass scanners that are poor at detecting organellar tRNAs and runs Cove analysis only. Since true organellar tRNAs have been found to have Cove scores between 15 and 20 bits, the search cutoff is lowered from 20 to 15 bits. Also, pseudogene checking is disabled since it is only applicable to eukaryotic cytoplasmic tRNA pseudogenes. Since Cove-only mode is used, searches will be very slow (see -C option below) relative to the default mode.", "prompt": "Bypasses the fast first-pass scanners that are poor at detecting organellar tRNAs (-O)", "name": "organellar", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -O\")[ value ]", "perl": "($value) ? \" -O\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option selects the general tRNA covariance model that was trained on tRNAs from all three phylogenetic domains (archaea, bacteria, & eukarya). This mode can be used when analyzing a mixed collection of sequences from more than one phylogenetic domain, with only slight loss of sensitivity and selectivity.The original publication describing this program and tRNAscan-SE version 1.0 used this general tRNA model exclusively.  If you wish to compare scores to those found in the paper or scans using v1.0, use this option.  Use of this option is compatible with all other search mode options described in this section.", "prompt": "General covariance model trained on all three phylogenetic domains (-G)", "name": "general", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -G\" )[ value ]", "perl": "($value) ? \" -G\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Directs tRNAscan-SE to analyze sequences using Cove analysis only. This option allows a slightly more sensitive search than the default tRNAscan + EufindtRNA -> Cove mode, but is much slower (by approx. 250 to 3,000 fold). Output format and other program defaults are otherwise identical to the normal analysis.", "prompt": "Analyze sequences using Cove only (-C)", "name": "cove_only", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -C\")[ value ]", "perl": "($value) ? \" -C\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Since tRNA pseudogenes often have one very low component (good secondary structure but poor primary sequence similarity to the tRNA model, or vice versa), this information may be useful in deciding whether a low-scoring tRNA is likely to be a pseudogene.  The heuristic pseudogene detection filter uses this information to flag possible pseudogenes -- use this option to see why a hit is marked as a possible pseudogene.  The user may wish to examine score breakdowns from known tRNAs in the organism of interest to get a frame of reference.", "prompt": "Show both primary and secondary structure components to covariance model bit score (-H)", "name": "breakdown", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -H\" )[ value ]", "perl": "($value) ? \" -H\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This will slightly speed the program and may be necessary for non-eukaryotic sequences that are flagged as possible pseudogenes but are known to be functional tRNAs.", "prompt": "Disable pseudogene checking (-D)", "name": "disable_checking", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -D\")[ value ]", "perl": "($value) ? \" -D\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Special options", "name": "special_options", "children": [{"comment": "Directs tRNAscan-SE to use only tRNAscan to analyze sequences. This mode will default to using 'strict' parameters with tRNAscan analysis (similar to tRNAscan version 1.3 operation). This mode of operation is faster (3-5 times faster than default mode analysis), but will result in approximately 0.2 to 0.6 false positive tRNAs per Mbp, decreased sensitivity, and less reliable prediction of anticodons, tRNA isotype, and introns.", "prompt": "Use tRNAscan only to analyze sequences (-T)", "name": "trnascan_only", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -T\")[ value ]", "perl": "($value) ? \" -T\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Since Cove is not being used as a secondary filter to remove false positives, this run mode defaults to 'Normal' parameters which more closely approximates the sensitivity and selectivity of the original algorithm describe by Pavesi and colleagues (see the option -e for a description of the various run modes).", "prompt": "Use EufindtRNA only to search for tRNAs (-E)", "name": "eufindtrna_only", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -E\")[ value ]", "perl": "($value) ? \" -E\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Relaxed parameters may give very slightly increased search sensitivity, but increase search time by 20-40 fold.", "prompt": "Strict or relaxed tRNAscan mode (-t)", "name": "trnascan_mode", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -t \"+ str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -t $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Explicitly set EufindtRNA params, where <mode>= R, N, or S (relaxed, normal, or strict). The 'relaxed' mode is used for EufindtRNA when using tRNAscan-SE in default mode. With relaxed parameters, tRNAs that lack pol III poly-T terminators are not penalized, increasing search sensitivity, but decreasing selectivity. When Cove analysis is being used as a secondary filter for false positives (as in tRNAscan-SE's default mode), overall selectivity is not decreased.Using 'normal' parameters with EufindtRNA does incorporate a log odds score for the distance between the B box and the first poly-T terminator, but does not disqualify tRNAs that do not have a terminator signal within 60 nucleotides. This mode is used by default when Cove analysis is not being used as a secondary false positive filter.Using 'strict' parameters with EufindtRNA also incorporates a log odds score for the distance between the B box and the first poly-T terminator, but _rejects_ tRNAs that do not have such a signal within 60 nucleotides of the end of the B box. This mode most closely approximates the originally published search algorithm (3); sensitivity is reduced relative to using 'relaxed' and 'normal' modes, but selectivity is increased which is important if no secondary filter, such as Cove analysis, is being used to remove false positives. This mode will miss most prokaryotic tRNAs since the poly-T terminator signal is a feature specific to eukaryotic tRNAs genes (always use 'relaxed' mode for scanning prokaryotic sequences for tRNAs).", "prompt": "EufindtRNA mode (-e)", "name": "eufindtrna_mode", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -e \"+ str(value))[ value is not None ]", "perl": "(defined $value) ? \" -e $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Save tabular, formatted output results from tRNAscan and/or EufindtRNA first pass scans. The format is similar to the final tabular output format, except no Cove score is available at this point in the search (if EufindtRNA has detected the tRNA, the negative log likelihood score is given). Also, the sequence ID number and source sequence length appear in the columns where intron bounds are shown in final output. This option may be useful for examining false positive tRNAs predicted by first-pass scans that have been filtered out by Cove analysis.", "prompt": "Save first pass results (-r)", "name": "save_first_pass", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -r#\")[ value ]", "perl": "($value) ? \" -r\\\\#\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option allows the user to re-generate results from regions identified to have tRNAs by a previous tRNAscan-SE run. Either a regular tabular result file, or output saved with the -r option may be used as the specified <file>. This option is particularly useful for generating either secondary structure output (-f option) or ACeDB output (-a option) without having to re-scan entire sequences. Alternatively, if the -r option is used to generate the previous results file, tRNAscan-SE will pick up at the stage of Cove-confirmation of tRNAs and output final tRNA predictons as with a normal run.", "prompt": "Use a previous first pass result tabular file (-u)", "name": "previous_first_pass_result", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -u \"+ str(value))[ value is not None ]", "perl": "(defined $value) ? \" -u $value\":\"\""}, "command": false, "precond": {"python": "matching and  start", "perl": "$matching or $start"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "TrnaScanFirstPassResult", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Save first-pass candidate tRNAs that were then found to be false positives by Cove analysis. This option saves candidate tRNAs found by either tRNAscan and/or EufindtRNA that were then rejected by Cove analysis as being false positives. tRNAs are saved in the FASTA sequence format.", "prompt": "Save false positives (-F)", "name": "false_positives", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -F#\")[ value ]", "perl": "($value) ? \" -F\\\\#\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Specify Alternate Cutoffs / Data Files options", "name": "specify_options", "children": [{"comment": "This option allows the user to specify a different Cove score threshold for reporting tRNAs. It is not recommended that novice users change this cutoff, as a lower cutoff score will increase the number of pseudogenes and other false positives found by tRNAscan-SE (especially when used with the 'Cove only' scan mode). Conversely, a higher cutoff than 20.0 bits will likely cause true tRNAs to be missed by tRNAscan (numerous 'real' tRNAs have been found just above the 20.0 cutoff). Knowledgable users may wish to experiment with this parameter to find very unusual tRNAs or pseudogenes beyond the normal range of detection with the preceding caveats in mind.", "prompt": "Cove cutoff score for reporting tRNAs (-X)", "name": "cutoff", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -X \"+ str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -X $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Set max length of tRNA intron+variable region (default=116bp). The default maximum tRNA length for tRNAscan-SE is 192 bp, but this limit can be increased with this option to allow searches with no practical limit on tRNA length. In the first phase of tRNAscan-SE, EufindtRNA searches for A and B boxes of <length> maximum distance apart, and passes only the 5' and 3' tRNA ends to covariance model analysis for confirmation (removing the bulk of long intervening sequences). tRNAs containing group I and II introns have been detected by setting this parameter to over 800 bp. Caution: group I or II introns in tRNAs tend to occur in positions other than the canonical position of protein-spliced introns, so tRNAscan-SE mispredicts the intron bounds and anticodon sequence for these cases. tRNA bound predictions, however, have been found to be reliable in these same tRNAs.", "prompt": "Max length of tRNA intron+variable region (-L)", "name": "Length", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -L \"+ str(value))[ value is not None and value !=vdef]", "perl": "(defined $value and $value !=$vdef) ? \" -L $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default, tRNAscan-SE adds 7 nucleotides to both ends of tRNA predictions when first-pass tRNA predictions are passed to covariance model (CM) analysis.  CM analysis generally trims these bounds back down, but on occasion, allows prediction of an otherwise truncated first-pass tRNA prediction.", "prompt": "Number of nucleotids to add to both ends during first-pass (-z)", "name": "add_to_both_ends", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -z \"+ str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -z $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option does not have any effect when using the -T or -E options -- you must be running in default or Cove only analysis mode.", "prompt": "Genetic code (-g)", "name": "genetic", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -g \"+ str(value))[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -g $value\":\"\""}, "command": false, "precond": {"python": "not trnascan_only and not eufindtrna_only", "perl": "not $trnascan_only and not $eufindtrna_only"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Specify an alternate covariance model (-c)", "name": "covariante", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -c \" + str(value))[ value is not None]", "perl": "(defined $value) ? \" -c $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Misc options", "name": "misc_options", "children": [{"comment": "Search only sequences with names matching this string. Only those sequences with names (first non-white space word after '>' symbol on FASTA name/description line) matching this string are analyzed for tRNAs.", "prompt": "Search only sequences with names matching this string (-n)", "name": "matching", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -n \"+ str(value))[ value is not None]", "perl": "(defined $value) ? \" -n $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Start search at first sequence with name matching <EXPR> string and continue to end of input sequence file(s). This may be useful for re-starting crashed/aborted runs at the point where the previous run stopped. (If same names for output file(s) are used, program will ask if files should be over-written or appended to -- choose append and run will successfully be restarted where it left off).", "prompt": "Start search at first sequence with name matching this string (-s)", "name": "start", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -s \"+ str(value))[ value is not None ]", "perl": "(defined $value) ? \" -s $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output options", "name": "output_options", "children": [{"comment": "Save final results and Cove tRNA secondary structure predictions. This output format makes visual inspection of individual tRNA predictions easier since the tRNA sequence is displayed along with the predicted tRNA base pairings.", "prompt": "Save secondary structure results file (-f)", "name": "secondary_structure", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -f#\")[ value ]", "perl": "($value) ? \" -f\\\\#\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output final results in ACeDB format instead of the default tabular format (-a)", "name": "acedb", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -a\")[ value ]", "perl": "($value) ? \" -a\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option directs tRNAscan-SE to write a brief summary to a file which contains the run options selected as well as statistics on the number of tRNAs detected at each phase of the search, search speed, and other bits of information. See Manual documentation for explanation of each statistic.", "prompt": "Save statistics summary for run (-m)", "name": "statistics", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -m#\")[ value ]", "perl": "($value) ? \" -m\\\\#\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Messages indicating which phase of the tRNA search are printed to standard output. If final results are also being sent to standard output, some of these messages will be suppressed so as to not interrupt display of the results.", "prompt": "Display program progress (-d)", "name": "progress", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -d\")[ value ]", "perl": "($value) ? \" -d\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Save log of program progress (-l)", "name": "log", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -l#\")[ value ]", "perl": "($value) ? \" -l\\\\#\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The credits & run option selections normally printed to standard error at the beginning of each run are suppressed.", "prompt": "Quiet mode (-q)", "name": "quiet", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -q\")[ value ]", "perl": "($value) ? \" -q\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This eliminates column headers that appear by default when writing results in tabular output format. Useful if results are to be parsed or piped to another program.", "prompt": "Use brief output format (-b)", "name": "brief", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -b\")[ value ]", "perl": "($value) ? \" -b\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output a tRNA's corresponding codon in place of its anticodon (-N)", "name": "trna_codon", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -N\")[ value ]", "perl": "($value) ? \" -N\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use prefix for all default output file names (-p)", "name": "label", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" -p \"+str(value))[ value is not None ]", "perl": "(defined $value) ? \" -p $value\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "'Ts', 'Eu', or 'Bo' will appear in the last column of Tabular output, indicating that either tRNAscan 1.4, EufindtRNA, or both scanners detected the tRNA, respectively.", "prompt": "Displays which of the first-pass scanners detected the tRNA being output (-y)", "name": "scanners", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\" , \" -y\")[ value ]", "perl": "($value) ? \" -y\":\"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "1.23", "references": [{"url": null, "doi": null, "label": "Fichant, G.A. and Burks, C. (1991) Identifying potential tRNA genes in genomic DNA sequences, J. Mol. Biol., 220, 659-671."}, {"url": null, "doi": null, "label": "Eddy, S.R. and Durbin, R. (1994) RNA sequence analysis using covariance models, Nucl. Acids Res., 22, 2079-2088."}, {"url": null, "doi": null, "label": "Pavesi, A., Conterio, F., Bolchi, A., Dieci, G., Ottonello, S. (1994) Identification of new eukaryotic tRNA genes in genomic DNA databases by a multistep weight matrix analysis of trnascriptional control regions, Nucl. Acids Res., 22, 1247-1256."}, {"url": null, "doi": null, "label": "Lowe, T.M. and Eddy, S.R. (1997) tRNAscan-SE: A program for improved detection of transfer RNA genes in genomic sequence, Nucl. Acids Res., 25, 955-964."}], "source_links": ["ftp://selab.janelia.org/pub/software/tRNAscan-SE/"], "env": [], "authors": "T. Lowe, S. Eddy", "command": {"path": null, "value": "tRNAscan-SE"}, "documentation_links": [], "type": "program", "name": "trnascan"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac60"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit:feature_table"}], "description": "Finds neighbouring pairs of features in sequence(s)", "title": "twofeat", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_rformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "First feature options", "name": "e_afeaturesection", "children": [{"comment": "By default any feature source in the feature table is allowed. You can set this to match any feature source you wish  to allow. \n  The source name is usually either the name of the program that  detected the feature or it is the feature table (eg: EMBL) that  the feature came from. \n  The source may be wildcarded by using '*'. \n  If you wish to allow more than one source, separate their names  with the character '|', eg: \n  gene* | embl", "prompt": "Source of first feature", "name": "e_asource", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -asource=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default every feature in the feature table is allowed. You can set this to be any feature type you wish to allow. \n  See http://www.ebi.ac.uk/embl/WebFeat/ for a list of the  EMBL feature types and see Appendix A of the Swissprot user  manual in http://www.expasy.org/sprot/userman.html  for a list of the Swissprot feature types. \n  The type may be wildcarded by using '*'. \n  If you wish to allow more than one type, separate their names  with the character '|', eg: \n  *UTR | intron", "prompt": "Type of first feature", "name": "e_atype", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -atype=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default any feature sense is allowed. You can set this to match the required sense.", "prompt": "Sense of first feature", "name": "e_asense", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -asense=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is greater than or equal to the maximum score, then any score is allowed.", "prompt": "Minimum score of first feature", "name": "e_aminscore", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -aminscore=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is less than or equal to the maximum score, then any score is permitted.", "prompt": "Maximum score of first feature", "name": "e_amaxscore", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -amaxscore=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tags are the types of extra values that a feature may have. For example in the EMBL feature table, a 'CDS' type of  feature may have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number', '/evidence', '/exception', '/function', '/gene',  '/label', '/map', '/note', '/number', '/partial', '/product',  '/protein_id', '/pseudo', '/standard_name', '/translation',  '/transl_except', '/transl_table', or '/usedin'. Some of these  tags also have values, for example '/gene' can have the value of  the gene name. \n  By default any feature tag in the feature table is allowed. You  can set this to match any feature tag you wish to allow. \n  The tag may be wildcarded by using '*'. \n  If you wish to allow more than one tag, separate their names  with the character '|', eg: \n  gene | label", "prompt": "Tag of first feature", "name": "e_atag", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -atag=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tag values are the values associated with a feature tag. Tags are the types of extra values that a feature may have. For  example in the EMBL feature table, a 'CDS' type of feature may  have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number', '/evidence', '/exception', '/function', '/gene',  '/label', '/map', '/note', '/number', '/partial', '/product',  '/protein_id', '/pseudo', '/standard_name', '/translation',  '/transl_except', '/transl_table', or '/usedin'. Only some of  these tags can have values, for example '/gene' can have the  value of the gene name. By default any feature tag value in the  feature table is allowed. You can set this to match any feature  tag value you wish to allow. \n  The tag value may be wildcarded by using '*'. \n  If you wish to allow more than one tag value, separate their  names with the character '|', eg: \n  pax* | 10", "prompt": "Value of first feature's tags", "name": "e_avalue", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -avalue=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Second feature options", "name": "e_bfeaturesection", "children": [{"comment": "By default any feature source in the feature table is allowed. You can set this to match any feature source you wish  to allow. \n  The source name is usually either the name of the program that  detected the feature or it is the feature table (eg: EMBL) that  the feature came from. \n  The source may be wildcarded by using '*'. \n  If you wish to allow more than one source, separate their names  with the character '|', eg: \n  gene* | embl", "prompt": "Source of second feature", "name": "e_bsource", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -bsource=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default every feature in the feature table is allowed. You can set this to be any feature type you wish to allow. \n  See http://www.ebi.ac.uk/embl/WebFeat/ for a list of the  EMBL feature types and see Appendix A of the Swissprot user  manual in http://www.expasy.org/sprot/userman.html  for a list of the Swissprot feature types. \n  The type may be wildcarded by using '*'. \n  If you wish to allow more than one type, separate their names  with the character '|', eg: \n  *UTR | intron", "prompt": "Type of second feature", "name": "e_btype", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -btype=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "By default any feature sense is allowed. You can set this to match the required sense.", "prompt": "Sense of second feature", "name": "e_bsense", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -bsense=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is greater than or equal to the maximum score, then any score is allowed.", "prompt": "Minimum score of second feature", "name": "e_bminscore", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -bminscore=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is less than or equal to the maximum score, then any score is permitted.", "prompt": "Maximum score of second feature", "name": "e_bmaxscore", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -bmaxscore=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tags are the types of extra values that a feature may have. For example in the EMBL feature table, a 'CDS' type of  feature may have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number', '/evidence', '/exception', '/function', '/gene',  '/label', '/map', '/note', '/number', '/partial', '/product',  '/protein_id', '/pseudo', '/standard_name', '/translation',  '/transl_except', '/transl_table', or '/usedin'. Some of these  tags also have values, for example '/gene' can have the value of  the gene name. \n  By default any feature tag in the feature table is allowed. You  can set this to match any feature tag you wish to allow. \n  The tag may be wildcarded by using '*'. \n  If you wish to allow more than one tag, separate their names  with the character '|', eg: \n  gene | label", "prompt": "Tag of second feature", "name": "e_btag", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "(\"\", \" -btag=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Tag values are the values associated with a feature tag. Tags are the types of extra values that a feature may have. For  example in the EMBL feature table, a 'CDS' type of feature may  have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number', '/evidence', '/exception', '/function', '/gene',  '/label', '/map', '/note', '/number', '/partial', '/product',  '/protein_id', '/pseudo', '/standard_name', '/translation',  '/transl_except', '/transl_table', or '/usedin'. Only some of  these tags can have values, for example '/gene' can have the  value of the gene name. By default any feature tag value in the  feature table is allowed. You can set this to match any feature  tag value you wish to allow. \n  The tag value may be wildcarded by using '*'. \n  If you wish to allow more than one tag value, separate their  names with the character '|', eg: \n  pax* | 10", "prompt": "Value of second feature's tags", "name": "e_bvalue", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "(\"\", \" -bvalue=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Feature relation options", "name": "e_featurerelationsection", "children": [{"comment": "This allows you to specify the allowed overlaps of the features A and B. \n  You can allow any or no overlaps, specify that they must or must  not overlap, that one must or must not be wholly enclosed  within another feature.", "prompt": "Type of overlap required", "name": "e_overlap", "ctrl": null, "simple": null, "argpos": "16", "format": {"python": "(\"\", \" -overlap=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is greater or equal to 'maxrange', then no min or max range is specified", "prompt": "The minimum distance between the features", "name": "e_minrange", "ctrl": null, "simple": null, "argpos": "17", "format": {"python": "(\"\", \" -minrange=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If this is less than or equal to 'minrange', then no min or max range is specified", "prompt": "The maximum distance between the features", "name": "e_maxrange", "ctrl": null, "simple": null, "argpos": "18", "format": {"python": "(\"\", \" -maxrange=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This allows you to specify the positions from which the allowed minimum or maximum distance between the features is  measured", "prompt": "Positions from which to measure the distance", "name": "e_rangetype", "ctrl": null, "simple": null, "argpos": "19", "format": {"python": "(\"\", \" -rangetype=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This allows you to specify the required sense that the two features must be on. This is ignored (always 'Any') when  looking at protein sequence features.", "prompt": "Sense of the features", "name": "e_sense", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "(\"\", \" -sense=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This allows you to specify the required order of the two features. The order is measured from the start positions of the  features. This criterion is always applied despite the specified  overlap type required.", "prompt": "Order of the features", "name": "e_order", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "(\"\", \" -order=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "If you set this to be true, then the two features themselves will be written out. If it is left as false, then a  single feature will be written out covering the two features you  found.", "prompt": "Do you want the two features written out individually", "name": "e_twoout", "ctrl": null, "simple": null, "argpos": "22", "format": {"python": "(\"\", \" -twoout\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "If you have specified that the pairs of features that are found should be reported as one feature in the ouput, then you can  specify the 'type' name of the new feature here. By default every  feature in the feature table is allowed. See  http://www.ebi.ac.uk/embl/WebFeat/ for a list of the EMBL  feature types and see Appendix A of the Swissprot user manual in  http://www.expasy.org/sprot/userman.html for a list of the Swissprot  feature types. If you specify an invalid feature type name, then  the default name 'misc_feature' is used.", "prompt": "Name of the output new feature", "name": "e_typeout", "ctrl": null, "simple": null, "argpos": "23", "format": {"python": "(\"\", \" -typeout=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": {"python": "not e_twoout"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the report file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "24", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the report output format", "name": "e_rformat_outfile", "ctrl": null, "simple": null, "argpos": "25", "format": {"python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "26", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "twofeat"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/twofeat.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "twofeat"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac61"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Concatenate multiple sequences into a single sequence", "title": "union", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "overlapfile_out option", "name": "e_overlapfile_out", "simple": null, "filenames": {"python": "e_overlapfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "SequenceOverlap", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "Use feature information", "name": "e_feature", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -feature\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Create source features", "name": "e_source", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -source\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Look for overlaps when joining", "name": "e_findoverlap", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -findoverlap\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_overlapfile)", "name": "e_overlapfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -overlapfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "union"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/union.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "union"}, {"comment": "Unroot use RETREE a tree editor. It reads in a tree.", "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac62"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:tree_analyser"}], "description": "Unroot a tree", "title": "unroot", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Tree output file", "name": "outtree", "simple": null, "filenames": {"python": "\"unroot.outtree\"", "perl": "\"unroot.outtree\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "unroot", "ctrl": null, "simple": null, "argpos": "0", "format": {"python": "\"retree < retree.params\"", "perl": "\"retree < retree.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The program hangs when provided a tree with [...] added to branch lengths.", "prompt": "Tree File", "name": "treefile", "ctrl": null, "simple": null, "argpos": "-10", "format": {"python": "\"ln -s \"+str( treefile ) +\" intree && \"", "perl": "\"ln -s $treefile intree && \""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": null, "name": "commands", "ctrl": null, "simple": null, "argpos": "1000", "format": {"python": "\"0\\nY\\nW\\nU\\nQ\\n\"", "perl": "\"0\\\\nY\\\\nW\\\\nU\\\\nQ\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "retree.params"}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": null}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/phylip/doc/retree.html"], "type": "program", "name": "unroot"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac63"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Removes vectors from the ends of nucleotide sequence(s)", "title": "vectorstrip", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "VectorstripReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outseq_out option", "name": "e_outseq_out", "simple": null, "filenames": {"python": "e_outseq"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_osformat_outseq"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Vector input options", "name": "e_vectorfilesection", "children": [{"comment": null, "prompt": "Are your vector sequences in a file?", "name": "e_readfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\" -noreadfile\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Cloning vector definition file (optional)", "name": "e_vectorsfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -vectorsfile=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "e_readfile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Vector", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Max allowed % mismatch", "name": "e_mismatch", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -mismatch=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show only the best hits (minimise mismatches)?", "name": "e_besthits", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\" -nobesthits\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "The 5' sequence", "name": "e_alinker", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -alinker=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "not e_readfile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "The 3' sequence", "name": "e_blinker", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -blinker=\" + str(value))[value is not None]"}, "command": false, "precond": {"python": "not e_readfile"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Show all sequences in output", "name": "e_allsequences", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -allsequences\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output sequence file (e_outseq)", "name": "e_outseq", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the sequence output format", "name": "e_osformat_outseq", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "vectorstrip"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/vectorstrip.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "vectorstrip"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac64"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise:local"}], "description": "Smith-Waterman local alignment of sequences", "title": "water", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['FASTA', 'MSF']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out2 option", "name": "e_outfile_out2", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['PAIR', 'MARKX0', 'MARKX1', 'MARKX2', 'MARKX3', 'MARKX10', 'SRS', 'SRSPAIR', 'SCORE', 'UNKNOWN', 'MULTIPLE', 'SIMPLE', 'MATCH']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "prompt": "bsequence option", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "This is the scoring matrix file used when comparing sequences. By default it is the file 'EBLOSUM62' (for proteins) or  the file 'EDNAFULL' (for nucleic sequences). These files are  found in the 'data' directory of the EMBOSS installation.", "prompt": "Matrix file", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "The gap open penalty is the score taken away when a gap is created. The best value depends on the choice of comparison  matrix. The default value assumes you are using the EBLOSUM62  matrix for protein sequences, and the EDNAFULL matrix for  nucleotide sequences.", "prompt": "Gap opening penalty (value from 0.0 to 100.0)", "name": "e_gapopen", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -gapopen=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The gap extension penalty is added to the standard gap penalty for each base or residue in the gap. This is how long gaps  are penalized. Usually you will expect a few long gaps rather  than many short gaps, so the gap extension penalty should be lower  than the gap penalty. An exception is where one or both sequences  are single reads with possible sequencing errors in which case  you would expect many single base gaps. You can get this result by  setting the gap open penalty to zero (or very low) and using the  gap extension penalty to control gap scoring.", "prompt": "Gap extension penalty (value from 0.0 to 10.0)", "name": "e_gapextend", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -gapextend=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": "Brief identity and similarity", "prompt": "Brief identity and similarity", "name": "e_brief", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\" -nobrief\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output alignment file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the alignment output format", "name": "e_aformat_outfile", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -aformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "water"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/water.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "water"}, {"comment": "Weighbor takes an input file of pairwise distances in Phylip format and computes the phylogentic tree that best\n       corresponds to those distances.", "homepage_links": ["http://www.is.titech.ac.jp/~shimo/prog/consel/"], "_id": {"$oid": "51434da693546d52388cac65"}, "classifications": [{"type": "mobyle1", "classification": "phylogeny:distance"}], "description": "Weighted neighbor joining", "title": "Weighbor", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Tree output file", "name": "treefile", "simple": null, "filenames": {"python": "\"weighbor.treefile\"", "perl": "\"weighbor.treefile\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Tree", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["NEWICK"], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Distances matrix File (-i)", "name": "infile", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -i \" + str(value)", "perl": "\" -i $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "PhylipDistanceMatrix", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default is 500. This is the effective sequence length equal to the number of varying sites. Note if the -L option is not used then the program will print a warning message to stderr indicating that it is using this default length.", "prompt": "Length of the sequences (-L)", "name": "Length", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -L \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -L $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Sets the size of the alphabet of characters (number of bases) b. 1/b is equal to the probability that there will be a match for infinite evolution time. The default value for b is 4.", "prompt": "Size of the alphabet (-b)", "name": "size", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" -b \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -b $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Verbose output (-v)", "name": "verbose", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output file (-o)", "name": "outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" -o weighbor.treefile\"", "perl": "\" -o weighbor.treefile\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": "1.2.1", "references": [{"url": null, "doi": null, "label": "W. J. Bruno, N. D. Socci, and A. L. Halpern. Weighted Neighbor Joining: A Likelihood-Based Approach to Distance-Based Phylogeny Reconstruction, Mol. Biol. Evol. 17 (1): 189-197 (2000)."}], "source_links": ["http://www.is.titech.ac.jp/~shimo/prog/consel/"], "env": [], "authors": "Bruno, Halpern, Socci", "command": {"path": null, "value": "weighbor"}, "documentation_links": [], "type": "program", "name": "weighbor"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac66"}, "classifications": [{"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:Peak Annotation"}, {"type": "mobyle1", "classification": "Genomic Analysis:Multi-Purpose Tools"}, {"type": "mobyle1", "classification": "Genomic Analysis:Gene Annotation and Alignment"}, {"type": "mobyle1", "classification": "Sequence Analysis and Comparison:Comparative Genomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Variant Analysis"}, {"type": "mobyle1", "classification": "Utilities and Tools:File Format Conversion"}, {"type": "mobyle1", "classification": "Omics:Genomics"}, {"type": "mobyle1", "classification": "Genomic Analysis:Next Generation Sequencing:Variant calling"}], "description": "Examines a \"window\" around each feature in A and reports all features in B that overlap the window. For each overlap the entire entry in A and B are reported. Similar to intersectBed, windowBed searches for overlapping features in A and B. However, windowBed adds a specified number (1000, by default) of base pairs upstream and downstream of each feature in A. In effect, this allows features in B that are near features in A to be detected.", "title": "BEDtools: windowBed", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output", "name": "Output", "children": [{"comment": null, "prompt": "GenomeAnnotation", "name": "windowBam_out", "simple": null, "filenames": {"python": "(\"window_data\",output_file)[output_file is not None] + \".bam\""}, "precond": {"python": "file_a_type == \"bam\" and output_format == \"bam\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "GenomeAnnotation", "name": "windowBed_out", "simple": null, "filenames": {"python": "(\"window_data\",output_file)[output_file is not None] + \".bed\""}, "precond": {"python": "file_a_type != \"bam\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input", "name": "input_para", "children": [{"comment": null, "prompt": "Input file A format", "name": "file_a_type", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "BED/GFF/VCF format file", "prompt": "Genome annotation data A [BED/GFF/VCF format] (-a)", "name": "input_fileA_bed", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "\" -a \" + str(value)"}, "command": false, "precond": {"python": "file_a_type != \"bam\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "BAM format file", "prompt": "Genome annotation data A [BAM format] (-abam)", "name": "input_fileA_bam", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -abam \" + str(value)"}, "command": false, "precond": {"python": "file_a_type == \"bam\""}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Genome Annotation data B (BED/GFF/VCF format) [-b]", "name": "input_fileB_bed", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" -b \" + str( value )"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "GenomeAnnotation", "superclass": "Sequence"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Options", "name": "options_para", "children": [{"comment": null, "prompt": "Overlap Output Options (-sm, -Sm, -u, -c, -v)", "name": "overlap_output_options", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" \" + str(value))[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Base pairs added upstream (left of) of each entry in A when searching for overlaps in B. Allows one to create assymetrical windows. Default is 1000bp.", "prompt": "Number of base pairs added upstream: (-l)", "name": "upstream_offset", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\" , \" -l \"+str(value) )[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Base pairs added downstream (right of) of each entry in A when searching for overlaps in B. Allows one to create assymetrical windows. Default is 1000bp.", "prompt": "Number of base pairs added downstream: (-r)", "name": "downstream_offset", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\" , \" -r \"+str(value) )[value is not None and value != vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Define -l and -r based on strand.  For example if used, -l 500 for a negative-stranded feature will add 500 bp downstream. - Default = disabled.", "prompt": "Are the upstream and downstream values are strand specific? [-sw]", "name": "strand_specificity", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' -sw ')[value == 1]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Print the header from the A file prior to results. (-header)", "name": "header", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "('',' -header ')[value == 1]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output", "name": "Output", "children": [{"comment": "The BED or BAM format can be chosen only if the input is BAM file.", "prompt": "Output format", "name": "output_format", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\", \" -bed \")[ value == \"bed\"]"}, "command": false, "precond": {"python": "file_a_type == \"bam\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Enter output file prefix:", "name": "output_file", "ctrl": null, "simple": null, "argpos": "50", "format": {"python": "(\" > \" + str(vdef) , \" > \" + str(value))[value is not None] + (\".bed\",\".bam\")[file_a_type == \"bam\" and output_format == \"bam\"]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "2.15.0", "references": [], "source_links": [], "env": [], "authors": "Quinlan A.R. & Hall I.M.", "command": {"path": null, "value": "windowBed"}, "documentation_links": [], "type": "program", "name": "windowBed"}, {"comment": null, "homepage_links": ["http://www.ebi.ac.uk/Tools/Wise2/doc_wise2.html"], "_id": {"$oid": "51434da693546d52388cac67"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise"}], "description": "Comparisons of protein/DNA sequences", "title": "WISE2", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": []}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Wise program", "name": "wise2", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "str(value)", "perl": "\"$value\""}, "command": true, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Protein file", "name": "protein_file", "children": [{"comment": "You must  give  a protein  sequence file  in fasta format.", "prompt": "Protein sequence File", "name": "protein", "ctrl": {"python": "not (hmmer)", "perl": "not ($hmmer)"}, "simple": null, "argpos": "2", "format": {"python": "\" \" +str(value)", "perl": "\" $value\""}, "command": false, "precond": {"python": "hmmer is None", "perl": "not $hmmer"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "You must give an HMMER file.", "prompt": "or Protein HMM File", "name": "hmmer", "ctrl": {"python": "not (protein)", "perl": "not ($protein)"}, "simple": null, "argpos": "2", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": {"python": "protein is None", "perl": "$protein is not defined"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "HmmTextProfile", "superclass": "AbstractText"}, "biotypes": ["Protein"], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "HMM command (-hmmer)", "name": "hmmer_command", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\" -hmmer\"", "perl": "\" -hmmer\""}, "command": false, "precond": {"python": "hmmer is not None", "perl": "defined $hmmer"}, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "DNA sequence File", "name": "dna", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" \" + str(value)", "perl": "\" $value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Silent mode (-silent -quiet)", "name": "quiet", "ctrl": null, "simple": null, "argpos": "100", "format": {"python": "\" -silent -quiet\"", "perl": "\" -silent -quiet\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "DNA sequence Options", "name": "dna_options", "children": [{"comment": null, "prompt": "Start position in dna (-u)", "name": "dna_start", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -u \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -u $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "End position in dna (-v)", "name": "dna_end", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -v \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -v $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Strand comparison", "name": "strand", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Report positions as absolute to truncated/reverse sequence (-tabs)", "name": "tabs", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -tabs\" )[ value ]", "perl": "($value) ? \" -tabs\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "hmmer is None", "perl": "not $hmmer"}, "prompt": "Protein comparison Options", "name": "protein_options", "children": [{"comment": null, "prompt": "Start position in protein (-s)", "name": "protein_start", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -s \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -s $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "End position in protein (-t)", "name": "protein_end", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -t \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -t $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Gap penalty (-g)", "name": "gap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -g \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -g $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Gap extension penalty (-e)", "name": "ext", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -e \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -e $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Comparison matrix (-m)", "name": "matrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -m\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -m $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Model Options", "name": "gene_model_options", "children": [{"comment": null, "prompt": "Type of match (-init)", "name": "init", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -init \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -init $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Substitution error rate (-subs)", "name": "subs", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -subs \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -subs $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Insertion/deletion error rate (-indel)", "name": "indel", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -indel \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -indel $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Random Model as synchronous or flat (-null)", "name": "null", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -null \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -null $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Probability of matching a NNN codon (-alln)", "name": "alln", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -alln \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -alln $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "wise2 == \"genewise\"", "perl": "$wise2 eq \"genewise\""}, "prompt": "Genewise special option", "name": "wise2_model_opt", "children": [{"comment": null, "prompt": "Gene parameter file (-gene)", "name": "gene", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gene \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -gene $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Using codon bias or not (-cfreq)?", "name": "cfreq", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -cfreq \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -cfreq $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Using splice model or GT/AG (-splice)?", "name": "splice", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -splice \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -splice $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Use tied model for introns (-intron)", "name": "intron", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -intron \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -intron $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Protein insert model (-insert)", "name": "insert", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -insert \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -insert $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Output Options", "name": "output_options", "children": [{"comment": null, "prompt": "Show pretty ascii output (-pretty)", "name": "pretty", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pretty\" )[ value ]", "perl": "($value) ? \" -pretty\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show parameters (-para)", "name": "para", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -para\" )[ value ]", "perl": "($value) ? \" -para\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show summary output (-sum)", "name": "sum", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -sum\" )[ value ]", "perl": "($value) ? \" -sum\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show protein translation, splicing frameshifts (-pep)", "name": "pep", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pep\" )[ value ]", "perl": "($value) ? \" -pep\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show logical AlnBlock alignment (-alb)", "name": "alb", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -alb\" )[ value ]", "perl": "($value) ? \" -alb\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show raw matrix alignment (-pal)", "name": "pal", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pal\" )[ value ]", "perl": "($value) ? \" -pal\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Length of main block in pretty output (-block)", "name": "block", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -block \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -block $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Divide string for multiple outputs (-divide)", "name": "divide", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -divide \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -divide \\\"$value\\\"\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "wise2 == \"genewise\"", "perl": "$wise2 eq \"genewise\""}, "prompt": "Genewise special option", "name": "wise2_out_opt", "children": [{"comment": null, "prompt": "Mark genes with frameshifts as pseudogenes (-pseudo)", "name": "pseudo", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -pseudo\" )[ value ]", "perl": "($value) ? \" -pseudo\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show gene structure (-genes)", "name": "genes", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -genes\" )[ value ]", "perl": "($value) ? \" -genes\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show gene structure with supporting evidence (-genesf)", "name": "genesf", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -genesf\" )[ value ]", "perl": "($value) ? \" -genesf\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show EMBL feature format with CDS key (-embl)", "name": "embl", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -embl\" )[ value ]", "perl": "($value) ? \" -embl\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show EMBL feature format with misc_feature key for diana (-diana)", "name": "diana", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -diana\" )[ value ]", "perl": "($value) ? \" -diana\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show cDNA (-cdna)", "name": "cdna", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -cdna\" )[ value ]", "perl": "($value) ? \" -cdna\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Show protein translation, breaking at frameshifts (-trans)", "name": "trans", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -trans\" )[ value ]", "perl": "($value) ? \" -trans\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Ace file gene structure (-ace)", "name": "ace", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -ace\" )[ value ]", "perl": "($value) ? \" -ace\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Gene Feature Format file (-gff)", "name": "gff", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gff\" )[ value ]", "perl": "($value) ? \" -gff\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Raw gene structure (-gener)", "name": "gener", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gener\" )[ value ]", "perl": "($value) ? \" -gener\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": {"python": "wise2 == \"genewise\"", "perl": "$wise2 eq \"genewise\""}, "prompt": "New gene model statistics for genewise", "name": "New_gene_options", "children": [{"comment": null, "prompt": "Maximum Bits value for a splice site (-splice_max_collar)", "name": "splice_max_collar", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -splice_max_collar \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -splice_max_collar $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Minimum Bits value for a splice site (-splice_min_collar)", "name": "splice_min_collar", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -splice_min_collar \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -splice_min_collar $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Score offset for splice sites (-splice_score_offset)", "name": "splice_score_offset", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -splice_score_offset \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -splice_score_offset $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Standard Options", "name": "standard_options", "children": [{"comment": null, "prompt": "No warning messages (-erroroffstd)", "name": "erroroffstd", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -erroroffstd\" )[ value ]", "perl": "($value) ? \" -erroroffstd\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "2.2.0", "references": [], "source_links": ["ftp://ftp.ebi.ac.uk/pub/software/unix/wise2/"], "env": [], "authors": "E. Birney", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "wise2"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac68"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:gene_finding"}], "description": "Plot third base position variability in a nucleotide sequence", "title": "wobble", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Graph file", "name": "xy_outgraph_png", "simple": null, "filenames": {"python": "\"*.png\""}, "precond": {"python": "e_graph == \"png\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_gif", "simple": null, "filenames": {"python": "\"*.gif\""}, "precond": {"python": "e_graph == \"gif\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_ps", "simple": null, "filenames": {"python": "\"*.ps\""}, "precond": {"python": "e_graph == \"ps\" or e_graph == \"cps\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_meta", "simple": null, "filenames": {"python": "\"*.meta\""}, "precond": {"python": "e_graph == \"meta\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Graph file", "name": "xy_outgraph_data", "simple": null, "filenames": {"python": "\"*.dat\""}, "precond": {"python": "e_graph == \"data\""}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "WobbleReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Window size in codons (value greater than or equal to 1)", "name": "e_window", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -window=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Advanced section", "name": "e_advanced", "children": [{"comment": null, "prompt": "Bases used", "name": "e_bases", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -bases=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Choose the e_graph output format", "name": "e_graph", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output graph", "name": "xy_goutfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "wobble"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/wobble.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "wobble"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac69"}, "classifications": [{"type": "mobyle1", "classification": "nucleic:composition"}, {"type": "mobyle1", "classification": "protein:composition"}], "description": "Count and extract unique words in molecular sequence(s)", "title": "wordcount", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "WordcountReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Word size (value greater than or equal to 1)", "name": "e_wordsize", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -wordsize=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Minimum word count to report (value greater than or equal to 1)", "name": "e_mincount", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -mincount=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "wordcount"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/wordcount.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "wordcount"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac6a"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise:local"}], "description": "Match large sequences against one or more other sequences", "title": "wordfinder", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['FASTA', 'MSF']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out2 option", "name": "e_outfile_out2", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['PAIR', 'MARKX0', 'MARKX1', 'MARKX2', 'MARKX3', 'MARKX10', 'SRS', 'SRSPAIR', 'SCORE', 'UNKNOWN', 'MULTIPLE', 'SIMPLE', 'MATCH']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "errorfile_out option", "name": "e_errorfile_out", "simple": null, "filenames": {"python": "e_errorfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "WordfinderError", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "2,n"}, "paramfile": null}, {"comment": null, "prompt": "bsequence option", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}, {"comment": "This is the scoring matrix file used when comparing sequences. By default it is the file 'EBLOSUM62' (for proteins) or  the file 'EDNAFULL' (for nucleic sequences). These files are  found in the 'data' directory of the EMBOSS installation.", "prompt": "Matrix file", "name": "e_datafile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -datafile=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": "10.0 for any sequence type", "prompt": "Gap opening penalty (value from 0.0 to 1000.0)", "name": "e_gapopen", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "4", "format": {"python": "(\"\", \" -gapopen=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "0.5 for any sequence type", "prompt": "Gap extension penalty (value from 0.0 to 10.0)", "name": "e_gapextend", "ctrl": {"python": "value >= 0.0"}, "simple": null, "argpos": "5", "format": {"python": "(\"\", \" -gapextend=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Additional section", "name": "e_additional", "children": [{"comment": null, "prompt": "Alignment width (value greater than or equal to 1)", "name": "e_width", "ctrl": {"python": "value >= 1"}, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -width=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Word length for initial matching (value greater than or equal to 3)", "name": "e_wordlen", "ctrl": {"python": "value >= 3"}, "simple": null, "argpos": "7", "format": {"python": "(\"\", \" -wordlen=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum match score (zero for no limit) (value greater than or equal to 0)", "name": "e_limitmatch", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "8", "format": {"python": "(\"\", \" -limitmatch=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximum alignment length (zero for no limit) (value greater than or equal to 0)", "name": "e_limitalign", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "9", "format": {"python": "(\"\", \" -limitalign=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Minimum match score (zero for no limit) (value greater than or equal to 0)", "name": "e_lowmatch", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -lowmatch=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Minimum alignment length (zero for no limit) (value greater than or equal to 0)", "name": "e_lowalign", "ctrl": {"python": "value >= 0"}, "simple": null, "argpos": "11", "format": {"python": "(\"\", \" -lowalign=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Name of the output alignment file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the alignment output format", "name": "e_aformat_outfile", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "(\"\", \" -aformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Error file to be written to", "prompt": "errorfile option", "name": "e_errorfile", "ctrl": null, "simple": null, "argpos": "14", "format": {"python": "(\"\" , \" -errorfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "15", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "wordfinder"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/wordfinder.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "wordfinder"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac6b"}, "classifications": [{"type": "mobyle1", "classification": "alignment:pairwise:local"}], "description": "Finds regions of identity (exact matches) of two sequences", "title": "wordmatch", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['FASTA', 'MSF']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Alignment", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "outfile_out2 option", "name": "e_outfile_out2", "simple": null, "filenames": {"python": "e_outfile"}, "precond": {"python": "e_aformat_outfile in ['PAIR', 'MARKX0', 'MARKX1', 'MARKX2', 'MARKX3', 'MARKX10', 'SRS', 'SRSPAIR', 'SCORE', 'UNKNOWN', 'MULTIPLE', 'SIMPLE', 'MATCH']"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_aformat_outfile"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "logfile_out option", "name": "e_logfile_out", "simple": null, "filenames": {"python": "e_logfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "WordmatchLog", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "aoutfeat_out option", "name": "e_aoutfeat_out", "simple": null, "filenames": {"python": "e_aoutfeat"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Feature", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_offormat_aoutfeat"}], "edam_types": [], "card": null}}, {"comment": null, "prompt": "boutfeat_out option", "name": "e_boutfeat_out", "simple": null, "filenames": {"python": "e_boutfeat"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Feature", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [{"#tag": "ref", "#children": [], "@param": "e_offormat_boutfeat"}], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "asequence option", "name": "e_asequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -asequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "2,n"}, "paramfile": null}, {"comment": null, "prompt": "bsequence option", "name": "e_bsequence", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -bsequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,n"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Required section", "name": "e_required", "children": [{"comment": null, "prompt": "Word size (value greater than or equal to 2)", "name": "e_wordsize", "ctrl": {"python": "value >= 2"}, "simple": null, "argpos": "3", "format": {"python": "(\"\", \" -wordsize=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Dump matches as alignments", "name": "e_dumpalign", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "(\" -nodumpalign\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output alignment file", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the alignment output format", "name": "e_aformat_outfile", "ctrl": null, "simple": null, "argpos": "6", "format": {"python": "(\"\", \" -aformat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Statistics on distribution of kmers and matches", "prompt": "logfile option", "name": "e_logfile", "ctrl": null, "simple": null, "argpos": "7", "format": {"python": "(\"\" , \" -logfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Dump matches as feature files", "name": "e_dumpfeat", "ctrl": null, "simple": null, "argpos": "8", "format": {"python": "(\" -nodumpfeat\", \"\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output feature file (e_aoutfeat)", "name": "e_aoutfeat", "ctrl": null, "simple": null, "argpos": "9", "format": {"python": "(\"\" , \" -aoutfeat=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the feature output format", "name": "e_offormat_aoutfeat", "ctrl": null, "simple": null, "argpos": "10", "format": {"python": "(\"\", \" -offormat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output feature file (e_boutfeat)", "name": "e_boutfeat", "ctrl": null, "simple": null, "argpos": "11", "format": {"python": "(\"\" , \" -boutfeat=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Choose the feature output format", "name": "e_offormat_boutfeat", "ctrl": null, "simple": null, "argpos": "12", "format": {"python": "(\"\", \" -offormat=\" + str(value))[value is not None and value!=vdef]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "13", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "wordmatch"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/wordmatch.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "wordmatch"}, {"comment": null, "homepage_links": ["http://blast.wustl.edu/"], "_id": {"$oid": "51434da693546d52388cac6c"}, "classifications": [{"type": "mobyle1", "classification": "database:search:homology"}], "description": "Wash-U. BLAST, with gaps", "title": "WUBLAST2", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Blast report", "name": "tmp_outfile", "simple": null, "filenames": {"python": "\"blast.txt\"", "perl": "\"blast.txt\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastTextReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Blast html report", "name": "htmlfile", "simple": null, "filenames": {"python": "\"blast.html\"", "perl": "\"blast.html\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastHtmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": null, "name": "imgfile", "simple": null, "filenames": {"python": "\"*.gif\"", "perl": "\"*.gif\""}, "precond": null, "output_type": "file", "hidden": true, "main": false, "type": {"datatype": {"class": "Picture", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Blast xml report", "name": "xmloutput", "simple": null, "filenames": {"python": "\"blast.xml\"", "perl": "\"blast.xml\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "BlastXmlReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "The five BLAST programs described here perform the following tasks:- blastp compares an amino acid query sequence against a protein sequence database;- blastn compares a nucleotide query sequence against a nucleotide sequence database;- blastx compares the six-frame conceptual translation products of a nucleotide query sequence (both strands) against a protein sequence database;- tblastn compares a protein query sequence against a nucleotide sequence database dynamically translated in all six reading frames (both strands).- tblastx compares the six-frame translations of a nucleotide query sequence against the six-frame translations of a nucleotide sequence database.", "prompt": "Blast program", "name": "wublast2", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "str(value)", "perl": "\"$value\""}, "command": true, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Database", "name": "db", "children": [{"comment": "Choose a protein db for blastp or blastx.", "prompt": "Protein db", "name": "protein_db", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": {"python": "wublast2 in [ \"blastp\", \"blastx\" ]", "perl": "$wublast2 =~ /^blast[px]$/"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Choose a nucleotide db for blastn, tblastn or tblastx", "prompt": "Nucleotid db", "name": "nucleotid_db", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" \"+str(value)", "perl": "\" $value\""}, "command": false, "precond": {"python": "wublast2 in [ \"blastn\", \"tblastn\", \"tblastx\" ]", "perl": "$wublast2 =~ /^(blastn|tblast[nx])$/)"}, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Query Sequence", "name": "query", "children": [{"comment": null, "prompt": "Query", "name": "query_seq", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "\" \" + str(value)", "perl": "\" $query_seq\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not segment the query sequence on hyphen (-) characters (-nosegs)", "name": "nosegs", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "( \"\" , \" -nosegs\" )[ value ]", "perl": "($value) ? \" -nosegs\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "BLAST version", "name": "compat", "ctrl": null, "simple": null, "argpos": "5", "format": {"python": "( \"\" , \" -\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Scoring options", "name": "scoring_opt", "children": [{"comment": "Default: 9 for proteins and 10 for nucleics.", "prompt": "Open gap penalty (Q)", "name": "open_a_gap", "ctrl": {"python": "value >= 1 and value < 2147483647", "perl": "$value >= 1 and $value < 2147483647"}, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" Q=\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \"Q=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default: 2 for proteins; 10 for nucleics.", "prompt": "Extending a gap penalty (R)", "name": "extend_a_gap", "ctrl": {"python": "value >= 0 and value < 2147483647", "perl": "$value >= 0 and $value < 2147483647"}, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" R=\" + str(value))[ value is not None ]", "perl": "(defined $value) ? \" R=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "wublast2 != \"blastn\"", "perl": "$wublast2 ne \"blastn\""}, "prompt": "Protein penalty (not for blastn)", "name": "scoring_blast", "children": [{"comment": "Several PAM (point accepted mutations per 100 residues) amino acid scoring matrices are provided in the BLAST software distribution, including the PAM40, PAM120, and PAM250. While the BLOSUM62 matrix is a good general purpose scoring matrix and is the default matrix used by the BLAST programs, if one is restricted to using only PAM scoring matrices, then the PAM120 is recommended for general protein similarity searches (Altschul, 1991). The pam(1 program can be used to produce PAM matrices of any desired iteration from 2 to 511. Each matrix is most sensitive at finding similarities at its particular PAM distance. For more thorough searches, particularly when the mutational distance between potential homologs is unknown and the significance of their similarity may be only marginal, Altschul (1991, 1992) recommends performing at least three searches, one each with the PAM40, PAM120 and PAM250 matrices.", "prompt": "Similarity matrix (-matrix)", "name": "matrix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -matrix \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -matrix $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": {"python": "wublast2 == \"blastn\"", "perl": "$wublast2 eq \"blastn\""}, "prompt": "Blastn penalty", "name": "scoring_blastn", "children": [{"comment": null, "prompt": "Penalty for a nucleotid mismatch (N)", "name": "mismatch", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" N=\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" N=$value\" : \"\""}, "command": false, "precond": {"python": "wublast2 == \"blastn\"", "perl": "$wublast2 eq blastn"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Reward for a nucleotid match (M)", "name": "match", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" M=\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" M=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Filtering and masking options", "name": "filter_opt", "children": [{"comment": "Mask letters in the query sequence without altering the sequence itself, during neighborhood word generation.", "prompt": "Filter or Masking query sequence", "name": "filter", "ctrl": null, "simple": null, "argpos": null, "format": null, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option activates filtering or masking of segments of the query sequence based on a potentially wide variety of criteria. The usual intent of filtering is to mask regions that are non-specific for protein identification using sequence similarity. For instance, it may be desired to mask acidic or basic segments that would otherwise yield overwhelming amounts of uninteresting, non-specific matches against a wide array of protein families from a comprehensive database search. The BLAST programs have internally-coded knowledge of the specific command line options needed to invoke the SEG and XNU programs as query sequence filters, but these two filter programs are not included in the BLAST software distribution and must be independently installed.The SEG program (Wootton and Federhen, 1993) masks low compositional complexity regions, while XNU (Claverie and States, 1993) masks regions containing short-periodicity internal repeats. The BLAST programs can pipe the filtered output from one program into another. For instance, XNU+SEG or SEG+XNU can be specified as the filtermethod to have each program filter the query sequence in succession. Note that neither SEG nor XNU is suitable for filtering untranslated nucleotide sequences for use by blastn", "prompt": "Filtering or Masking options", "name": "other_filters", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\" -\" + str(filter) + \" \" + str(value)", "perl": "\" -$filter $value\""}, "command": false, "precond": {"python": "filter is not None", "perl": "defined($filter)"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Extend masking additional distance into flanking regions (-maskextra)", "name": "maskextra", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -maskextra\" )[ value ]", "perl": "($value) ? \" -maskextra\" : \"\""}, "command": false, "precond": {"python": "filter == \"wordmask\"", "perl": "$filter eq \"wordmask\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Filter lower-case letters in query", "name": "lc", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Selectivity Options", "name": "selectivite", "children": [{"comment": "The parameter Expect (E) establishes a statistical significance threshold for reporting database sequence matches. E is interpreted as the upper bound on the expected frequency of chance occurrence of an HSP (or set of HSPs) within the context of the entire database search. Any database sequence whose matching satisfies E is subject to being reported in the program output. If the query sequence and database sequences follow the random sequence model of Karlin and Altschul (1990), and if sufficiently sensitive BLAST algorithm parameters are used, then E may be thought of as the number of matches one expects to observe by chance alone during the database search. The default value for E is 10, while the permitted range for this Real valued parameter is 0 < E <= 1000.", "prompt": "Expected value (E)", "name": "Expect", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" E=\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" E=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximal number of HSPs saved or reported per subject sequence (-hspmax)", "name": "hspmax", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -hspmax \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -hspmax $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "E2 is interpreted as the expected number of HSPs that will be found when comparing two sequences that each have the same length -- either 300 amino acids or 1000 nucleotides, whichever is appropriate for the particular program being used.The default value for E2 is typically about 0.15 but may vary from version to version of each program.", "prompt": "Expected number of HSPs that will be found when comparing two sequences that each have the same length (E2)", "name": "E2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" E2=\" + str(value))[ value is not None ]", "perl": "(defined $value) ? \" E2=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The parameter Cutoff (S) represents the score at which a single HSP would by itself satisfy the significance threshold E. Higher scores -- higher values for S -- correspond to increasing statistical significance (lower probability of chance occurrence). Unless S is explicitly set on the command line, its default value is calculated from the value of E. If both S and E are set on the command line, the one which is the most restrictive is used. When neither parameter is specified on the command line, the default value for E is used to calculate S.", "prompt": "Cutoff score: threshold for report (S)", "name": "Cutoff", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" S=\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" S=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "S2 may be thought of as the score expected for the MSP between two sequences that each have the same length -- either 300 amino acids or 1000 nucleotides, whichever is appropriate for the particular program being used.The default value for S2 will be calculated from E2 and, like the relationship between E and S, is dependent on the residue composition of the query sequence and the scoring system employed, as conveyed by the Karlin-Altschul K and Lambda statistics.", "prompt": "Cutoff score which defines HSPs (S2)", "name": "S2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" S2=\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" S2=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "The task of finding HSPs begins with identifying short words of length W in the query sequence that either match or satisfy some positive-valued threshold score T when aligned with a word of the same length in a database sequence. T is referred to as the neighborhood word score threshold (Altschul et al., 1990). These initial neighborhood word hits act as seeds for initiating searches to find longer HSPs containing them. The word hits are extended in both directions along each sequence for as far as the cumulative alignment score can be increased. Extension of the word hits in each direction are halted when: the cumulative alignment score falls off by the quantity X from its maximum achieved value; the cumulative score goes to zero or below, due to the accumulation of one or more negative-scoring residue alignments; or the end of either sequence is reached.", "prompt": "Length of words identified in the query sequence (W)", "name": "W", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" W=\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" W=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Neighborhood word score threshold (T)", "name": "T", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" T=\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" T=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Restrict blast neighborhood word generation to a specific segment of the query sequence that begins at 'nwstart' and continues for 'nwlen' residues or until the end of the query sequence is reached. HSP alignments may extend outside the region of neighborhood word generation but hte alignments can only be initiated by word hits occurring within the region. Through the use of these options, a very long query sequence can be searched piecemeal, using short, overlapping segments each time. The amount of overlap from one neighborhood region to the next need only be the blast wordlength W minus 1, in order to be assured of detecting all HSPs.However, to provide greater freedom for statistical interpretation of multiple HSP findings (eg. matches against exons) more extensive overlapping is recommanded, with the extent to be chosen based on the expected gene density and length of introns.", "prompt": "Start generating neighborhood words here in query (blastp/blastx) (-nwstart)", "name": "nwstart", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -nwstart \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -nwstart $value\" : \"\""}, "command": false, "precond": {"python": "wublast2 in [ \"blastp\", \"blastx\" ]", "perl": "$wublast2 =~ /^blast[px]$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Generate neighborhood words over this distance from 'nwstart' in query (blastp/blastx) (-nwlen)", "name": "nwlen", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -nwlen \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -nwlen $value\" : \"\""}, "command": false, "precond": {"python": "wublast2 in [ \"blastp\", \"blastx\" ]", "perl": "$wublast2 =~ /^blast[px]$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Word hit extension drop-off score (X)", "name": "X", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" X=\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" X=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Invoke a 2-hit BLAST algorithm similar to that of Altschul et al. (1997), with maximum  wordhit separation distance, as measured from the end of each wordhit. Altschul et al. (1997) use the equivalent of hitdist=40 in their software by default (except NCBI-BLASTN, where 2-hit BLAST is not available). In WU-BLASTN, setting 'hitdist' and 'wink' (see below) is akin to using double-length words generated on W-mer boundaries.For best sensitivity, 2-hit BLAST should generally not be used.", "prompt": "Maximum word separation distance for 2-hit BLAST algorithm (-hitdist)", "name": "hitdist", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -hitdist \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -hitdist $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Generate word hits at every wink-th ('W increment') position along the query, where the default wink=1 produces neighborhood words at every position.For good sensitivity, this option should not be used. The benefit of using 'wink' is in finding identical or nearly identical sequences rapidly. When used in conjunction with the 'hitdist' option to obtain the highest speed, care should be taken that desired matches are not precluded by these parameters.", "prompt": "Generate word hits at every wink-th position (-wink)", "name": "wink", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -wink \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -wink $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option turns off both the determination of the number of HSPs that ar consistent with each other in a gapped alignment and an adjustment that is made to the Sum and poisson statistics to account for the consistency of combined HSPs.", "prompt": "Turn off HSP consistency rules for statistics (-consistency)", "name": "consistency", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -consistency\" )[ value ]", "perl": "($value) ? \" -consistency\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximal separation allowed between HSPs along query (-hspsepqmax)", "name": "hspsepqmax", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -hspsepqmax \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -hspsepqmax $value\" : \"\""}, "command": false, "precond": {"python": "not consistency", "perl": "not $consistency"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximal separation allowed between HSPs along subject (-hspsepsmax)", "name": "hspsepsmax", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -hspsepsmax \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -hspsepsmax $value\" : \"\""}, "command": false, "precond": {"python": "not consistency", "perl": "not $consistency"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Discard HSPs spanned on (-span*)", "name": "span", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not create gapped alignments (-nogap)", "name": "nogap", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -nogap\" )[ value ]", "perl": "($value) ? \" -nogap\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Generate a gapped alignment for every ungapped HSP found (-gapall)", "name": "gapall", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gapall\" )[ value ]", "perl": "($value) ? \" -gapall\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "not nogap  and not gapall", "perl": "not $nogap  and not $gapall"}, "prompt": "Selectivity options for gapped alignments", "name": "gap_selectivite", "children": [{"comment": null, "prompt": "Expectation threshold of sets of ungapped HSPs for subsequent use in seeding gapped alignments (-gapE)", "name": "gapE", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gapE \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -gapE $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Expectation threshold for saving individual gapped alignments (-gapE2)", "name": "gapE2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gapE2 \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -gapE2 $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Cutoff score for saving individual gapped alignments (-gapS2)", "name": "gapS2", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gapS2 \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -gapS2 $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Default values are 32 for protein comparisons and 16 for blastn.", "prompt": "Set the window width within which gapped alignments are generated (-gapW)", "name": "gapW", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gapW \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -gapW $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Set the maximum drop-off score during banded gapped alignment (gapX)", "name": "gapX", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "(\"\" , \" gapX=\" + str(value))[ value is not None ]", "perl": "(defined $value) ? \" gapX=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximal permitted distance on the QUERY sequence between two consistent gapped alignments (-gapsepqmax)", "name": "gapsepqmax", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gapsepqmax \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -gapsepqmax $value\" : \"\""}, "command": false, "precond": {"python": "not nogap  and not consistency", "perl": "not $nogap  and not $consistency"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximal permitted distance on the subject sequence between two consistent gapped alignments (-gapsepsmax)", "name": "gapsepsmax", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gapsepsmax \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -gapsepsmax $value\" : \"\""}, "command": false, "precond": {"python": "not nogap  and not consistency", "perl": "not $nogap  and not  $consistency"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": {"python": "wublast2 != \"blastn\"", "perl": "$wublast2 ne blastn"}, "prompt": "Translation Option", "name": "translation_opt", "children": [{"comment": null, "prompt": "Genetic code to translate the query (blastx,tblastx) (-gcode)", "name": "gcode", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gcode \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -gcode $value\" : \"\""}, "command": false, "precond": {"python": "wublast2 in [ \"blastx\" , \"tblastx\" ]", "perl": "$wublast2 =~ /^t?blastx$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Which strands (for nucleotid query)", "name": "strand", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[value is not None]", "perl": "(defined $value) ? \" $value\" : \"\""}, "command": false, "precond": {"python": "wublast2 in [ \"blastn\", \"blastx\" ]", "perl": "$wublast2 =~ /^blast[nx]$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Genetic code for database translation (tblastx,tblastn) (-dbgcode)", "name": "dbgcode", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \"-dbgcode \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \"-dbgcode $value\" : \"\""}, "command": false, "precond": {"python": "wublast2  in [ \"tblastx\", \"tblastn\" ]", "perl": "$wublast2 =~ /^tblast[nx]$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Which strands of the database sequences (tblastn,tblastx) (-db)", "name": "dbstrand", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\""}, "command": false, "precond": {"python": "wublast2 in [ \"tblastn\" , \"tblastx\" ]", "perl": "$wublast2 =~ /^tblast[nx]$/"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": "Parameters to use when evaluating the significance of gapped and ungapped alignment scores. Useful when precomputed values are unavailable for the chosen scoring matrix and gap penalty combination in the programs internal tables.", "precond": null, "prompt": "Statistic options", "name": "statistics", "children": [{"comment": null, "prompt": "Use statistics", "name": "stat", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option consumes marginally more cpu time.", "prompt": "Collect word-hit statistics (-stats)", "name": "wordstats", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -stats\" )[ value ]", "perl": "($value) ? \" -stats\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Base statistics on this number of independent contexts or reading frames (-ctxfactor)", "name": "ctxfactor", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -ctxfactor \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -ctxfactor $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "<text lang=\"en\" />", "prompt": "Maximal fractional length of overlap for HSP consistency of two ungapped alignment (-olf)", "name": "olf", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -olf \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -olf $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximal fractional length of overlap for HSP consistency of two gapped alignments (-golf)", "name": "golf", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -golf \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -golf $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximal absolute length of overlap for HSP consistency  of two ungapped alignment (default unlimited) (-olmax)", "name": "olmax", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -olmax \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -olmax $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Maximal absolute length of overlap for HSP consistency  of two gapped alignment (default unlimited) (-golmax)", "name": "golmax", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -golmax \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -golmax $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "This option defines the common ratio of the terms in a geometric progression used in normalizing probabilities across all numbers of Poisson events (typically the number of 'consistent' HSPs). A Poisson probability for N segments is eighted by the reciprocal of the Nth term in the progression, where the first term has a value of (1-rate), the second term is (1-rate)*rate, the third term is (1-rate)*rate*rate, and so on.The default rate is 0.5, such that the probability assigned to a single HSP is discounted by a factor of 2, the Poisson probability of 2 HSPs is discounted by a factor of 4, for 3 HSPs the discount factor is 8, and so on. The rate essentially defines a penalty imposed on the gap between each HSP, where the default penalty is equivalent to 1 bit of information.", "prompt": "Gap decay rate (-gapdecayrate)", "name": "gapdecayrate", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gapdecayrate \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -gapdecayrate $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "precond": {"python": "stat in [ \"kap\", \"sump\" ]", "perl": "$stat =~ /^(kap|sump)$/"}, "prompt": "Parameters for Karlin-Altschul statistics", "name": "kastats", "children": [{"comment": null, "prompt": "K parameter for ungapped alignment scores (K)", "name": "K", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" K=\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" K=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Lambda parameter for ungapped alignment scores (L)", "name": "L", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" L=\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" L=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "H parameter for ungapped alignment scores (H)", "name": "H", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" H=\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" H=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "K parameter for gapped alignment scores (gapK)", "name": "gapK", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" gapK=\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" gapK=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Lambda parameter for gapped alignment scores (gapL)", "name": "gapL", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" gapL=\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" gapL=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "H parameter for gapped alignment scores (gapH)", "name": "gapH", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" gapH=\" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" gapH=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, {"comment": null, "precond": null, "prompt": "Report options", "name": "affichage", "children": [{"comment": null, "prompt": "Histogram (H)", "name": "Histogram", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" H=1\" )[ value ]", "perl": "($value) ? \" H=1\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum number of database sequences for which one-line descriptions will be reported (V).", "prompt": "How many short descriptions? (V)", "name": "Descriptions", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" V=\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" V=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": "Maximum number of database sequences for which high-scoring segment pairs will be reported (B).", "prompt": "How many alignments? (B)", "name": "Alignments", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" B=\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" B=$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Sort order for reporting database sequences", "name": "sortby", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -\" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value ne $vdef) ? \" -$value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Perform full Smith-Waterman before output (blastp only) (-postsw)", "name": "postsw", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -postsw\" )[ value ]", "perl": "($value) ? \" -postsw\" : \"\""}, "command": false, "precond": {"python": "wublast2 == \"blastp\"", "perl": "$wublast2 eq \"blastp\""}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Output file name", "name": "output_file", "ctrl": null, "simple": null, "argpos": "499", "format": {"python": "\" -o blast.txt\"", "perl": "\" -o blast.txt\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "CPU number to use", "name": "cpunum", "ctrl": null, "simple": null, "argpos": "499", "format": {"python": "\" -cpus 1\"", "perl": "\" -cpus 1\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Html output format", "name": "output_format", "ctrl": null, "simple": null, "argpos": "500", "format": {"python": "(\"\" , \" && html4blast -g -o blast.html blast.txt\")[ value ]", "perl": "\" && html4blast -g -o blast.html blast.txt\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display filter sequences in output (-echofilter)", "name": "echofilter", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -echofilter\" )[ value ]", "perl": "($value) ? \" -echofilter\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not prune insignificant HSPs from the output lists (-prune)", "name": "prune", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -prune\" )[ value ]", "perl": "($value) ? \" -prune\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Report this number of consistent (colinear) groups of HSPs (-topcomboN)", "name": "topcomboN", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -topcomboN \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -topcomboN $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Only show HSP combos within this factor of the best combo (-topcomboE)", "name": "topcomboE", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -topcomboE \" + str(value) )[ value is not None ]", "perl": "(defined $value) ? \" -topcomboE $value\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Display gi identifiers, when available (-gi)", "name": "gi", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -gi\" )[ value ]", "perl": "($value) ? \" -gi\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Do not display sequence alignments (-noseqs)", "name": "noseqs", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\" , \" -noseqs\" )[ value ]", "perl": "($value) ? \" -noseqs\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": "2.0", "references": [{"url": null, "doi": null, "label": "Gish, Warren (1994-1997). unpublished."}, {"url": null, "doi": null, "label": "Gish, W, and DJ States (1993). Identification of protein coding regions by database similarity search. Nature Genetics 3:266-72."}, {"url": null, "doi": null, "label": "Altschul, SF, and W Gish (1996). Local alignment statistics. ed. R. Doolittle. Methods in Enzymology 266:460-80."}, {"url": null, "doi": null, "label": "Korf, I, and W Gish (2000). MPBLAST: improved BLAST performance with multiplexed queries. Bioinformatics in press."}, {"url": null, "doi": null, "label": "Altschul, Stephen F., Warren Gish, Webb Miller, Eugene W. Myers, and David J. Lipman (1990). Basic local alignment search tool. J. Mol. Biol. 215:403-10."}], "source_links": [], "env": [], "authors": "Gish. W", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "wublast2"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac6d"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:gene_finding"}], "description": "Software for exon trapping", "title": "Xpound", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "Output file", "name": "outfile", "simple": null, "filenames": {"python": "\"xpound.out\"", "perl": "\"xpound.out\""}, "precond": null, "output_type": "stdout", "hidden": false, "main": false, "type": {"datatype": {"class": "XpoundReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "precond": null, "prompt": "Report options", "name": "report_options", "children": [{"comment": null, "prompt": "Report file", "name": "report_file", "simple": null, "filenames": {"python": "\"xreport.out\"", "perl": "\"xreport.out\""}, "precond": {"python": "report", "perl": "$report"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "XreportReport", "superclass": "Report"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, {"comment": null, "precond": null, "prompt": "Postscript options", "name": "postscript_options", "children": [{"comment": null, "prompt": "PostScript file", "name": "psfile", "simple": null, "filenames": {"python": "\"xpound.ps\"", "perl": "\"xpound.ps\""}, "precond": {"python": "postscript", "perl": "$postscript"}, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "PostScript", "superclass": "Binary"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": "Everything after a % on a line in the input\n          file is ignored. Other than comment xpound expects only white\n          space, which is also ignored, or IUPAC characters:A C M G R S V T W Y H K D B Nin upper or lower case. Characters which do\n          not uniquely determine a base, such as N, B, S and so on, are\n          all interpreted as a C.Xpound will not accept the IUPAC character -,\n          all occurences of which should be stripped from the input file\n          beforehand.", "prompt": "DNA sequence File", "name": "seq", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "\" <\"+str(value)", "perl": "\" <$value\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["RAW"], "edam_types": [], "card": "1,1"}, "paramfile": null}, {"comment": null, "precond": null, "prompt": "Report options", "name": "report_options", "children": [{"comment": null, "prompt": "Reports regions of bases for which the probability of coding is high (xreport)", "name": "report", "ctrl": null, "simple": null, "argpos": "20", "format": {"python": "( \"\" , \" ; xreport <xpound.out \" )[ value ]", "perl": "($value) ? \" ; xreport <xpound.out \" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Cut off value for report", "name": "cut_off", "ctrl": null, "simple": null, "argpos": "21", "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" $value \" : \"\""}, "command": false, "precond": {"python": "report", "perl": "$report"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Minimum length value for report", "name": "min_length", "ctrl": null, "simple": null, "argpos": "22", "format": {"python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" $value \" : \"\""}, "command": false, "precond": {"python": "report", "perl": "$report"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Postscript options", "name": "postscript_options", "children": [{"comment": null, "prompt": "Produces a file of graphs in PostScript format (xpscript)", "name": "postscript", "ctrl": null, "simple": null, "argpos": "30", "format": {"python": "( \"\" , \"; xpscript xpound.out\" )[ value ]", "perl": "($value) ? \"; xpscript xpound.out\" : \"\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Orientation (-l)", "name": "orientation", "ctrl": null, "simple": null, "argpos": "31", "format": {"python": "( \"\" , \" -l \" )[ value == \"lanscape\" ]", "perl": "($value eq \"lanscape\") ? \" -l \" : \"\""}, "command": false, "precond": {"python": "postscript", "perl": "$postscript"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Choice", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Rows of plots per page (-r)", "name": "rows", "ctrl": null, "simple": null, "argpos": "32", "format": {"python": "( \"\" , \" -r \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -r $value \" : \"\""}, "command": false, "precond": {"python": "postscript", "perl": "$postscript"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Columns of plots per page (-c)", "name": "columns", "ctrl": null, "simple": null, "argpos": "32", "format": {"python": "( \"\" , \" -c \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -c $value \" : \"\""}, "command": false, "precond": {"python": "postscript", "perl": "$postscript"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Draw a line at this level (-hi)", "name": "high", "ctrl": null, "simple": null, "argpos": "33", "format": {"python": "( \"\" , \" -hi \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -hi $value \" : \"\""}, "command": false, "precond": {"python": "postscript", "perl": "$postscript"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Draw a line at this level (-lo)", "name": "low", "ctrl": null, "simple": null, "argpos": "34", "format": {"python": "( \"\" , \" -lo \" + str(value) )[ value is not None and value != vdef]", "perl": "(defined $value and $value != $vdef) ? \" -lo $value \" : \"\""}, "command": false, "precond": {"python": "postscript", "perl": "$postscript"}, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Float", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}]}, "version": null, "references": [{"url": null, "doi": null, "label": "A probabilistic model for detecting coding regions in DNA sequences. Alun Thomas and Mark H Skolnick, IMA Journal of Mathematics Applied in Medicine and Biology, 1994, 11, 149-160."}], "source_links": [], "env": [], "authors": "Thomas and Skolnick", "command": {"path": null, "value": "xpound"}, "documentation_links": [], "type": "program", "name": "xpound"}, {"comment": "This software is able to extract putative cassette structures that fulfill the criteria established from analysis of previously known cassettes from integrons and superintegrons.", "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac6e"}, "classifications": [{"type": "mobyle1", "classification": "sequence:nucleic:prediction"}, {"type": "mobyle1", "classification": "sequence:nucleic:gene_finding"}], "description": "Integrons Analysis and Cassette Identification", "title": "xxr", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": "XXR results report", "name": "res", "simple": null, "filenames": {"python": "\"Resultat_*\"", "perl": "\"Resultat_*\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": "If they exist, the 3th cassette gene files ONLY are displayed but you will find ALL of them in the job archive.", "prompt": "Cassette gene files", "name": "sk7", "simple": null, "filenames": {"python": "\"3_*_XXR_*\"", "perl": "\"3_*_XXR_*\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Text", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}, {"comment": null, "prompt": "XXR fasta", "name": "xxrfasta", "simple": null, "filenames": {"python": "\"XXR.fasta_*\"", "perl": "\"XXR.fasta_*\""}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}}, {"comment": null, "prompt": "Cassette gene files", "name": "hk7", "simple": null, "filenames": {"python": "\"*_XXR_*\"", "perl": "\"*_XXR_*\""}, "precond": null, "output_type": "file", "hidden": true, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "prompt": null, "name": "xxr", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "\"xxr <xxr.params\"", "perl": "\"xxr <xxr.params\""}, "command": true, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Input sequence", "name": "input", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "str( value )+\"\\n.\\n\"", "perl": "\"$value\\\\n.\\\\n\""}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": ["DNA"], "biomoby_datatypes": [], "formats": ["FASTA"], "edam_types": [], "card": null}, "paramfile": "xxr.params"}, {"comment": null, "precond": null, "prompt": "Options", "name": "input_opt", "children": [{"comment": null, "prompt": "Extension to add to files", "name": "outsuffix", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\\n\" , str( value ) + \"\\n\" )[value is not None]", "perl": "(defined $value) ? \"$value\\\\n\" : \"\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "xxr.params"}, {"comment": null, "prompt": "Minimal core size", "name": "minsize", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\\n\" , str( value ) + \"\\n\" )[value != vdef]", "perl": "($value != $vdef) ? \"$value\\\\n\" : \"\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "xxr.params"}, {"comment": null, "prompt": "Maximal core size", "name": "maxsize", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\\n\" , str( value ) + \"\\n\" )[value != vdef]", "perl": "($value != $vdef) ? \"$value\\\\n\" : \"\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "xxr.params"}, {"comment": null, "prompt": "Maximal XXR size", "name": "maxxxr", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\\n\" , str( value ) + \"\\n\" )[value != vdef]", "perl": "($value != $vdef) ? \"$value\\\\n\" : \"\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "xxr.params"}, {"comment": null, "prompt": "Maximal gene size", "name": "maxgene", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\\n\" , str( value ) + \"\\n\" )[value != vdef]", "perl": "($value != $vdef) ? \"$value\\\\n\" : \"\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Integer", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "xxr.params"}, {"comment": "By default, Core Site is GCGTT.", "prompt": "Core Site (CS) - Variable site part upstream GTT", "name": "cs", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\\n\" , str( value ) + \"\\n\" )[value != vdef]", "perl": "($value ne $vdef) ? \"$value\\\\n\" : \"\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "xxr.params"}, {"comment": "By default, Inverted Core Site is AACAAA.", "prompt": "Inverted Core Site (ICS) - Variable site part downstream AAC", "name": "ICS", "ctrl": null, "simple": null, "argpos": null, "format": {"python": "( \"\\n\" , str( value ) + \"\\n\" )[value != vdef]", "perl": "($value ne $vdef) ? \"$value\\\\n\" : \"\\\\n\""}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": "xxr.params"}]}]}, "version": "3.02", "references": [{"url": null, "doi": null, "label": "Rowe-Magnus D.A., Guerout A.M., Biskri L., Bouige P., Mazel D. Comparative analysis of superintegrons: Engineering extensive genetic diversity in the Vibrionaceae. Genome Res. 2003;13:428-442."}], "source_links": [], "env": [], "authors": "P. Bouige", "command": {"path": null, "value": null}, "documentation_links": [], "type": "program", "name": "xxr"}, {"comment": null, "homepage_links": [], "_id": {"$oid": "51434da693546d52388cac6f"}, "classifications": [{"type": "mobyle1", "classification": "sequence:edit"}], "description": "Add a sequence reference (a full USA) to a list file", "title": "yank", "outputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "outfile_out option", "name": "e_outfile_out", "simple": null, "filenames": {"python": "e_outfile"}, "precond": null, "output_type": "file", "hidden": false, "main": false, "type": {"datatype": {"class": "UsaList", "superclass": "AbstractText"}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}}]}]}, "package": null, "inputs": {"comment": null, "precond": null, "prompt": null, "name": null, "children": [{"comment": null, "precond": null, "prompt": "Input section", "name": "e_input", "children": [{"comment": null, "prompt": "sequence option", "name": "e_sequence", "ctrl": null, "simple": null, "argpos": "1", "format": {"python": "(\"\", \" -sequence=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": true, "hidden": false, "main": false, "type": {"datatype": {"class": "Sequence", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": ["EMBL", "FASTA", "GCG", "GENBANK", "NBRF", "PIR", "RAW", "SWISSPROT", "GFF"], "edam_types": [], "card": "1,1"}, "paramfile": null}]}, {"comment": null, "precond": null, "prompt": "Output section", "name": "e_output", "children": [{"comment": null, "prompt": "Overwrite existing output file", "name": "e_newfile", "ctrl": null, "simple": null, "argpos": "2", "format": {"python": "(\"\", \" -newfile\")[ bool(value) ]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Boolean", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}, {"comment": null, "prompt": "Name of the output file (e_outfile)", "name": "e_outfile", "ctrl": null, "simple": null, "argpos": "3", "format": {"python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"}, "command": false, "precond": null, "mandatory": false, "hidden": false, "main": false, "type": {"datatype": {"class": "Filename", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, {"comment": null, "prompt": "Turn off any prompting", "name": "auto", "ctrl": null, "simple": null, "argpos": "4", "format": {"python": "\" -auto -stdout\""}, "command": false, "precond": null, "mandatory": false, "hidden": true, "main": false, "type": {"datatype": {"class": "String", "superclass": null}, "biotypes": [], "biomoby_datatypes": [], "formats": [], "edam_types": [], "card": null}, "paramfile": null}]}, "version": null, "references": [], "source_links": [], "env": [], "authors": null, "command": {"path": null, "value": "yank"}, "documentation_links": ["http://bioweb2.pasteur.fr/docs/EMBOSS/yank.html", "http://emboss.sourceforge.net/docs/themes"], "type": "program", "name": "yank"}]