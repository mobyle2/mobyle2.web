{
    "authors": null,
    "classifications": [
        {
            "classification": "alignment:pairwise",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": null,
    "description": "Comparison between two sequences with Blast (NCBI)",
    "documentation_links": [],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": "1",
                "command": true,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"bl2seq\"",
                    "python": "\"bl2seq\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "blast_init",
                "paramfile": null,
                "precond": null,
                "prompt": "Blast initiation",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "2",
                "command": false,
                "comment": "- Blastp compares amino acid query sequences- Blastn compares nucleotide query sequences- tBlastx compares translated a nucleotide sequence and an amino acid sequence- tBlastn compares an amino acid sequence translated and a nucleotide sequence- tBlastx compares translated nucleotide sequences",
                "ctrl": null,
                "format": {
                    "perl": "\" -p $value\"",
                    "python": "\" -p \" + str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "bl2seq",
                "paramfile": null,
                "precond": null,
                "prompt": "Blast program (-p)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "3",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" -i $value\"",
                    "python": "\" -i \" + str( value )"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "first_sequence",
                "paramfile": null,
                "precond": null,
                "prompt": "First sequence (-i)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [
                        "Protein",
                        "DNA"
                    ],
                    "card": null,
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "FASTA"
                    ]
                }
            },
            {
                "argpos": null,
                "command": false,
                "comment": "Location on query sequence",
                "ctrl": null,
                "format": null,
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "first_start_region",
                "paramfile": null,
                "precond": null,
                "prompt": "Start of required region in first query sequence (-I)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "3",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "(defined $value) ? \" -I \\\"$first_start_region $value\\\"\" : \" -I \\\"$first_start_region\\\"\"",
                    "python": "( ' -I \"%s \"' % (str(first_start_region)), ' -I \"%s %s\"' % (str(first_start_region), str(value)))[value is not None]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "first_end_region",
                "paramfile": null,
                "precond": {
                    "perl": "defined $first_start_region",
                    "python": "first_start_region is not None"
                },
                "prompt": "End of required region in first sequence (-I)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "4",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" -j $value\"",
                    "python": "\" -j \" + str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "second_sequence",
                "paramfile": null,
                "precond": null,
                "prompt": "Second sequence (-j)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [
                        "Protein",
                        "DNA"
                    ],
                    "card": null,
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "FASTA"
                    ]
                }
            },
            {
                "argpos": "4",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": null,
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "second_start_region",
                "paramfile": null,
                "precond": null,
                "prompt": "Start of required region in second sequence (-J)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "4",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "(defined $value) ? \" -J \\\"$second_start_region $value\\\"\" : \" -J \\\"$second_region\\\"\"",
                    "python": "( ' -J \"%s \"' % (str(second_start_region)), ' -J \"%s %s\"' % (str(second_start_region), str(value)))[value is not None]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "second_end_region",
                "paramfile": null,
                "precond": {
                    "perl": "defined $second_start_region",
                    "python": "second_start_region is not None"
                },
                "prompt": "End of required region in second sequence (-J)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Default: 5 for blastn; 10 for blastp, blastx and 11 for tblastn",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -G $value\" : \"\"",
                            "python": "(\"\" , \" -G \"+str(value) )[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "open_a_gap",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Cost to open a gap (-G)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Default: 2 for blastn; 1 for blastp, blastx and tblastnLimited values for gap existence and extension are supported for these programs.Existence -- Extension:BLOSUM909 -- 2, 8 -- 2, 7 -- 2, 6 -- 211 -- 1, 10 -- 1, 9 -- 1BLOSUM8025 -- 2, 13 -- 2, 9 -- 2, 8 -- 2, 7 -- 2, 6 -- 211 -- 1, 10 -- 1, 9 -- 1BLOSUM6211 -- 2, 10 -- 2, 9 -- 2, 8 -- 2, 7 -- 2, 6 -- 213 -- 1, 12 -- 1, 11 -- 1, 10 -- 1, 9 -- 1BLOSUM4513 -- 3, 12 -- 3, 11 -- 3, 10 -- 316 -- 2, 15 -- 2, 14 -- 2, 13 -- 2, 12 -- 219 -- 1, 18 -- 1, 17 -- 1, 16 -- 1PAM307 -- 2, 6 -- 2, 5 -- 210 -- 1, 9 -- 1, 8 -- 1PAM708 -- 2, 7 -- 2, 6 -- 211 -- 1, 10 -- 1, 9 -- 1",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -E $value\" : \"\"",
                            "python": "(\"\" , \" -E \"+str(value) )[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "extend_a_gap",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Cost to extend a gap (-E)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "children": [
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value and $value ne $vdef) ? \" -M $value\" : \"\"",
                                    "python": "(\"\" , \" -M \"+str(value) )[value is not None and value != vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "matrix",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Similarity matrix (-M)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Choice",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": null,
                        "name": "scoring_blast",
                        "precond": {
                            "perl": "$bl2seq ne \"blastn\"",
                            "python": "bl2seq != \"blastn\""
                        },
                        "prompt": "Protein penalty (not for blastn)"
                    },
                    {
                        "children": [
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value and $value != $vdef) ? \" -q $value\" : \"\"",
                                    "python": "(\"\" , \" -q \"+str(value) )[value is not None and value != vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "mismatch",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Penalty for a nucleotide mismatch (-q)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value and $value != $vdef) ? \" -r $value\" : \"\"",
                                    "python": "(\"\" , \" -r \"+str(value) )[value is not None and value != vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "match",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Reward for a nucleotide match (-r)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": null,
                        "name": "scoring_blastn",
                        "precond": {
                            "perl": "$bl2seq eq \"blastn\"",
                            "python": "bl2seq == \"blastn\""
                        },
                        "prompt": "Blastn penalty"
                    }
                ],
                "comment": null,
                "name": "scoring_opt",
                "precond": null,
                "prompt": "Scoring options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \" -F F\"",
                            "python": "(\" -F F\" , \"\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "filter",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Filter or Masking query sequence (DUST with blastn, SEG with others) (-F)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "A coiled-coiled filter, based on the work of Lupas et al. (Science, vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al., J Gen Virol, vol. 76, pp. 2923-32 (1995))",
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "other_filters",
                        "paramfile": null,
                        "precond": {
                            "perl": "$filter and not defined $other_masking",
                            "python": "filter and other_masking is None"
                        },
                        "prompt": "Filtering options (Filter must be true)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "A coiled-coiled filter, based on the work of Lupas et al. (Science, vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al., J Gen Virol, vol. 76, pp. 2923-32 (1995)).It is possible to specify that the masking should only be done during the process of building the initial words .If the -U option (to mask any lower-case sequence in the input FASTA file) is used and one does not wish any other filtering, but does wish to mask when building the lookup tables then one should specify: -F 'm'",
                        "ctrl": {
                            "perl": "($value eq 'null' or $value eq 'maskSEG' or $value eq 'maskCoil' or $value eq 'maskDust']) or ($value eq 'lowerMask' and $lower_case)",
                            "python": "value in ['null', 'maskSEG', 'maskCoil', 'maskDust'] or (value == 'lowerMask' and lower_case)"
                        },
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "other_masking",
                        "paramfile": null,
                        "precond": {
                            "perl": "$filter == 1 and not defined $other_filters",
                            "python": "filter == 1 and other_filters is None"
                        },
                        "prompt": "Masking options (Filter must be true)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This option specifies that any lower-case letters in the input FASTA file should be masked.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -U T\" : \"\"",
                            "python": "(\"\", \" -U T\")[value]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "lower_case",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Use lower case filtering (-U)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "Mask off segments of the query sequence that have low compositional complexity, as determined by the SEG program of Wootton & Federhen (Computers and Chemistry, 1993) or, for BLASTN, by the DUST program of Tatusov and Lipman (in preparation). Filtering can eliminate statistically significant but biologically uninteresting reports from the blast output (e.g., hits against common acidic-, basic- or proline-rich regions), leaving the more biologically interesting regions of the query\n          sequence available for specific matching against database sequences.Filtering is only applied to the query sequence (or its translation products), not to database sequences. Default filtering is DUST for BLASTN, SEG for other programs. It is not unusual for nothing at all to be masked by SEG, when applied to sequences in SWISS-PROT, so filtering should not be expected to always yield an effect. Furthermore, in some cases, sequences are masked in their entirety, indicating that the statistical significance of any matches reported against the unfiltered\n          query sequence should be suspect.",
                "name": "filter_opt",
                "precond": null,
                "prompt": "Filtering and masking options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The statistical significance threshold for reporting matches against database sequences; the default value is 10, such that 10 matches are expected to be found merely by chance, according to the stochastic model of Karlin and Altschul (1990). If the statistical significance ascribed to a match is greater than the EXPECT threshold, the match will not be reported. Lower EXPECT thresholds are more stringent, leading to fewer chance matches being reported. Fractional values are\n              acceptable.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -e $value\" : \"\"",
                            "python": "(\"\" , \" -e \"+str(value) )[value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Expect",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Expected value (-e)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Use words of size N.Zero invokes default behaviorDefault values:- 11 for blastn- 3 for others",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -W $value\" : \"\"",
                            "python": "(\"\" , \" -W \"+str(value) )[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "word_size",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Word Size (-W)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This is the value that control the path graph region explored by Blast during a gapped extension (Xg in the NAR paper) (default for blastp is 15).Default values:- 30 for blastn- 0 for tblastx- 15 for others",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -X $value\" : \"\"",
                            "python": "(\"\" , \" -X \"+str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "dropoff_extent",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "X dropoff value for gapped alignment (-X)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Use zero for the real size",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) \" -Y $value\" : \"\"",
                            "python": "(\"\" , \" -Y \"+str(value) )[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "eff_len",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Effective length of the search space (-Y)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \" -g F \"",
                            "python": "(\" -g F \" , \"\")[value]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gapped_alig",
                        "paramfile": null,
                        "precond": {
                            "perl": "$bl2seq ne \"tblastx\"",
                            "python": "bl2seq != \"tblastx\""
                        },
                        "prompt": "Perform or not gapped alignment (not available with tblastx) (-g)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "selectivity_opt",
                "precond": null,
                "prompt": "Selectivity options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -S $value\" : \"\"",
                            "python": "( \"\" , \" -S \" + str(value) )[ value is not None and value!= vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "strand",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Query strand to search against second sequence (for blastx, tblastx or tblastn) (-S)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "translation_opt",
                "precond": {
                    "perl": "$bl2seq =~ /^(blastx|tblast[nx])$/",
                    "python": "bl2seq in [ \"blastx\", \"tblastx\", \"tblastn\" ]"
                },
                "prompt": "Translation options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"\" : \"-D $value\"",
                            "python": "( \"\" , \" -D \" + str( value ) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "outformat",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Output format (-D)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output_opt",
                "precond": null,
                "prompt": "Output options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "bl2seq",
    "outputs": {
        "children": [],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [],
    "source_links": [],
    "title": "BL2SEQ",
    "type": "program",
    "version": null
}