{
    "authors": null,
    "classifications": [
        {
            "classification": "hmm:database:search",
            "type": "mobyle1"
        },
        {
            "classification": "database:search:hmm",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": "phmmer"
    },
    "comment": null,
    "description": "Search a protein sequence(s) against a protein database",
    "documentation_links": [],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": "10",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \"+str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "qsequence",
                "paramfile": null,
                "precond": null,
                "prompt": "Query sequence(s)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [
                        "Protein"
                    ],
                    "card": null,
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "FASTA"
                    ]
                }
            },
            {
                "argpos": "11",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \"+str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "db",
                "paramfile": null,
                "precond": null,
                "prompt": "Choose a protein sequence database",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Direct the main \"human-readable\" output to a file instead of the default stdout.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" -o phmmer.output\" : \"\"",
                            "python": "(\"\", \" -o phmmer.output\") [ value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "outfile",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Direct output to file (-o)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Save a multiple alignment of all significant hits (those satisfying inclusion thresholds)\nto a file (Stockholm format).",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" -A phmmer.alig\" : \"\"",
                            "python": "(\"\", \" -A phmmer.alig\") [ value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "aligfile",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Save multiple alignment of hits to file (-A)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Save a simple tabular (space-delimited) file summarizing the \"per-target\" output,\nwith one data line per homologous target sequence found.",
                        "ctrl": null,
                        "format": {
                            "perl": "$value != $vdef) ? \" --tblout phmmer.tblout\" : \"\"",
                            "python": "(\"\", \" --tblout phmmer.tblout\") [ value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "seqtab",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Save parseable table of per-sequence hits to file (--tblout)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Save a simple tabular (space-delimited) file summarizing the \"per-domain\" output,\nwith one data line per homologous domain detected in a query sequence for each homologous model.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" --domtblout phmmer.domtblout\" : \"\"",
                            "python": "(\"\", \" --domtblout phmmer.domtblout\") [ value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "domaintab",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Save parseable table of per-domain hits to file (--domtblout)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Use accessions instead of names in the main output, where available for profiles\nand/or sequences.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" --acc\" : \"\"",
                            "python": "(\"\", \" --acc\") [ value != vdef]"
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "acc",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Prefer accessions over names in output (--acc)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Omit the alignment section from the main output. This can greatly reduce the\noutput volume.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" --noali\" : \"\"",
                            "python": "(\"\", \" --noali\") [ value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "noali",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Don't output alignments, so output is smaller (--noali)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Unlimit the length of each line in the main output. The default is a limit of 120\ncharacters per line, which helps in displaying the output cleanly on terminals and\nin editors, but can truncate target profile description lines.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" --notextw\" : \"\"",
                            "python": "(\"\", \" --notextw\" ) [ value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "notextw",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Unlimit ASCII text output line width (--notextw)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "120 <=$value",
                            "python": "120 <=value"
                        },
                        "format": {
                            "perl": "($value != $vdef) ? \" --textw $value\" : \"\"",
                            "python": "(\"\", \" --textw \" + str(value) ) [ value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "textw",
                        "paramfile": null,
                        "precond": {
                            "perl": "$notextw == 0",
                            "python": "notextw == 0"
                        },
                        "prompt": "Max width of ASCII text output lines (--textw)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "The output format is designed to be human-readable, but is often so voluminous that reading it is impractical,\nand parsing it is a pain. The --tblout and --domtblout options save output in simple tabular formats that\nare concise and easier to parse.",
                "name": "output",
                "precond": null,
                "prompt": "Directing output"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The probability has to be >= 0 and <0.5. Default value: 0.02.",
                        "ctrl": {
                            "perl": "0 <= $value <0.5",
                            "python": "0 <= value <0.5"
                        },
                        "format": {
                            "perl": "($value != $vdef) ? \" --popen $value\" : \"\"",
                            "python": "(\"\", \" --popen \" + str(value)) [ value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "popen",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Gap open probability (--popen)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The probability has to be >= 0 and <1. Default value: 0.4.",
                        "ctrl": {
                            "perl": "0 <= $value <1",
                            "python": "0 <= value <1"
                        },
                        "format": {
                            "perl": "($value != $vdef) ? \" --pextend $value\" : \"\"",
                            "python": "(\"\", \" --pextend \" + str(value)) [ value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "pextend",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Gap extend probability (--pextend)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "To obtain residue alignment probabilities from a substitution matrix. The default score matrix is BLOSUM62",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" --mxfile $value\" : \"\"",
                            "python": "(\"\", \" --mxfile \" + str(value)) [ value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "matrix",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Substitution score matrix (--mxfile)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "The probability model in phmmer is constructed by inferring residue probabilities from a standard 20x20\nsubstitution score matrix, plus two additional parameters for position-independent gap open and gap extend probabilities.",
                "name": "scoringsys",
                "precond": null,
                "prompt": "Controlling scoring system"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "In the per-target output, report target sequences <= this E-value threshold. The\n        default is 10.0, meaning that on average, about 10 false positives will be reported\n        per query, so you can see the top of the \"noise\" and decide for yourself if it's really noise.",
                        "ctrl": {
                            "perl": "0 <$value",
                            "python": "0 < value"
                        },
                        "format": {
                            "perl": "($value != $vdef) ? \" -E $value\" : \"\"",
                            "python": "(\"\", \" -E \" + str(value)) [ value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_threshold",
                        "paramfile": null,
                        "precond": {
                            "perl": "$s_threshold is None",
                            "python": "s_threshold is None"
                        },
                        "prompt": "Thresholds for Sequences:  E-value (-E)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Instead of thresholding per-profile output on E-value, report target sequences\n           with a bit score of >= this score threshold.",
                        "ctrl": {
                            "perl": "0 <$value",
                            "python": "0 < value"
                        },
                        "format": {
                            "perl": "($value) ? \" -T $value\" : \"\"",
                            "python": "(\"\", \" -T \" + str(value)) [ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "s_threshold",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Score (-T)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "In the per-domain output, for target sequences that have already satisfied the perprofile\nreporting threshold, report individual domains with a conditional E-value < or = this threshold. The default is 10.0.A \"conditional\" E-value means the expected number of additional false positive domains\nin the smaller search space of those comparisons that already satisfied the per-target reporting threshold (and thus must have\nat least one homologous domain already).",
                        "ctrl": {
                            "perl": "0 <$value",
                            "python": "0 < value"
                        },
                        "format": {
                            "perl": "($value != $vdef) ? \" --domE $value\" : \"\"",
                            "python": "(\"\", \" --domE \" + str(value)) [ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "d_e_threshold",
                        "paramfile": null,
                        "precond": {
                            "perl": "$d_s_threshold is None",
                            "python": "d_s_threshold is None"
                        },
                        "prompt": "Thresholds for Domains: E-value (--domE)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Instead of thresholding per-domain output on E-value, report domains with\na bit score of >= this score threshold in output.",
                        "ctrl": {
                            "perl": "0 <$value",
                            "python": "0 < value"
                        },
                        "format": {
                            "perl": "($value) ? \" --domT $value\" : \"\"",
                            "python": "(\"\", \" --domT \" + str(value)) [ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "d_s_threshold",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Score (--domT)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "\"Reporting\" thresholds control which hits are reported in output files (the main output, --tblout, and --\ndomtblout). Sequence hits and domain hits are ranked by statistical significance (E-value) and output is\ngenerated in two sections called \"per-target\" and \"per-domain\" output.The following options allow you to change the default E-value reporting thresholds, or to use bit score thresholds instead.",
                "name": "report",
                "precond": null,
                "prompt": "Controlling significance thresholds for reporting"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Include sequences < or = this E-value threshold in output alignment. The default is\n0.01, meaning that on average, about 1 false positive would be expected in every 100 searches with different query sequences.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" --incE $value\" : \"\"",
                            "python": "(\"\", \" --incE \" + str(value)) [ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "a_e_threshold",
                        "paramfile": null,
                        "precond": {
                            "perl": "$a_s_threshold is None",
                            "python": "a_s_threshold is None"
                        },
                        "prompt": "Thresholds for Sequences:  E-value (--incE)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Instead of using E-values for setting the inclusion threshold in output alignment, use a bit score\nof >= this number as the per-target inclusion threshold. By default this option is unset.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" --incT $value\" : \"\"",
                            "python": "(\"\", \" --incT \" + str(value)) [ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "a_s_threshold",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Score (--incT)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Use a conditional E-value of <= this number as the per-domain inclusion threshold, in\ntargets that have already satisfied the overall per-target inclusion threshold. The default is 0.01.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" --incdomE $value\" : \"\"",
                            "python": "(\"\", \" --incdomE \" + str(value)) [ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "a_d_e_threshold",
                        "paramfile": null,
                        "precond": {
                            "perl": "$a_d_s_threshold is None",
                            "python": "a_d_s_threshold is None"
                        },
                        "prompt": "Thresholds for Domains: E-value (--incdomE)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Instead of using E-values, use a bit score of >= this number as the per-domain inclusion\nthreshold. By default this option is unset.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" --incdomT $value\" : \"\"",
                            "python": "(\"\", \" --incdomT \" + str(value)) [ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "a_d_s_threshold",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Score (--incdomT)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "Inclusion thresholds are stricter than reporting thresholds. They control which hits are included in any\noutput multiple alignment (the -A option) and which domains are marked as significant (\"!\") as opposed to questionable (\"?\") in domain output.Available if the option -A is selected.",
                "name": "inclusion_A",
                "precond": {
                    "perl": "$aligfile==1",
                    "python": "aligfile==1"
                },
                "prompt": "Controlling significance thresholds for inclusion in Output alignment"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Maximum sensitivity. Turn off all filters, including the bias filter, and run full Forward/\nBackward postprocessing on every target. This increases sensitivity slightly, at a large cost in speed.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" --max\" : \"\"",
                            "python": "(\"\", \" --max\") [ value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "max",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Turn all heuristic filters off (less speed, more power) (--max)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "First filter threshold; set the P-value threshold for the MSV filter step. The default is\n0.02, meaning that roughly 2% of the highest scoring non-homologous targets are expected to pass the filter.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" --F1 $value\" : \"\"",
                            "python": "(\"\", \" --F1 \" + str(value) ) [ value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "F1",
                        "paramfile": null,
                        "precond": {
                            "perl": "$max==0",
                            "python": "max==0"
                        },
                        "prompt": "Stage 1 (MSV) threshold (--F1)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Second filter threshold; set the P-value threshold for the Viterbi filter step. The\ndefault is 0.001.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" --F2 $value\" : \"\"",
                            "python": "(\"\", \" --F2 \" + str(value) ) [ value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "F2",
                        "paramfile": null,
                        "precond": {
                            "perl": "$max==0",
                            "python": "max==0"
                        },
                        "prompt": "Stage 2 (Vit) threshold (--F2)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Third filter threshold; set the P-value threshold for the Forward filter step. The\ndefault is 1e-5.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" --F3 $value\" : \"\"",
                            "python": "(\"\", \" --F3 \" + str(value) ) [ value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "F3",
                        "paramfile": null,
                        "precond": {
                            "perl": "$max==0",
                            "python": "max==0"
                        },
                        "prompt": "Stage 3 (Fwd) threshold (--F3)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Turn off the bias filter increases sensitivity somewhat, but can come at a\nhigh cost in speed, especially if the query has biased residue composition (such as a repetitive sequence region, \nor if it is a membrane protein with large regions of hydrophobicity).Without the bias filter, too many sequences may pass the filter\nwith biased queries, leading to slower than expected performance as the computationally\nintensive Forward/Backward algorithms shoulder an abnormally heavy load.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" --nobias\" : \"\"",
                            "python": "(\"\", \" --nobias\" ) [ value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "nobias",
                        "paramfile": null,
                        "precond": {
                            "perl": "$max==0",
                            "python": "max==0"
                        },
                        "prompt": "Turn off composition bias filter (--nobias)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "HMMER3 searches are accelerated in a three-step filter pipeline:- the MSV filter (the fastest and most approximate),- the Viterbi filter,- and the Forward filter (full Forward scoring algorithm, slowest but most accurate),+ There is also a \"bias filter\" step between MSV and Viterbi.Targets that pass all the steps in the acceleration pipeline are then subjected to \"postprocessing\" (domain identification\nand scoring using the Forward/Backward algorithm).Essentially the only free parameters that control\nHMMER's heuristic filters are the P-value thresholds controlling the expected fraction of non-homologous\nsequences that pass the filters.- Setting the default thresholds higher will pass a higher proportion of non-homologous\nsequence, increasing sensitivity at the expense of speed,- Setting lower P-value thresholds will pass a smaller proportion, decreasing \nsensitivity and increasing speed,- Setting a filter's P-value threshold to 1.0 means it will passing all sequences, and effectively disables the filter.Changing filter thresholds only removes or includes targets from consideration; it does not alter bit\nscores, E-values, or alignments, all of which are determined solely in \"postprocessing\".",
                "name": "heuristic",
                "precond": null,
                "prompt": "Controlling the acceleration pipeline"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the sequence length in simulation that estimates the location parameter mu\nfor MSV filter E-values. Default is 200.",
                        "ctrl": {
                            "perl": "0 <$value",
                            "python": "0 < value"
                        },
                        "format": {
                            "perl": "($value != $vdef) ? \" --EmL $value\" : \"\"",
                            "python": "(\"\", \" --EmL \" + str(value) ) [ value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "eml",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Length of sequences (--EmL)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the number of sequences in simulation that estimates the location parameter\nmu for MSV filter E-values. Default is 200.",
                        "ctrl": {
                            "perl": "0 <$value",
                            "python": "0 < value"
                        },
                        "format": {
                            "perl": "($value != $vdef) ? \" --EmN $value\" : \"\"",
                            "python": "(\"\", \" --EmN \" + str(value) ) [ value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "emn",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of sequences (--EmN)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "Estimating the location parameters for the expected score distributions for MSV filter scores, Viterbi filter\nscores, and Forward scores requires three short random sequence simulations.",
                "name": "MSV",
                "precond": null,
                "prompt": "Controlling E-value calibration for Stage 1 - MSV Gumbel mu fit"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the sequence length in simulation that estimates the location parameter mu\nfor Viterbi filter E-values. Default is 200.",
                        "ctrl": {
                            "perl": "0 <$value",
                            "python": "0 < value"
                        },
                        "format": {
                            "perl": "($value != $vdef) ? \" --EvL $value\" : \"\"",
                            "python": "(\"\", \" --EvL \" + str(value) ) [ value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "evl",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Length of sequences (--EvL)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the number of sequences in simulation that estimates the location parameter\nmu for Viterbi filter E-values. Default is 200.",
                        "ctrl": {
                            "perl": "0 <$value",
                            "python": "0 < value"
                        },
                        "format": {
                            "perl": "($value != $vdef) ? \" --EvN $value\" : \"\"",
                            "python": "(\"\", \" --EvN \" + str(value) ) [ value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "evn",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of sequences (--EvN)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "Estimating the location parameters for the expected score distributions for MSV filter scores, Viterbi filter\nscores, and Forward scores requires three short random sequence simulations.",
                "name": "Ecalibration2",
                "precond": null,
                "prompt": "Controlling E-value calibration for Stage 2 - Viterbi Gumbel mu fit"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the sequence length in simulation that estimates the location parameter tau\nfor Forward E-values. Default is 100.",
                        "ctrl": {
                            "perl": "0 <$value",
                            "python": "0 < value"
                        },
                        "format": {
                            "perl": "($value != $vdef) ? \" --EfL $value\" : \"\"",
                            "python": "(\"\", \" --EfL \" + str(value) ) [ value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "efl",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Length of sequences (--EfL)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the number of sequences in simulation that estimates the location parameter\ntau for Forward E-values. Default is 200.",
                        "ctrl": {
                            "perl": "0 <$value",
                            "python": "0 < value"
                        },
                        "format": {
                            "perl": "($value != $vdef) ? \" --EfN $value\" : \"\"",
                            "python": "(\"\", \" --EfN \" + str(value) ) [ value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "efn",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of sequences (--EfN)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the tail mass fraction to fit in the simulation that estimates the location parameter\ntau for Forward evalues. Default is 0.04.",
                        "ctrl": {
                            "perl": "0 <$value",
                            "python": "0 < value"
                        },
                        "format": {
                            "perl": "($value != $vdef) ? \" --Eft $value\" : \"\"",
                            "python": "(\"\", \" --Eft \" + str(value) ) [ value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "eft",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Tail mass (--Eft)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "Estimating the location parameters for the expected score distributions for MSV filter scores, Viterbi filter\nscores, and Forward scores requires three short random sequence simulations.",
                "name": "Ecalibration3",
                "precond": null,
                "prompt": "Controlling E-value calibration for Stage 3 - Forward exponential tail tau fit"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Turn off the \"null2\" score corrections for biased composition.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" --nonull2\" : \"\"",
                            "python": "(\"\", \" --nonull2\" ) [ value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "nonull",
                        "paramfile": null,
                        "precond": {
                            "perl": "$max==0",
                            "python": "max==0"
                        },
                        "prompt": "Turn off biased composition score corrections (--nonull2)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Assert that the total number of targets in your searches is this number, for the purposes of\nper-sequence E-value calculations, rather than the actual number of targets seen.",
                        "ctrl": {
                            "perl": "0 <$value",
                            "python": "0 < value"
                        },
                        "format": {
                            "perl": "($value) ? \" -Z $value\" : \"\"",
                            "python": "(\"\", \" -Z \" + str(value)) [ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "z",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of comparisons done, for E-value calculation (-Z)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Assert that the total number of targets in your searches is this number, for the purposes\nof per-domain conditional E-value calculations, rather than the number of targets that passed the reporting thresholds.",
                        "ctrl": {
                            "perl": "0 <$value",
                            "python": "0 < value"
                        },
                        "format": {
                            "perl": "($value) ? \" --domZ $value\" : \"\"",
                            "python": "(\"\", \" --domZ \" + str(value)) [ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "d_z",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of significant sequences, for domain E-value calculation (--domZ)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Seed the random number generator with this, an integer >= 0. The default seed is 42.If >0, any stochastic simulations will be reproducible; the same command will give the\nsame results.If = 0, the random number generator is seeded arbitrarily, and\nstochastic simulations will vary from run to run of the same command.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value != $vdef) ? \" --seed $value\" : \"\"",
                            "python": "(\"\", \" --seed \" + str(value) ) [ value  != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "seed",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Set Random Number Generator seed to (--seed)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "other",
                "precond": null,
                "prompt": "Expert options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "phmmer",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "*.output",
                    "python": "\"*.output\""
                },
                "hidden": false,
                "main": false,
                "name": "out_file",
                "output_type": "file",
                "precond": {
                    "perl": "$outfile==1",
                    "python": "outfile==1"
                },
                "prompt": "Output file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "*.alig",
                    "python": "\"*.alig\""
                },
                "hidden": false,
                "main": false,
                "name": "ali_file",
                "output_type": "file",
                "precond": {
                    "perl": "$aligfile==1",
                    "python": "aligfile==1"
                },
                "prompt": "Alignment file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [
                        "Protein"
                    ],
                    "card": null,
                    "datatype": {
                        "class": "Alignment",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "STOCKHOLM"
                    ]
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "*.tblout",
                    "python": "\"*.tblout\""
                },
                "hidden": false,
                "main": false,
                "name": "seq_file",
                "output_type": "file",
                "precond": {
                    "perl": "$seqtab==1",
                    "python": "seqtab==1"
                },
                "prompt": "Parseable table of per-sequence hits",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "*.domtblout",
                    "python": "\"*.domtblout\""
                },
                "hidden": false,
                "main": false,
                "name": "dom_file",
                "output_type": "file",
                "precond": {
                    "perl": "$domaintab==1",
                    "python": "domaintab==1"
                },
                "prompt": "Parseable table of per-domain hits",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [],
    "source_links": [],
    "title": "PHMMER",
    "type": "program",
    "version": null
}