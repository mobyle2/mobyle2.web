{
    "authors": "S. F. Altschul",
    "classifications": [
        {
            "classification": "alignment:multiple",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": "msa"
    },
    "comment": null,
    "description": "Multiple sequence alignment",
    "documentation_links": [],
    "env": [],
    "homepage_links": [
        "http://www.ncbi.nlm.nih.gov/CBBresearch/Schaffer/msa.html"
    ],
    "inputs": {
        "children": [
            {
                "argpos": "2",
                "command": false,
                "comment": "This  is  a  file  containing  the  sequences to be aligned.",
                "ctrl": null,
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \"+str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "seqs",
                "paramfile": null,
                "precond": null,
                "prompt": "Sequences File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "FASTA"
                    ]
                }
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Turns  off  the optimal multiple alignment segment of the program.This allows the user to see the heuristic alignment and other data produced by the program before the it attempts to produce an optimal multiple alignment.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -m\":\"\"",
                            "python": "(\"\" , \" -m\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "optimal",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Turns off the optimal multiple alignment (-m)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Allows the user to force the alignment of certain  residues. The file referred to must have one or more lines of the following format:seqs.| \"S\" precedes block start | \"L\" precedes block lengthThe example would force positions 22 to 31 of sequence 2 to  be  aligned  with positions  21  to  30  of  sequence  3  and  positions 25 to 34 of sequence 5; it would else force position 35 of sequence  2  to  be aligned with position 36 of sequence 3 and position 41 of sequence 5.  Needless to say, all positions forced into alignment  must  be mutually consistent.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -f $value\" : \"\"",
                            "python": "( \"\"  , \" -f \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "forcedres",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "User file to force the alignment of certain  residues (-f)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "ForceAlignmentPattern",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "control",
                "precond": null,
                "prompt": "Control parameters"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "As a default, no charge is made for the existence of a terminal gap.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -g\":\"\"",
                            "python": "(\"\" , \" -g\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "endgap",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Charges terminal gaps the same as internal gaps (-g)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The cost of a multiple alignment is taken to be the unweighted sum of all the pairwise alignments.  In the absence of this flag, the program estimates an evolutionary tree and uses it to  assign weights  to  each  pairwise  alignment using either rationale-1 or rational-2 as described in Altschul et al., J.  Molec.  Biol.  208 (1989).",
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -b\":\"\"",
                            "python": "(\"\" , \" -b\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "unweight",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Cost of a multiple alignment (-b)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Specifies  the  maximum  score  of  an optimal multiple alignment. Default is calculated from the  scores  of  the  optimal  pairwise alignments, the weights, and the epsilons.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -d$value\" : \"\"",
                            "python": "( \"\" , \" -d\" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "maxscore",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximum score of an optimal multiple alignment (-d)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "As  a default, the program calculates an  heuristic  multiple  alignment and  uses  it  to  set epsilons for each pairwise alignment.  Frequently the \"optimal multiple alignment\" will  be  found  to  have observed  epsilons  exceeding  those supplied or calculated.  When this is the case, it is advisable to rerun the program using suitably augmented epsilons.  The file named here should have integers separated by spaces or newlines or both, with one integer for each pair  of  sequences  in  the order 1-2, 1-3, ... , 1-N, 2-3, ... , (N-1)-N.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -e $value\" : \"\"",
                            "python": "( \"\"  , \" -e \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "epsilons",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "User  specified  epsilons  for  each  pairwise  alignment (-e)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "EpsilonFile",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Allows the user to specify the cost for a gap, as well as the cost for  aligning  any  pair  of  letters or a letter with a null. The default is PAM-250 costs for protein sequences, using the one-letter  code.  The format of this file is an integer, followed by all possible pairs of aligned symbols followed by  their  cost.   For example, the file might begin as follows:This  would  specify  a  cost of 0 for aligning a null symbol with another null symbol, a cost of 1 for aligning an  A  with  a  null symbol,  etc.,  and an additional cost of 3 for the existence of a gap.  The program assumes the costs are symmetric, so  that  there is  no  need to have a line for C A as well as for A C.  All costs must be non-negative integers.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -c $value\" : \"\"",
                            "python": "( \"\"  , \" -c \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "costs",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "User costs file (-c)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Costs",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "Cost",
                "precond": null,
                "prompt": "Cost parameters"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -o\":\"\"",
                            "python": "(\"\" , \" -o\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "quiet",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Suppress verbose output (-o)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output",
                "precond": null,
                "prompt": "Output parameters"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "msa",
    "outputs": {
        "children": [],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [],
    "source_links": [
        "ftp://fastlink.nih.gov/pub/msa/msa.tar.Z"
    ],
    "title": "MSA",
    "type": "program",
    "version": "2.1"
}