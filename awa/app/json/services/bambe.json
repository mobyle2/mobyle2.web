{
    "authors": "Simon, Larget",
    "classifications": [
        {
            "classification": "phylogeny:bayesian",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": null,
    "description": "Bayesian Analysis in Molecular Biology and Evolution",
    "documentation_links": [],
    "env": [],
    "homepage_links": [
        "http://www.stat.wisc.edu/~larget/"
    ],
    "inputs": {
        "children": [
            {
                "argpos": "0",
                "command": true,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"bambe <bambe.params\"",
                    "python": "\"bambe <bambe.params\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "bambe",
                "paramfile": null,
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "6",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"data-file=$value\\\\n\"",
                    "python": "\"data-file=\"+str(value)+\"\\n\""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "data_file",
                "paramfile": "bambe.params",
                "precond": null,
                "prompt": "Alignment file (data-file)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [
                        "DNA"
                    ],
                    "card": null,
                    "datatype": {
                        "class": "Alignment",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "CLUSTAL"
                    ]
                }
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"seed=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"seed=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "seed",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Seed for random number generator (seed)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ?\"cycles=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"cycles=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "cycles",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Number of cycles to run the main algorithm (cycles)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Also used for updating the window size during burn-in.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"window-interval=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"window-interval=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "window_interval",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Number of cycles between printing trees to output (window-interval)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"main-algorithm=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"main-algorithm=\"+str(value)+\"\\n\")[value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "main_algorithm",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Algorithm to run during production cycles (main-algorithm)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Parameter values are not updated during burn. User should discard these cycles and the initial cycles of the main algorithm before inference.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"burn=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"burn=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "burn",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Number of cycles to run the burn algorithm (burn)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"burn-algorithm=$value\\\\n\" : \"\"",
                            "python": "(\"\",\"burn-algorithm=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "burn_algorithm",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Algorithm to run during burn (burn-algorithm)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"use-beta=true\\\\n\" : \"\"",
                            "python": "(\"\", \"use-beta=true\\n\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "use_beta",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$main_algorithm eq \"local\" or $burn_algorithm eq \"local\"",
                            "python": "main_algorithm == \"local\" or burn_algorithm == \"local\""
                        },
                        "prompt": "Use scaled beta distribution modification of the local algorithm (use-beta)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "run_options",
                "precond": null,
                "prompt": "Run characteristics"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" :\"molecular-clock=false\\\\n\"",
                            "python": "(\"molecular-clock=false\\n\", \"\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "molecular_clock",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Use a molecular clock (molecular-clock)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"likelihood-model=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"likelihood-model=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "likelihood_model",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Likelihood model (likelihood-model)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Each category has its own set of parameters. Each category is denoted by a positive integer between 1 and 10. A comma-separated list gives the categories of the sites in order, e.g., 1,2,3,1,3 means that the first site is in category 1, the second in 2, the third in 3, the fourth in 1, and the fifth site is in category 3.A repeat count is indicated by a caret (^). For example, 1^20,2^5,3^2 means that the first twenty sites are in category 1, the next five sites are in 2, and the next two sites are in category 3.Parentheses may be used to group sites together with a common repeat count, i.e., (1,2)^5 is the same as 1,2,1,2,1,2,1,2,1,2. Repeat counts may be nested, e.g., (1^3,2)^2 is the same as 1,1,1,2,1,1,1,2.Repetition to the end of the list of sites is indicated by an asterisk (*). For example, 1^5,2* means that the first five sites are in category 1, and all the remaining sites are in category 2. Parentheses may also be used in conjunction with the asterisk, e.g., (1,2)* is the same as 1,2,1,2,1,2,.... The category list may contain at most one asterisk and it must be associated with the last category or group in the list. In other words, an asterisk may appear only at the end of the list.Examples1* - all sites are the same category. (default)(1,2,3)* - all sites are partitioned by codon position.1^99,2^50,3^9 - the sites are divided over three genes. Each gene has its own set of parameters used by all sites in that gene. The first gene is composed of the first ninety-nine sites, the next by the next fifty sites, and the last by nine sites.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"category-list=$value\\\\n\" :\"\"",
                            "python": "(\"\", \"category-list=\"+str(value)+\"\\n\" )[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "category_list",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "A valid category list (category-list)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "If true, the same kappa parameter is used for all site categories. If false, there are different values for different site categories. It has no effect if there is only one rate category.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"single-kappa=true\\\\n\" : \"\"",
                            "python": "(\"\", \"single-kappa=true\\n\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "single_kappa",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Single kappa (single-kappa)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "If single-kappa is true, a warning is given if more than one value is specified. The first value will be used. If single-kappa is false, a value must be specified for each category in use.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"initial-kappa=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"initial-kappa=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "initial_kappa",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$likelihood_model eq \"HKY85\" or $likelihood_model eq \"F84\"",
                            "python": "likelihood_model==\"HKY85\" or likelihood_model==\"F84\""
                        },
                        "prompt": "Comma separated list of positive kappa values for each site category (initial-kappa)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The weighted average of these values should be 1, with weights given by the proportion of sites in each site category. (Renormalization is automatic and a warning given if the condition fails.) If there are an equal number of sites in each category, for example, the numbers should average to 1.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"initial-theta=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"initial-theta=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "initial_theta",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Comma separated list of positive theta values for each site category (initial-theta)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "If true, the initial stationary probabilities for each base in each category are estimated by the relative frequencies with which they appear in the data.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \"estimate-pi=false\\\\n\"",
                            "python": "(\"estimate-pi=false\\n\",\"\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "estimate_pi",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Use empirical relative frequencies (estimate-pi)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"initial-pia=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"initial-pia=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "initial_pia",
                        "paramfile": null,
                        "precond": {
                            "perl": "not $estimate_pi",
                            "python": "not estimate_pi"
                        },
                        "prompt": "Comma separated list of initial pi value of base A (initial-pia)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"initial-pig=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"initial-pig=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "initial_pig",
                        "paramfile": null,
                        "precond": {
                            "perl": "not $estimate_pi",
                            "python": "not estimate_pi"
                        },
                        "prompt": "Comma separated list of initial pi value of base G (initial-pig)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"initial-pic=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"initial-pic=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "initial_pic",
                        "paramfile": null,
                        "precond": {
                            "perl": "not $estimate_pi",
                            "python": "not estimate_pi"
                        },
                        "prompt": "Comma separated list of initial pi value of base C (initial-pic)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"initial-pit=$value\\\\n\" : \"\"",
                            "python": "(\"\",\"initial-pit=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "initial_pit",
                        "paramfile": null,
                        "precond": {
                            "perl": "not $estimate_pi",
                            "python": "not estimate_pi"
                        },
                        "prompt": "Comma separated list of initial pi value of base T (initial-pit)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This is used only with TN93. There must be a value specified for each site-category used if TN93 is the chosen model.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"initial-ttp=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"initial-ttp=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "initial_ttp",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$likelihood_model eq \"TN93\"",
                            "python": "likelihood_model  == \"TN93\""
                        },
                        "prompt": "Comma separated list of positive transition/transversion parameter values (TN93 model) (initial-ttp)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This is used only with TN93. There must be a value specified for each site-category used if TN93 is the chosen model.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"initial-gamma=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"initial-gamma=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "initial_gamma",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$likelihood_model eq \"TN93\"",
                            "python": "likelihood_model  == \"TN93\""
                        },
                        "prompt": "Comma separated list of positive gamma values (TN93 model) (initial-gamma)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This is used only with GREV model.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"initial-rac=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"initial-rac=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "initial_Rac",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$likelihood_model eq \"GREV\"",
                            "python": "likelihood_model  == \"GREV\""
                        },
                        "prompt": "Comma separated list of positive r values for AC bases(GREV model) (initial-rac)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This is used only with GREV model.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"initial-rag=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"initial-rag=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "initial_Rag",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$likelihood_model eq \"GREV\"",
                            "python": "likelihood_model  == \"GREV\""
                        },
                        "prompt": "Comma separated list of positive r values for AG  (GREV model) (initial-rag)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This is used only with GREV model.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"initial-rat=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"initial-rat=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "initial_Rat",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$likelihood_model eq \"GREV\"",
                            "python": "likelihood_model  == \"GREV\""
                        },
                        "prompt": "Comma separated list of positive r values for AT (GREV model) (initial-rat)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This is used only with GREV model.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"initial-rcg=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"initial-rcg=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "initial_Rcg",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$likelihood_model eq \"GREV\"",
                            "python": "likelihood_model  == \"GREV\""
                        },
                        "prompt": "Comma separated list of positive r values for CG (GREV model) (initial-rcg)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This is used only with GREV model.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"initial-rct=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"initial-rct=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "initial_Rct",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$likelihood_model eq \"GREV\"",
                            "python": "likelihood_model  == \"GREV\""
                        },
                        "prompt": "Comma separated list of positive r values for CT (GREV model) (initial-rct)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This is used only with GREV model.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"initial-rgt=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"initial-rgt=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "initial_Rgt",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$likelihood_model eq \"GREV\"",
                            "python": "likelihood_model  == \"GREV\""
                        },
                        "prompt": "Comma separated list of positive r values for GT  (GREV model) (initial-rct)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "model_options",
                "precond": null,
                "prompt": "Model specification"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "During the main algorithm, any 'on' parameters are updated at each cycle divisible by this value. Use zero for no parameter updating.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"parameter-update-interval=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"parameter-update-interval=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "parameter_update_interval",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Parameter update interval (parameter-update-interval)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \"update-kappa=false\\\\n\"",
                            "python": "(\"update-kappa=false\\n\", \"\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "update_kappa",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$likelihood_model eq \"HKY85\" or $likelihood_model eq \"F84\"",
                            "python": "likelihood_model==\"HKY85\" or likelihood_model==\"F84\""
                        },
                        "prompt": "Update kappa value (update-kappa)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \"update-theta=false\\\\n\"",
                            "python": "(\"update-theta=false\\n\", \"\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "update_theta",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Update theta value (update-theta)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \"update-pi=false\\\\n\"",
                            "python": "(\"update-pi=false\\n\", \"\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "update_pi",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Update pi value (update-pi)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \"update-ttp=false\\\\n\"",
                            "python": "(\"update-ttp=false\\n\", \"\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "update_ttp",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$likelihood_model eq \"TN93\"",
                            "python": "likelihood_model == \"TN93\""
                        },
                        "prompt": "Update ttp value (TN93 model) (update-ttp)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \"update-gamma=false\\\\n\"",
                            "python": "(\"update-gamma=false\\n\", \"\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "update_gamma",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$likelihood_model eq \"TN93\"",
                            "python": "likelihood_model == \"TN93\""
                        },
                        "prompt": "Update gamma value for (TN93 model) (update-gamma)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \"update-grev=false\\\\n\"",
                            "python": "(\"update-grev=false\\n\", \"\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "update_grev",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$likelihood_model eq \"GREV\"",
                            "python": "likelihood_model == \"GREV\""
                        },
                        "prompt": "Update grev (GREV model) (update-grev)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"update-invariant-prob=true\\\\n\" : \"\"",
                            "python": "(\"\", \"update-invariant-prob=true\\n\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "update_invariant_prob",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Update invariant probability (update-invariant-prob)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This tuning parameter is only used with the local algorithm. It modulates the size of a maximal stretch. The smaller the value, the greater the tree acceptance rate will be.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"local-tune=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"local-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "local_tune",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$burn_algorithm eq \"local\" or $main_algorithm eq \"local\"",
                            "python": "burn_algorithm == \"local\" or main_algorithm == \"local\""
                        },
                        "prompt": "Stretch parameter for local (local-tune)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Tuning parameter used during update of theta value(s). The larger its value, the more likely proposals are to be accepted.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"theta-tune=$value\\\\n\" : \"\"",
                            "python": "(\"\",\"theta-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "theta_tune",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$parameter_update_interval != 0 and $update_theta",
                            "python": "parameter_update_interval != 0 and update_theta"
                        },
                        "prompt": "Dirichlet parameter for theta update (theta-tune)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Tuning parameter used during update of pi values. The larger its value, the more likely proposals are to be accepted.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"pi-tune=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"pi-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "pi_tune",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$parameter_update_interval != 0 and $update_pi",
                            "python": "parameter_update_interval != 0 and update_pi"
                        },
                        "prompt": "Dirichlet parameter for pi update (pi-tune)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This tuning parameter is only used when 'parameter-update-interval' is positive and 'update-kappa' is true. The smaller its value, the greater the parameter acceptance rate will be.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"kappa-tune=$value\\\\n\" : \"\"",
                            "python": "(\"\",\"kappa-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "kappa_tune",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$parameter_update_interval != 0 and $update_kappa and ($likelihood_model eq \"HKY85\" or $likelihood_model eq \"F84\")",
                            "python": "parameter_update_interval != 0 and update_kappa and (likelihood_model == \"HKY85\" or likelihood_model == \"F84\")"
                        },
                        "prompt": "Halft the size of the window for uniform updates of kappa (kappa-tune)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This tuning parameter is only used when 'parameter-update-interval' is positive and 'update-ttp' is true. The smaller its value, the greater the parameter acceptance rate will be.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"ttp-tune=$value\\\\n\" : \"\"",
                            "python": "(\"\",\"ttp-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "ttp_tune",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$parameter_update_interval != 0 and $update_ttp and $likelihood_model eq \"TN93\"",
                            "python": "parameter_update_interval != 0 and update_ttp and likelihood_model == \"TN93\""
                        },
                        "prompt": "Halft window width for ttp update (TN93 model) (ttp-tune)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This tuning parameter is only used when 'parameter-update-interval' is positive and 'update-gamma' is true. The smaller its value, the greater the parameter acceptance rate will be.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"gamma-tune=$value\\\\n\" : \"\"",
                            "python": "(\"\",\"gamma-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gamma_tune",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$parameter_update_interval != 0 and $update_gamma and $likelihood_model eq \"TN93\"",
                            "python": "parameter_update_interval != 0 and update_gamma and likelihood_model == \"TN93\""
                        },
                        "prompt": "Half window width for gamma update (TN93 model) (gamma-tune)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"grev-tune=$value\\\\n\" : \"\"",
                            "python": "(\"\",\"grev-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "grev_tune",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$parameter_update_interval != 0 and $update_grev and $likelihood_model eq \"GREV\"",
                            "python": "parameter_update_interval != 0 and update_grev and likelihood_model==\"GREV\""
                        },
                        "prompt": "Halft window width for grev update (grev-tune)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"beta-tune=$value\\\\n\" : \"\"",
                            "python": "(\"\",\"beta-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "beta_tune",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$use_beta",
                            "python": "use_beta"
                        },
                        "prompt": "Beta parameter for local update (beta-tune)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"invariant-prob-tune=$value\\\\n\" : \"\"",
                            "python": "(\"\",\"invariant-prob-tune=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "invariant_prob_tune",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$parameter_update_interval != 0 and $update_invariant_prob",
                            "python": "parameter_update_interval != 0 and update_invariant_prob"
                        },
                        "prompt": "Halft window width for invariant probability update (invariant-prob-tune)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "param_update",
                "precond": null,
                "prompt": "Parameter updating"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "During burn and main algorithms, the tree topology, log likelihoods, and parameters are written to files at each cycle divisible by this value.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"sample-interval=$value\\\\n\" : \"\"",
                            "python": "(\"\",\"sample-interval=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "sample_interval",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Sample interval (sample-interval)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Indicates the format of the tree to read (if not random) and the format of the tree to print after the run.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"newick-format=false\\\\n\" : \"\"",
                            "python": "(\"newick-format=false\\n\", \"\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "newick_format",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Newick format of tree file (newick-format)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output_options",
                "precond": null,
                "prompt": "Output options"
            },
            {
                "argpos": "6",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"file-root=bambe_results\\\\n\"",
                    "python": "\"file-root=bambe_results\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "file_root",
                "paramfile": "bambe.params",
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This is ignored if a molecular clock is assumed. In the absence of a clock, trees and tree topologies are printed with the outgroup emerging directly from the root.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"outgroup=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"outgroup=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "outgroup",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$molecular_clock",
                            "python": "molecular_clock"
                        },
                        "prompt": "Number of the outgroup (outgroup)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "If no tree file is given, the program generates a random tree from a flat distribution where each labeled history is equally likely.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"tree-file=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"tree-file=\"+str(value)+\"\\n\")[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "tree_file",
                        "paramfile": "bambe.params",
                        "precond": {
                            "perl": "$initial_tree_type eq \"bambe\" or $initial_tree_type eq \"newick\"",
                            "python": "initial_tree_type==\"bambe\" or initial_tree_type==\"newick\""
                        },
                        "prompt": "Tree file (tree-file)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "BambeTree",
                                "superclass": "Tree"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": ". random select a tree from the prior. upgma sets the initial clock tree to the UPGMA tree using maximum likelihood distances with the specified model and initial parameter values.. neighbor-joining sets the initial nonclock tree to the neigbor joining tree using maximum likelihood distances with the specified model and initial parameter values.. newick reads in an initial tree in Newick format from a file.. bambe reads in an initial tree in BAMBE format from a file.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"initial-tree-type=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"initial-tree-type=\"+str(value)+\"\\n\")[value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "initial_tree_type",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Initial tree type (initial-tree-type)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \"print-all-trees=false\\\\n\"",
                            "python": "(\"print-all-trees=false\\n\", \"\")[value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "print_all_trees",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Print all trees?(print-all-trees)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This parameter is only used to generate an initial random tree.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"max-initial-tree-height=$value\\\\n\" : \"\"",
                            "python": "(\"\", \"max-initial-tree-height=\"+str(value)+\"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "max_initial_tree_height",
                        "paramfile": "bambe.params",
                        "precond": null,
                        "prompt": "Initial tree height used to generate an initial random tree (max-initial-tree-height)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "input_options",
                "precond": null,
                "prompt": "Input options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "bambe",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"bambe_results.lpd\" and  \"bambe_results.par\" and  \"bambe_results.out\"",
                    "python": "\"bambe_results.out\""
                },
                "hidden": false,
                "main": false,
                "name": "results_files",
                "output_type": "file",
                "precond": null,
                "prompt": "Results files",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"bambe_results.tre\"",
                    "python": "\"bambe_results.tre\""
                },
                "hidden": false,
                "main": false,
                "name": "result_tree",
                "output_type": "file",
                "precond": null,
                "prompt": "Tree file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Tree",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        {
                            "#children": [
                                "NEWICK"
                            ],
                            "#tag": "test",
                            "@eq": "1",
                            "@param": "newick_format"
                        }
                    ]
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"bambe_results.top\"",
                    "python": "\"bambe_results.top\""
                },
                "hidden": false,
                "main": false,
                "name": "top_file",
                "output_type": "file",
                "precond": null,
                "prompt": "Topology file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "Larget, B. and D. Simon (1999). Markov chain Monte\n\tCarlo algorithms for the Bayesian analysis of phylogenetic\n\ttrees. Molecular Biology and Evolution 16:750-759.",
            "url": null
        },
        {
            "doi": null,
            "label": "Simon, D. and B. Larget. 1998. Bayesian analysis in\n\tmolecular biology and evolution (BAMBE), version 1.01\n\tbeta. Department of Mathematics and Computer Science, Duquesne\n\tUniversity.",
            "url": null
        }
    ],
    "source_links": [
        "http://www.stat.wisc.edu/~larget/"
    ],
    "title": "BAMBE",
    "type": "program",
    "version": "4.01"
}