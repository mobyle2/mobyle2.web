{
    "authors": null,
    "classifications": [
        {
            "classification": "phylogeny:parsimony",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": "MIX is a general parsimony program which carries out the Wagner and Camin-Sokal parsimony methods in mixture, where each character can have its method specified separately. The program defaults to carrying out Wagner parsimony.",
    "description": "Mixed method parsimony",
    "documentation_links": [
        "http://bioweb2.pasteur.fr/docs/phylip/doc/mix.html"
    ],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": "0",
                "command": true,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" && mix <mix.params\"",
                    "python": "\" && mix <mix.params\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "mix",
                "paramfile": null,
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "-10",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"ln -s $infile infile; \"",
                    "python": "\"ln -s \"+ str( infile ) + \" infile \""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "infile",
                "paramfile": null,
                "precond": {
                    "perl": "$infile ne \"infile\"",
                    "python": "infile != \"infile\""
                },
                "prompt": "Input File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "PhylipDiscreteCharMatrix",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Give a ancestors file whenever you enable this parameter",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"A\\\\n\" : \"\"",
                            "python": "( \"\" , \"A\\n\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "use_ancestral_state",
                        "paramfile": "mix.params",
                        "precond": null,
                        "prompt": "Use ancestral states (A)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "-1",
                        "command": false,
                        "comment": "The A (Ancestral states) option. This indicates that we are specifying the ancestral states for each character.In the menu the ancestors (A) option must be selected. An ancestral states input file is read, whose default name is ancestors.It contains a line or lines giving the ancestral states for each character. These may be 0, 1 or ?the latter indicating that the ancestral state is unknown.An example is: 001??11The ancestor information can be continued to a new line and can have blanks between any of the characters in the same way that species character data can.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" && ln -s $ancestors_file ancestors\" : \"\"",
                            "python": "( \"\" , \" && ln -s \" + str( ancestors_file ) + \" ancestors\")[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "ancestors_file",
                        "paramfile": null,
                        "precond": {
                            "perl": "$use_ancestral_state",
                            "python": "use_ancestral_state"
                        },
                        "prompt": "Ancestors file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "AncestorsFile",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "ancestral_opt",
                "precond": null,
                "prompt": "Ancestral options"
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Only if Use Mixed method is disabled.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value eq \"camin\") ? \"P\\\\n\" : \"\"",
                            "python": "( \"\" , \"P\\n\" )[ value == \"camin\" ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "parsimony_method",
                        "paramfile": "mix.params",
                        "precond": {
                            "perl": "not $use_mixed",
                            "python": "not use_mixed"
                        },
                        "prompt": "Parsimony method (P)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Give a mixure file whenever you choose Mixed method",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"X\\\\n\" : \"\"",
                            "python": "( \"\" , \"X\\n\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "use_mixed",
                        "paramfile": "mix.params",
                        "precond": null,
                        "prompt": "Use Mixed method (X)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "-1",
                        "command": false,
                        "comment": "The X (miXture) option. Move, and Penny the user can specify for each character which parsimony method is in effect.This is done by selecting menu option X (not M) and having an input mixture file . It contains a line or lines with and one letter for each character.These letters are C or S if the character is to be reconstructed according to Camin-Sokal parsimony, W or ? if the character is to be reconstructed according to Wagner parsimony.So if there are 20 characters the line giving the mixture might look like this:WWWCC WWCWCNote that blanks in the sequence of characters (after the first ones that are as long as the species names) will be ignored, and the information can go on to a new line at any point. So this could equally well have been specified byWWCCCWWCWC",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" && ln -s $mixture_file mixture\" : \"\"",
                            "python": "( \"\" , \" && ln -s \" + str( mixture_file ) + \" mixture\")[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "mixture_file",
                        "paramfile": null,
                        "precond": {
                            "perl": "$use_mixed",
                            "python": "use_mixed"
                        },
                        "prompt": "Mixture file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "MixturePattern",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "mix_opt",
                "precond": null,
                "prompt": "Mix options"
            },
            {
                "children": [
                    {
                        "argpos": "9",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "jumble_or_dataset",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "I want to",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "9",
                        "command": false,
                        "comment": "If you choose Analyze multiple data sets, you must indicate the number of sets you have.",
                        "ctrl": {
                            "perl": "$value > 0 and $value <= 1000",
                            "python": "value > 0 and value <= 1000"
                        },
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "data_nb",
                        "paramfile": null,
                        "precond": {
                            "perl": "$jumble_or_dataset eq 'D'",
                            "python": "jumble_or_dataset == 'D'"
                        },
                        "prompt": "number of data set",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "9",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value >= 0 and ($value % 2) != 0",
                            "python": "value >= 0 and (value % 2) != 0"
                        },
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "seed",
                        "paramfile": null,
                        "precond": {
                            "perl": "$jumble_or_dataset",
                            "python": "jumble_or_dataset"
                        },
                        "prompt": "Random number seed (must be odd)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "9",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "($times * (defined $data_nb) ? $data_nb : 1) <= 100000",
                            "python": "times * (1, data_nb)[data_nb is not None] <= 100000"
                        },
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "times",
                        "paramfile": null,
                        "precond": {
                            "perl": "defined $jumble_or_dataset",
                            "python": "jumble_or_dataset is not None"
                        },
                        "prompt": "Number of times to jumble",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "9",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\"J\\\\n$seed\\\\n$times\\\\n\"",
                            "python": "'J\\n' + str( seed ) + \"\\n\" + str( times ) +\"\\n\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "jumble",
                        "paramfile": "mix.params",
                        "precond": {
                            "perl": "( defined $jumble_or_dataset ) and ( $jumble_or_dataset  eq \"J\" )",
                            "python": "( jumble_or_dataset is not None ) and ( jumble_or_dataset == \"J\" )"
                        },
                        "prompt": null,
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "9",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\"M\\nD\\n\" + str( data_nb ) + \"\\n\" + str( seed ) +\"\\n\" + str( times ) +\"\\n\"",
                            "python": "\"M\\nD\\n\" + str( data_nb ) + \"\\n\" + str( seed ) +\"\\n\" + str( times ) +\"\\n\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "multiple_dataset",
                        "paramfile": "mix.params",
                        "precond": {
                            "perl": "( defined $jumble_or_dataset ) and ( $jumble_or_dataset eq 'D')",
                            "python": "( jumble_or_dataset is not None ) and ( jumble_or_dataset == \"D\" )"
                        },
                        "prompt": null,
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" && cp infile mix.infile &&  cp mix.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" : \"\"",
                            "python": "(\"\" , \" && cp infile mix.infile &&  cp mix.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "consense",
                        "paramfile": null,
                        "precond": {
                            "perl": "$jumble_or_dataset eq 'D' and $print_treefile",
                            "python": "jumble_or_dataset == 'D' and print_treefile"
                        },
                        "prompt": "Compute a consensus tree",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "jumble_dataset",
                "precond": null,
                "prompt": "Randomize and Multiple data set options"
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "The user-defined trees supplied if you use the U option must be given as rooted trees with two-way splits (bifurcations)",
                        "ctrl": {
                            "perl": "not ( $user_tree and $jumble )",
                            "python": "not( user_tree and jumble )"
                        },
                        "format": {
                            "perl": "($value) ? \"U\\\\n\" : \"\"",
                            "python": "( \"\" , \"U\\n\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "user_tree",
                        "paramfile": "mix.params",
                        "precond": null,
                        "prompt": "Use User tree (default: search for best tree) (U)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "-1",
                        "command": false,
                        "comment": "Give a tree whenever the infile does not already contain the tree.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" && ln -s $tree_file intree\" : \"\"",
                            "python": "( \"\" , \" && ln -s \" + str( tree_file ) + \" intree\")[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "tree_file",
                        "paramfile": null,
                        "precond": {
                            "perl": "$user_tree",
                            "python": "user_tree"
                        },
                        "prompt": "User Tree file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Tree",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "-2",
                        "command": false,
                        "comment": "Give this information whenever the infile does not already contain the tree.",
                        "ctrl": null,
                        "format": {
                            "perl": "\" && echo $value >> infile\"",
                            "python": "\" && echo \"+ str( value ) + \">> infile\""
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "tree_number",
                        "paramfile": null,
                        "precond": {
                            "perl": "$tree_file",
                            "python": "tree_file"
                        },
                        "prompt": "How many tree(s) in the User Tree file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "user_tree_opt",
                "precond": null,
                "prompt": "User tree options"
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Tells the program to print a semi-graphical picture of the tree in the outfile.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \"3\\\\n\"",
                            "python": "( \"3\\n\" ,\"\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "print_tree",
                        "paramfile": "mix.params",
                        "precond": null,
                        "prompt": "Print out tree (3)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"4\\\\n\" : \"\"",
                            "python": "( \"\" , \"4\\n\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "print_step",
                        "paramfile": "mix.params",
                        "precond": null,
                        "prompt": "Print out steps in each character (4)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"5\\\\n\" : \"\"",
                            "python": "( \"\" , \"5\\n\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "print_states",
                        "paramfile": "mix.params",
                        "precond": null,
                        "prompt": "Print states at all nodes of tree (5)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Tells the program to save the tree in a treefile (a standard representation of trees where the tree is specified by a nested pairs of parentheses, enclosing names and separated by commas).",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \"6\\\\n\"",
                            "python": "( \"6\\n\" , \"\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "print_treefile",
                        "paramfile": "mix.params",
                        "precond": null,
                        "prompt": "Write out trees onto tree file (6)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"1\\\\n\" : \"\"",
                            "python": "( \"\" , \"1\\n\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "printdata",
                        "paramfile": "mix.params",
                        "precond": null,
                        "prompt": "Print out the data at start of run (1)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output",
                "precond": null,
                "prompt": "Output options"
            },
            {
                "children": [
                    {
                        "argpos": "3",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"T\\\\n$threshold\\\\n\" : \"\"",
                            "python": "( \"\" , \"T\\n\" +str( threshold ) +\"\\n\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "use_threshold",
                        "paramfile": "mix.params",
                        "precond": null,
                        "prompt": "Use Threshold parsimony (T)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$threshold >= 1",
                            "python": "threshold >= 1"
                        },
                        "format": {
                            "perl": "\"\"",
                            "python": "\"\""
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "threshold",
                        "paramfile": "mix.params",
                        "precond": {
                            "perl": "$use_threshold",
                            "python": "use_threshold"
                        },
                        "prompt": "Threshold parsimony value",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "pars_opt",
                "precond": null,
                "prompt": "Parsimony options"
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"O\\\\n$value\\\\n\" : \"\"",
                            "python": "( \"\" , \"O\\n\" + str( value ) + \"\\n\" )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "outgroup",
                        "paramfile": "mix.params",
                        "precond": null,
                        "prompt": "Outgroup root species (O)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "other_options",
                "precond": null,
                "prompt": "Other options"
            },
            {
                "argpos": "1000",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"y\\\\n\"",
                    "python": "\"y\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "confirm",
                "paramfile": "mix.params",
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "-1",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"0\\\\n\"",
                    "python": "\"0\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "terminal_type",
                "paramfile": "mix.params",
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "1000",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"Y\\\\n\"",
                    "python": "\"Y\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "consense_confirm",
                "paramfile": "consense.params",
                "precond": {
                    "perl": "$consense",
                    "python": "consense"
                },
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "-2",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"T\\\\n\"",
                    "python": "\"T\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "consense_terminal_type",
                "paramfile": "consense.params",
                "precond": {
                    "perl": "$consense",
                    "python": "consense"
                },
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "mix",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"mix.outfile\"",
                    "python": "\"mix.outfile\""
                },
                "hidden": false,
                "main": false,
                "name": "outfile",
                "output_type": "file",
                "precond": null,
                "prompt": "Mix output file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"mix.outtree\"",
                    "python": "\"mix.outtree\""
                },
                "hidden": false,
                "main": false,
                "name": "treefile",
                "output_type": "file",
                "precond": {
                    "perl": "$print_treefile",
                    "python": "print_treefile"
                },
                "prompt": "Mix tree file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Tree",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "NEWICK"
                    ]
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"consense.outfile\"",
                    "python": "\"consense.outfile\""
                },
                "hidden": false,
                "main": false,
                "name": "consense_outfile",
                "output_type": "file",
                "precond": {
                    "perl": "$consense",
                    "python": "consense"
                },
                "prompt": "Consense output file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"consense.outtree\"",
                    "python": "\"consense.outtree\""
                },
                "hidden": false,
                "main": false,
                "name": "consense_treefile",
                "output_type": "file",
                "precond": {
                    "perl": "$consense",
                    "python": "consense"
                },
                "prompt": "Consense tree file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Tree",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "NEWICK"
                    ]
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [],
    "source_links": [],
    "title": "mix",
    "type": "program",
    "version": null
}