{
    "authors": "Olsen, Matsuda, Hagstrom, Overbeek",
    "classifications": [
        {
            "classification": "phylogeny:likelihood",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": null,
    "description": "Construction of phylogenetic trees of DNA sequences using maximum likelihood",
    "documentation_links": [],
    "env": [],
    "homepage_links": [
        "http://iubio.bio.indiana.edu/soft/molbio/evolve/fastdnaml/fastDNAml.html"
    ],
    "inputs": {
        "children": [
            {
                "argpos": "1000",
                "command": true,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "($bootstrap) ? \"cat > $infile.tmp;\" : \"fastDNAml\"",
                    "python": "(\"fastDNAml\", \"cat > %s.tmp;\" % infile )[bootstrap]"
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "fastdnaml",
                "paramfile": null,
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "1100",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" && clean_checkpoints\"",
                    "python": "\" && clean_checkpoints\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "clean_tmp",
                "paramfile": null,
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "1",
                "command": false,
                "comment": "The input to fastDNAml is similar to that used by DNAML (and the other PHYLIP programs). At least 3 sequences are required.",
                "ctrl": null,
                "format": {
                    "perl": "\"cat $value | \"",
                    "python": "\"cat \" + str(value) + \" | \""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "infile",
                "paramfile": null,
                "precond": null,
                "prompt": "Sequence Alignment File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [
                        "DNA"
                    ],
                    "card": null,
                    "datatype": {
                        "class": "Alignment",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "PHYLIPI"
                    ]
                }
            },
            {
                "children": [
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(not $value and not ($fA and $fC and $fG and $fT )) ? \"\": \"frequencies $fA $fC $fG $fT | \"",
                            "python": "( \"\" ,\"frequencies %s %s %s %s | \" % (str(fA), str(fC), str(fG), str(fT)) )[ not ( value and fA is None and fC is None and fG is None and fT is None) ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "frequencies",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Use empirical base frequencies derived from the sequence data ?",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "children": [
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": null,
                                "hidden": false,
                                "main": false,
                                "mandatory": true,
                                "name": "fA",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "A frequency",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": null,
                                "hidden": false,
                                "main": false,
                                "mandatory": true,
                                "name": "fC",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "C frequency",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": null,
                                "hidden": false,
                                "main": false,
                                "mandatory": true,
                                "name": "fG",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "G frequency",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": null,
                                "hidden": false,
                                "main": false,
                                "mandatory": true,
                                "name": "fT",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "T frequency",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": null,
                        "name": "user_frequencies",
                        "precond": {
                            "perl": "not $frequencies",
                            "python": "not frequencies"
                        },
                        "prompt": "User bases frequencies (instead of empirical frequencies)"
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": "This option can be used before a global or treefile option with auxiliary data.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value!=$vdef) ? \" transition $value | \" : \"\"",
                            "python": "( \"\" , \" transition \" + str(value) + \" | \" )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "transition",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Transition/transversion ratio",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": "Note that fastDNAml explores a very small number of alternative tree topologies relative to a typical parsimony program. There is a very real chance that the search procedure will not find the tree topology with the highest likelihood. Altering the order of taxon addition and comparing the trees found is a fairly efficient method for testing convergence. Typically, it would be nice to find the same best tree at least twice (if not three times), as opposed to simply performing some\n              fixed number of jumbles and hoping that at least one of them will be the optimum.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"jumble | \" : \"\"",
                            "python": "( \"\" , \"jumble | \" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "jumble",
                        "paramfile": null,
                        "precond": {
                            "perl": "not $bootstrap",
                            "python": "not bootstrap"
                        },
                        "prompt": "Randomize input order of sequences (jumble)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "11",
                        "command": false,
                        "comment": "The G (global) option has been generalized to permit crossing any number of branches during tree rearrangements. In addition, it is possible to modify the extent of rearrangement explored during the sequential addition phase of tree building.The G U (global and user tree) option combination instructs the program to find the best of the user trees, and then look for rearrangements that are better still.If a rearrangement distance is specified, the input must contain a transition option.The Global option can be used to force branch swapping on user trees, (combination of Global and User Tree(s) options).",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" global \" : \"\"",
                            "python": "( \"\" , \" global \")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "global_opp",
                        "paramfile": null,
                        "precond": {
                            "perl": "defined $transition or $bootstrap or $jumble",
                            "python": "transition is not None or bootstrap or jumble"
                        },
                        "prompt": "Global rearrangements",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "12",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" $final_arrgt \" : \"\"",
                            "python": "( \"\" , \" %s \" % str(final_arrgt))[ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "final_arrgt",
                        "paramfile": null,
                        "precond": {
                            "perl": "(defined $transition or $bootstrap or $jumble) and $global_opp",
                            "python": "(transition is not None or bootstrap or jumble) and global_opp"
                        },
                        "prompt": "Number of branches to cross in rearrangements of the completed tree",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "13",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"$partial_arrgt \" : \"\"",
                            "python": "( \"\" , \" %s \" % str(partial_arrgt))[ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "partial_arrgt",
                        "paramfile": null,
                        "precond": {
                            "perl": "(defined $transition  or $bootstrap or $jumble) and $global_opp",
                            "python": "(transition is not None or bootstrap or jumble) and global_opp"
                        },
                        "prompt": "Number of branches to cross in testing rearrangements during the sequential addition phase of tree inference",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "14",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\" | \"",
                            "python": "\" | \""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "pipe_arrgt",
                        "paramfile": null,
                        "precond": {
                            "perl": "(defined $transition  or $bootstrap or $jumble) and $global_opp",
                            "python": "(transition is not None or bootstrap or jumble) and global_opp"
                        },
                        "prompt": "Number of branches to cross in testing rearrangements during the sequential addition phase of tree inference",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": "This option greatly decreases the time in initially placing a new sequence in the growing tree (but does not change the time required to subsequently test rearrangements). The overall time savings seems to be about 30%, based on a very limited number of test cases. Its downside, if any, is unknown. This will probably become default program behavior in the near future.If the analysis is run with a global option of 'G 0 0', so that no rearrangements are permitted, the tree is build very approximately, but very quickly. This may be of greatest interest if the question is, 'Where does this one new sequence fit into this known tree?' The known tree is provided with the restart option, below.PHYLIP DNAML does not include anything comparable to the quickadd option.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \"quickadd | \" : \"\"",
                            "python": "( \"\" , \" quickadd | \" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "quickadd",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Decreases the time in initially placing a new sequence in the growing tree (quickadd)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"outgroup $value | \" : \"\"",
                            "python": "( \"\" , \"outgroup \" + str(value) + \" | \" )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "outgroup",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Use the specified sequence number as outgroup",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "inputopt",
                "precond": null,
                "prompt": "Input Options"
            },
            {
                "children": [
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": "The trees must be in Newick format, and terminated with a semicolon. (The program also accepts a pseudo_newick format, which is a valid prolog fact.)The tree reader in this program is more powerful than that in PHYLIP 3.3. In particular, material enclosed in square brackets, [ like this ], is ignored as comments; taxa names can be wrapped in single quotation marks to support the inclusion of characters that would otherwise end the name (i.e., '(', ')', ':', ';', '[', ']', ',' and ' '); names of internal nodes are properly ignored; and exponential notation (such as 1.0E-6) for branch lengths is supported.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"usertree $value |\" : \"\"",
                            "python": "( \"\" , \" usertree %s |\" % str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "user_tree",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "User tree - tree(s) file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Tree",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": "Causes user trees to be read with branch lengths (and it is an error to omit any of them). Without the L option, branch lengths in user trees are not required, and are ignored if present.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"userlengths |\" : \"\"",
                            "python": "( \"\" , \"userlengths |\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "user_lengths",
                        "paramfile": null,
                        "precond": {
                            "perl": "not $bootstrap",
                            "python": "not bootstrap"
                        },
                        "prompt": "User trees to be read with branch lengths",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "This options allows you to enter your own trees and instructs the program to evaluate them.",
                "name": "treeopt",
                "precond": {
                    "perl": "not $bootstrap",
                    "python": "not bootstrap"
                },
                "prompt": "User input Tree Options"
            },
            {
                "children": [
                    {
                        "argpos": "1001",
                        "command": false,
                        "comment": "Tree files will be summarized in one '.tree' file as well as output files in one '.out' file",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" fastdnaml \" : \"\"",
                            "python": "( \"\" , \" fastdnaml \" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "bootstrap",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Generates a re-sample of the input data (bootstrap)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "children": [
                            {
                                "argpos": "1002",
                                "command": false,
                                "comment": null,
                                "ctrl": {
                                    "perl": "$value <= 1000",
                                    "python": "value <= 1000"
                                },
                                "format": {
                                    "perl": "(defined $value and $value != $vdef) ? \" -boots $value\" : \"\"",
                                    "python": "( \"\" , \" -boots \" + str(value) )[ value is not None and value != vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "nboots",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Number of different bootstrap samples",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "1002",
                                "command": false,
                                "comment": "Warning: For a given random number seed, the sample will always be the same.",
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value) ? \" -seed $value\" : \"\"",
                                    "python": "( \"\" , \" -seed \" + str(value) )[ value is not None ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "bootstrap_seed",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Random number seed for first bootstrap",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "1002",
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value and $value != $vdef) ? \" -jumble $value\" : \"\"",
                                    "python": "( \"\" , \" -jumble \" + str(value) )[ value is not None and value != vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "bootstrap_maxjumble",
                                "paramfile": null,
                                "precond": {
                                    "perl": "$bootstrap",
                                    "python": "bootstrap"
                                },
                                "prompt": "Maximum attempts at replicating inferred tree (max jumble)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "1003",
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "\" $infile.tmp\"",
                                    "python": "\" %s.tmp\" % str(infile)"
                                },
                                "hidden": true,
                                "main": false,
                                "mandatory": false,
                                "name": "in_bootfile",
                                "paramfile": null,
                                "precond": null,
                                "prompt": null,
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "String",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": null,
                        "name": "bootopt",
                        "precond": {
                            "perl": "$bootstrap",
                            "python": "bootstrap"
                        },
                        "prompt": "Bootstrap options"
                    }
                ],
                "comment": null,
                "name": "boot",
                "precond": null,
                "prompt": "Bootstrap"
            },
            {
                "children": [
                    {
                        "argpos": "1010",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" > $outfile\" : \"\"",
                            "python": "( \"\" , \" > \" + str(outfile) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "outfile",
                        "paramfile": null,
                        "precond": {
                            "perl": "not $bootstrap",
                            "python": "not bootstrap"
                        },
                        "prompt": "Output File",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \"treefile | \"",
                            "python": "( \"treefile | \", \"\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "treefile",
                        "paramfile": null,
                        "precond": {
                            "perl": "not $bootstrap",
                            "python": "not bootstrap"
                        },
                        "prompt": "Save tree in treefile",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"printdata | \" : \"\"",
                            "python": "( \"\" , \"printdata | \" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "printdata",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Print the input alignment at start of run (printdata)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output_opt",
                "precond": null,
                "prompt": "Output and Results Options"
            },
            {
                "children": [
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": "The data must have the format specified for PHYLIP dnaml 3.3. The first line must be the letter C, followed by the number of categories (a number in the range 1 through 35), and then a blank-separated list of the rates for each category. (The list can take more than one line; the program reads until it finds the specified number of rate values.) The next line should be the word Categories followed by one rate category character per sequence position. The categories 1 - 35 are\n              represented by the series 1, 2, 3, ..., 8, 9, A, B, C, ..., Y, Z. These latter data can be on one or more lines. For example:C 12 0.0625 0.125 0.25 0.5 1 2 4 8 16 32 64 128Categories 5111136343678975AAA8949995566778888889AAAAAA9239898629AAAAA9Category 'numbers' are ordered: 1, 2, 3, ..., 9, A, B, ..., Y, Z. Category zero (undefined rate) is permitted at sites with a zero in a user-supplied weighting mask.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"categories $value |\" : \"\"",
                            "python": "( \"\" , \"categories \"+ str(value) + \" |\" )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "categories",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Rate categories file (user-specified)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "PhylipCategoriesRates",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": "example:Weights 111111111111001100000100011111100000000000000110000110000000In case of bootstrap, only positions that have nonzero weights are used in computing the bootstrap sample.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"weights $value |\" : \"\"",
                            "python": "( \"\" , \"weights \" + str(value) + \" |\" )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "weights",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Weights file (user-specified column weighting information)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "PhylipWeight",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "categopt",
                "precond": null,
                "prompt": "Categories and Weights Options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "fastdnaml",
    "outputs": {
        "children": [
            {
                "children": [
                    {
                        "comment": null,
                        "filenames": {
                            "perl": "\"fastdnaml.out\"",
                            "python": "\"fastdnaml.out\""
                        },
                        "hidden": false,
                        "main": false,
                        "name": "outputfile",
                        "output_type": "stdout",
                        "precond": {
                            "perl": "not $bootstrap and not defined $outfile",
                            "python": "not bootstrap and outfile is None"
                        },
                        "prompt": "Output(s) file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Report",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "comment": null,
                        "filenames": {
                            "perl": "\"$outfile\"",
                            "python": "str(outfile)"
                        },
                        "hidden": false,
                        "main": false,
                        "name": "outputfile_name",
                        "output_type": "file",
                        "precond": {
                            "perl": "not $bootstrap and defined $outfile",
                            "python": "not bootstrap and outfile is not None"
                        },
                        "prompt": "Output(s) file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Report",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output_opt",
                "precond": null,
                "prompt": "Output and Results Options"
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"_treefile.[0-9]*\"",
                    "python": "\"_treefile.[0-9]*\""
                },
                "hidden": false,
                "main": false,
                "name": "treefiles",
                "output_type": "file",
                "precond": {
                    "perl": "not $bootstrap",
                    "python": "not bootstrap"
                },
                "prompt": "Tree file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Tree",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "NEWICK"
                    ]
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"$infile.tmp.out\"",
                    "python": "\"%s.tmp.out\" % str(infile)"
                },
                "hidden": false,
                "main": false,
                "name": "bootstrap_report",
                "output_type": "file",
                "precond": {
                    "perl": "$bootstrap",
                    "python": "bootstrap"
                },
                "prompt": "Bootstrap output report",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Report",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"$infile.tmp.tree\"",
                    "python": "\"%s.tmp.tree\" % str(infile)"
                },
                "hidden": false,
                "main": false,
                "name": "bootstrap_tree",
                "output_type": "file",
                "precond": {
                    "perl": "$bootstrap",
                    "python": "bootstrap"
                },
                "prompt": "Bootstrap tree file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Tree",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "NEWICK"
                    ]
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"$infile.tmp\"",
                    "python": "\"%s.tmp\" % str(infile)"
                },
                "hidden": false,
                "main": false,
                "name": "bootstrap_aln",
                "output_type": "file",
                "precond": {
                    "perl": "$bootstrap",
                    "python": "bootstrap"
                },
                "prompt": "Bootstrap alignment file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Alignment",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "Olsen, G. J., Matsuda, H., Hagstrom, R., and Overbeek, R. 1994. fastDNAml: A tool for construction of phylogenetic trees of DNA sequences using maximum likelihood. Comput. Appl. Biosci. 10: 41-48.",
            "url": null
        },
        {
            "doi": null,
            "label": "Felsenstein, J. 1981. Evolutionary trees from DNA sequences: A maximum likelihood approach. J. Mol. Evol. 17: 368-376.",
            "url": null
        }
    ],
    "source_links": [],
    "title": "fastDNAml",
    "type": "program",
    "version": "1.2.2"
}