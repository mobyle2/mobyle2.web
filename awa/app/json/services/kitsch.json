{
    "authors": null,
    "classifications": [
        {
            "classification": "phylogeny:distance",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": "This program carries out the Fitch-Margoliash\n\tand Least Squares methods, plus a variety of others of the\n\tsame family, with the assumption that all tip species are\n\tcontemporaneous, and that there is an evolutionary clock (in\n\teffect, a molecular clock). This means that branches of the\n\ttree cannot be of arbitrary length, but are constrained so\n\tthat the total length from the root of the tree to any species\n\tis the same.",
    "description": "Fitch-Margoliash and Least Squares Methods with Evolutionary Clock",
    "documentation_links": [
        "http://bioweb2.pasteur.fr/docs/phylip/doc/kitsch.html"
    ],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": "0",
                "command": true,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"kitsch <kitsch.params\"",
                    "python": "\"kitsch <kitsch.params\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "kitsch",
                "paramfile": null,
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "-5",
                "command": false,
                "comment": "Give a file containing a distance matrix\n\t  obtained by distance matrix programs like prodist or\n\t  dnadist",
                "ctrl": null,
                "format": {
                    "perl": "\"ln -s $infile infile && \"",
                    "python": "\"ln -s \" + str(infile) + \" infile && \""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "infile",
                "paramfile": null,
                "precond": {
                    "perl": "$infile ne \"infile\"",
                    "python": "infile != \"infile\""
                },
                "prompt": "Distances matrix File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "PhylipDistanceMatrix",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Method",
                        "paramfile": "kitsch.params",
                        "precond": null,
                        "prompt": "Program method (D)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"-\\\\n\" : \"\"",
                            "python": "( \"\" , \"-\\n\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "negative_branch",
                        "paramfile": "kitsch.params",
                        "precond": null,
                        "prompt": "Negative branch lengths allowed (-)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "For the Fitch-Margoliash method, which is the default method with this program, P is 2.0. For the Cavalli-Sforza and Edwards least squares method it should be set to 0 (so that the denominator is always 1). An intermediate method is also available in which P is 1.0, and any other value of P, such as 4.0 or -2.3, can also be used. This generates a whole family of methods.Please read the documentation (man distance).",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"P\\\\n$value\\\\n\" : \"\"",
                            "python": "( \"\" , \"P\\n\" +str( value ) +\"\\n\")[ value is not None and vdef != value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "power",
                        "paramfile": "kitsch.params",
                        "precond": null,
                        "prompt": "Power (P)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "fitch_options",
                "precond": null,
                "prompt": "Fitch options"
            },
            {
                "children": [
                    {
                        "argpos": "20",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"J\\\\n$jumble_seed\\\\n$jumble_number\\\\n\" : \"\"",
                            "python": "( \"\" , \"J\\n\" + str( jumble_seed ) + \"\\n\"+str( jumble_number )+ \"\\n\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "jumble",
                        "paramfile": "kitsch.params",
                        "precond": {
                            "perl": "not $user_tree",
                            "python": "not user_tree"
                        },
                        "prompt": "Randomize (jumble) input order (J)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "19",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value >= 0 and ($value % 2) != 0",
                            "python": "value >= 0 and (value % 2) != 0"
                        },
                        "format": {
                            "perl": "\"\"",
                            "python": "\"\""
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "jumble_seed",
                        "paramfile": null,
                        "precond": {
                            "perl": "$jumble",
                            "python": "jumble"
                        },
                        "prompt": "Random number seed (must be odd)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "19",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\"\"",
                            "python": "\"\""
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "jumble_number",
                        "paramfile": null,
                        "precond": {
                            "perl": "$jumble",
                            "python": "jumble"
                        },
                        "prompt": "Number of times to jumble",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "jumble_options",
                "precond": null,
                "prompt": "Randomize options"
            },
            {
                "children": [
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"M\\\\n$numtiple_number\\\\n$multiple_seed\\\\n\" : \"\"",
                            "python": "( \"\" , \"M\\n\"+str(multiple_number)+\"\\n\"+str(multiple_seed)+\"\\n\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "multiple",
                        "paramfile": "kitsch.params",
                        "precond": null,
                        "prompt": "Analyze multiple data sets (M)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "9",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value <= 1000",
                            "python": "value <= 1000"
                        },
                        "format": {
                            "perl": "\"\"",
                            "python": "\"\""
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "multiple_number",
                        "paramfile": null,
                        "precond": {
                            "perl": "$multiple",
                            "python": "multiple"
                        },
                        "prompt": "How many data sets",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "19",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value >= 0 and ($value % 2) != 0",
                            "python": "value >= 0 and (value % 2) != 0"
                        },
                        "format": {
                            "perl": "\"\"",
                            "python": "\"\""
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "multiple_seed",
                        "paramfile": null,
                        "precond": {
                            "perl": "$multiple",
                            "python": "multiple"
                        },
                        "prompt": "Random number seed (must be odd)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" && cp infile kitsch.infile &&  cp kitsch.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" : \"\"",
                            "python": "(\"\" , \" && cp infile kitsch.infile &&  cp kitsch.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "consense",
                        "paramfile": null,
                        "precond": {
                            "perl": "$multiple and $print_treefile",
                            "python": "multiple and print_treefile"
                        },
                        "prompt": "Compute a consensus tree",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "bootstrap",
                "precond": null,
                "prompt": "Bootstrap options"
            },
            {
                "argpos": "1000",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"Y\\\\n\"",
                    "python": "\"Y\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "consense_confirm",
                "paramfile": "consense.params",
                "precond": {
                    "perl": "$consense",
                    "python": "consense"
                },
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "-2",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"T\\\\n\"",
                    "python": "\"T\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "consense_terminal_type",
                "paramfile": "consense.params",
                "precond": {
                    "perl": "$consense",
                    "python": "consense"
                },
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "The U (User Tree) option requires a bifurcating tree, unlike FITCH, which requires an unrooted tree with a trifurcation at its base.If a tree with a trifurcation at the base is by mistake fed into the U option of KITSCH then some of its species (the entire rightmost furc, in fact) will be ignored and too small a tree read in. This should result in an error message and the program should stop.It is important to understand the difference between the User Tree formats for KITSCH and FITCH. You may want to use RETREE to convert a user tree that is suitable for FITCH into one suitable for KITSCH or vice versa.",
                        "ctrl": {
                            "perl": "not ( $user_tree and $jumble )",
                            "python": "not ( user_tree and jumble )"
                        },
                        "format": {
                            "perl": "($value) ? \"U\\\\n\" : \"\"",
                            "python": "( \"\" , \"U\\n\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "user_tree",
                        "paramfile": "kitsch.params",
                        "precond": null,
                        "prompt": "Use User tree (default: No, search for best tree) (U)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "-1",
                        "command": false,
                        "comment": "Note that the User Trees (used by option U) must be rooted trees (with a bifurcation at their base). If you take a user tree from FITCH and try to evaluate it in KITSCH, it must first be rooted. This can be done using RETREE",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"cat $tree_file >> intree && \" : \"\"",
                            "python": "( \"\" , \"cat \"+ str( value ) +\" >> intree && \" ) [ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "tree_file",
                        "paramfile": null,
                        "precond": {
                            "perl": "$user_tree",
                            "python": "user_tree"
                        },
                        "prompt": "User Tree file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Tree",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "user_tree_opt",
                "precond": null,
                "prompt": "User tree options"
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Tells the program to print a semi-graphical picture of the tree in the outfile.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \"3\\\\n\"",
                            "python": "( \"3\\n\" ,\"\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "print_tree",
                        "paramfile": "kitsch.params",
                        "precond": null,
                        "prompt": "Print out tree (3)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Tells the program to save the tree in a treefile (a standard representation of trees where the tree is specified by a nested pairs of parentheses, enclosing names and separated by commas).",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \"4\\\\n\"",
                            "python": "( \"4\\n\" , \"\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "print_treefile",
                        "paramfile": "kitsch.params",
                        "precond": null,
                        "prompt": "Write out trees onto tree file (4)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \"1\\\\n\" : \"\"",
                            "python": "(\"\", \"1\\n\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "printdata",
                        "paramfile": "kitsch.params",
                        "precond": null,
                        "prompt": "Print out the data at start of run (1)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output",
                "precond": null,
                "prompt": "Output options"
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "triangular",
                        "paramfile": "kitsch.params",
                        "precond": null,
                        "prompt": "Matrix format",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "If the S (subreplication) option is in effect, the above degrees of freedom must be modified by noting that N is not n(n-1)/2 but is the sum of the numbers of replicates of all cells in the distance matrix read in, which may be either square or triangular. A further explanation of the statistical test of the clock is given in a paper of mine (Felsenstein, 1986).",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"S\\\\n\" : \"\"",
                            "python": "( \"\" , \"S\\n\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "subreplicates",
                        "paramfile": "kitsch.params",
                        "precond": null,
                        "prompt": "Subreplicates (S)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "other_options",
                "precond": null,
                "prompt": "Other options"
            },
            {
                "argpos": "1000",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"Y\\\\n\"",
                    "python": "\"Y\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "confirm",
                "paramfile": "kitsch.params",
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "-1",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"0\\\\n\"",
                    "python": "\"0\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "terminal_type",
                "paramfile": "kitsch.params",
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "kitsch",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"consense.outfile\"",
                    "python": "\"consense.outfile\""
                },
                "hidden": false,
                "main": false,
                "name": "consense_outfile",
                "output_type": "file",
                "precond": {
                    "perl": "$consense",
                    "python": "consense"
                },
                "prompt": "Consense output file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"consense.outtree\"",
                    "python": "\"consense.outtree\""
                },
                "hidden": false,
                "main": false,
                "name": "consense_treefile",
                "output_type": "file",
                "precond": {
                    "perl": "$consense",
                    "python": "consense"
                },
                "prompt": "Consense tree file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Tree",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "NEWICK"
                    ]
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"kitsch.outfile\"",
                    "python": "\"kitsch.outfile\""
                },
                "hidden": false,
                "main": false,
                "name": "outfile",
                "output_type": "file",
                "precond": null,
                "prompt": "Kitsch output file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"kitsch.outtree\"",
                    "python": "\"kitsch.outtree\""
                },
                "hidden": false,
                "main": false,
                "name": "treefile",
                "output_type": "file",
                "precond": {
                    "perl": "$print_treefile",
                    "python": "print_treefile"
                },
                "prompt": "Kitch tree file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Tree",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "NEWICK"
                    ]
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [],
    "source_links": [],
    "title": "kitsch",
    "type": "program",
    "version": null
}