{
    "authors": "Huang, X. and Madan, A. (1999)",
    "classifications": [
        {
            "classification": "assembly:assembly",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": "cap3"
    },
    "comment": null,
    "description": "Contig Assembly Program",
    "documentation_links": [],
    "env": [],
    "homepage_links": [
        "http://seq.cs.iastate.edu/"
    ],
    "inputs": {
        "children": [
            {
                "argpos": "1",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \" + str( value )"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "seq",
                "paramfile": null,
                "precond": null,
                "prompt": "File of reads",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [
                        "DNA"
                    ],
                    "card": "2,n",
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "FASTA"
                    ]
                }
            },
            {
                "children": [
                    {
                        "children": [
                            {
                                "argpos": "10",
                                "command": false,
                                "comment": "Default value: 12",
                                "ctrl": {
                                    "perl": "$value > 5",
                                    "python": "value > 5"
                                },
                                "format": {
                                    "perl": "(defined $value and $value != $vdef) ? \" -c $value\" : \"\"",
                                    "python": "( \"\" , \" -c \"+ str( value ) )[ value is not None and value != vdef ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "base_qual_cutoff_clipping",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Base quality cutoff for clipping (-c)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "10",
                                "command": false,
                                "comment": "Default value: 250",
                                "ctrl": {
                                    "perl": "$value > 5",
                                    "python": "value > 5"
                                },
                                "format": {
                                    "perl": "(defined $value and $value != $vdef) ? \" -y $value\" : \"\"",
                                    "python": "( \"\" , \" -y \"+ str( value ) )[ value is not None and value != vdef ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "clipping_range",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Clipping range (-y)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "10",
                                "command": false,
                                "comment": "Default value: 3",
                                "ctrl": {
                                    "perl": "$value > 0",
                                    "python": "value > 0"
                                },
                                "format": {
                                    "perl": "(defined $value and $value != $vdef)? \" -z $value\" : \"\"",
                                    "python": "( \"\" , \" -z \"+ str( value ) )[ value is not None and value != vdef ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "good_reads",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Minimum number of good reads at clip pos (-z)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": "CAP3 computes clipping positions of each read using both base quality values and similarity information.Clipping of a poor end region of a read f is controlled by three parameters:quality value cutoff qualcut (-c)clipping range crange (-y)depth of good coverage gdepth.(-z)",
                        "name": "clipping_poor_end_regions",
                        "precond": null,
                        "prompt": "Clipping of poor end regions"
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": "The user may provide specific values for the parameters crange and gdepth or individual reads in a file.Each line in the file has the following format:ReadName crange5 gdepth5 crange3 gdepth3where ReadName is the name of a read, crange5 and gdepth5 are values for the 5' end, and crange3 and gdepth3 are for the 3' end.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -w $value\" : \"\"",
                            "python": "( \"\" , \" -w \"+ str( value ) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "clipping_file",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "File for clipping information (-w)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "ClippingParameters",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "clipping_poor_regions",
                "precond": null,
                "prompt": "Clipping of poor regions"
            },
            {
                "children": [
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": "The program determines a minimum band of diagonals for an overlapping alignment between two sequence reads.The band is expanded by a number of bases specified by the user with option \"-a\".Default value: 20",
                        "ctrl": {
                            "perl": "$value > 10",
                            "python": "value > 10"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -a $value\" : \"\"",
                            "python": "( \"\" , \" -a \"+ str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "band_expansion",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Band expansion size (-a)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "The program determines a minimum band of diagonals for an overlapping alignment between two sequence reads.The band is expanded by a number of bases specified by the user with option \"-a\".",
                "name": "band_diagonals",
                "precond": null,
                "prompt": "Band of diagonals"
            },
            {
                "children": [
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 15",
                            "python": "value > 15"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"-b $value\" : \"\"",
                            "python": "( \"\" , \" -b \"+ str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "base_qual_cutoff",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Base quality cutoff for differences (-b)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 20",
                            "python": "value > 20"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -d $value\" : \"\"",
                            "python": "( \"\" , \" -d \"+ str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "max_qscore",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximum qscore sum at differences (-d)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "Overlaps between reads are evaluated by many measures.The first measure is based on base quality.If an overlap contains lots of differences at bases of high quality, then the overlap is removed.Specifically,let b be the base quality cutoff value and let d be the maximum difference score.The values for the two parameters can be set using the \"-b\" and \"-d\" options.If the overlap contains a difference at bases of quality values q1 and q2, then the score at the difference is max(0, min(q1, q2) - b).The difference score of an overlap is the sum of scores at each difference.For example, an overlap contains two differences,one at bases of quality values 15 and 30 and the other at bases of quality values 40 and 50.With b = 20, the difference score of the overlap is 0 + 20 = 20.If the difference score of an overlap exceeds d, then the overlap is removed. With b = 20,an overlap with 15 differences at bases of quality values 40 or higher has a difference score of at least 300 and is removed if d = 250.",
                "name": "overlap_score",
                "precond": null,
                "prompt": "Quality difference score of an overlap"
            },
            {
                "children": [
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 10",
                            "python": "value > 10"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -e $value\" : \"\"",
                            "python": "( \"\" , \" -e \"+ str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "clearance",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Clearance between number of diff (-e)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "The second measure looks at the number of differences in an overlap.If the number of differences in an overlap is higher than expected, than the overlap is removed.Let an integer e be the maximum number of extra differences.Consider an overlap between reads f and g.Let d1 be the estimated number of sequencing errors for the region of f involved in the overlap and let r2 be that forthe region of g involved in the overlap.If the observed number of differences in the overlap is greater than r1 + r2 + e, then the overlap is removed.The value for the parameter e can be changed using the \"-e\" option.The expected number of differences in the overlap is about r1 + r2.Giving a smaller value to e causes more overlaps to be removed.",
                "name": "nb_diff_overlap",
                "precond": null,
                "prompt": "Number of differences in an overlap"
            },
            {
                "children": [
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -m $value\" : \"\"",
                            "python": "( \"\" , \" -m \"+ str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "match_score",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Match score factor (-m)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value < 0",
                            "python": "value < 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -n $value\" : \"\"",
                            "python": "( \"\" , \" -n \"+ str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "mismatch_score",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Mismatch score factor (-n)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -g $value\" : \"\"",
                            "python": "( \"\" , \" -g \"+ str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gap_penalty",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Gap penalty factor (-g)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "The third measure is based on overlap similarity score.The similarity score of an overlapping alignment is defined using base quality values.Let m be the match score factor, let n be the mismatch score factor, and let g be the gap penalty factor.Values for these parameters can be set with the \"-m\", \"-n\", and \"-g\" options.A match at bases of quality values q1 and q2 is given a score of m * min(q1,q2).A mismatch at bases of quality values q1 and q2 is given a score of n * min(q1,q2).A base of quality value q1 in a gap is given a score of -g * min(q1,q2),where q2 is the quality value of the base in the other sequence right before the gap.The score of a gap is the sum of scores of each base in the gap minus a gap open penalty.The similarity score of an overlapping alignment is the sum of scores of each match, each mismatch, and each gap.With m = 2, an overlap that consists of 25 matches at bases of quality value 10 has a score of 500.If the similarity score of an overlap is less than the overlap similarity score cutoff s, then the overlap is removed.",
                "name": "sim_score_overlap",
                "precond": null,
                "prompt": "Similarity score of an overlap"
            },
            {
                "children": [
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 20",
                            "python": "value > 20"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -o $value\" : \"\"",
                            "python": "( \"\" , \" -o \"+ str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "overlap_length",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Overlap length cutoff (-o)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 65",
                            "python": "value > 65"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -p $value\" : \"\"",
                            "python": "( \"\" , \" -p \"+ str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "overlap_identity",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Overlap percent identity cutoff (-p)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "The fourth requirement for an overlap is that the length in bp of the overlap is no less than the value of the minimum overlap length cutoff parameter.The value for this parameter can be changed with the \"-o\" option.The fifth requirement for an overlap is that the percent identity of the overlap is no less than the minimum percent identity cutoff.The value for this parameter can be changed with the \"-p\" option.A value of 75 for p means 0.75 or 75%.",
                "name": "percent_id_overlap",
                "precond": null,
                "prompt": "Length and percent identity of an overlap"
            },
            {
                "children": [
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 1",
                            "python": "value > 1"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -f $value\" : \"\"",
                            "python": "( \"\" , \" -f \"+ str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "max_gap_length",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximum gap length in any overlap (-f)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "The program provides a parameter (-f option) for the user to reject overlaps with a long gap.Let an integer f be the maximum length of gaps allowed in any overlap. Then any overlap with a gap longer than f is rejected by the program.The value for this parameter can be changed using the \"-f\" option.Note that a small value for this parameter may cause the program to remove true overlaps and to produce incorrect results.The \"-f\" option may be used by the user to split reads from alternative splicing forms into separate contigs.Geo Pertea at TIGR suggested that this option be added to the program.",
                "name": "max_len_gaps_overlap",
                "precond": null,
                "prompt": "Maximum length of gaps in an overlap"
            },
            {
                "children": [
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 2",
                            "python": "value > 2"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -h $value\" : \"\"",
                            "python": "( \"\" , \" -h \"+ str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "max_overhang",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximum overhang percent length (-h)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "The total length of the different overhang regions in an overlap is controlled with the -h option.TAn overhang region in an overlap is a different terminal region before or after the overlap.TThe overhang percent length of an overlap is 100 times the total length of the different overhang regions in the overlap divided by the length of the overlap.TOverlaps with an overhang percent length greater than the maximum cutoff are rejected.",
                "name": "overhang_pcent_len_overlap",
                "precond": null,
                "prompt": "Overhang percent length of an overlap"
            },
            {
                "argpos": "10",
                "command": false,
                "comment": null,
                "ctrl": {
                    "perl": "$value > 400",
                    "python": "value > 400"
                },
                "format": {
                    "perl": "(defined $value and $value != $vdef) ? \" -s $value\" : \"\"",
                    "python": "( \"\" , \" -s \"+ str( value ) )[ value is not None and value != vdef ]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "overlap_similarity",
                "paramfile": null,
                "precond": null,
                "prompt": "Overlap similarity score cutoff (-s)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value >= 0",
                            "python": "value >= 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -r $value\" : \"\"",
                            "python": "( \"\" , \" -r \"+ str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "reverse_orientation",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Reverse orientation value (-r)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "The \"-r\" option is used to let CAP3 know whether to consider reads in reverse orientation for assembly.The default value for the option is 1, meaning that reads in reverse orientation are also considered for assembly.Specifying zero as \"-r 0\" instructs CAP3 to perform assembly of reads in forward orientation only.This option was suggested by Patrick Schnable's lab.",
                "name": "assembly_fwd",
                "precond": null,
                "prompt": "Assembly of reads in forward orientation only"
            },
            {
                "children": [
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 30",
                            "python": "value > 30"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -t $value\" : \"\"",
                            "python": "( \"\" , \" -t \"+ str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "word_matches",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximum number of word matches (-t)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "This parameter (option -t) allows the user to trade off the efficiency of the program for its accuracy.For a read f, the program computes overlaps between read f and other reads by considering short word matches between read f and other reads.A word match is examined to see if it can be extended into a long overlap.If read f has overlaps with many other reads, then read f has many short word matches with many other reads.This parameter gives an upper limit, for any word, on the number of word matches between read f and other reads that are considered by the program.Using a large value for this parameter allows the program to consider more word matches between read f and other reads, which can find more overlaps for read f, but slows down the program.Using a small vlaue for this parameter has the opposite effect.A large value may be used if the depth of coverage is high for the data set.For example, a value of 150 is used for a data set with a maximum depth of coverage of 30, and a value of 500 for a data set with a maximum depth of coverage of 100. Using a very large value may cause the program to run forever or run out of memory.",
                "name": "max_num_word_matches",
                "precond": null,
                "prompt": "Maximum number of word matches"
            },
            {
                "children": [
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -u $value\" : \"\"",
                            "python": "( \"\" , \" -u \"+ str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "min_constraints_corr",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Minimum number of constraints for correction (-u)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -v $value\" : \"\"",
                            "python": "( \"\" , \" -v \"+ str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "min_constraints_linking",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Minimum number of constraints for linking (-v)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "Corrections to an assembly are made using forward-reverse constraints.Let an integer u be the minimum number of constraints for correction.Consider an alternative overlap between two reads f and g.Assume that f is in contig C1 and that g is in contig C2.If the number of unsatisfied constraints that support the overlap between f and g is greater than the value of the u parameter plus the number of satisfied constraints that support the current joins involving f and g, then the current joins involving f and g are disconnected and the overlap between f and g is implemented.The value for this parameter can be changed with the \"-u\" option.Contigs that are linked by forward-reverse constraints are reported.The minimum number of constraints for reporting a link between two contigs is specified with the \"-v\" option.",
                "name": "fwd_rev_const",
                "precond": null,
                "prompt": "Forward-reverse constraints"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "cap3",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"*.cap.ace\"",
                    "python": "\"*.cap.ace\""
                },
                "hidden": false,
                "main": false,
                "name": "ace",
                "output_type": "file",
                "precond": null,
                "prompt": "Assembly in ace format",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "AceAssembly",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": [
                        "ACE"
                    ]
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"*.cap.contigs\"",
                    "python": "\"*.cap.contigs\""
                },
                "hidden": false,
                "main": false,
                "name": "contig",
                "output_type": "file",
                "precond": null,
                "prompt": "Contigs",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [
                        "DNA"
                    ],
                    "card": "0,n",
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "FASTA"
                    ]
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"*.cap.contigs.links\"",
                    "python": "\"*.cap.contigs.links\""
                },
                "hidden": false,
                "main": false,
                "name": "contig_link",
                "output_type": "file",
                "precond": null,
                "prompt": "Contig links",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"*.cap.contigs.qual\"",
                    "python": "\"*.cap.contigs.qual\""
                },
                "hidden": false,
                "main": false,
                "name": "contig_qual",
                "output_type": "file",
                "precond": null,
                "prompt": "Quality of contigs",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"*.cap.info\"",
                    "python": "\"*.cap.info\""
                },
                "hidden": false,
                "main": false,
                "name": "info",
                "output_type": "file",
                "precond": null,
                "prompt": "Assembly informations",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"*.cap.singlets\"",
                    "python": "\"*.cap.singlets\""
                },
                "hidden": false,
                "main": false,
                "name": "singlet",
                "output_type": "file",
                "precond": null,
                "prompt": "Singlets",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [
                        "DNA"
                    ],
                    "card": "0,n",
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "Huang, X. and Madan, A. (1999) CAP3: A DNA Sequence Assembly Program. Genome Research, 9: 868-877.",
            "url": null
        }
    ],
    "source_links": [
        "http://seq.cs.iastate.edu/cap3.html"
    ],
    "title": "CAP3",
    "type": "program",
    "version": "3"
}