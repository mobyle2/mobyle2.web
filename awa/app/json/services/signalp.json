{
    "authors": null,
    "classifications": [
        {
            "classification": "sequence:protein:motifs",
            "type": "mobyle1"
        },
        {
            "classification": "sequence:protein:pattern",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": "signalp  predicts  the  presence and location of signal peptide cleavage sites in amino acid sequences from\n       different organisms: Gram-positive prokaryotes, Gram-negative prokaryotes, and eukaryotes.The  method  incorporates a prediction of cleavage sites and a signal peptide/non-signal peptide prediction based on a \n       combination of several artificial neural networks.",
    "description": "predict signal peptides in proteins",
    "documentation_links": [
        "http://www.cbs.dtu.dk/services/SignalP/"
    ],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": null,
                "command": true,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" signalp \"",
                    "python": "\" signalp \""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "signalp",
                "paramfile": null,
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "100",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" $value \"\"",
                    "python": "\" \" + str( value )"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "sequence",
                "paramfile": null,
                "precond": null,
                "prompt": "Input Sequence",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "FASTA"
                    ]
                }
            },
            {
                "argpos": "10",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "(defined $value)? \" -t \" : \"\"",
                    "python": "\" -t \" + value"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "type",
                "paramfile": null,
                "precond": null,
                "prompt": "Use networks and models trained on sequences from the specified type of organisms",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "10",
                "command": false,
                "comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>The valid formats are:</html:p><html:ul><html:li><html:strong>short :</html:strong>Write  only  one line of concluding scores per sequence. Intended for\n                     analysis of large datasets where machine-readable output is required.<html:em>This is the default</html:em>.</html:li><html:li><html:strong>long :</html:strong>Write the scores for each position in each sequnce.</html:li><html:li><html:strong>all :</html:strong>Write predictions for both Signalp-TM and SignalP-noTM networks. Five\n                     columns with cleavage site (CS) and Signal Peptide (SP)  predictions\n                     for  both  SigP-noTM  and  SigP-TM methods and TM prediction for each\n                     position.</html:li><html:li><html:strong>summary :</html:strong>Write only the concluding scores for each sequence.  This  is  essen&#8208;\n                     tially the same information as the 'short' format.</html:li></html:ul></html:div>",
                "ctrl": null,
                "format": {
                    "perl": "(defined $value and $value ne $vdef)? \" -f $value\" : \"\"",
                    "python": "( \"\" , \" -f \" + value)[ value is not None and value != vdef ]"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "format",
                "paramfile": null,
                "precond": null,
                "prompt": "Produce output in the specified format.",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "20",
                "command": false,
                "comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:ul><html:li><html:strong>gif :</html:strong>Save  plots  in  Graphics Interchange Format (GIF) under the names 'plot.method.#.gif', where\n                     method is nn or hmm, and # is the number of the input sequence.</html:li><html:li><html:strong>gif+eps :</html:strong>Save plots in both GIF and EPS formats as described above.</html:li></html:ul></html:div>",
                "ctrl": null,
                "format": {
                    "perl": "( defined $value and $value ne $vdef) ? \" -g $value\" : \"\"",
                    "python": "( \"\" , \" -g \"+str( value ) )[ bool( value ) ]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "graphics",
                "paramfile": null,
                "precond": null,
                "prompt": "generate graphics (-g).",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "30",
                "command": false,
                "comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>Input sequences may include or not TM regions.</html:p><html:ul><html:li><html:strong>best :</html:strong>The method decides which neural networks predictions  give  the  best\n                     result  choosing  predictions  from either SignalP-TM or SignalP-noTM\n                     networks. For 'gram+' organisms it is always SignalP-TM networks.<html:em>(default)</html:em></html:li><html:li><html:strong>notm :</html:strong>The SignalP-noTM neural networks are specifically chosen.</html:li></html:ul></html:div>",
                "ctrl": null,
                "format": {
                    "perl": "(defined $value and $value ne $vdef) ? \" -s $value\" : \"\"",
                    "python": "( \"\" , \" -s \" + value)[ value is not None and value != vdef ]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "Method",
                "paramfile": null,
                "precond": null,
                "prompt": "Use the specified prediction method.",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "50",
                "command": false,
                "comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>user defined D-cutoff for noTM networks. A score above the specified\n            cutoff will result in a positive prediction of a signal peptide. The cutoff\n            determines the yes/no answer only, the prediction process is not affected.\n            The default cutoffs are:</html:p><html:ul><html:li><html:strong>euk</html:strong>: 0.45</html:li><html:li><html:strong>gram+</html:strong>: 0.57</html:li><html:li><html:strong>gram-</html:strong>: 0.57</html:li></html:ul></html:div>",
                "ctrl": {
                    "python": "value >= 0 and value <= 1"
                },
                "format": {
                    "perl": "(defined $value and $value ne $vdef) ? \" -u\" : \"\"",
                    "python": "( \"\" , \" -u \" + str( value ) )[ value is not None]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "noTM_cutoff",
                "paramfile": null,
                "precond": null,
                "prompt": "cutoff for noTM networks",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Float",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "50",
                "command": false,
                "comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\">user defined D-cutoff for TM networks. A score above  the  specified\n              cutoff  will result in a positive prediction of a signal peptide. The cutoff\n              determines the yes/no answer only, the prediction process is  not  affected.\n              The default cutoffs are:<html:ul><html:li><html:strong>euk</html:strong>: 0.50</html:li><html:li><html:strong>gram+</html:strong>: 0.45</html:li><html:li><html:strong>gram-</html:strong>: 0.51</html:li></html:ul></html:div>",
                "ctrl": {
                    "python": "value >= 0 and value <= 1"
                },
                "format": {
                    "perl": "(defined $value and $value ne $vdef) ? \" -c\" : \"\"",
                    "python": "( \"\" , \" -U \" + str( value ) )[ value is not None]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "TM_cutoff",
                "paramfile": null,
                "precond": null,
                "prompt": "cutoff for TM networks",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Float",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "60",
                "command": false,
                "comment": "truncate the input sequences to the specified length from the  N-ter\u2010\n              minal. The default is 70 residues. The value of \"0\" disables truncation.",
                "ctrl": {
                    "python": "value >= 0"
                },
                "format": {
                    "perl": "(defined $value and $value ne $vdef) ? \" -c\" : \"\"",
                    "python": "( \"\" , \" -c \" + str( value ) )[ value is not None and value != vdef ]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "truncate",
                "paramfile": null,
                "precond": null,
                "prompt": "Truncate  each  sequence  to  maximally n N-terminal residues",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "70",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "python": "( \"\" , \" -m %s_mature.fasta\"%sequence)[value]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "mature",
                "paramfile": null,
                "precond": null,
                "prompt": "generate a FASTA file with mature sequences based on  the  predictions.",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Boolean",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "70",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "python": "( \"\" , \" -n %s.gff\"%sequence)[value]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "n_s_e",
                "paramfile": null,
                "precond": null,
                "prompt": "generate a GFF (name-start-end) file with the predicted signal peptides.",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Boolean",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "signalp",
    "outputs": {
        "children": [
            {
                "comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p><html:strong>Neural network output</html:strong></html:p><html:p>For  each input sequence the neural network (nn) module of signalp will first return three scores between 0\n       and 1 for each sequence position:</html:p><html:ul><html:li><html:strong>C-score (raw cleavage site score)</html:strong>The output score from networks trained to recognize cleavage sites  vs.  other  sequence  positions.\n              Trained  to be high at position +1 (immediately after the cleavage site), and low at all other posi&#8208;\n              tions.</html:li><html:li><html:strong>S-score (signal peptide score)</html:strong>The output score from networks trained to recognize signal peptide vs. non-signal-peptide positions.\n              Trained  to be high at all positions before the cleavage site, and low at positions after the cleav&#8208;\n              age site and in the N-terminals of non-secretory proteins.</html:li><html:li><html:strong>Y-score (combined cleavage site score)</html:strong>The prediction of cleavage site location is optimized by observing where the C-score is high and the\n              S-score  changes from a high to a low value.  The Y-score formalizes this by combining the height of\n              the C-score with the slope of the S-score.<html:br />Specifically, the Y-score is a geometric average between the C-score and a  smoothed  derivative  of\n              the  S-score  (i.e.  the difference between the mean S-score over d positions before and d positions\n              after the current position, where d varies with the chosen network ensemble).</html:li></html:ul><html:p>signalp will then report the maximal C-, S-, and Y-scores, the mean S-score in the interval between  the\n       N-terminal  and  the site with the maximal Y-score and, finally, the D-score, the average of the S-mean and\n       Y-max score.</html:p><html:p>The high detail level of the output is intended to allow for interpretation  of  borderline  cases  by  the\n       user.</html:p><html:p>If  the sequence is predicted to have a signal peptide, the predicted cleavage site\n       is located immediately before the position with the maximal Y-score.</html:p></html:div>",
                "filenames": {
                    "perl": "\"signalp.out\"",
                    "python": "\"signalp.out\""
                },
                "hidden": false,
                "main": false,
                "name": "results",
                "output_type": "stdout",
                "precond": null,
                "prompt": "signalp report",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "signalp",
                        "superclass": "Report"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"*.gif\"",
                    "python": "\"*.gif\""
                },
                "hidden": false,
                "main": false,
                "name": "gif",
                "output_type": "file",
                "precond": {
                    "perl": "$graphics eq \"gif\" or $graphics eq \"gif+eps\"",
                    "python": "graphics == \"gif\" or graphics == \"gif+eps\""
                },
                "prompt": "graphic in GIF",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "signalp_graphic",
                        "superclass": "Binary"
                    },
                    "edam_types": [],
                    "formats": [
                        "GIF"
                    ]
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"*.gif\"",
                    "python": "\"*.gif\""
                },
                "hidden": false,
                "main": false,
                "name": "eps",
                "output_type": "file",
                "precond": {
                    "perl": "$graphics eq \"gif+eps\"",
                    "python": "graphics == \"gif+eps\""
                },
                "prompt": "graphic in eps",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "signalp_graphic",
                        "superclass": "Binary"
                    },
                    "edam_types": [],
                    "formats": [
                        "EPS"
                    ]
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"${sequence}_mature.fasta\"",
                    "python": "\"%s_mature.fasta\"%sequence"
                },
                "hidden": false,
                "main": false,
                "name": "mature_result",
                "output_type": "file",
                "precond": {
                    "perl": "$mature",
                    "python": "mature"
                },
                "prompt": "a FASTA file with mature sequences based on  the  predictions",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "FASTA"
                    ]
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"${sequence}.gff\"",
                    "python": "\"%s.gff\"%sequence"
                },
                "hidden": false,
                "main": false,
                "name": "n_s_e_result",
                "output_type": "file",
                "precond": {
                    "perl": "$n_s_e",
                    "python": "n_s_e"
                },
                "prompt": "a GFF (name-start-end) file with the predicted signal peptides",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Feature",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": [
                        "GFF"
                    ]
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": "10.1038/nmeth.1701",
            "label": "SignalP 4.0: discriminating signal peptides from transmembrane regions\n       Thomas Nordahl Petersen, S\u00f8ren Brunak, Gunnar von Heijne & Henrik Nielsen\n       Nature Methods, 8:785-786, 2011",
            "url": null
        },
        {
            "doi": null,
            "label": "Improved prediction of signal peptides: SignalP 3.0.\n        Jannick Dyrl\u00f8v Bendtsen, Henrik Nielsen, Gunnar von Heijne and S\u00f8ren Brunak.\n        J. Mol. Biol., 340:783-795, 2004.",
            "url": null
        },
        {
            "doi": null,
            "label": "Identification of prokaryotic and eukaryotic signal peptides and prediction of their cleavage sites.\n        Henrik Nielsen, Jacob Engelbrecht, S\u00f8ren Brunak and Gunnar von Heijne.\n        Protein Engineering, 10:1-6, 1997.",
            "url": null
        },
        {
            "doi": null,
            "label": "Prediction of signal peptides and signal anchors by a hidden Markov model.\n        Henrik Nielsen and Anders Krogh.\n        Proceedings of the Sixth International Conference on Intelligent Systems for Molecular Biology (ISMB 6),\n        AAAI Press, Menlo Park, California, pp. 122-130, 1998.",
            "url": null
        }
    ],
    "source_links": [
        "http://www.cbs.dtu.dk/cgi-bin/nph-sw_request?signalp"
    ],
    "title": "signalp",
    "type": "program",
    "version": "4.0"
}