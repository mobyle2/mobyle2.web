{
    "authors": null,
    "classifications": [
        {
            "classification": "hmm:building",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": "hmmbuild"
    },
    "comment": null,
    "description": "Build a profile HMM from an input multiple alignment",
    "documentation_links": [],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": "30",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \"+str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "alignfile",
                "paramfile": null,
                "precond": null,
                "prompt": "Aligned sequences File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Alignment",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "STOCKHOLM"
                    ]
                }
            },
            {
                "argpos": "2",
                "command": false,
                "comment": "The alphabet type (amino, DNA, or RNA) is autodetected by default, by looking at the composition of the\n            msafile. Autodetection is normally quite reliable, but occasionally alphabet type may be ambiguous and\n            autodetection can fail (for instance, on tiny toy alignments of just a few residues). To avoid this, or to\n            increase robustness in automated analysis pipelines, you may specify the alphabet type of msafile with\n            these options.Protein: Specify that all sequences in seqfile are proteins. By default, alphabet type is\n                    autodetected from looking at the residue composition.DNA: Specify that all sequences in seqfile are DNAs.RNA: Specify that all sequences in seqfile are RNAs.",
                "ctrl": null,
                "format": {
                    "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\"",
                    "python": "(\"\", \" \" + str(value) )[ value is not None and value != vdef]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "alphabet",
                "paramfile": null,
                "precond": null,
                "prompt": "Forcing an alphabet in input alignment",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "20",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" $alignfile.hmm\"",
                    "python": "\" \" + str(alignfile) + \".hmm\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "hmm_textfile",
                "paramfile": null,
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Name the new profile. The default is to use the name of the alignment (if one\n          is present in the msafile, or, failing that, the name of the hmmfile. If msafile contains\n          more than one alignment, -n doesn't work, and every alignment must have a name\n          annotated in the msafile (as in Stockholm #=GF ID annotation).",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -n $value\" : \"\"",
                            "python": "( \"\" , \" -n \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "hmmname",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Name the HMM (-n)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "After each model is constructed, resave annotated, possibly modified source alignments\n            to a file in Stockholm format. The alignments are annotated with a\n            reference annotation line indicating which columns were assigned as consensus,\n            and sequences are annotated with what relative sequence weights were assigned.\n            Some residues of the alignment may have been shifted to accommodate restrictions\n            of the Plan7 profile architecture, which disallows transitions between insert\n            and delete states..",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -O $value\" : \"\"",
                            "python": "( \"\" , \" -O \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "re_save",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Re_save annotated, possibly modified MSA to 'file', in Stockholm format. (-O)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output_options",
                "precond": null,
                "prompt": "Output options"
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Define consensus columns as those that have a fraction >= symfrac of residues\n            as opposed to gaps. (See the --symfrac option.) This is the default.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" --fast\" : \"\"",
                            "python": "( \"\" , \" --fast\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "fast",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Quickly and heuristically determine the architecture of the model (fast)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Enter a value >= 0 and <= 1. Define the residue fraction threshold necessary \n              to define a consensus column\n              when using the --fast option. The default is 0.5. The symbol fraction in each\n              column is calculated after taking relative sequence weighting into account, and ignoring\n              gap characters corresponding to ends of sequence fragments (as opposed\n              to internal insertions/deletions). \n              Setting this to 0.0 means that every alignment column will be assigned\n\t\t\t  as consensus, which may be useful in some cases. Setting it to 1.0\n\t          means that only columns that have no gap characters at all will be\n              assigned as consensus.",
                        "ctrl": {
                            "perl": "0 <= $value <= 1",
                            "python": "0 <= value <= 1"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" --symfrac $value\" : \"\"",
                            "python": "( \"\" , \" --symfrac \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "symfrac",
                        "paramfile": null,
                        "precond": {
                            "perl": "$fast",
                            "python": "fast"
                        },
                        "prompt": "Sets sym fraction controlling for the --fast model construction algorithm, (symfrac)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Enter a value >= 0 and <= 1. We only want to count terminal gaps as deletions if the aligned sequence is known\n           to be full-length, not if it is a fragment (for instance, because only part of it was\n           sequenced). HMMER uses a simple rule to infer fragments: if the sequence length\n           L is less than a fraction x times the mean sequence length of all the sequences\n           in the alignment, then the sequence is handled as a fragment. The default is 0.5.",
                        "ctrl": {
                            "perl": "0 <= $value <= 1",
                            "python": "0 <= value <= 1"
                        },
                        "format": {
                            "perl": "(defined $value  and $value != $vdef) ? \" --fragthresh $value\" : \"\"",
                            "python": "( \"\" , \" --fragthresh \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "fragthresh",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Tag sequence as a fragment, (fragthresh)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "These options control how consensus columns are defined in an alignment.",
                "name": "AlternativeConstruction",
                "precond": null,
                "prompt": "Alternative model construction strategies"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "HMMER uses an ad hoc sequence weighting algorithm to downweight closely related sequences and upweight\n          distantly related ones. This has the effect of making models less biased by uneven phylogenetic\n          representation. For example, two identical sequences would typically each receive half the weight that one\n          sequence would. These options control which algorithm gets used.wnp: Use the Henikoff position-based sequence weighting scheme [Henikoff and Henikoff,\n          J. Mol. Biol. 243:574, 1994]. This is the default.wgsc: Use the Gerstein/Sonnhammer/Chothia weighting algorithm [Gerstein et al, J. Mol.\n          Biol. 235:1067, 1994].wblosum: Use the same clustering scheme that was used to weight data in calculating BLOSUM\n          subsitution matrices [Henikoff and Henikoff, Proc. Natl. Acad. Sci 89:10915,\n          1992]. Sequences are single-linkage clustered at an identity threshold (default\n          0.62; see --wid) and within each cluster of c sequences, each sequence gets relative\n          weight 1/c.wnone: No relative weights. All sequences are assigned uniform weight",
                        "ctrl": null,
                        "format": {
                            "perl": "($value ne $vdef and $value ne 'infoWgiven') ? \" --$value\" : \"\"",
                            "python": "( \"\" , ' --'+ str(value) )[ value != vdef and value != 'infoWgiven' ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "relativeWeight",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Alternative relative sequence weighting strategies",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" --wgiven $value\" : \"\"",
                            "python": "(\"\", \"--wgiven \" + str( value ))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "wgiven",
                        "paramfile": null,
                        "precond": {
                            "perl": "$relativeWeight eq 'infoWgiven'",
                            "python": "relativeWeight == 'infoWgiven'"
                        },
                        "prompt": "Personal weights in file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "MSAFile",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the identity threshold used by single-linkage clustering when using --wblosum.\n            Invalid with any other weighting scheme. Default is 0.62. Enter a value >= 0 and <= 1",
                        "ctrl": {
                            "perl": "0 <= $value and $value <= 1",
                            "python": "0 <= value and value <= 1"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" --wid $value\" : \"\"",
                            "python": "(\"\", \" --wid \" + str(value))[value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "wid",
                        "paramfile": null,
                        "precond": {
                            "perl": "$wblosum eq 'wblosum' and not $eset",
                            "python": "relativeWeight == 'wblosum' and not eset"
                        },
                        "prompt": "Set identity cutoff for BLOSUM filtering algorithm option (wid)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "After relative weights are determined, they are normalized to sum to a total effective sequence number,\neff nseq. This number may be the actual number of sequences in the alignment, but it is almost always\nsmaller than that. The default entropy weighting method (--eent) reduces the effective sequence number\nto reduce the information content (relative entropy, or average expected score on true homologs) per\nconsensus position. The target relative entropy is controlled by a two-parameter function, where the two\nparameters are settable with --ere and --esigma.--eent: Adjust effective sequence number to achieve a specific relative entropy per position\n(see --ere). This is the default.--eclust: Set effective sequence number to the number of single-linkage clusters at a specific\nidentity threshold (see --eid). This option is not recommended; it's for experiments\nevaluating how much better --eent is.--enone: Turn off effective sequence number determination and just use the actual number\nof sequences. One reason you might want to do this is to try to maximize the\nrelative entropy/position of your model, which may be useful for short models",
                        "ctrl": null,
                        "format": {
                            "perl": "($value ne $vdef and $value ne 'turnOff') ? \" $value\" : \"\"",
                            "python": "( \"\" , \" \" +str(value) )[ value != vdef and value != 'turnOff']"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "effectiveWeight",
                        "paramfile": null,
                        "precond": {
                            "perl": "not $eset",
                            "python": "not eset"
                        },
                        "prompt": "Alternate effective sequence weighting strategies",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Explicitly set the effective sequence number for all models to value",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" --eset $value\" : \"\"",
                            "python": "( \"\" , \" --eset \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "eset",
                        "paramfile": null,
                        "precond": {
                            "perl": "$effectiveWeight eq 'turnOff'",
                            "python": "effectiveWeight == 'turnOff'"
                        },
                        "prompt": "Set personal effective sequence weighting for all models to value (eset)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Set the minimum relative entropy/position target to value. Requires --eent. Default\n              depends on the sequence alphabet; for protein sequences, it is 0.59 bits/position.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" --ere $value\" : \"\"",
                            "python": "( \"\" , \" --ere \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "ere",
                        "paramfile": null,
                        "precond": {
                            "perl": "$effectiveWeight eq \"--eent\"",
                            "python": "effectiveWeight == \"--eent\""
                        },
                        "prompt": "For personal adjustment of effective sequence weighting: set minimum relative entropy/position to value (ere)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the minimum relative entropy contributed by an entire model alignment, over\n            its whole length. This has the effect of making short models have higher relative\n            entropy per position than --ere alone would give. The default is 45.0 bits.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value!=$vdef) ? \" --esigma $value\" : \"\"",
                            "python": "( \"\" , \" --esigma \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "esigma",
                        "paramfile": null,
                        "precond": {
                            "perl": "$effectiveWeight eq \"--eent\"",
                            "python": "effectiveWeight == \"--eent\""
                        },
                        "prompt": "For personal adjustment of effective sequence weighting: set sigma parameter to value (esigma)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Enter a value >= 0 and <= 1. Sets the fractional pairwise identity cutoff used \n           by single linkage clustering with the --eclust option. The default is 0.62.",
                        "ctrl": {
                            "perl": "0 <= $value <= 1",
                            "python": "0 <= value <= 1"
                        },
                        "format": {
                            "perl": "(defined $value and $value!=$vdef) ? \" --eid $value\" : \"\"",
                            "python": "( \"\" , \" --eid \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "eid",
                        "paramfile": null,
                        "precond": {
                            "perl": "$effectiveWeight eq \"--eclust\"  and not $eset",
                            "python": "effectiveWeight == \"--eclust\"  and not eset"
                        },
                        "prompt": "For single linkage clustering: set fractional identity cutoff to value (eid)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "advanced",
                "precond": null,
                "prompt": "Advanced options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Enter a value > 0. Sets the sequence length in simulation that estimates the location parameter mu\nfor MSV filter E-values. Default is 200.",
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value!=$vdef) ? \" --EmL $value\" : \"\"",
                            "python": "( \"\" , \" --EmL \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "EmL",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Lengt of sequences for MSV Gumbel mu fit (EmL)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Enter a value > 0. Sets the number of sequences in simulation that estimates the location parameter\nmu for MSV filter E-values. Default is 200.",
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value!=$vdef) ? \" --EmN $value\" : \"\"",
                            "python": "( \"\" , \" --EmN \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "EmN",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of sequences for MSV Gumbel mu fit (EmN)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Enter a value > 0. Sets the sequence length in simulation that estimates the location parameter mu\nfor Viterbi filter E-values. Default is 200.",
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value!=$vdef) ? \" --EvL $value\" : \"\"",
                            "python": "( \"\" , \" --EvL \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "EvL",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Lengt of sequences for Viterbi Gumbel mu fit (EvL)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Enter a value > 0. Sets the number of sequences in simulation that estimates the location parameter\nmu for Viterbi filter E-values. Default is 200.",
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value!=$vdef) ? \" --EvN $value\" : \"\"",
                            "python": "( \"\" , \" --EvN \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "EvN",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of sequences for Viterbi Gumbel mu fit (EvN)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Enter a value > 0. Sets the sequence length in simulation that estimates the location parameter tau\nfor Forward E-values. Default is 100.",
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value!=$vdef) ? \" --EfL $value\" : \"\"",
                            "python": "( \"\" , \" --EfL \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "EfL",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Lengt of sequences for Forward exp tail tau fit (EfL)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Enter a value > 0. Sets the number of sequences in simulation that estimates the location parameter\ntau for Forward E-values. Default is 200.",
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value!=$vdef) ? \" --EfN $value\" : \"\"",
                            "python": "( \"\" , \" --EfN \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "EfN",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of sequences for Forward exp tail tau fit (EfN)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Enter a value > 0 and < 1. Sets the tail mass fraction to fit in the simulation that estimates the location parameter\ntau for Forward evalues. Default is 0.04.",
                        "ctrl": {
                            "perl": "$value > 0 and $value < 1",
                            "python": "value > 0 and value < 1"
                        },
                        "format": {
                            "perl": "(defined $value and $value!=$vdef) ? \" --Eft $value\" : \"\"",
                            "python": "( \"\" , \" --Eft \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Eft",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Tail mass for Forward exponential tail tau fit (Eft)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "The location parameters for the expected score distributions for MSV filter scores, \n        Viterbi filter scores, and Forward scores require three short random sequence simulations.",
                "name": "ECalibration",
                "precond": null,
                "prompt": "Control of E-value calibration"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Seed the random number generator with the value, an integer >= 0. If the value is nonzero,\n            any stochastic simulations will be reproducible; the same command will give the\n            same results. If the number is 0, the random number generator is seeded arbitrarily, and\n            stochastic simulations will vary from run to run of the same command. The default\n            seed is 42.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" --seed $value\" : \"\"",
                            "python": "( \"\" , \" --seed \" + str(value))[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "seed",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Set random number seed  (seed)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" --laplace\" : \"\"",
                            "python": "( \"\" , \" --laplace \" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "laplace",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Use a Laplace +1 prior",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "other",
                "precond": null,
                "prompt": "Other options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "hmmbuild",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "*.hmm",
                    "python": "\"*.hmm\""
                },
                "hidden": false,
                "main": false,
                "name": "hmmfile_res",
                "output_type": "file",
                "precond": null,
                "prompt": "Hmm profile",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "HmmProfile",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": [
                        "HMMER3"
                    ]
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "$re_save",
                    "python": "re_save"
                },
                "hidden": false,
                "main": false,
                "name": "re_save_file",
                "output_type": "file",
                "precond": null,
                "prompt": "Alignment file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Alignment",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "STOCKHOLM"
                    ]
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [],
    "source_links": [],
    "title": "HMMBUILD",
    "type": "program",
    "version": null
}