{
    "authors": "Kevin Howe, Alex Bateman, Richard Durbin",
    "classifications": [
        {
            "classification": "phylogeny:distance",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": "quicktree"
    },
    "comment": "QuickTree is an efficient implementation of\n\t  the Neighbor-Joining algorithm, capable of reconstructing\n\t  phylogenies from huge alignments in time less than the age of\n\t  the universe.",
    "description": "Rapid reconstruction of phylogenies by the Neighbor-Joining method",
    "documentation_links": [],
    "env": [],
    "homepage_links": [
        "http://www.sanger.ac.uk/Software/analysis/quicktree/"
    ],
    "inputs": {
        "children": [
            {
                "children": [
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "not $distfile",
                            "python": "distfile is None"
                        },
                        "format": {
                            "perl": "(defined $value) ? \" -in a $value\" : \"\"",
                            "python": "( \"\" , \" -in a \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "aligfile",
                        "paramfile": null,
                        "precond": {
                            "perl": "not defined $distfile or (defined $aligfile and defined $distfile)",
                            "python": "distfile is None or (distfile and aligfile)"
                        },
                        "prompt": "Alignment file (-in a)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Alignment",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": [
                                "STOCKHOLM"
                            ]
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": "Give a file containing a distance matrix\n      obtained by distance matrix programs like prodist or\n      dnadist, ...",
                        "ctrl": {
                            "perl": "not defined $aligfile",
                            "python": "aligfile is None"
                        },
                        "format": {
                            "perl": "(defined $value) ? \" -in m $value\" : \"\"",
                            "python": "( \"\" , \" -in m \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "distfile",
                        "paramfile": null,
                        "precond": {
                            "perl": "not defined $aligfile",
                            "python": "aligfile is None"
                        },
                        "prompt": "or Distance matrix (-in m)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "PhylipDistanceMatrix",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "You must enter either a distance matrix or a alignment.",
                "name": "inpufile",
                "precond": null,
                "prompt": "Input file"
            },
            {
                "argpos": "3",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "(defined $value and $value ne $vdef) ? \" -out $value\" : \"\"",
                    "python": "( \"\" , \" -out \" + str(value) )[ value is not None and value != vdef]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "out",
                "paramfile": null,
                "precond": null,
                "prompt": "Output (-out)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": "3",
                        "command": false,
                        "comment": "Bootstrapping is not available for a matrix output",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -upgma\" : \"\"",
                            "python": "( \"\" , \" -upgma\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "upgma",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Use the UPGMA method to construct the tree (-upgma)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "treeopt",
                "precond": {
                    "perl": "$out ne \"m\"",
                    "python": "out != \"m\""
                },
                "prompt": "Tree output options"
            },
            {
                "children": [
                    {
                        "argpos": "3",
                        "command": false,
                        "comment": "Bootstrapping is not available for a matrix output",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -boot $value\" : \"\"",
                            "python": "( \"\" , \" -boot \" + str(value))[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "boot",
                        "paramfile": null,
                        "precond": {
                            "perl": "not defined $distfile and $out ne \"m\"",
                            "python": "distfile is None and out != \"m\""
                        },
                        "prompt": "Calculate bootstrap values with n iterations (-boot)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "3",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -kimura\" : \"\"",
                            "python": "( \"\" , \" -kimura\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "kimura",
                        "paramfile": null,
                        "precond": {
                            "perl": "defined $aligfile",
                            "python": "aligfile is not None"
                        },
                        "prompt": "Use the kimura translation for pairwise distances (-kimura)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "aligopt",
                "precond": null,
                "prompt": "Alignment options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "quicktree",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"quicktree.out\"",
                    "python": "\"quicktree.out\""
                },
                "hidden": false,
                "main": false,
                "name": "treefile",
                "output_type": "stdout",
                "precond": {
                    "perl": "$out ne \"m\"",
                    "python": "out != \"m\""
                },
                "prompt": "Tree file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Tree",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "NEWICK"
                    ]
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"quicktree.out\"",
                    "python": "\"quicktree.out\""
                },
                "hidden": false,
                "main": false,
                "name": "distoutfile",
                "output_type": "stdout",
                "precond": {
                    "perl": "$out eq \"m\"",
                    "python": "out == \"m\""
                },
                "prompt": "Distance matrix",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "PhylipDistanceMatrix",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "Kevin Howe, Alex Bateman and Richard Durbin (2002).\n\tQuickTree: building huge Neighbour-Joining trees of protein\n\tsequences. Bioinformatics 18(11):1546-1547.",
            "url": null
        }
    ],
    "source_links": [
        "http://www.sanger.ac.uk/Software/analysis/quicktree/"
    ],
    "title": "QuickTree",
    "type": "program",
    "version": "1.1"
}