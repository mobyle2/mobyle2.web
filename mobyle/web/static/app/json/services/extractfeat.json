{
    "authors": null,
    "classifications": [
        {
            "classification": "sequence:edit:feature_table",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": "extractfeat"
    },
    "comment": null,
    "description": "Extract features from sequence(s)",
    "documentation_links": [
        "http://bioweb2.pasteur.fr/docs/EMBOSS/extractfeat.html",
        "http://emboss.sourceforge.net/docs/themes"
    ],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -sequence=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "e_sequence",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "sequence option",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": "1,n",
                            "datatype": {
                                "class": "Sequence",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": [
                                "EMBL",
                                "FASTA",
                                "GCG",
                                "GENBANK",
                                "NBRF",
                                "PIR",
                                "RAW",
                                "SWISSPROT",
                                "GFF"
                            ]
                        }
                    }
                ],
                "comment": null,
                "name": "e_input",
                "precond": null,
                "prompt": "Input section"
            },
            {
                "children": [
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": "If this value is greater than 0 then that number of bases or residues before the feature are included in the extracted  sequence. This allows you to get the context of the feature. If  this value is negative then the start of the extracted sequence  will be this number of bases/residues before the end of the  feature. So a value of '10' will start the extraction 10  bases/residues before the start of the sequence, and a value of  '-10' will start the extraction 10 bases/residues before the end  of the feature. The output sequence will be padded with 'N' or 'X'  characters if the sequence starts after the required start of the  extraction.",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -before=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_before",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Amount of sequence before feature to extract",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "3",
                        "command": false,
                        "comment": "If this value is greater than 0 then that number of bases or residues after the feature are included in the extracted  sequence. This allows you to get the context of the feature. If  this value is negative then the end of the extracted sequence will  be this number of bases/residues after the start of the feature.  So a value of '10' will end the extraction 10 bases/residues after  the end of the sequence, and a value of '-10' will end the  extraction 10 bases/residues after the start of the feature. The  output sequence will be padded with 'N' or 'X' characters if the  sequence ends before the required end of the extraction.",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -after=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_after",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Amount of sequence after feature to extract",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "4",
                        "command": false,
                        "comment": "By default any feature source in the feature table is shown. You can set this to match any feature source you wish to  show. \n  The source name is usually either the name of the program that  detected the feature or it is the feature table (eg: EMBL) that  the feature came from. \n  The source may be wildcarded by using '*'. \n  If you wish to show more than one source, separate their names  with the character '|', eg: \n  gene* | embl",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -source=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_source",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Source of feature to display",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "5",
                        "command": false,
                        "comment": "By default every feature in the feature table is extracted. You can set this to be any feature type you wish to extract. \n  See http://www.ebi.ac.uk/embl/WebFeat/ for a list of the EMBL  feature types and see the Uniprot user manual in  http://www.uniprot.org/manual/sequence_annotation  for a list of the Uniprot feature types. \n  The type may be wildcarded by using '*'. \n  If you wish to extract more than one type, separate their names  with the character '|', eg: \n  *UTR | intron",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -type=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_type",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Type of feature to extract",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "6",
                        "command": false,
                        "comment": "By default any feature type in the feature table is extracted. You can set this to match any feature sense you wish. 0  - any sense, 1 - forward sense, -1 - reverse sense",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -sense=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_sense",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Sense of feature to extract",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "7",
                        "command": false,
                        "comment": "Minimum score of feature to extract (see also maxscore)",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -minscore=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_minscore",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Minimum score of feature to extract",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "8",
                        "command": false,
                        "comment": "Maximum score of feature to extract. \n If both minscore and maxscore are zero (the default),  then any score is ignored",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -maxscore=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_maxscore",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximum score of feature to extract",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "9",
                        "command": false,
                        "comment": "Tags are the types of extra values that a feature may have. For example in the EMBL feature table, a 'CDS' type of feature  may have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number', '/evidence', '/exception', '/function', '/gene',  '/label', '/map', '/note', '/number', '/partial', '/product',  '/protein_id', '/pseudo', '/standard_name', '/translation',  '/transl_except', '/transl_table', or '/usedin'. Some of these  tags also have values, for example '/gene' can have the value of  the gene name. \n  By default any feature tag in the feature table is extracted. You  can set this to match any feature tag you wish to show. \n  The tag may be wildcarded by using '*'. \n  If you wish to extract more than one tag, separate their names  with the character '|', eg: \n  gene | label",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -tag=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_tag",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Tag of feature to extract",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": "Tag values are the values associated with a feature tag. Tags are the types of extra values that a feature may have. For  example in the EMBL feature table, a 'CDS' type of feature may  have the tags '/codon', '/codon_start', '/db_xref', '/EC_number',  '/evidence', '/exception', '/function', '/gene', '/label', '/map',  '/note', '/number', '/partial', '/product', '/protein_id',  '/pseudo', '/standard_name', '/translation', '/transl_except',  '/transl_table', or '/usedin'. Only some of these tags can have  values, for example '/gene' can have the value of the gene name.  By default any feature tag value in the feature table is shown.  You can set this to match any feature tag value you wish to show. \n  The tag value may be wildcarded by using '*'. \n  If you wish to show more than one tag value, separate their names  with a space or the character '|', eg: \n  pax* | 10",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -value=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_value",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Value of feature tags to extract",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "e_additional",
                "precond": null,
                "prompt": "Additional section"
            },
            {
                "children": [
                    {
                        "argpos": "11",
                        "command": false,
                        "comment": "Some features, such as CDS (coding sequence) and mRNA are composed of introns concatenated together. There may be other  forms of 'joined' sequence, depending on the feature table. If  this option is set TRUE, then any group of these features will be  output as a single sequence. If the 'before' and 'after'  qualifiers have been set, then only the sequence before the first  feature and after the last feature are added.",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -join\")[ bool(value) ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_join",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Output introns etc. as one sequence",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "12",
                        "command": false,
                        "comment": "To aid you in identifying the type of feature that has been output, the type of feature is added to the start of the  description of the output sequence. Sometimes the description of a  sequence is lost in subsequent processing of the sequences file,  so it is useful for the type to be a part of the sequence ID name.  If you set this to be TRUE then the name is added to the ID name  of the output sequence.",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -featinname\")[ bool(value) ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_featinname",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Append type of feature to output sequence name",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "13",
                        "command": false,
                        "comment": "To aid you in identifying some further properties of a feature that has been output, this lets you specify one or more  tag names that should be added to the output sequence Description  text, together with their values (if any). For example, if this is  set to be 'gene', then if any output feature has the tag (for  example) '/gene=BRCA1' associated with it, then the text  '(gene=BRCA1)' will be added to the Description line. Tags are the  types of extra values that a feature may have. For example in the  EMBL feature table, a 'CDS' type of feature may have the tags  '/codon', '/codon_start', '/db_xref', '/EC_number', '/evidence',  '/exception', '/function', '/gene', '/label', '/map', '/note',  '/number', '/partial', '/product', '/protein_id', '/pseudo',  '/standard_name', '/translation', '/transl_except',  '/transl_table', or '/usedin'. Some of these tags also have  values, for example '/gene' can have the value of the gene name. \n  By default no feature tag is displayed. You can set this to match  any feature tag you wish to show. \n  The tag may be wildcarded by using '*'. \n  If you wish to extract more than one tag, separate their names  with the character '|', eg: \n  gene | label",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -describe=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_describe",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Feature tag names to add to the description",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "14",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "python": "(\"\" , \" -outseq=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_outseq",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Name of the output sequence file (e_outseq)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "15",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -osformat=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_osformat_outseq",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Choose the sequence output format",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "e_output",
                "precond": null,
                "prompt": "Output section"
            },
            {
                "argpos": "16",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "python": "\" -auto -stdout\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "auto",
                "paramfile": null,
                "precond": null,
                "prompt": "Turn off any prompting",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "extractfeat",
    "outputs": {
        "children": [
            {
                "children": [
                    {
                        "comment": null,
                        "filenames": {
                            "python": "e_outseq"
                        },
                        "hidden": false,
                        "main": false,
                        "name": "e_outseq_out",
                        "output_type": "file",
                        "precond": null,
                        "prompt": "outseq_out option",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Sequence",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": [
                                {
                                    "#children": [],
                                    "#tag": "ref",
                                    "@param": "e_osformat_outseq"
                                }
                            ]
                        }
                    }
                ],
                "comment": null,
                "name": "e_output",
                "precond": null,
                "prompt": "Output section"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [],
    "source_links": [],
    "title": "extractfeat",
    "type": "program",
    "version": null
}