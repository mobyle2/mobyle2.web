{
    "authors": "Hofacker",
    "classifications": [
        {
            "classification": "sequence:nucleic:2D_structure",
            "type": "mobyle1"
        },
        {
            "classification": "structure:2D_structure",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": "RNAinverse searches for sequences  folding  into  a  predefined  structure,  thereby inverting  the folding algorithm. Target structures (in bracket notation) and starting sequences for the search are read alternately from  file.",
    "description": "Find RNA sequences with given secondary structure",
    "documentation_links": [],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": null,
                "command": true,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"RNAinverse\"",
                    "python": "\"RNAinverse\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "rnainverse",
                "paramfile": null,
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "1000",
                "command": false,
                "comment": "Target structures and starting sequences for the search.",
                "ctrl": null,
                "format": {
                    "perl": "\" < $value\"",
                    "python": "\" < \" + str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "seq",
                "paramfile": null,
                "precond": null,
                "prompt": "Structures File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [
                        "RNA"
                    ],
                    "card": null,
                    "datatype": {
                        "class": "RNAStructure",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Use  minimum  energy  (-Fm), partition function folding (-Fp) or both (-Fmp). In  partition  function  mode,  the  probability  of  the  target   structure exp(-E(S)/kT)/Q  is  maximized. This probability is written in brackets after the found sequence and Hamming distance. In most cases you'll want to use the -f option in conjunction with -Fp, see below. The default is -Fm.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef)? \" -F$value\" : \"\"",
                            "python": "(\"\", \" -F\" + str(value))[ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "folding",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Folding method (-F)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "In combination with -FpF=-kT*ln(Q)",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -f $value\" : \"\"",
                            "python": "(\"\", \" -f \" + str(value))[ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "final",
                        "paramfile": null,
                        "precond": {
                            "perl": "$folding eq 'mp' or $folding eq 'p'",
                            "python": "folding == 'mp' or folding == 'p'"
                        },
                        "prompt": "Stop search when sequence is found with E(s)-F smaller than this value (-f)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Search repeatedly for the same structure. If repeats is negative search until -repeats  exact  solutions  are  found,  no  output  is done for unsuccessful searches. Be aware, that the program will not terminate if the target  structure can not be found.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -R $value\" : \"\"",
                            "python": "(\"\", \" -R \" + str(value))[ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "repeats",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Search repeatedly for the same structure (-R)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -a $value\" : \"\"",
                            "python": "(\"\", \" -a \" + str(value))[ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "alphabet",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Find sequences using only bases from this alphabet (-a)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "control",
                "precond": null,
                "prompt": "Control options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -T $value\" : \"\"",
                            "python": "( \"\" , \" -T \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "temperature",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Rescale energy parameters to a temperature of temperature Celcius (-T)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -4\" : \"\"",
                            "python": "( \"\" , \" -4\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "tetraloops",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Do not include special stabilizing energies for certain tetraloops (-4)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "How to treat 'dangling end' energies for bases adjacent to helices in free ends and multiloops: Normally only unpaired bases can participate in at most one dangling end. With -d2 this check is ignored, this is the default for partition function folding (-p). -d ignores dangling ends altogether. Note that by default pf and mfe folding treat dangling ends differently, use -d2 (or -d) in addition to -p to ensure that both algorithms use the same energy model. The -d2 options is available for RNAfold, RNAeval, and RNAinverse only.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\"",
                            "python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "dangling",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "How to treat dangling end energies for bases adjacent to helices in free ends and multiloops (-d)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -noGU\" : \"\"",
                            "python": "( \"\" , \" -noGU\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "noGU",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Do not allow GU pairs (-noGU)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -noCloseGU\" : \"\"",
                            "python": "( \"\" , \" -noCloseGU\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "noCloseGU",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Do not allow GU pairs at the end of helices (-noCloseGU)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Allow other pairs in addition to the usual AU,GC,and GU pairs. pairs is a comma seperated list of additionally allowed pairs. If a the first character is a '-' then AB will imply that AB and BA are allowed pairs. e.g. RNAfold -nsp -GA will allow GA and AG pairs. Nonstandard pairs are given 0 stacking energy.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -nsp $value\" : \"\"",
                            "python": "( \"\"  , \" -nsp \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "nsp",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Non standard pairs (comma seperated list) (-nsp)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Read energy parameters from paramfile, instead of using the default parameter set. A sample parameterfile should accompany your distribution. See the RNAlib documentation for details on the file format.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -P $value\" : \"\"",
                            "python": "( \"\" , \" -P \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "parameter",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Parameter file (-P)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "EnergyParameterFile",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "others_options",
                "precond": null,
                "prompt": "Other options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "rnainverse",
    "outputs": {
        "children": [],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "I.L. Hofacker, W. Fontana, P.F. Stadler, S. Bonhoeffer, M. Tacker, P. Schuster (1994) Fast Folding and Comparison of RNA Secondary Structures. Monatshefte f. Chemie 125: 167-188",
            "url": null
        },
        {
            "doi": null,
            "label": "A. Walter, D Turner, J Kim, M Lyttle, P Muller, D Mathews, M Zuker Coaxial stacking of helices enhances binding of oligoribonucleotides. PNAS, 91, pp 9218-9222, 1994",
            "url": null
        },
        {
            "doi": null,
            "label": "M. Zuker, P. Stiegler (1981) Optimal computer folding of large RNA sequences using thermodynamic and auxiliary information, Nucl Acid Res 9: 133-148",
            "url": null
        },
        {
            "doi": null,
            "label": "J.S. McCaskill (1990) The equilibrium partition function and base pair binding probabilities for RNA secondary structures, Biopolymers 29: 11051119 D.H. Turner N. Sugimoto and S.M. Freier (1988) RNA structure prediction, Ann Rev Biophys Biophys Chem 17: 167-192",
            "url": null
        },
        {
            "doi": null,
            "label": "D. Adams (1979) The hitchhiker's guide to the galaxy, Pan Books, London",
            "url": null
        }
    ],
    "source_links": [],
    "title": "RNAinverse",
    "type": "program",
    "version": null
}