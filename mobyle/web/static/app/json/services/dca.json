{
    "authors": "J. Stoye",
    "classifications": [
        {
            "classification": "alignment:multiple",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": "dca"
    },
    "comment": "Divide-and-Conquer Multiple Sequence Alignment  (DCA) is a program for producing fast, high quality simultaneous multiple sequence alignments of amino acid, RNA, or DNA sequences. The program is based on the DCA algorithm, a heuristic approach to sum-of-pairs (SP) optimal alignment that has been developed at the FSPM  over the years 1995-97.",
    "description": "Divide-and-Conquer Multiple Sequence Alignment",
    "documentation_links": [],
    "env": [],
    "homepage_links": [
        "http://bibiserv.techfak.uni-bielefeld.de/dca/"
    ],
    "inputs": {
        "children": [
            {
                "argpos": "100",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \"+str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "seq",
                "paramfile": null,
                "precond": null,
                "prompt": "Sequences File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "FASTA"
                    ]
                }
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef)? \" -c $value\" : \"\"",
                            "python": "( \"\"  , \" -c \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "cost",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Cost matrix (-c)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Default: free shift",
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -g \":\"\"",
                            "python": "(\"\" , \" -g \")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gaps",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Penalize end gaps as internal gaps (-g)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "On: FastDCA (use approximate cut positions); Off: slower, more accurate algorithm (search for exact cut positions)",
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -a\":\"\"",
                            "python": "(\"\" , \" -a\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "approximate",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Use approximate cut positions (-a)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$intensity >= 0.0 and $intensity <= 1.0",
                            "python": "intensity >= 0.0 and intensity <= 1.0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -b $value\" : \"\"",
                            "python": "( \"\"  , \" -b \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "intensity",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Weight intensity (-b)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "5 ... 100 recommended; small: faster algorithm, maybe worse.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -l $value\" : \"\"",
                            "python": "( \"\"  , \" -l \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "recursion",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Recursion stop size (-l)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "To correct the alignment in the proximity of division sites, the sequences can be re-aligned inside a window of size w >= 0 placed across each slicing site.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and  $value != $vdef)? \" -w $value\" : \"\"",
                            "python": "( \"\"  , \" -w \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "window",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Window size (-w)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "control",
                "precond": null,
                "prompt": "Control parameters"
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\" -q\"",
                            "python": "\" -q\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "quiet",
                        "paramfile": null,
                        "precond": null,
                        "prompt": null,
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef)? \" -f $value\" : \"\"",
                            "python": "( \"\"  , \" -f \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "output_format",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Output format (-f)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\" -o\"",
                            "python": "\" -o\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "suppress_output",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Suppress output about progress of the program (-o)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output",
                "precond": null,
                "prompt": "Output parameters"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "dca",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"dca.out\"",
                    "python": "\"dca.out\""
                },
                "hidden": false,
                "main": false,
                "name": "fasta_outfile",
                "output_type": "stdout",
                "precond": {
                    "perl": "$output_format eq \"2\" or $output_format eq \"3\"",
                    "python": "output_format == \"2\" or output_format == \"3\""
                },
                "prompt": "Alignment file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Alignment",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        {
                            "#children": [
                                "FASTA"
                            ],
                            "#tag": "test",
                            "@eq": "2",
                            "@param": "output_format"
                        }
                    ]
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"dca.out\"",
                    "python": "\"dca.out\""
                },
                "hidden": false,
                "main": false,
                "name": "aln_outfile",
                "output_type": "stdout",
                "precond": {
                    "perl": "$output_format eq \"1\" or $output_format eq \"4\"",
                    "python": "output_format == \"1\" or output_format == \"4\""
                },
                "prompt": "DCA alignment file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Dcalignment",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": [
                        {
                            "#children": [
                                "CLUSTAL"
                            ],
                            "#tag": "test",
                            "@eq": "1",
                            "@param": "output_format"
                        }
                    ]
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "A.W.M. Dress, G. Fullen, S.W. Perrey, A Divide and Conquer Approach to Multiple Alignment, Proceedings of the Third International Conference on Intelligent Systems for Molecular Biology (ISMB 95), AAAI Press, Menlo Park, CA, USA, 107-113, 1995.",
            "url": null
        },
        {
            "doi": null,
            "label": "J. Stoye, Multiple Sequence Alignment with the Divide-and-Conquer Method, Gene 211(2), GC45-GC56, 1998. (Gene-COMBIS)",
            "url": null
        }
    ],
    "source_links": [
        "http://bibiserv.techfak.uni-bielefeld.de/download/tools/dca.html"
    ],
    "title": "DCA",
    "type": "program",
    "version": "1.1"
}