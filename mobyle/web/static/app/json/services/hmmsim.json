{
    "authors": null,
    "classifications": [
        {
            "classification": "hmm:simulation",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": "hmmsim"
    },
    "comment": null,
    "description": "Collect profile HMM score distributions on random sequences",
    "documentation_links": [],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": "30",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \"+str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "hmmfile",
                "paramfile": null,
                "precond": null,
                "prompt": "HMM file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "HmmProfile",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Collect expected Viterbi alignment length statistics from each simulated sequence.\n            This only works with Viterbi scores (the default; see --vit). Two additional fields are\n            printed in the output table for each model: the mean length of Viterbi alignments,\n            and the standard deviation.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -a\" : \"\"",
                            "python": "( \"\" , \" -a\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "aln",
                        "paramfile": null,
                        "precond": {
                            "perl": "$altSco eq '--vit'",
                            "python": "altSco == '--vit'"
                        },
                        "prompt": "Obtain alignment length statistics (-a)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -v\" : \"\"",
                            "python": "( \"\" , \" -v\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "verbose",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Verbose: print scores (-v)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef ) ? \" -L $value\" : \"\"",
                            "python": "( \"\" , \" -L \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Length",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Length of random target sequences (-L)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -N $value\" : \"\"",
                            "python": "( \"\" , \" -N \" + str(value) )[ value is not None and value !=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "number",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of random target sequences (-N)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "generalOptions",
                "precond": null,
                "prompt": "General options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "H3 only uses multihit local alignment ( --fs mode), and this is where we believe the statistical fits. Unihit\n            local alignment scores (Smith/Waterman; --sw mode) also obey our statistical conjectures. Glocal alignment\n            statistics (either multihit or unihit) are still not adequately understood nor adequately fitted.fs: Collect multihit local alignment scores. This is the default. 'fs comes from HMMER2'\n            s historical terminology for multihit local alignment as 'fragment search mode'.sw: Collect unihit local alignment scores. The H3 J state is disabled. 'sw' comes from\n            HMMER2's historical terminology for unihit local alignment as 'Smith/Waterman search mode'.ls Collect multihit glocal alignment scores. In glocal (global/local) alignment, the entire\n            model must align, to a subsequence of the target. The H3 local entry/exit transition\n            probabilities are disabled. 'ls' comes from HMMER2's historical terminology\n            for multihit local alignment as 'local search mode'.s: Collect unihit glocal alignment scores. Both the H3 J state and local entry/exit transition\n            probabilities are disabled. 's' comes from HMMER2's historical terminology\n            for unihit glocal alignment.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\"",
                            "python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "altAln",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Alternative alignment styles",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "vit: Collect Viterbi maximum likelihood alignment scores. This is the default.fwd: Collect Forward log-odds likelihood scores, summed over alignment ensemble.hyb: Collect 'Hybrid' scores, as described in papers by Yu and Hwa (for instance, Bioinformatics\n            18:864, 2002). These involve calculating a Forward matrix and taking the\n            maximum cell value. The number itself is statistically somewhat unmotivated, but\n            the distribution is expected be a well-behaved extreme value distribution (Gumbel).msv: Collect MSV (multiple ungapped segment Viterbi) scores, using H3's main acceleration\n            heuristic.fast: For any of the above options, use H3's optimized production implementation (using\n            SIMD vectorization). The default is to use the 'generic' implementation (slow and\n            non-vectorized). The optimized implementations sacrifice a small amount of numerical\n            precision. This can introduce confounding noise into statistical simulations\n            and fits, so when one gets super-concerned about exact details, it's better to be\n            able to factor that source of noise out.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"  $value\" : \"\"",
                            "python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "altSco",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Option controlling scoring algorithm",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "AdvancedOptions",
                "precond": null,
                "prompt": "Advanced options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Set the lower bound on the tail mass distribution. (The default is 0.02 for the default\n            single tail mass.)",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" --tmin $value\" : \"\"",
                            "python": "( \"\" , \" --tmin \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "tmin",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Set lower bound tail mass for fwd,island (--tmin)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Set the upper bound on the tail mass distribution. (The default is 0.02 for the default\n            single tail mass.)",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" --tmax $value\" : \"\"",
                            "python": "( \"\" , \" --tmax \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "tmax",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Set upper bound tail mass for fwd,island (--tmax)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Set the number of tail masses to sample, starting from --tmin and ending at --tmax.\n            The default is 1, for the default 0.02 single tail mass.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" --tpoints $value\" : \"\"",
                            "python": "( \"\" , \" --tpoints \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "tpoints",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Set number of tail probs to try (--tpoints)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sample a range of tail masses with uniform linear spacing. The default is to use\n            uniform logarithmic spacing.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" --tlinear\" : \"\"",
                            "python": "( \"\" , \" --tlinear\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "tlinear",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Use linear not log spacing of tail probs (--tlinear)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "controlMasse",
                "precond": null,
                "prompt": "Controlling range of fitted tail masses"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the sequence length in simulation that estimates the location parameter mu\n         for MSV E-values. Default is 200. Enter a value > 0.",
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value!=$vdef) ? \" --EmL $value\" : \"\"",
                            "python": "( \"\" , \" --EmL \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "EmL",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Lengt of sequences for MSV Gumbel mu fit (EmL)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the number of sequences in simulation that estimates the location parameter\n              mu for MSV E-values. Default is 200. Enter a value > 0.",
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value!=$vdef) ? \" --EmN $value\" : \"\"",
                            "python": "( \"\" , \" --EmN \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "EmN",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of sequences for MSV Gumbel mu fit (EmN)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the sequence length in simulation that estimates the location parameter mu\n            for Viterbi E-values. Default is 200. Enter a value > 0",
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value!=$vdef) ? \" --EvL $value\" : \"\"",
                            "python": "( \"\" , \" --EvL \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "EvL",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Lengt of sequences for Viterbi Gumbel mu fit (EvL)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the number of sequences in simulation that estimates the location parameter\n          mu for Viterbi E-values. Default is 200. Enter a value > 0.",
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" --EvN $value\" : \"\"",
                            "python": "( \"\" , \" --EvN \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "EvN",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of sequences for Viterbi Gumbel mu fit (EvN)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the sequence length in simulation that estimates the location parameter tau\n          for Forward E-values. Default is 100. Enter a value > 0",
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" --EfL $value\" : \"\"",
                            "python": "( \"\" , \" --EfL \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "EfL",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Lengt of sequences for Forward exp tail tau fit (EfL)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the number of sequences in simulation that estimates the location parameter\n            tau for Forward E-values. Default is 200. Enter a value > 0",
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" --EfN $value\" : \"\"",
                            "python": "( \"\" , \" --EfN \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "EfN",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of sequences for Forward exp tail tau fit (EfN)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Sets the tail mass fraction to fit in the simulation that estimates the location parameter\n            tau for Forward evalues. Default is 0.04. Enter a value > 0 and < 1",
                        "ctrl": {
                            "perl": "$value > 0 and $value < 1",
                            "python": "value > 0 and value < 1"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" --Eft $value\" : \"\"",
                            "python": "( \"\" , \" --Eft \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Eft",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Tail mass for Forward exponential tail tau fit (Eft)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "H3 uses three short random sequence simulations to estimating the location parameters \n        for the expected score distributions for MSV scores, Viterbi scores, and Forward scores. These options \n        allow these simulations to be modified.",
                "name": "ECalibration",
                "precond": null,
                "prompt": "Options controlling h3 parameter estimation methods"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "For debugging the MPI master/worker version: pause after start, to enable the\n            developer to attach debuggers to the running master and worker(s) processes.\n            Send SIGCONT signal to release the pause. (Under gdb: (gdb) signal SIGCONT)\n            (Only available if optional MPI support was enabled at compile-time.)",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" --stall\" : \"\"",
                            "python": "( \"\" , \" --stall\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "stall",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Arrest after start: for debugging MPI under gdb (--stall)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Set the random number seed. The default is 0, which makes the random\n            number generator use an arbitrary seed, so that different runs of hmmsim will\n            almost certainly generate a different statistical sample. For debugging, it is useful\n            to force reproducible results, by fixing a random number seed.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" --seed $value\" : \"\"",
                            "python": "( \"\" , \" --seed \" + str(value))[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "seed",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Set random number seed  (--seed)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "debugg",
                "precond": null,
                "prompt": "Debugging options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Set the background residue distribution to a uniform distribution, both for purposes\n            of the null model used in calculating scores, and for generating the random sequences.\n            The default is to use a standard amino acid background frequency distribution.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" --bgflat\" : \"\"",
                            "python": "( \"\" , \" --bgflat\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "bgflat",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Set uniform background frequencies (--bgflat)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Set the background residue distribution to the mean composition of the profile. This\n            was used in exploring some of the effects of biased composition.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" --bgcomp\" : \"\"",
                            "python": "( \"\" , \" --bgcomp\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "bgcomp",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Set bg frequencies to model's average composition (--bgcomp)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Turn the H3 target sequence length model off. Set the self-transitions for N,C,J\n            and the null model to 350/351 instead; this emulates HMMER2. Not a good idea\n            in general. This was used to demonstrate one of the main H2 vs. H3 differences.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" --x-no-lengthmode\" : \"\"",
                            "python": "( \"\" , \" --x-no-lengthmode \" )[value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "lengthmode",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Turn the H3 length model off (--x-no-lengthmode)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Set the nu parameter for the MSV algorithm -- the expected number of ungapped\n          local alignments per target sequence. The default is 2.0, corresponding to a E->J transition probability of 0.5. This was used to test whether varying nu has\n          significant effect on result (it doesn't seem to, within reason). This option only\n          works if --msv is selected (it only affects MSV), and it will not work with --fast\n          (because the optimized implementations are hardwired to assume nu=2.0).",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" --nu $value\" : \"\"",
                            "python": "( \"\" , \" --nu \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "nu",
                        "paramfile": null,
                        "precond": {
                            "perl": "$altSco eq '--msv'",
                            "python": "altSco == '--msv'"
                        },
                        "prompt": "Set nu parameter (expected HSPs) for GMSV (--nu)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Set the filter P-value threshold to use in generating filter power files with --ffile. The\n            default is 0.02 (which would be appropriate for testing MSV scores, since this is\n            the default MSV filter threshold in H3's acceleration pipeline.) Other appropriate\n            choices (matching defaults in the acceleration pipeline) would be 0.001 for Viterbi,\n            and 1e-5 for Forward.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" --pthresh $value\" : \"\"",
                            "python": "( \"\" , \" --pthresh \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "pthresh",
                        "paramfile": null,
                        "precond": {
                            "perl": "defined $ffile",
                            "python": "ffile is not None"
                        },
                        "prompt": "Set  P-value threshold for --ffile (--pthresh)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "These options were used in a small variety of different exploratory experiments.",
                "name": "expert",
                "precond": null,
                "prompt": "Experiments options"
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -o $value\" : \"\"",
                            "python": "( \"\" , \" -o \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "save",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Direct summary output to file, not stdout. (-o)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "When collecting Viterbi alignment statistics (the -a option), for each sampled sequence,\n            output two fields per line to a file: the length of the optimal alignment,\n            and the Viterbi bit score. Requires that the -a option is also used.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" --afile $value\" : \"\"",
                            "python": "( \"\" , \" --afile \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "afile",
                        "paramfile": null,
                        "precond": {
                            "perl": "$aln and $altSco eq '--vit'",
                            "python": "aln and altSco == '--vit'"
                        },
                        "prompt": "Output alignment lengths to file (--afile)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Output a rank versus. E-value plot in XMGRACE xy format to file. The x-axis is the\n            rank of this sequence, from highest score to lowest; the y-axis is the E-value calculated\n            for this sequence. E-values are calculated using H3's default procedures (i.e.\n            the 'pmu, plambda' parameters in the output table). You expect a rough match\n            between rank and E-value if E-values are accurately estimated.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" --efile $value\" : \"\"",
                            "python": "( \"\" , \" --efile \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "efile",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Output E vs. E plots to file in xy format (--efile)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Output a 'filter power' file: for each model, a line with three fields: model\n            name, number of sequences passing the P-value threshold, and fraction of sequences\n            passing the P-value threshold. See --pthresh for setting the P-value\n            threshold, which defaults to 0.02 (the default MSV filter threshold in H3). The\n            P-values are as determined by H3's default procedures (the 'pmu,plambda' parameters\n            in the output table). If all is well, you expect to see filter power equal to\n            the predicted P-value setting of the threshold.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" --ffile $value\" : \"\"",
                            "python": "( \"\" , \" --ffile \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "ffile",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Output filter fraction: sequences passing P thresh (--ffile)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Output cumulative survival plots (P(S>x)) to file in XMGRACE xy format.\n            There are three plots: (1) the observed score distribution; (2) the maximum likelihood\n            fitted distribution; (3) a maximum likelihood fit to the location parameter\n            (mu/tau) while assuming lambda=log 2.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" --pfile $value\" : \"\"",
                            "python": "( \"\" , \" --pfile \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "pfile",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Output cumulative survival plots (--pfile)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Output the bit scores as a binary array of double-precision floats (8 bytes per score)\n            to file. Programs like Easel's esl-histplot can read such binary files. This is\n            useful when generating extremely large sample sizes.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" --xfile $value\" : \"\"",
                            "python": "( \"\" , \" --xfile \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "xfile",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Output bitscores as binary double vector to file (--xfile)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output_options",
                "precond": null,
                "prompt": "Output options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "hmmsim",
    "outputs": {
        "children": [
            {
                "children": [
                    {
                        "comment": null,
                        "filenames": {
                            "perl": "\"$save\"",
                            "python": "str( save )"
                        },
                        "hidden": false,
                        "main": false,
                        "name": "save_out",
                        "output_type": "file",
                        "precond": {
                            "perl": "defined $save",
                            "python": "save is not None"
                        },
                        "prompt": "Direct summary output to file.",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Report",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "comment": null,
                        "filenames": {
                            "perl": "\"$afile\"",
                            "python": "str( afile )"
                        },
                        "hidden": false,
                        "main": false,
                        "name": "afile_out",
                        "output_type": "file",
                        "precond": {
                            "perl": "defined $afile",
                            "python": "afile is not None"
                        },
                        "prompt": "Output alignment lengths",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Report",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "comment": null,
                        "filenames": {
                            "perl": "\"$efile\"",
                            "python": "str( efile )"
                        },
                        "hidden": false,
                        "main": false,
                        "name": "efile_out",
                        "output_type": "file",
                        "precond": {
                            "perl": "defined $efile",
                            "python": "efile is not None"
                        },
                        "prompt": "Output E vs. E plots to file in xy format",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Report",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "comment": null,
                        "filenames": {
                            "perl": "\"$ffile\"",
                            "python": "str( ffile )"
                        },
                        "hidden": false,
                        "main": false,
                        "name": "ffile_out",
                        "output_type": "file",
                        "precond": {
                            "perl": "defined $ffile",
                            "python": "ffile is not None"
                        },
                        "prompt": "Output filter fraction: sequences passing P thresh",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Report",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "comment": null,
                        "filenames": {
                            "perl": "\"$pfile\"",
                            "python": "str( pfile )"
                        },
                        "hidden": false,
                        "main": false,
                        "name": "pfile_out",
                        "output_type": "file",
                        "precond": {
                            "perl": "defined $pfile",
                            "python": "pfile is not None"
                        },
                        "prompt": "Output cumulative survival plots",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Report",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "comment": null,
                        "filenames": {
                            "perl": "\"$xfile\"",
                            "python": "str( xfile )"
                        },
                        "hidden": false,
                        "main": false,
                        "name": "xfile_out",
                        "output_type": "file",
                        "precond": {
                            "perl": "defined $xfile",
                            "python": "xfile is not None"
                        },
                        "prompt": "Output bitscores as binary double vector to file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "BitScores",
                                "superclass": "Binary"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output_options",
                "precond": null,
                "prompt": "Output options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [],
    "source_links": [],
    "title": "HMMSIM",
    "type": "program",
    "version": null
}