{
    "authors": null,
    "classifications": [
        {
            "classification": "database:search:homology",
            "type": "mobyle1"
        },
        {
            "classification": "database:search:pattern",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": null,
    "description": "Pattern-Hit Initiated BLAST",
    "documentation_links": [],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": null,
                "command": true,
                "comment": "PHI-BLAST (Pattern-Hit Initiated BLAST) is a search program that combines matching of regular expressions with local alignments surrounding the match. The calculation of local alignments is done using a method very similar to (and much of the same code as) gapped BLAST.Program modes:. patseedp: normal phiblast mode. seedp: Restrict the search for local alignments to a subset of the pattern occurrences in the query. This program option requires the user to specify the location(s) of the interesting pattern occurrence(s) in the pattern file (for the syntax see below). When there are multiple pattern occurrences in the query it may be important to decide how many are of interest because the E-value for matches is effectively multiplied by the number of interesting pattern occurrences.",
                "ctrl": null,
                "format": {
                    "perl": "\"blastpgp -p $value\"",
                    "python": "\"blastpgp -p \" + str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "phiblast",
                "paramfile": null,
                "precond": null,
                "prompt": "Program (-p)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "3",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" -i $query\"",
                    "python": "\" -i \" + str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "query",
                "paramfile": null,
                "precond": null,
                "prompt": "Sequence File (-i)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "FASTA"
                    ]
                }
            },
            {
                "argpos": "5",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "(defined $value and $value != $vdef)? \" -S $value\" : \"\"",
                    "python": "( \"\" , \" -S \" + str(value) )[ value is not None and value != vdef]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "start_region",
                "paramfile": null,
                "precond": null,
                "prompt": "Start of required region in query (-S)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "5",
                "command": false,
                "comment": "Location on query sequence. -1 indicates end of query",
                "ctrl": null,
                "format": {
                    "perl": "(defined $value and $value != $vdef)? \" -H $value\" : \"\"",
                    "python": "( \"\" , \" -H \" + str(value) )[ value is not None and value != vdef]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "end_region",
                "paramfile": null,
                "precond": null,
                "prompt": "End of required region in query (-H)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "3",
                "command": false,
                "comment": "Given a protein sequence S and a regular expression pattern P occurring in S, PHI-BLAST helps answer the question: What other protein sequences both contain an occurrence of P and are homologous to S in the vicinity of the pattern occurrences?Rules for pattern syntax:The syntax for patterns in PHI-BLAST follows the conventions of PROSITE. When using the stand-alone program, it is permissible to have multiple patterns in a file separated by a blank line between patterns.Valid protein characters for PHI-BLAST patterns:ABCDEFGHIKLMNPQRSTVWXYZUOther useful delimiters:[ ] means any one of the characters enclosed in the brackets e.g., [LFYT] means one occurrence of L or F or Y or T- means nothing (this is a spacer character used by PROSITE) x with nothing following means any residuex(5) means 5 positions in which any residue is allowed (and similarly for any other single number in parentheses after x)x(2,4) means 2 to 4 positions where any residue is allowed, and similarly for any other two numbers separated by a comma; the first number should be < the second number.",
                "ctrl": null,
                "format": {
                    "perl": "\" -k $value\"",
                    "python": "\" -k \" + str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "pattern",
                "paramfile": null,
                "precond": null,
                "prompt": "Pattern file- Prosite syntax (-k)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "PrositePattern",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "2",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" -d $value\"",
                    "python": "\" -d \" + str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "protein_db",
                "paramfile": null,
                "precond": null,
                "prompt": "Protein database (-d)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -G $value\" : \"\"",
                            "python": "( \"\" , \" -G \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "open_a_gap",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Cost to open a gap (-G)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Limited values for gap existence and extension are supported for these three programs. Some supported and suggested values are:Existence Extension10 -- 110 -- 211 -- 18 -- 29 -- 2(source: NCBI Blast page)",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -E $value\" : \"\"",
                            "python": "( \"\" , \" -E \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "extend_a_gap",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Cost to extend a gap (-E)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef)? \" -M $value\" : \"\"",
                            "python": "( \"\" , \" -M \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "matrix",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Similarity matrix (-M)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "scoring",
                "precond": null,
                "prompt": "Scoring options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -F T\" : \"\"",
                            "python": "( \"\" , \" -F T\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "filter",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Filter query sequence with SEG (-F)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This option specifies that any lower-case letters in the input FASTA file should be masked.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -U T\" : \"\"",
                            "python": "(\"\", \" -U T\")[value]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "lower_case",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Use lower case filtering (-U)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "This options also takes a string as an argument.  One may use such a string to change the specific parameters of seg or invoke other filters. Please see the 'Filtering Strings' section (below) for details.",
                "name": "filter_opt",
                "precond": null,
                "prompt": "Filtering and masking options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The statistical significance threshold for reporting matches against database sequences; the default value is 10, such that 10 matches are expected to be found merely by chance, according to the stochastic model of Karlin and Altschul (1990). If the statistical significance ascribed to a match is greater than the EXPECT threshold, the match will not be reported. Lower EXPECT thresholds are more stringent, leading to fewer chance matches being reported. Fractional values are acceptable.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -e $value\":\"\"",
                            "python": "(\"\" , \" -e \" + str(value))[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Expect",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Expected value (-e)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Use words of size N.Zero invokes default behaviorDefault value: 3",
                        "ctrl": {
                            "perl": "$value >= 2 and $value <=3",
                            "python": "value >= 2 and value <=3"
                        },
                        "format": {
                            "perl": "(defined $value) ? \" -W $value\" : \"\"",
                            "python": "(\"\" , \" -W \"+str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "word_size",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Word Size (-W)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "When  multiple   hits  method  is  used,  this parameter defines the distance from last hit on the same diagonal to the new one.Zero means single hit algorithm.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -A $value\" : \"\"",
                            "python": "( \"\" , \" -A \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "window",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Multiple hits window size (-A)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Blast seeks first short word pairs whose aligned score reaches at least this value",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -f $value\" : \"\"",
                            "python": "( \"\" , \" -f \" + str(value) )[ value is not None and value !=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "extend_hit",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Threshold for extending hits (-f)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This is the value that control the path graph region explored by Blast during a gapped extension (Xg in the NAR paper).",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -X $value\":\"\"",
                            "python": "(\"\" , \" -X \" + str(value))[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "dropoff",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "X dropoff value for gapped alignment (-X)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This parameter controls the dropoff for the final reported alignment. See also the -X parameter.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -Z $value\" : \"\"",
                            "python": "( \"\" , \" -Z \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "dropoff_z",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "X dropoff value for final gapped alignment (-Z)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This parameter controls the dropoff at ungapped extension stage. See also the -X parameter.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -y $value\" : \"\"",
                            "python": "( \"\" , \" -y \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "dropoff_y",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Dropoff for blast ungapped extensions in bits (-y)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Use zero for the real size",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -Y $value\" : \"\"",
                            "python": "(\"\" , \" -Y \"+str(value))[value is not None and value !=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "eff_len",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Effective length of the search space (-Y)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "If this option is used, a value of 100 is recommended.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -K $value\" : \"\"",
                            "python": "(\"\" , \" -K \"+str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "keep_hits",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of best hits from a region to keep (-K)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value eq \"0\") ? \" -P $value\" : \"\"",
                            "python": "(\"\" , \" -P \"+str(value))[value != \"0\"]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "mode",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Single-hit or multiple-hit mode (-P)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -N $value\" : \"\"",
                            "python": "(\"\" , \" -N \"+str(value))[value is not None and value !=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "nb_bits",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of bits to trigger gapping (-N)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "selectivity_opt",
                "precond": null,
                "prompt": "Selectivity options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -j $value\" : \"\"",
                            "python": "(\"\" , \" -j \"+str(value))[value is not None and value !=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "multipass",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximum number of passes to use in multipass version (-j)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -c $value\" : \"\"",
                            "python": "(\"\" , \" -c \"+str(value))[value is not None and value !=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "pseudocounts",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Constant in pseudocounts for multipass version (-c)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -h $value\" : \"\"",
                            "python": "(\"\" , \" -h \"+str(value))[value is not None and value !=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_threshold",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "e-value threshold for inclusion in multipass model (-h)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "phi_spec_opt",
                "precond": null,
                "prompt": "PHI-Blast specific selectivity options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Maximum number of database sequences for which one-line descriptions will be reported.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -v $value\" : \"\"",
                            "python": "( \"\" , \" -v \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Descriptions",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of one-line descriptions to show? (-v)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Maximum number of database sequences for which high-scoring segment pairs will be reported (-b).",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -b $value\" : \"\"",
                            "python": "( \"\" , \" -b \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Alignments",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of database sequences to show alignments? (-b)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef)? \" -m $value\" : \"\"",
                            "python": "( \"\"  , \" -m \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "view_alignments",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Alignment view options (-m)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\" -o phiblast.txt\"",
                            "python": "\" -o phiblast.txt\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "txtoutput",
                        "paramfile": null,
                        "precond": {
                            "perl": "$view_alignments ne \"7\"",
                            "python": "view_alignments != \"7\""
                        },
                        "prompt": "Text output",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\" -o phiblast.xml\"",
                            "python": "\" -o phiblast.xml\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "xmloutput",
                        "paramfile": null,
                        "precond": {
                            "perl": "$view_alignments eq \"7\"",
                            "python": "view_alignments == \"7\""
                        },
                        "prompt": "Xml output",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "11",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" && html4blast -g -o phiblast.html phiblast.txt\" : \"\"",
                            "python": "(\"\" , \" && html4blast -g -o phiblast.html phiblast.txt\")[value]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "htmloutput",
                        "paramfile": null,
                        "precond": {
                            "perl": "$view_alignments !~ /^[78]$/",
                            "python": "view_alignments not in [ \"7\" , \"8\" ]"
                        },
                        "prompt": "Html output",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -J\":\"\"",
                            "python": "(\"\" , \" -J\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "believe",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Believe the query defline (-J)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "SeqAlign is in ASN.1 format, so that it can be read with NCBI tools (such as sequin). This allows one to view the results in different formats.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -O $value\" : \"\"",
                            "python": "( \"\" , \" -O \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "seqalign_file",
                        "paramfile": null,
                        "precond": {
                            "perl": "$believe",
                            "python": "believe"
                        },
                        "prompt": "SeqAlign file (-J option must be true) (-O)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "affichage",
                "precond": null,
                "prompt": "Report options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "phiblast",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"phiblast.txt\"",
                    "python": "\"phiblast.txt\""
                },
                "hidden": false,
                "main": false,
                "name": "txtfile",
                "output_type": "file",
                "precond": {
                    "perl": "$view_alignments ne \"7\"",
                    "python": "view_alignments != \"7\""
                },
                "prompt": "Blast text report",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "BlastTextReport",
                        "superclass": "Report"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"phiblast.xml\"",
                    "python": "\"phiblast.xml\""
                },
                "hidden": false,
                "main": false,
                "name": "xmlfile",
                "output_type": "file",
                "precond": {
                    "perl": "$view_alignments eq \"7\"",
                    "python": "view_alignments == \"7\""
                },
                "prompt": "Blast xml report",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "BlastXmlReport",
                        "superclass": "Report"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"phiblast.html\"",
                    "python": "\"phiblast.html\""
                },
                "hidden": false,
                "main": false,
                "name": "htmlfile",
                "output_type": "file",
                "precond": {
                    "perl": "$view_alignments !~ /^[78]$/",
                    "python": "view_alignments not in [\"7\", \"8\"]"
                },
                "prompt": "Blast html report",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "BlastHtmlReport",
                        "superclass": "Report"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"*.gif\"",
                    "python": "\"*.gif\""
                },
                "hidden": true,
                "main": false,
                "name": "imgfile",
                "output_type": "file",
                "precond": {
                    "perl": "$view_alignments !~ /^[78]$/",
                    "python": "view_alignments not in [\"7\", \"8\"]"
                },
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Picture",
                        "superclass": "Binary"
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "R. Baeza-Yates and G. Gonnet, Communications of the ACM 35(1992), pp. 74-82.",
            "url": null
        },
        {
            "doi": null,
            "label": "S. Wu and U. Manber, Communications of the ACM\t35(1992), pp. 83-91.",
            "url": null
        }
    ],
    "source_links": [],
    "title": "PHI-Blast",
    "type": "program",
    "version": null
}