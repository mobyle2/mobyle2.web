{
    "authors": "J. Hein",
    "classifications": [
        {
            "classification": "alignment:pairwise",
            "type": "mobyle1"
        },
        {
            "classification": "phylogeny:parsimony",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": "treealign"
    },
    "comment": null,
    "description": "Phylogenetic alignment of homologous sequences",
    "documentation_links": [],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": "30",
                "command": false,
                "comment": "The sequences should\nbe homologous and there should be a history to be found. If you give it a set\nof COMPLETELY unrelated sequences, it is possible that it will not be able to\nalign them, since it cannot allocate enough memory.The sequences should not vary in length because they have been sequenced\nunequally much.  Length differences should be due to evolution. Thus it should\nnot be used to look for local homologies.",
                "ctrl": null,
                "format": {
                    "perl": "\"$value\\\\n\"",
                    "python": "str(value)+ \"\\n\""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "fileseq",
                "paramfile": "par.dat",
                "precond": null,
                "prompt": "Sequences File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "NBRF"
                    ]
                }
            },
            {
                "argpos": "11",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"$value\"",
                    "python": "str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "seqtype",
                "paramfile": "par.dat",
                "precond": null,
                "prompt": "Sequence type",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "12",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \"+str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "nuseq",
                "paramfile": "par.dat",
                "precond": null,
                "prompt": "Number of sequences",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "13",
                "command": false,
                "comment": null,
                "ctrl": {
                    "perl": "$value >= 0",
                    "python": "value >= 0"
                },
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \"+str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "gap_open",
                "paramfile": "par.dat",
                "precond": null,
                "prompt": "Gap open penalty",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "14",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" $value\\\\n\"",
                    "python": "\" \" + str(value) + \"\\n\""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "gap_ext",
                "paramfile": "par.dat",
                "precond": null,
                "prompt": "Gap extension penalty",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": "21",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"1\" : \"0\"",
                            "python": "( \"0\" , \"1\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "ancesterout",
                        "paramfile": "par.dat",
                        "precond": null,
                        "prompt": "Present ancestral sequences",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "other_options",
                "precond": null,
                "prompt": "Other options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "treealign",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"*.tree\"",
                    "python": "\"*.tree\""
                },
                "hidden": false,
                "main": false,
                "name": "filetree",
                "output_type": "file",
                "precond": null,
                "prompt": "Output tree file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"*.ali\"",
                    "python": "\"*.ali\""
                },
                "hidden": false,
                "main": false,
                "name": "fileali",
                "output_type": "file",
                "precond": null,
                "prompt": "Output alignment file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "Hein, J.: Unified approach to alignment and phylogenies. Meth. Enzymol. 183:626-645 (1990).",
            "url": null
        },
        {
            "doi": null,
            "label": "Hein, J.: A new method that simultaneously aligns and reconstruct ancestral sequences for any number of homologous sequences, when the phylogeny is given. Mol. Biol. Evol. 6:649-668 (1989).",
            "url": null
        },
        {
            "doi": null,
            "label": "Hein, J.: A tree reconstruction method that is economical in the number of pairwise comparisons used. Mol. Biol. Evol. 6:669-684 (1989).",
            "url": null
        }
    ],
    "source_links": [],
    "title": "treealign",
    "type": "program",
    "version": null
}