{
    "authors": "Gerald Z.Hertz, G.D. Stormo",
    "classifications": [
        {
            "classification": "sequence:protein:pattern",
            "type": "mobyle1"
        },
        {
            "classification": "sequence:nucleic:pattern",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": null,
    "description": "Identification of consensus patterns in unaligned DNA and protein sequences",
    "documentation_links": [],
    "env": [],
    "homepage_links": [
        "http://gzhertz.home.comcast.net/~gzhertz/"
    ],
    "inputs": {
        "children": [
            {
                "argpos": "0",
                "command": true,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"fasta-consensus <$sequence >$sequence.wcons ; $prog \"",
                    "python": "\"fasta-consensus <\" + str(sequence) + \" >\" + str(sequence) + \".wcons  ; \" + str(prog)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "prog",
                "paramfile": null,
                "precond": null,
                "prompt": "Program to run",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "1",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" -f $sequence.wcons\"",
                    "python": "\" -f \" + str(sequence) + \".wcons\""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "sequence",
                "paramfile": null,
                "precond": null,
                "prompt": "Sequences file (-f)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "FASTA"
                    ]
                }
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -L$value\" : \"\"",
                            "python": "( \"\" , \" -L\" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "width",
                        "paramfile": null,
                        "precond": {
                            "perl": "$prog eq \"consensus\"",
                            "python": "prog == \"consensus\""
                        },
                        "prompt": "Width of pattern for consensus program (-L)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "A range of values should be tried.  For example,\n       try values of 0.5, 1, 1.5, and 2.  The overall best alignment is\n       the one having the smallest e-value.",
                        "ctrl": null,
                        "format": {
                            "perl": "\" -s$value\"",
                            "python": "\" -s\" + str(value)"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "standard_deviation",
                        "paramfile": null,
                        "precond": {
                            "perl": "$prog eq \"wconsensus\"",
                            "python": "prog == \"wconsensus\""
                        },
                        "prompt": "Number of standard deviations to lower the information content at each position before identifying information peaks for wconsensus program (-s)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "required",
                "precond": null,
                "prompt": "Required parameter"
            },
            {
                "children": [
                    {
                        "children": [
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": {
                                    "perl": "($value eq \"users\" and not defined $ascii_alphabet) or ($value eq \"prot-alphabet\" or $value eq \"dna-alphabet\" or $value eq \"null\")",
                                    "python": "(value == \"users\" and ascii_alphabet is not None) or (value in (\"prot-alphabet\",\"dna-alphabet\", \"null\") )"
                                },
                                "format": {
                                    "perl": "($value eq \"dna-alphabet\" or $value eq \"prot-alphabet\" )? \"\" : \" -a",
                                    "python": "(\"\", \" -a"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": true,
                                "name": "alphabet",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Choose an alphabet",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Choice",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": "Each line contains a letter (a symbol in the alphabet) followed by an optional normalization number (default: 1.0). The normalization is based on the relative prior probabilities of the letters. For nucleic acids, this might be the genomic frequency of the bases; however, if the -d option is not used, the frequencies observed in your own sequence data are used. In nucleic acid alphabets, a letter and its complement appear on the same line, separated by a colon (a letter can be its own complement, e.g. when using a dimer alphabet).Complementary letters may use the same normalization number. Only the standard 26 letters are permissible; however, when the -CS option is used, the alphabet is case sensitive so that a total of 52 different characters are possible.POSSIBLE LINE FORMATS WITHOUT COMPLEMENTARY LETTERS:letterletter normalizationPOSSIBLE LINE FORMATS WITH COMPLEMENTARY LETTERS:letter:complementletter:complement normalizationletter:complement normalization:complement's_normalization",
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value) ? \" -a $value\" : \"\"",
                                    "python": "( \"\" , \" -a \" + str(value) )[ value is not None ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "ascii_alphabet",
                                "paramfile": null,
                                "precond": {
                                    "perl": "$alphabet eq \"users\"",
                                    "python": "alphabet == \"users\""
                                },
                                "prompt": "User Alphabet file (-a)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "ConsensusAlphabet",
                                        "superclass": "AbstractText"
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": "By default, the program uses the frequencies observed in your own sequence data for the prior probabilities of the letters. However, if the -d option is set, the prior probabilities designated by the alphabet options. If the -d option is not set, they are still used to determine the sequence alphabet, but any prior probability information is ignored.",
                                "ctrl": null,
                                "format": {
                                    "perl": "($value) ? \" -d\" : \"\"",
                                    "python": "( \"\" , \" -d\" )[ value ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "prior",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Use the designated prior probabilities of the letters to override the observed frequencies (-d)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Boolean",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": null,
                        "name": "alphabet_options",
                        "precond": null,
                        "prompt": "Alphabet options"
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "($value eq \"3\" and $prog eq \"consensus\") or ($value eq \"0\" or $value eq \"1\" or $value eq \"2\" )",
                            "python": "(value == \"3\" and prog == \"consensus\") or (value == \"0\" or value == \"1\" or value == \"2\" )"
                        },
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -c$value\" : \"\"",
                            "python": "( \"\" , \" -c\" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "complement",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Complement of nucleic acid sequences (-c)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "-n integer: repeat the matrix building cycle a maximum of \"integer\"\n\t      times and allow each sequence to contribute zero or more words\n\t      per matrix.-N integer: repeat the matrix building cycle a maximum of \"integer\"\n\t      times and allow each sequence to contribute one or more words\n\t      per matrix",
                        "ctrl": {
                            "perl": "($value eq \"-n\" or $value eq \"-N\") and defined($max_cycle_nb)",
                            "python": "(value == \"-n\" or value ==\"-N\") and max_cycle_nb is not None"
                        },
                        "format": {
                            "perl": "($value ne $vdef) ? \" $value$max_cycle_nb\" : \"\"",
                            "python": "( \"\" , \" \" + str(value) + str(max_cycle_nb) )[ value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "max_cycle",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "How many words per matrix for each sequence to contribute",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\"\"",
                            "python": "\"\""
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "max_cycle_nb",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximum repeat of the matrix building cycle for -n or -N",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "basic_options",
                "precond": null,
                "prompt": "Basic options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value ) ? \" -q $value\" : \"\"",
                            "python": "( \"\" , \" -q \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "queue",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximum number of matrices to save between cycles of the program (-q)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The minimum distance between the starting points of words within the same matrix pattern; must be a positive integer; can only be used when the \"-n\" or \"-N\" option is also used.For wconsensus, the default value is 1.For consensus, this number is indicated by the width (-L).",
                        "ctrl": {
                            "perl": "$value <= 0 and ($max_cycle == \"-n\" or $max_cycle == \"-N\")",
                            "python": "value > 0 and (max_cycle == \"-n\" or max_cycle == \"-N\")"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -m$value \" : \"\"",
                            "python": "( \"\" , \" -m\" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "distance",
                        "paramfile": null,
                        "precond": {
                            "perl": "$max_cycle ne \"null\"",
                            "python": "max_cycle != \"null\""
                        },
                        "prompt": "Minimum distance between the starting points of words within the same matrix pattern (-m)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "default: terminate only when the maximum number of matrix building cycles is completed.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -t$value \" : \"\"",
                            "python": "( \"\" , \" -t\" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "terminate",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Terminate the program this number of cycles after the current most significant alignment is identified (-t)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "-pr2 option prevents a strong pattern found in only a subset of the sequences from overwhelming the algorithm and eliminating other potential patterns. This undesirable situation can occur when a subset of the sequences share an evolutionary relationship not common to the majority of the sequences.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\"",
                            "python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "progeny",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Save the top progeny matrices",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This option results in a significant speed up in the program, but the algorithm becomes dependent on the order of the sequence-file names.",
                        "ctrl": {
                            "perl": "($value == 1 and $max_cycle != \"-n\") or $value == 0",
                            "python": "(value == 1 and max_cycle != \"-n\") or value == 0"
                        },
                        "format": {
                            "perl": "($value) ? \" -l\" : \"\"",
                            "python": "( \"\" , \" -l\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "linearly",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Seed with the first sequence and proceed linearly through the list (-l)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\"",
                            "python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "terminal_gap",
                        "paramfile": null,
                        "precond": {
                            "perl": "$prog eq \"wconsensus\"",
                            "python": "prog == \"wconsensus\""
                        },
                        "prompt": "Permit terminal gaps for wconsensus program",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "advenced_options",
                "precond": null,
                "prompt": "Advanced options"
            },
            {
                "children": [
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": "A negative value means print all the top matrices.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -pt$value\" : \"\"",
                            "python": "( \"\" , \" -pt\" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "top_matrices",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of top matrices to print (-pt)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Default when NOT using -n or -N option: print 4 matrices; default when using -n or -N option: print no matrices.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -pf$value\" : \"\"",
                            "python": "( \"\" , \" -pf\" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "final_matrices",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of final matrices to print (-pf)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output_options",
                "precond": null,
                "prompt": "Output options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "consensus",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"$prog.results\"",
                    "python": "str(prog) + \".results\""
                },
                "hidden": false,
                "main": false,
                "name": "outfile",
                "output_type": "file",
                "precond": null,
                "prompt": "Results file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"*.wcons\"",
                    "python": "\"*.wcons\""
                },
                "hidden": false,
                "main": false,
                "name": "consensus_format",
                "output_type": "file",
                "precond": null,
                "prompt": "wcons file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "G.Z. Hertz and G.D. Stormo. Identification of consensus patterns in unaligned DNA and protein sequences: a large-deviation statistical basis for penalizing gaps. In: Proceedings of the Third International Conference on Bioinformatics and Genome Research (H.A. Lim, and C.R. Cantor, editors). World Scientific Publishing Co., Ltd. Singapore, 1995. pages 201--216.",
            "url": null
        }
    ],
    "source_links": [
        "http://gzhertz.home.comcast.net/~gzhertz/CONSENSUS_2004-04-14.TAR.gz"
    ],
    "title": "CONSENSUS",
    "type": "program",
    "version": "6d"
}