{
    "authors": "Kazutaka Katoh",
    "classifications": [
        {
            "classification": "alignment:multiple",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": null,
    "description": "Multiple alignment program for amino acid or nucleotide sequences.",
    "documentation_links": [
        "http://mafft.cbrc.jp/alignment/software/about.html"
    ],
    "env": [],
    "homepage_links": [
        "http://mafft.cbrc.jp/alignment/software/"
    ],
    "inputs": {
        "children": [
            {
                "children": [
                    {
                        "argpos": "1000",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\" $sequences\"",
                            "python": "\" \" + str( sequences )"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "sequences",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Sequences File ( a file containing several sequences ).",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Sequence",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": [
                                "FASTA"
                            ]
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "seq_type",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Sequences type",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>If there are unusual characters (e.g., U as selenocysteine in protein sequence), use the --anysymbol option.</html:p><html:p>It accepts any printable characters (U, O, #, $, %, etc.; 0x21-0x7e in the ASCII code), execpt for &gt; (0x3e).  \n    They are scored equivalently to X.  Gap is - (0x2d), as in the default mode.</html:p></html:div>",
                        "ctrl": null,
                        "format": {
                            "perl": "( value )? \"\" : \" --anysymbol \"",
                            "python": "( \"\" , \" --anysymbol \")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "anysymbol",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Allow unusual symbols (Selenocysteine \"U\", Inosine \"i\", non-alphabetical characters, etc.)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "input_opt",
                "precond": null,
                "prompt": "Input Options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "( defined $value and $value ne $vdef )? \" --clustalout \" : \"\"",
                            "python": "( '' , ' --clustalout ' )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "output_format",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Output format:",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "( value eq 'reorder')? \" --reorder \" : \"\"",
                            "python": "( '' , ' --reorder ' )[ value == 'reorder' ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "out_order",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Output order:",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output_opt",
                "precond": null,
                "prompt": "Output Options"
            },
            {
                "children": [
                    {
                        "argpos": "0",
                        "command": true,
                        "comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:h2>Algorithms and parameters (unfinished)</html:h2>MAFFT offers various multiple alignment strategies.\n          They are classified into three types,\n          (<html:b>a</html:b>) the progressive method,\n          (<html:b>b</html:b>) the iterative refinement method with the WSP score, and\n          (<html:b>c</html:b>) the iterative refinment method using both the WSP and consistency scores.\n          In general,\n          there is a tradeoff between speed and accuracy.\n          The order of speed is<html:b>a</html:b>&gt;<html:b>b</html:b>&gt;<html:b>c</html:b>, whereas\n          the order of accuracy is<html:b>a</html:b>&lt;<html:b>b</html:b>&lt;<html:b>c</html:b>.\n          The results of benchmarks can be seen<html:a href=\"http://mafft.cbrc.jp/alignment/software/eval/accuracy.html\">here</html:a>.\n          The following are the detailed procedures for the major options of MAFFT.<html:h3 id=\"fftnsx\">(a) FFT-NS-1, FFT-NS-2 &#8212; Progressive methods</html:h3><html:img alt=\"prog.png\" height=\"163\" src=\"http://mafft.cbrc.jp/alignment/software/algorithms/prog.png\" width=\"382\" /><html:br />These are simple progressive methods like<html:a href=\"http://www.ebi.ac.uk/clustalw/\">ClustalW</html:a>.\n              By using the several new techniques described below,\n              these options can align a large number of sequences\n              (up to &#8764;5,000) on a standard desktop computer.\n              The qualities of the resulting alignments are shown<html:a href=\"http://mafft.cbrc.jp/alignment/software/eval/accuracy.html\">here</html:a>.\n              The detailed algorithms are described in Katoh et al. (2002).<html:ul><html:li><html:b>FFT-NS-1</html:b><html:br /><html:b><html:tt>mafft --retree 1<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />or<html:br /><html:b><html:tt>fftns --retree 1<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />is the simplest progressive option in MAFFT\n                          and one of the fastest methods currently available.\n                          The procedure is:\n                          (1) make a rough distance matrix by counting the number of\n                          shared 6-tuples (see below) between every sequence pair,\n                          (2) build a guide tree\n                          and (3) align the sequences according to the branching order.<html:p /></html:li><html:li><html:b>FFT-NS-2</html:b><html:br /><html:b><html:tt>mafft --retree 2<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />or<html:br /><html:b><html:tt>fftns<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />The distance matrix used in FFT-NS-1 is very approximate\n                          and unreliable.\n                          In FFT-NS-2,\n                          (4) the guide tree is re-computed from\n                          the FFT-NS-1 alignment,\n                          and (5) the second progressive alignment\n                          is carried out.</html:li></html:ul>The following techniques are used to improve the performance.<html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">FFT approximation.</html:span>(Not yet written) See Katoh et al. (2002).</html:p><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\"><html:i>k</html:i>-mer counting.</html:span>To accelerate the initial calculation of the distance matrix,\n                which requires a CPU time of<html:i>O</html:i>(<html:i>N</html:i><html:sup>2</html:sup>) steps,\n                a rough method similar to the 'quicktree' option of ClustalW\n                is adopted,\n                in which the number of<html:i>k</html:i>-mers shared by\n                a pair of sequences\n                is counted and regarded as an approximation\n                of the degree of similarity.\n                MAFFT uses the very rapid method proposed by Jones et al. (1992)\n                with a minor modification\n                (Katoh et al. 2002): (1) The 20 amino acids are compressed to 6\n                alphabets, according to Dayhoff et al. (1978),\n                and\n                (2) MAFFT performs the second progressive alignment (FFT-NS-2) in order to\n                improve the accuracy.</html:p><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Modified UPGMA.</html:span><html:a href=\"upg.html\">A modified version of UPGMA</html:a>is used to construct a guide tree,\n                which works well for handling fragment sequences.</html:p><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">The second progressive alignment.</html:span>The accuracy of the second progressive alignment (FFT-NS-2)\n                is slightly higher than that of the first progressive alignment (FFT-NS-1)\n                according to the<html:a href=\"http://mafft.cbrc.jp/alignment/software/eval/accuracy.html\">BAliBASE test</html:a>,\n                but the amount CPU time required by FFT-NS-2 is\n                approximately two times longer than that by FFT-NS-1.</html:p><html:h3>(b) FFT-NS-i, NW-NS-i &#8212; Iterative refinement method</html:h3><html:img alt=\"iter.png\" height=\"200\" src=\"http://mafft.cbrc.jp/alignment/software/algorithms/iter.png\" width=\"379\" /><html:br />The accuracy of progressive alignment\n                  can be improved\n                  by the iterative refinement method (Berger and Munson 1991, Gotoh 1993).\n                  A simplified version of<html:a href=\"\">PRRN</html:a>is implemented as the\n                  FFT-NS-i option of MAFFT.\n                  In FFT-NS-i,\n                  an initial alignment by FFT-NS-2 is subjected to\n                  an iterative refienment process.<html:ul><html:li><html:b>FFT-NS-i (max. 1,000 cycles)</html:b><html:br /><html:b><html:tt>mafft --maxiterate 1000<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />or<html:br /><html:b><html:tt>fftnsi --maxiterate 1000<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />The iterative refinement is repeated until\n                              no more improvement in the WSP score is made or the number of cycles reaches 1,000.<html:p /></html:li><html:li><html:b>FFT-NS-i (max. 2 cycles)</html:b><html:br /><html:b><html:tt>mafft --maxiterate 1000<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />or<html:br /><html:b><html:tt>fftnsi<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />As most of the quality of improvement is obtained in the early\n                              stage of the iteration, this option is also useful\n                              (default of the fftnsi script).</html:li></html:ul><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Objective function.</html:span>The weighted sum-of-pairs (WSP) score proposed by Gotoh is used.</html:p><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Tree-dependent partitioning.</html:span>(Not yet written)\n                    See Hirosawa et al.</html:p><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Effect of FFT.</html:span>To test the effect of the FFT approximation,\n                    we also implemented the NW-NS-x options,\n                    in which the FFT approximation is disabled, but the other procedures are the same\n                    as those in the corresponding FFT-NS-x.\n                    There was no significant reduction in the accuracy\n                    by introducing the FFT approximation\n                    (Katoh et al. 2002).</html:p><html:h3>(c) L-INS-i, E-INS-i, G-INS-i &#8212; Iterative refinement methods using WSP and consistency scores</html:h3><html:img alt=\"cons.png\" height=\"134\" src=\"http://mafft.cbrc.jp/alignment/software/algorithms/cons.png\" width=\"366\" /><html:br />In order to obtain more accurate alignments in extremely difficult cases,\n                      three new options, L-INS-i, G-INS-i and E-INS-i, have been added to\n                      recent versions (v.&#8805;5) of MAFFT.\n                      These options use\n                      a new objective function combining the WSP score (Gotoh) explained above\n                      and the COFFEE-like score (Notredame et al.),\n                      which evaluates the consistency between\n                      a multiple alignment and pairwise alignments (Katoh et al. 2005).<html:p id=\"GLE\">For pairwise alignment,\n                        three different types of algorithms are implemented,\n                        global alignment (Needleman-Wunsch), local alignment (Smith-Waterman)\n                        with affine gap costs (Gotoh) and\n                        local alignment with generalized affine gap costs (Altschul).\n                        The differences in the accuracy values among these methods are small\n                        for the currently available benchmarks, as shown<html:a href=\"http://mafft.cbrc.jp/alignment/software/eval/accuracy.html\">here</html:a>.\n                        However,\n                        each of them has different characteristics, according to the algorithm\n                        in the pairwise alignment stage:</html:p><html:ul><html:li id=\"einsi\"><html:b>E-INS-i</html:b><html:br /><html:b><html:tt>mafft --genafpair --maxiterate 1000<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />or<html:br /><html:b><html:tt>einsi<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />is suitable for alignments like this:<html:pre style=\"background-color: #F0F0F0; border: 0 solid #AAAAAA; font-size: 90%; font-weight: bold;\">oooooooooXXX------XXXX---------------------------------XXXXXXXXXXX-XXXXXXXXXXXXXXXooooooooooooo\n ---------XXXXXXXXXXXXXooo------------------------------XXXXXXXXXXXXXXXXXX-XXXXXXXX-------------\n -----ooooXXXXXX---XXXXooooooooooo----------------------XXXXX----XXXXXXXXXXXXXXXXXXooooooooooooo\n ---------XXXXX----XXXXoooooooooooooooooooooooooooooooooXXXXX-XXXXXXXXXXXX--XXXXXXX-------------\n ---------XXXXX----XXXX---------------------------------XXXXX---XXXXXXXXXX--XXXXXXXooooo--------</html:pre>where '<html:tt>X</html:tt>'s indicate alignable residues,\n                                  '<html:tt>o</html:tt>'s indicate unalignable residues and\n                                  '<html:tt>-</html:tt>'s indicate gaps.\n                                  Unalignable residues are left\n                                  unaligned\n                                  at the pairwise alignment stage,\n                                  because of the use of the generalized affine gap cost.\n                                  Therefore E-INS-i is applicable to a difficult problem such as RNA polymerase, which\n                                  has several conserved motifs embedded in long unalignable regions.\n                                  As E-INS-i has the minimum assumption of the three methods,\n                                  this is recommended if the nature of sequences to be aligned is not clear.\n                                  Note that E-INS-i assumes that the arrangement of the conserved motifs is shared by\n                                  all sequences.</html:li><html:li id=\"linsi\"><html:b>L-INS-i</html:b><html:br /><html:b><html:tt>mafft --localpair --maxiterate 1000<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />or<html:br /><html:b><html:tt>linsi<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />is suitable to:<html:pre style=\"background-color: #F0F0F0; border: 0 solid #AAAAAA; font-size: 90%; font-weight: bold;\">ooooooooooooooooooooooooooooooooXXXXXXXXXXX-XXXXXXXXXXXXXXX------------------\n --------------------------------XX-XXXXXXXXXXXXXXX-XXXXXXXXooooooooooo-------\n ------------------ooooooooooooooXXXXX----XXXXXXXX---XXXXXXXooooooooooo-------\n --------ooooooooooooooooooooooooXXXXX-XXXXXXXXXX----XXXXXXXoooooooooooooooooo\n --------------------------------XXXXXXXXXXXXXXXX----XXXXXXX------------------</html:pre>L-INS-i can align\n                          a set of sequences containing sequences flanking\n                          around one alignable domain.\n                          Flanking sequences are ignored in the pairwise alignment\n                          by the Smith-Waterman algorithm.\n                          Note that the input sequences are assumed to have\n                          only one alignable domain.\n                          In benchmark tests, the ref4 of BAliBASE corresponds to this.\n                          The other categories of BAliBASE also correspond to similar situations,\n                          because they have flanking sequences.\n                          L-INS-i also shows higher accuracy values for a part of SABmark and HOMSTRAD\n                          than G-INS-i, but we have not identified the reason for this.</html:li><html:li id=\"ginsi\"><html:b>G-INS-i</html:b><html:br /><html:b><html:tt>mafft --globalpair --maxiterate 1000<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />or<html:br /><html:b><html:tt>ginsi<html:i>input_file</html:i>&gt;<html:i>output_file</html:i></html:tt></html:b><html:br />is suitable to:<html:pre style=\"background-color: #F0F0F0; border: 0 solid #AAAAAA; font-size: 90%; font-weight: bold;\">XXXXXXXXXXX-XXXXXXXXXXXXXXX\n XX-XXXXXXXXXXXXXXX-XXXXXXXX\n XXXXX----XXXXXXXX---XXXXXXX\n XXXXX-XXXXXXXXXX----XXXXXXX\n XXXXXXXXXXXXXXXX----XXXXXXX</html:pre>G-INS-i assumes that entire region can be aligned\n                          and tries to align them globally using\n                          the Needleman-Wunsch algorithm;\n                          that is,\n                          a set of sequences of one domain\n                          must be extracted by truncating flanking\n                          sequences.\n                          In benchmark tests, SABmark and HOMSTRAD correspond to this.</html:li></html:ul><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Consistency score.</html:span>The COFFEE objective function was originally proposed\n                        by Notredame et al. (1998), and\n                        the extended versions are used in TCoffee and ProbCons.\n                        MAFFT also adopts a similar objective function, as described\n                        in Katoh et al. (2005).\n                        However,\n                        the consistency among three sequences\n                        (called 'library extension' in TCoffee)\n                        is currently not calculated in MAFFT,\n                        because the improvement in accuracy by library extension was limited to\n                        alignments consisting of a small number (&lt;10) of sequences\n                        in our preliminary tests.\n                        If library extention is needed, then please use<html:a href=\"http://igs-server.cnrs-mrs.fr/%7Ecnotred/Projects_home_page/t_coffee_home_page.html\">TCoffee</html:a>or<html:a href=\"http://probcons.stanford.edu/\">ProbCons</html:a>.</html:p><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Consistency + WSP.</html:span>Instead,\n                        the WSP score is summed with the consistency score in the\n                        objective function of MAFFT.\n                        The use of the WSP score\n                        has the merit that a pattern of gaps can be incorporated\n                        into the objective function.\n                        This is probably the reason why\n                        MAFFT achieves higher accuracy than\n                        ProbCons and TCoffee for alignments consisting of\n                        many (&#8764;10 - &#8764;100) sequences.\n                        This suggests that\n                        the pattern of gaps within a group\n                        to be aligned\n                        is important information\n                        when aligning two groups of proteins (and evaluating\n                        homology between distantly related protein families).</html:p></html:div>",
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "strategy",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Strategy:",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The BLOSUM62 matrix is adopted as a default scoring matrix, \n      because this showed slightly higher accuracy values than the \n      BLOSUM80, 45, JTT200PAM, 100PAM and Gonnet matrices in SABmark tests.",
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "amino_scm",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Scoring matrix for amino acid sequences:",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p style=\"color: red\">Switch it to '1PAM / &#954;=2' when aligning closely related DNA sequences.</html:p><html:p>The default scoring matrix is derived from Kimura's two-parameter model. \n      The ratio of transitions to transversions is set at 2 by default. \n      Other parameters can be used, but have not yet been tested.</html:p></html:div>",
                        "ctrl": null,
                        "format": {
                            "perl": "( defined $value and $value ne $vdef )\" --kimura $value \" : \"\"",
                            "python": "( \"\" , \" --kimura \"+str( value ) )[ value is not None and value!= vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "nuc_scm",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Scoring matrix for nucleotide sequences:",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Gap penalties for proteins.</html:span>The default gap penalties for amino acid alignments\n        have been changed in<html:span style=\"color: red\">v.4.0</html:span>.\n        Note that the current version of MAFFT returns\n        an entirely different alignment from v.&lt;4.0.\n        In v.4.0, two major gap penalties\n        (--op [gap open penalty]\n        and --ep [offset value, which functions like a gap extension penalty,\n        see the<html:a href=\"http://mafft.cbrc.jp/alignment/software/algorithms/algorithms.html\">mafft3 paper</html:a>for definition])\n        were tuned by applying the FFT-NS-2 option to a part of\n        the SABmark benchmark.\n        We adopted the parameter set (--op 1.53 --ep 0.123) optimized for\n        SABmark,\n        because this works better for other benchmark\n        (HOMSTRAD, PREFAB and BAliBASE)\n        tests than\n        the previous one (--ep 2.4 --ep 0.06).\n        Other parameters might work better in other situations.\n        Consistency-based options have more parameters\n        (L-INS-i has four more parameters and E-INS-i has six more parameters).\n        We determined these additional parameters so that the Smith-Waterman alignment function\n        used in L-INS-i\n        returns a local alignment similar to that generated by FASTA,\n        but we have not closely tuned them yet.\n        In our tests using SABmark,\n        the accuracy values can be improved by 2-3% by\n        tuning these parameters,\n        but this improvement may result from overfitting.</html:p><html:p><html:span style=\"color: #003366; font-size: 100%; font-style: italic; font-weight: bold;\">Gap penalties for RNAs.</html:span>The default gap penalties for nucleotide alignment\n          have changed in<html:span class=\"red\">v.5.6</html:span>.\n          Note that the current version of MAFFT returns\n          an entirely different alignment from v.&lt;5.6.\n          In the former versions (v.&lt;5.6),\n          the default gap penalties for nucleotide alignments were set at the same values\n          as those for amino acid alignments.\n          According to<html:a href=\"http://projects.binf.ku.dk/pgardner/bralibase/\">BRAliBASE</html:a>,\n          these penalties result in\n          very bad alignments for RNAs.\n          The newer versions (v.&#8805;5.6) use a different penalties for nucleotide alignment;\n          the penalty values are set to three times larger than those for amino acids.\n          This is not yet the optimal value for BRAliBASE.\n          The BRAliBASE score can be improved by\n          closely tuning the penalty values, but we have not adopted the\n          optimized penalties, because we are not sure whether they are\n          applicable to a wide range of problems.</html:p></html:div>",
                        "ctrl": {
                            "": "1.0 < value < 3.0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" --op $value \" : \"\"",
                            "python": "( \"\" , \" --op \"+str( value ) )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gap_open_penalty",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Gap opening penalty:",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p style=\"color: red\">If long gaps are not expected, set it as 0.1 or larger value.</html:p></html:div>",
                        "ctrl": {
                            "": "0.0 < value < 1.0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" --ep $value \" : \"\"",
                            "python": "( \"\" , \" --ep \"+str( value ) )[ value is not None and value != 0.123 ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "offset",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Offset value",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "advanced_settings",
                "precond": null,
                "prompt": "Advanced settings"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "mafft",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"mafft.out\"",
                    "python": "\"mafft.out\""
                },
                "hidden": false,
                "main": false,
                "name": "result",
                "output_type": "stdout",
                "precond": null,
                "prompt": "Alignment file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Alignment",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        {
                            "#children": [],
                            "#tag": "ref",
                            "@param": "output_format"
                        }
                    ]
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": "10.1093/bioinformatics/btq224",
            "label": "Katoh, Toh 2010 (Bioinformatics 26:1899-1900)\n          Parallelization of the MAFFT multiple sequence alignment program.\n          (describes the multithread version; Linux only)",
            "url": null
        },
        {
            "doi": "10.1007/978-1-59745-251-9_3",
            "label": "Katoh, Asimenos, Toh 2009 (Methods in Molecular Biology 537:39-64)\n             Multiple Alignment of DNA Sequences with MAFFT. In Bioinformatics for DNA Sequence Analysis edited by D. Posada\n             (outlines DNA alignment methods and several tips including group-to-group alignment and rough clustering of a large number of sequences)",
            "url": null
        },
        {
            "doi": "10.1186/1471-2105-9-212",
            "label": "Katoh, Toh 2008 (BMC Bioinformatics 9:212)\n             Improved accuracy of multiple ncRNA alignment by incorporating structural information into a MAFFT-based framework.\n             (describes RNA structural alignment methods)",
            "url": null
        },
        {
            "doi": "10.1093/bib/bbn013",
            "label": "Katoh, Toh 2008 (Briefings in Bioinformatics 9:286-298)\n             Recent developments in the MAFFT multiple sequence alignment program.\n             (outlines version 6; Fast Breaking Paper in Thomson Reuters' ScienceWatch)",
            "url": null
        },
        {
            "doi": "10.1093/bioinformatics/btl592",
            "label": "Katoh, Toh 2007 (Bioinformatics 23:372-374) Errata\n            PartTree: an algorithm to build an approximate tree from a large number of unaligned sequences.\n            (describes the PartTree algorithm)",
            "url": null
        },
        {
            "doi": "10.1093/nar/gki198",
            "label": "Katoh, Kuma, Toh, Miyata 2005 (Nucleic Acids Res. 33:511-518)\n             MAFFT version 5: improvement in accuracy of multiple sequence alignment.\n             (describes [ancestral versions of] the G-INS-i, L-INS-i and E-INS-i strategies)",
            "url": null
        },
        {
            "doi": "10.1093/nar/gkf436",
            "label": "Katoh, Misawa, Kuma, Miyata 2002 (Nucleic Acids Res. 30:3059-3066)\n            MAFFT: a novel method for rapid multiple sequence alignment based on fast Fourier transform.\n            (describes the FFT-NS-1, FFT-NS-2 and FFT-NS-i strategies)",
            "url": null
        }
    ],
    "source_links": [
        "http://mafft.cbrc.jp/alignment/software/source.html"
    ],
    "title": "mafft",
    "type": "program",
    "version": "6.849"
}