{
    "authors": null,
    "classifications": [
        {
            "classification": "phylogeny:distance",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": "This program uses nucleotide sequences to compute a distance matrix, under four different models of nucleotide substitution. It can also\ncompute a table of similarity between the nucleotide sequences. The distance for each pair of species estimates the total branch length between the two species, and can be used in the distance matrix programs FITCH, KITSCH or NEIGHBOR.",
    "description": "Compute distance matrix from nucleotide sequences",
    "documentation_links": [
        "http://bioweb2.pasteur.fr/docs/phylip/doc/dnadist.html"
    ],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": "0",
                "command": true,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"dnadist <dnadist.params\"",
                    "python": "\"dnadist <dnadist.params\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "dnadist",
                "paramfile": null,
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "-10",
                "command": false,
                "comment": "The input file must contained aligned sequences in PHYLIP format obtained by sequence alignment programs.",
                "ctrl": {
                    "perl": "$value ne \"infile\" and $value ne \"outfile\"",
                    "python": "value not in ( \"infile\" , \"outfile\" )"
                },
                "format": {
                    "perl": "\"ln -s $infile infile && \"",
                    "python": "\"ln -s \" + str( infile ) + \" infile && \""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "infile",
                "paramfile": null,
                "precond": null,
                "prompt": "Alignment File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [
                        "DNA"
                    ],
                    "card": null,
                    "datatype": {
                        "class": "Alignment",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "PHYLIPI"
                    ]
                }
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "distance",
                        "paramfile": "dnadist.params",
                        "precond": null,
                        "prompt": "Distance (D)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "The T option in this program does not stand for Threshold, but instead is the Transition/transversion option.\n             The user is prompted for a real number greater than 0.0, as the expected ratio of transitions to transversions. \n             Note that this is not the ratio of the first to the second kinds of events, but the resulting expected ratio of transitions to transversions. \n             The exact relationship between these two quantities depends on the frequencies in the base pools. \n             The default value of the T parameter if you do not use the T option is 2.0.",
                        "ctrl": {
                            "perl": "$value >= 0.0",
                            "python": "value >= 0.0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"T\\\\n$value\\\\n\" : \"\"",
                            "python": "( \"\" , \"T\\n\"+ str( value )+\"\\n\" )[value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "ratio",
                        "paramfile": "dnadist.params",
                        "precond": {
                            "perl": "$distance eq \"F84\" or $distance eq \"K\"",
                            "python": "distance == \"F84\" or distance == \"K\""
                        },
                        "prompt": "Transition/transversion ratio (T)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "5",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gamma",
                        "paramfile": "dnadist.params",
                        "precond": {
                            "perl": "$distance eq \"F84\" or $distance eq \"K\" or $distance eq \"JC\"",
                            "python": "distance == \"F84\" or distance == \"K\" or distance == \"JC\""
                        },
                        "prompt": "Gamma distributed rates across sites (G)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1010",
                        "command": false,
                        "comment": "In gamma distribution parameters, this is 1/(square root of alpha)",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"$value\\\\n\" : \"\"",
                            "python": "( \"\" , str( value ) + \"\\n\" )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "variation_coeff",
                        "paramfile": "dnadist.params",
                        "precond": {
                            "perl": "$gamma ne \"No\"",
                            "python": "gamma != \"No\""
                        },
                        "prompt": "Coefficient of variation of substitution rate among sites (must be positive) (if Gamma)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1011",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"$value\\\\n\" : \"\"",
                            "python": "( \"\" , str( value ) + \"\\n\" )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "invariant_sites",
                        "paramfile": "dnadist.params",
                        "precond": {
                            "perl": "$gamma eq \"GI\"",
                            "python": "gamma == \"GI\""
                        },
                        "prompt": "Fraction of invariant sites (if Gamma)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "children": [
                            {
                                "argpos": "1",
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": null,
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "empirical_frequencies",
                                "paramfile": "dnadist.params",
                                "precond": null,
                                "prompt": "Use empirical base frequencies (F)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Boolean",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "2",
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "\"\"",
                                    "python": "\"\""
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": true,
                                "name": "A_frequency",
                                "paramfile": null,
                                "precond": {
                                    "perl": "not $empirical_frequencies",
                                    "python": "not empirical_frequencies"
                                },
                                "prompt": "Base frequencies for A",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "2",
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "\"\"",
                                    "python": "\"\""
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": true,
                                "name": "C_frequency",
                                "paramfile": null,
                                "precond": {
                                    "perl": "not $empirical_frequencies",
                                    "python": "not empirical_frequencies"
                                },
                                "prompt": "Base frequencies for C",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "2",
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "\"\"",
                                    "python": "\"\""
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": true,
                                "name": "G_frequency",
                                "paramfile": null,
                                "precond": {
                                    "perl": "not $empirical_frequencies",
                                    "python": "not empirical_frequencies"
                                },
                                "prompt": "Base frequencies for G",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "2",
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "\"\"",
                                    "python": "\"\""
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": true,
                                "name": "T_frequency",
                                "paramfile": null,
                                "precond": {
                                    "perl": "not $empirical_frequencies",
                                    "python": "not empirical_frequencies"
                                },
                                "prompt": "Base frequencies for T/U",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "2",
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "\"F\\\\n$A_frequency $C_frequency $G_frequency $T_frequency\\\\n\"",
                                    "python": "\"F\\n\" + str( A_frequency ) + \" \" + str( C_frequency ) + \" \" + str( G_frequency ) + \" \" + str( T_frequency ) + \"\\n\""
                                },
                                "hidden": true,
                                "main": false,
                                "mandatory": false,
                                "name": "base_frequencies",
                                "paramfile": "dnadist.params",
                                "precond": {
                                    "perl": "not $empirical_frequencies",
                                    "python": "not empirical_frequencies"
                                },
                                "prompt": null,
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": "These must add to 1",
                        "name": "ACGT_frequencies",
                        "precond": {
                            "perl": "distance eq \"F84\"",
                            "python": "distance == \"F84\""
                        },
                        "prompt": "Base frequencies for A, C, G, T/U (if not empirical)"
                    }
                ],
                "comment": null,
                "name": "dnadist_opt",
                "precond": null,
                "prompt": "Dnadist options"
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"W\\\\n\" : \"\"",
                            "python": "( \"\" , \"W\\n\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "weights",
                        "paramfile": "dnadist.params",
                        "precond": null,
                        "prompt": "Use weights for sites (W)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "-1",
                        "command": false,
                        "comment": "It selects a set of sites to be analyzed, ignoring the others. \n            The sites selected are those with weight 1.\n            The weights in it are a simple string of digits. \n            Blanks in the weightfile are skipped over and ignored, and the weights can continue to a new line.",
                        "ctrl": {
                            "perl": "$value ne \"infile\" and $value ne \"outfile\"",
                            "python": "value not in ( \"infile\" , \"outfile\" )"
                        },
                        "format": {
                            "perl": "(defined $value) ? \"ln -s $weights_file weights && \" : \"\"",
                            "python": "( \"\" , \" ln -s \" + str( weights_file ) + \" weights && \" )[ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "weights_file",
                        "paramfile": null,
                        "precond": {
                            "perl": "$weights",
                            "python": "weights"
                        },
                        "prompt": "Weights file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "PhylipWeight",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "weight_opt",
                "precond": null,
                "prompt": "Weight options"
            },
            {
                "children": [
                    {
                        "argpos": "-5",
                        "command": false,
                        "comment": "By selecting this option, the bootstrap will be performed on your sequence file. So you don't need to perform a separated seqboot before.Don't give an already bootstrapped file to the program, this won't work!",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"seqboot < seqboot.params && mv outfile seqboot.outfile && rm infile  && ln -s seqboot.outfile infile && \" : \"\"",
                            "python": "( \"\" , \"seqboot < seqboot.params && mv outfile seqboot.outfile && rm infile && ln -s seqboot.outfile infile && \" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "seqboot",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Perform a bootstrap before analysis",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "1. The bootstrap. Bootstrapping was invented by Bradley Efron in 1979, and its use in phylogeny estimation was introduced by me (Felsenstein, 1985b). It involves creating a new data set by sampling N characters randomly with replacement, so that the resulting data set has the same size as the original, but some characters have been left out and others are duplicated. The random variation of the results from analyzing these bootstrapped data sets can be shown statistically to be\n              typical of the variation that you would get from collecting new data sets. The method assumes that the characters evolve independently, an assumption that may not be realistic for many kinds of data.2. Delete-half-jackknifing. This alternative to the bootstrap involves sampling a random half of the characters, and including them in the data but dropping the others. The resulting data sets are half the size of the original, and no characters are duplicated. The random variation from doing this should be very similar to that obtained from the bootstrap. The method is advocated by Wu (1986).3. Permuting species for each characters. This method of resampling (well, OK, it may not be best to call it resampling) was introduced by Archie (1989) and Faith (1990; see also Faith and Cranston, 1991). It involves permuting the columns of the data matrix separately. This produces data matrices that have the same number and kinds of characters but no taxonomic structure. It is used for different purposes than the bootstrap, as it tests not the variation around an estimated tree but the hypothesis that there is no taxonomic structure in the data: if a statistic such as number of steps is significantly smaller in the actual data than it is in replicates that are permuted, then we can argue that there is some taxonomic structure in the data (though perhaps it might be just the presence of aa pair of sibling species).4. Permuting characters order. This simply permutes the order of the characters, the same reordering being applied to all species. For many methods of tree inference this will make no difference to the outcome (unless one has rates of evolution correlated among adjacent sites). It is included as a possible step in carrying out a permutation test of homogeneity of characters (such as the Incongruence Length Difference test).5. Permuting characters separately for each species. This is a method introduced by Steel, Lockhart, and Penny (1993) to permute data so as to destroy all phylogenetic structure, while keeping the base composition of each species the same as before. It shuffles the character order separately for each species.",
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "Method",
                        "paramfile": "seqboot.params",
                        "precond": {
                            "perl": "$seqboot",
                            "python": "seqboot"
                        },
                        "prompt": "Resampling methods (J)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1000",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value >= 0 and (($value % 2) != 0)",
                            "python": "value >= 0 and ( ( value % 2 ) != 0 )"
                        },
                        "format": {
                            "perl": "\"$value\\\\n\"",
                            "python": "str( value ) +\"\\n\""
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "seqboot_seed",
                        "paramfile": "seqboot.params",
                        "precond": {
                            "perl": "$seqboot",
                            "python": "seqboot"
                        },
                        "prompt": "Random number seed (must be odd)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value <= 1000",
                            "python": "value <= 1000"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"R\\\\n$value\\\\n\" : \"\"",
                            "python": "( \"\" , \"R\\n\" + str( value ) + \"\\n\" )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "replicates",
                        "paramfile": "seqboot.params",
                        "precond": {
                            "perl": "$seqboot",
                            "python": "seqboot"
                        },
                        "prompt": "How many replicates",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "bootstrap",
                "precond": null,
                "prompt": "Bootstrap options"
            },
            {
                "argpos": "1000",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"y\\\\n\"",
                    "python": "\"y\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "confirm",
                "paramfile": "dnadist.params",
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "-1",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"0\\\\n\"",
                    "python": "\"0\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "terminal_type",
                "paramfile": "dnadist.params",
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "1",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"M\\\\nD\\\\n$replicates\\\\n\"",
                    "python": "\"M\\nD\\n\" + str( replicates ) + str(\"\\n\")"
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "multiple_dataset",
                "paramfile": "dnadist.params",
                "precond": {
                    "perl": "$seqboot and $replicates > 1",
                    "python": "seqboot and replicates > 1"
                },
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "100",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"y\\\\n\"",
                    "python": "\"y\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "seqboot_confirm",
                "paramfile": "seqboot.params",
                "precond": {
                    "perl": "$seqboot",
                    "python": "seqboot"
                },
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "-1",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"0\\\\n\"",
                    "python": "\"0\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "seqboot_terminal_type",
                "paramfile": "seqboot.params",
                "precond": {
                    "perl": "$seqboot",
                    "python": "seqboot"
                },
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "dnadist",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"dnadist.outfile\"",
                    "python": "\"dnadist.outfile\""
                },
                "hidden": false,
                "main": false,
                "name": "outfile",
                "output_type": "file",
                "precond": null,
                "prompt": "Outfile",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "PhylipDistanceMatrix",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"seqboot.outfile\"",
                    "python": "\"seqboot.outfile\""
                },
                "hidden": false,
                "main": false,
                "name": "seqboot_out",
                "output_type": "file",
                "precond": {
                    "perl": "$seqboot",
                    "python": "seqboot"
                },
                "prompt": "seqboot outfile",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "SetOfAlignment",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [],
    "source_links": [],
    "title": "dnadist",
    "type": "program",
    "version": null
}