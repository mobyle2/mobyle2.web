{
    "authors": null,
    "classifications": [
        {
            "classification": "display:nucleic:restriction",
            "type": "mobyle1"
        },
        {
            "classification": "display:nucleic:translation",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": "showseq"
    },
    "comment": null,
    "description": "Displays sequences with features in pretty format",
    "documentation_links": [
        "http://bioweb2.pasteur.fr/docs/EMBOSS/showseq.html",
        "http://emboss.sourceforge.net/docs/themes"
    ],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -sequence=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "e_sequence",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "sequence option",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [
                                "DNA"
                            ],
                            "card": "1,n",
                            "datatype": {
                                "class": "Sequence",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": [
                                "EMBL",
                                "FASTA",
                                "GCG",
                                "GENBANK",
                                "NBRF",
                                "PIR",
                                "RAW",
                                "SWISSPROT",
                                "GFF"
                            ]
                        }
                    },
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -mfile=\" + str(value))[value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_mfile",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Restriction enzyme methylation data file (optional)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "RestrictionEnzymeMethylationData",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "e_input",
                "precond": null,
                "prompt": "Input section"
            },
            {
                "children": [
                    {
                        "argpos": "3",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -format=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "e_format",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Things to display",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "4",
                        "command": false,
                        "comment": "Specify a list of one or more code characters in the order in which you wish things to be displayed one above the other down  the page.S: SequenceB: Blank line1: Frame1 translation2: Frame2 translation3: Frame3 translation-1: Compframe1  translation-2: Compframe2 translation-3: Compframe3  translationT: Ticks lineN: Number ticks lineC: Complement  sequenceF: FeaturesR: Restriction enzyme cut sites in forward  sense-R: Restriction enzyme cut sites in reverse senseA: AnnotationFor example if you wish to see things displayed in the  order: sequence, complement sequence, ticks line, frame 1  translation, blank line; then you should enter 'S,C,T,1,B'.",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -things=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_things",
                        "paramfile": null,
                        "precond": {
                            "python": "e_format==\"0\""
                        },
                        "prompt": "Specify your own things to display (value from 1 to 100)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "e_required",
                "precond": null,
                "prompt": "Required section"
            },
            {
                "children": [
                    {
                        "argpos": "5",
                        "command": false,
                        "comment": "Regions to translate (if translating). \n If this is left blank the complete sequence is translated. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are separated by any non-digit, non-alpha character. \n  Examples of region specifications are: \n  24-45, 56-78 \n  1:45, 67=99;765..888",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -translate=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_translate",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Regions to translate (eg: 4-57,78-94)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "6",
                        "command": false,
                        "comment": "Regions to translate (if translating). \n If this is left blank the complete sequence is translated. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are separated by any non-digit, non-alpha character. \n  Examples of region specifications are: \n  78-56, 45-24, \n  888..765, 99=67; 45:1",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -revtranslate=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_revtranslate",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Regions to translate in reverse direction (eg: 78-94,4-57)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "7",
                        "command": false,
                        "comment": "Regions to put in uppercase. \n If this is left blank, then the sequence case is left alone. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are separated by any non-digit, non-alpha character. \n  Examples of region specifications are: \n  24-45, 56-78 \n  1:45, 67=99;765..888 \n  1,5,8,10,23,45,57,99",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -uppercase=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_uppercase",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Regions to put in uppercase (eg: 4-57,78-94)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "8",
                        "command": false,
                        "comment": "Regions to colour if formatting for HTML. \n If this is left blank, then the sequence is left alone. \n  A set of regions is specified by a set of pairs of positions. \n  The positions are integers. \n  They are followed by any valid HTML font colour. \n  Examples of region specifications are: \n  24-45 blue 56-78 orange \n  1-100 green 120-156 red \n  A file of ranges to colour (one range per line) can be specified  as '@filename'.",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -highlight=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_highlight",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Regions to colour in html (eg: 4-57 red 78-94 green)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "9",
                        "command": false,
                        "comment": "Regions to annotate by marking. \n If this is left blank, then no annotation is added. \n  A set of regions is specified by a set of pairs of positions  followed by optional text. \n  The positions are integers. \n  They are followed by any text (but not digits when on the  command-line). \n  Examples of region specifications are: \n  24-45 new domain 56-78 match to Mouse \n  1-100 First part 120-156 oligo \n  A file of ranges to annotate (one range per line) can be specified  as '@filename'.",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -annotation=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_annotation",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Regions to mark (eg: 4-57 promoter region 78-94 first exon)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": "The name 'all' reads in all enzyme names from the REBASE database. You can specify enzymes by giving their names with  commas between then, such as: 'HincII,hinfI,ppiI,hindiii'. \n  The case of the names is not important. You can specify a file of  enzyme names to read in by giving the name of the file holding the  enzyme names with a '@' character in front of it, for example,  '@enz.list'. \n  Blank lines and lines starting with a hash character or '!' are  ignored and all other lines are concatenated together with a comma  character ',' and then treated as the list of enzymes to search  for. \n  An example of a file of enzyme names is: \n  ! my enzymes \n  HincII, ppiII \n  ! other enzymes \n  hindiii \n  HinfI \n  PpiI",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -enzymes=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_enzymes",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Comma separated restriction enzyme list",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "11",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -table=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_table",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Genetic codes",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "children": [
                            {
                                "argpos": "12",
                                "command": false,
                                "comment": "By default any feature source in the feature table is shown. You can set this to match any feature source you wish to  show. \n  The source name is usually either the name of the program that  detected the feature or it is the feature table (eg: EMBL) that  the feature came from. \n  The source may be wildcarded by using '*'. \n  If you wish to show more than one source, separate their names  with the character '|', eg: \n  gene* | embl",
                                "ctrl": null,
                                "format": {
                                    "python": "(\"\", \" -sourcematch=\" + str(value))[value is not None]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_sourcematch",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Source of feature to display",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "String",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "13",
                                "command": false,
                                "comment": "By default any feature type in the feature table is shown. You can set this to match any feature type you wish to  show. \n  See http://www.ebi.ac.uk/embl/WebFeat/ for a list of the  EMBL feature types and see Appendix A of the Swissprot user  manual in http://www.expasy.org/sprot/userman.html  for a list of the Swissprot feature types. \n  The type may be wildcarded by using '*'. \n  If you wish to show more than one type, separate their names  with the character '|', eg: \n  *UTR | intron",
                                "ctrl": null,
                                "format": {
                                    "python": "(\"\", \" -typematch=\" + str(value))[value is not None]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_typematch",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Type of feature to display",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "String",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "14",
                                "command": false,
                                "comment": "By default any feature type in the feature table is shown. You can set this to match any feature sense you wish to  show. 0 - any sense, 1 - forward sense, -1 - reverse sense",
                                "ctrl": {
                                    "python": "value >= -1"
                                },
                                "format": {
                                    "python": "(\"\", \" -sensematch=\" + str(value))[value is not None and value!=vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_sensematch",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Sense of feature to display (value from -1 to 1)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "15",
                                "command": false,
                                "comment": "Minimum score of feature to display (see also maxscore)",
                                "ctrl": null,
                                "format": {
                                    "python": "(\"\", \" -minscore=\" + str(value))[value is not None and value!=vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_minscore",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Minimum score of feature to display",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "16",
                                "command": false,
                                "comment": "Maximum score of feature to display. \n If both minscore and maxscore are zero (the default),  then any score is ignored",
                                "ctrl": null,
                                "format": {
                                    "python": "(\"\", \" -maxscore=\" + str(value))[value is not None and value!=vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_maxscore",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Maximum score of feature to display",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "17",
                                "command": false,
                                "comment": "Tags are the types of extra values that a feature may have. For example in the EMBL feature table, a 'CDS' type of  feature may have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number', '/evidence', '/exception', '/function', '/gene',  '/label', '/map', '/note', '/number', '/partial', '/product',  '/protein_id', '/pseudo', '/standard_name', '/translation',  '/transl_except', '/transl_table', or '/usedin'. Some of these  tags also have values, for example '/gene' can have the value of  the gene name. \n  By default any feature tag in the feature table is shown. You  can set this to match any feature tag you wish to show. \n  The tag may be wildcarded by using '*'. \n  If you wish to show more than one tag, separate their names with  the character '|', eg: \n  gene | label",
                                "ctrl": null,
                                "format": {
                                    "python": "(\"\", \" -tagmatch=\" + str(value))[value is not None]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_tagmatch",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Tag of feature to display",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "String",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "18",
                                "command": false,
                                "comment": "Tag values are the values associated with a feature tag. Tags are the types of extra values that a feature may have. For  example in the EMBL feature table, a 'CDS' type of feature may  have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number', '/evidence', '/exception', '/function', '/gene',  '/label', '/map', '/note', '/number', '/partial', '/product',  '/protein_id', '/pseudo', '/standard_name', '/translation',  '/transl_except', '/transl_table', or '/usedin'. Only some of  these tags can have values, for example '/gene' can have the  value of the gene name. By default any feature tag value in the  feature table is shown. You can set this to match any feature  tag value you wish to show. \n  The tag value may be wildcarded by using '*'. \n  If you wish to show more than one tag value, separate their  names with the character '|', eg: \n  pax* | 10",
                                "ctrl": null,
                                "format": {
                                    "python": "(\"\", \" -valuematch=\" + str(value))[value is not None]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_valuematch",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Value of feature tags to display",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "String",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "19",
                                "command": false,
                                "comment": "By default if any tag/value pair in a feature matches the specified tag and value, then all the tags/value pairs of that  feature will be displayed. If this is set to be true, then only  those tag/value pairs in a feature that match the specified tag  and value will be displayed.",
                                "ctrl": null,
                                "format": {
                                    "python": "(\"\", \" -stricttags\")[ bool(value) ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_stricttags",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Only display the matching tags",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Boolean",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": null,
                        "name": "e_featuresection",
                        "precond": null,
                        "prompt": "Feature display options"
                    }
                ],
                "comment": null,
                "name": "e_additional",
                "precond": null,
                "prompt": "Additional section"
            },
            {
                "children": [
                    {
                        "children": [
                            {
                                "argpos": "20",
                                "command": false,
                                "comment": "This changes the output format to one where the recognition site is indicated by a row of '===' characters and  the cut site is pointed to by a '>' character in the forward  sense, or a '<' in the reverse sense strand.",
                                "ctrl": null,
                                "format": {
                                    "python": "(\"\", \" -flatreformat\")[ bool(value) ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_flatreformat",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Display re sites in flat format",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Boolean",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "21",
                                "command": false,
                                "comment": "This sets the minimum number of cuts for any restriction enzyme that will be considered. Any enzymes that cut fewer times  than this will be ignored.",
                                "ctrl": {
                                    "python": "value >= 1"
                                },
                                "format": {
                                    "python": "(\"\", \" -mincuts=\" + str(value))[value is not None and value!=vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_mincuts",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Minimum cuts per re (value from 1 to 1000)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "22",
                                "command": false,
                                "comment": "This sets the maximum number of cuts for any restriction enzyme that will be considered. Any enzymes that cut more times  than this will be ignored.",
                                "ctrl": null,
                                "format": {
                                    "python": "(\"\", \" -maxcuts=\" + str(value))[value is not None and value!=vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_maxcuts",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Maximum cuts per re",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "23",
                                "command": false,
                                "comment": "This sets the minimum length of the restriction enzyme recognition site. Any enzymes with sites shorter than this will  be ignored.",
                                "ctrl": {
                                    "python": "value >= 2"
                                },
                                "format": {
                                    "python": "(\"\", \" -sitelen=\" + str(value))[value is not None and value!=vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_sitelen",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Minimum recognition site length (value from 2 to 20)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "24",
                                "command": false,
                                "comment": "If this is set then this forces the values of the mincuts and maxcuts qualifiers to both be 1. Any other value you may  have set them to will be ignored.",
                                "ctrl": null,
                                "format": {
                                    "python": "(\"\", \" -single\")[ bool(value) ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_single",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Force single re site only cuts",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Boolean",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "25",
                                "command": false,
                                "comment": "This allows those enzymes which cut at the same position on the forward and reverse strands to be considered.",
                                "ctrl": null,
                                "format": {
                                    "python": "(\" -noblunt\", \"\")[ bool(value) ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_blunt",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Allow blunt end re cutters",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Boolean",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "26",
                                "command": false,
                                "comment": "This allows those enzymes which cut at different positions on the forward and reverse strands, leaving an  overhang, to be considered.",
                                "ctrl": null,
                                "format": {
                                    "python": "(\" -nosticky\", \"\")[ bool(value) ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_sticky",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Allow sticky end re cutters",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Boolean",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "27",
                                "command": false,
                                "comment": "This allows those enzymes which have one or more 'N' ambiguity codes in their pattern to be considered",
                                "ctrl": null,
                                "format": {
                                    "python": "(\" -noambiguity\", \"\")[ bool(value) ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_ambiguity",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Allow ambiguous re matches",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Boolean",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "28",
                                "command": false,
                                "comment": "If this is set then this allows searches for restriction enzyme recognition site and cut positions that span the end of  the sequence to be considered.",
                                "ctrl": null,
                                "format": {
                                    "python": "(\"\", \" -plasmid\")[ bool(value) ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_plasmid",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Allow circular dna",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Boolean",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "29",
                                "command": false,
                                "comment": "If this is set then RE recognition sites will not match methylated bases.",
                                "ctrl": null,
                                "format": {
                                    "python": "(\"\", \" -methylation\")[ bool(value) ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_methylation",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Use methylation data",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Boolean",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "30",
                                "command": false,
                                "comment": "If this is set, then only those enzymes with a commercial supplier will be searched for. This qualifier is ignored if you  have specified an explicit list of enzymes to search for,  rather than searching through 'all' the enzymes in the REBASE  database. It is assumed that, if you are asking for an explicit  enzyme, then you probably know where to get it from and so all  enzymes names that you have asked to be searched for, and which  cut, will be reported whether or not they have a commercial  supplier.",
                                "ctrl": null,
                                "format": {
                                    "python": "(\" -nocommercial\", \"\")[ bool(value) ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_commercial",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Only use restriction enzymes with suppliers",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Boolean",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "31",
                                "command": false,
                                "comment": "This limits the reporting of enzymes to just one enzyme from each group of isoschizomers. The enzyme chosen to represent  an isoschizomer group is the prototype indicated in the data  file 'embossre.equ', which is created by the program  'rebaseextract'. If you prefer different prototypes to be used,  make a copy of embossre.equ in your home directory and edit it.  If this value is set to be false then all of the input enzymes  will be reported. You might like to set this to false if you are  supplying an explicit set of enzymes rather than searching  'all' of them.",
                                "ctrl": null,
                                "format": {
                                    "python": "(\" -nolimit\", \"\")[ bool(value) ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "e_limit",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Limits re hits to one isoschizomer",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Boolean",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": null,
                        "name": "e_remapsection",
                        "precond": null,
                        "prompt": "Restriction map options"
                    },
                    {
                        "argpos": "32",
                        "command": false,
                        "comment": "This sets the minimum size of Open Reading Frames (ORFs) to display in the translations. All other translation regions are  masked by changing the amino acids to '-' characters.",
                        "ctrl": {
                            "python": "value >= 0"
                        },
                        "format": {
                            "python": "(\"\", \" -orfminsize=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_orfminsize",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Minimum size of orfs (value greater than or equal to 0)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "33",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -threeletter\")[ bool(value) ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_threeletter",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Display protein sequences in three-letter code",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "34",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -number\")[ bool(value) ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_number",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number the sequences",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "35",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "python": "value >= 1"
                        },
                        "format": {
                            "python": "(\"\", \" -width=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_width",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Width of sequence to display (value greater than or equal to 1)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "36",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "python": "value >= 0"
                        },
                        "format": {
                            "python": "(\"\", \" -length=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_length",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Line length of page (0 for indefinite) (value greater than or equal to 0)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "37",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "python": "value >= 0"
                        },
                        "format": {
                            "python": "(\"\", \" -margin=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_margin",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Margin around sequence for numbering (value greater than or equal to 0)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "38",
                        "command": false,
                        "comment": "Set this to be false if you do not wish to display the ID name of the sequence",
                        "ctrl": null,
                        "format": {
                            "python": "(\" -noname\", \"\")[ bool(value) ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_name",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Show sequence id",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "39",
                        "command": false,
                        "comment": "Set this to be false if you do not wish to display the description of the sequence",
                        "ctrl": null,
                        "format": {
                            "python": "(\" -nodescription\", \"\")[ bool(value) ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_description",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Show description",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "40",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -offset=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_offset",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Offset to start numbering the sequence from",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "41",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -html\")[ bool(value) ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_html",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Use html formatting",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "e_advanced",
                "precond": null,
                "prompt": "Advanced section"
            },
            {
                "children": [
                    {
                        "argpos": "42",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_outfile",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Name of the output file (e_outfile)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "e_output",
                "precond": null,
                "prompt": "Output section"
            },
            {
                "argpos": "43",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "python": "\" -auto -stdout\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "auto",
                "paramfile": null,
                "precond": null,
                "prompt": "Turn off any prompting",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "showseq",
    "outputs": {
        "children": [
            {
                "children": [
                    {
                        "comment": null,
                        "filenames": {
                            "python": "e_outfile"
                        },
                        "hidden": false,
                        "main": false,
                        "name": "e_outfile_out",
                        "output_type": "file",
                        "precond": null,
                        "prompt": "outfile_out option",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "ShowseqReport",
                                "superclass": "Report"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "e_output",
                "precond": null,
                "prompt": "Output section"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [],
    "source_links": [],
    "title": "showseq",
    "type": "program",
    "version": null
}