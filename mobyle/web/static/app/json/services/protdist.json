{
    "authors": null,
    "classifications": [
        {
            "classification": "phylogeny:distance",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": "This program uses protein sequences to compute\n\t  a distance matrix, under four different models of amino acid\n\t  replacement. It can also compute a table of similarity between\n\t  the amino acid sequences.The distance for each pair of species estimates the\n\t  total branch length between the two species, and can be used in the\n\t  distance matrix programs FITCH, KITSCH or NEIGHBOR.",
    "description": "Compute distance matrix from protein sequences",
    "documentation_links": [
        "http://bioweb2.pasteur.fr/docs/phylip/doc/protdist.html"
    ],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": "0",
                "command": true,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"protdist <protdist.params\"",
                    "python": "\"protdist <protdist.params\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "protdist",
                "paramfile": null,
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "-10",
                "command": false,
                "comment": "The input file must contained aligned sequences in PHYLIP format obtained by sequence alignment programs.",
                "ctrl": {
                    "perl": "$value ne \"infile\" and $value ne \"outfile\"",
                    "python": "value not in ( \"infile\" , \"outfile\" )"
                },
                "format": {
                    "perl": "\"ln -s $infile infile && \"",
                    "python": "\"ln -s \" + str( infile ) + \" infile && \""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "infile",
                "paramfile": null,
                "precond": null,
                "prompt": "Alignment File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [
                        "Protein"
                    ],
                    "card": null,
                    "datatype": {
                        "class": "Alignment",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "PHYLIPI"
                    ]
                }
            },
            {
                "argpos": "2",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": null,
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "Method",
                "paramfile": "protdist.params",
                "precond": null,
                "prompt": "Distance model (P)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "2",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": null,
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "gamma_dist",
                "paramfile": "protdist.params",
                "precond": {
                    "perl": "$Method =~ /^[JDC]$/",
                    "python": "Method in [ \"J\" , \"D\" , \"C\" ]"
                },
                "prompt": "Gamma distribution of rates among positions (G)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "1500",
                "command": false,
                "comment": "Instead of the more widely-known coefficient alpha, PROTDIST uses the coefficient of variation (ratio of the standard deviation to the mean) of rates among amino acid positions. So if there is 20% variation in rates, the CV is is 0.20. The square of the C.V. is also the reciprocal of the better-known shape parameter, alpha, of the Gamma distribution, so in this case the shape parameter alpha = 1/(0.20*0.20) = 25. If you want to achieve a particular value of alpha, such as 10, you will want to use a CV of 1/sqrt(100) = 1/10 = 0.1.",
                "ctrl": null,
                "format": {
                    "perl": "\"$value\\\\n\"",
                    "python": "str( value )+ \"\\n\""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "gamma",
                "paramfile": "protdist.params",
                "precond": {
                    "perl": "$gamma_dist =~ /^[YG]$/",
                    "python": "gamma_dist in [ \"Y\" , \"G\" ]"
                },
                "prompt": "Coefficient of variation of substitution rate among positions (must be positive)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Float",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "1501",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"$value\\\\n\"",
                    "python": "str(value)+\"\\n\""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "invariant",
                "paramfile": "protdist.params",
                "precond": {
                    "perl": "$gamma_dist eq \"G\"/",
                    "python": "gamma_dist == \"G\""
                },
                "prompt": "Fraction of invariant positions",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Float",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": "-5",
                        "command": false,
                        "comment": "By selecting this option, the bootstrap will be performed on your sequence file. So you don't need to perform a separated seqboot before.Don't give an already bootstrapped file to the program, this won't work!",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"seqboot < seqboot.params && mv outfile seqboot.outfile && rm infile  && ln -s seqboot.outfile infile && \" : \"\"",
                            "python": "( \"\" , \"seqboot < seqboot.params && mv outfile seqboot.outfile && rm infile && ln -s seqboot.outfile infile && \" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "seqboot",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Perform a bootstrap before analysis",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "1. The bootstrap. Bootstrapping was invented by Bradley Efron in 1979, and its use in phylogeny estimation was introduced by me (Felsenstein, 1985b). It involves creating a new data set by sampling N characters randomly with replacement, so that the resulting data set has the same size as the original, but some characters have been left out and others are duplicated. The random variation of the results from analyzing these bootstrapped data sets can be shown statistically to be\n              typical of the variation that you would get from collecting new data sets. The method assumes that the characters evolve independently, an assumption that may not be realistic for many kinds of data.2. Delete-half-jackknifing. This alternative to the bootstrap involves sampling a random half of the characters, and including them in the data but dropping the others. The resulting data sets are half the size of the original, and no characters are duplicated. The random variation from doing this should be very similar to that obtained from the bootstrap. The method is advocated by Wu (1986).3. Permuting species for each characters. This method of resampling (well, OK, it may not be best to call it resampling) was introduced by Archie (1989) and Faith (1990; see also Faith and Cranston, 1991). It involves permuting the columns of the data matrix separately. This produces data matrices that have the same number and kinds of characters but no taxonomic structure. It is used for different purposes than the bootstrap, as it tests not the variation around an estimated tree but the hypothesis that there is no taxonomic structure in the data: if a statistic such as number of steps is significantly smaller in the actual data than it is in replicates that are permuted, then we can argue that there is some taxonomic structure in the data (though perhaps it might be just the presence of aa pair of sibling species).4. Permuting characters order. This simply permutes the order of the characters, the same reordering being applied to all species. For many methods of tree inference this will make no difference to the outcome (unless one has rates of evolution correlated among adjacent sites). It is included as a possible step in carrying out a permutation test of homogeneity of characters (such as the Incongruence Length Difference test).5. Permuting characters separately for each species. This is a method introduced by Steel, Lockhart, and Penny (1993) to permute data so as to destroy all phylogenetic structure, while keeping the base composition of each species the same as before. It shuffles the character order separately for each species.",
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "resamp_method",
                        "paramfile": "seqboot.params",
                        "precond": {
                            "perl": "$seqboot",
                            "python": "seqboot"
                        },
                        "prompt": "Resampling methods (J)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10000",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value > 0 and ($value % 2) != 0",
                            "python": "value > 0 and (value % 2) != 0"
                        },
                        "format": {
                            "perl": "\"$value\\\\n\"",
                            "python": "str( value ) + \"\\n\""
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "seqboot_seed",
                        "paramfile": "seqboot.params",
                        "precond": {
                            "perl": "$seqboot",
                            "python": "seqboot"
                        },
                        "prompt": "Random number seed (must be odd)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$replicates <= 1000",
                            "python": "replicates <= 1000"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"R\\\\n$value\\\\n\" : \"\"",
                            "python": "( \"\", \"R\\n\" +str( value )+ \"\\n\" )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "replicates",
                        "paramfile": "seqboot.params",
                        "precond": {
                            "perl": "$seqboot",
                            "python": "seqboot"
                        },
                        "prompt": "How many replicates (R)?",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "bootstrap",
                "precond": null,
                "prompt": "Bootstrap options"
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"W\\\\n\" : \"\"",
                            "python": "( \"\" , \"W\\n\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "weights",
                        "paramfile": "protdist.params",
                        "precond": null,
                        "prompt": "Use weights for sites (W)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "-1",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value ne \"infile\" and $value ne \"outfile\"",
                            "python": "value not in ( \"infile\" , \"outfile\" )"
                        },
                        "format": {
                            "perl": "(defined $value) ? \"ln -s $weights_file weights && \" : \"\"",
                            "python": "( \"\" , \"ln -s \" + str( weights_file ) + \" weights && \" )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "weights_file",
                        "paramfile": null,
                        "precond": {
                            "perl": "$weights",
                            "python": "weights"
                        },
                        "prompt": "Weights file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "PhylipWeight",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "weight_opt",
                "precond": null,
                "prompt": "Weight options"
            },
            {
                "argpos": "1",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"M\\\\nD\\\\n$replicates\\\\n\"",
                    "python": "\"M\\nD\\n\"+ str( replicates ) + \"\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "multiple_dataset",
                "paramfile": "protdist.params",
                "precond": {
                    "perl": "$seqboot and $replicates > 1",
                    "python": "seqboot and replicates > 1"
                },
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "1000",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"Y\\\\n\"",
                    "python": "\"Y\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "bootconfirm",
                "paramfile": "seqboot.params",
                "precond": {
                    "perl": "$seqboot",
                    "python": "seqboot"
                },
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "-1",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"0\\\\n\"",
                    "python": "\"0\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "bootterminal_type",
                "paramfile": "seqboot.params",
                "precond": {
                    "perl": "$seqboot",
                    "python": "seqboot"
                },
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"1\\\\n\" : \"\"",
                            "python": "( \"\" , \"1\\n\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "printdata",
                        "paramfile": "protdist.params",
                        "precond": null,
                        "prompt": "Print out the data at start of run (1)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output",
                "precond": null,
                "prompt": "Output options"
            },
            {
                "children": [
                    {
                        "argpos": "3",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"U\\\\n$code\\\\n\" : \"\"",
                            "python": "( \"\", \"U\\n\" + str( code ) + \"\\n\" )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "code",
                        "paramfile": "protdist.params",
                        "precond": null,
                        "prompt": "Genetic code (U)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": "All have groups: (Glu Gln Asp Asn), (Lys Arg His), (Phe Tyr Trp) plus:George/Hunt/Barker: (Cys), (Met Val Leu Ileu), (Gly Ala Ser Thr Pro)Chemical: (Cys Met), (Val Leu Ileu Gly Ala Ser Thr), (Pro)Hall: (Cys), (Met Val Leu Ileu), (Gly Ala Ser Thr), (Pro)",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"A\\\\n$categorization\\\\n\" : \"\"",
                            "python": "( \"\" , \"A\\n\" +str( categorization ) +\"\\n\" )[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "categorization",
                        "paramfile": "protdist.params",
                        "precond": null,
                        "prompt": "Categorization of amino acids (A)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "3",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$change_prob > 0.0 and $change_prob < 1.0",
                            "python": "change_prob > 0.0 and change_prob < 1.0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"E\\\\n$value\\\\n\" : \"\"",
                            "python": "(\"\", \"E\\n\"+ str( value ) +\"\\n\")[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "change_prob",
                        "paramfile": "protdist.params",
                        "precond": null,
                        "prompt": "Prob change category (1.0=easy) (E)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "3",
                        "command": false,
                        "comment": "If the Categories distance is selected another menu option, T,\n             will appear allowing the user to supply the Transition/Transversion ratio that should be assumed at the underlying DNA level.\n             The transition/transversion ratio can be any number from 0.5 upwards.",
                        "ctrl": {
                            "perl": "$value >= 0.5",
                            "python": "value >= 0.5"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"T\\\\n$value\\\\n\" : \"\"",
                            "python": "(\"\", \"T\\n\"+str(value)+\"\\n\")[value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "ratio",
                        "paramfile": "protdist.params",
                        "precond": null,
                        "prompt": "Transition/transversion ratio (T)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "categ_options",
                "precond": {
                    "perl": "$Method eq \"C\"",
                    "python": "Method == \"C\""
                },
                "prompt": "Categories model options (options available only if Categories model choosed)"
            },
            {
                "argpos": "1000",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"Y\\\\n\"",
                    "python": "\"Y\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "confirm",
                "paramfile": "protdist.params",
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "-1",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"0\\\\n\"",
                    "python": "\"0\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "terminal_type",
                "paramfile": "protdist.params",
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "protdist",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"protdist.outfile\"",
                    "python": "\"protdist.outfile\""
                },
                "hidden": false,
                "main": false,
                "name": "outfile",
                "output_type": "file",
                "precond": null,
                "prompt": "Outfile",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "PhylipDistanceMatrix",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"seqboot.outfile\"",
                    "python": "\"seqboot.outfile\""
                },
                "hidden": false,
                "main": false,
                "name": "seqboot_out",
                "output_type": "file",
                "precond": {
                    "perl": "$seqboot",
                    "python": "seqboot"
                },
                "prompt": "seqboot outfile",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "SetOfAlignment",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [],
    "source_links": [],
    "title": "protdist",
    "type": "program",
    "version": null
}