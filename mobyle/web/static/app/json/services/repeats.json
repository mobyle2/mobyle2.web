{
    "authors": "G. Benson",
    "classifications": [
        {
            "classification": "sequence:nucleic:pattern",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": "repeats"
    },
    "comment": "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>The program scans a dna sequence file, looking for tandemly repeated\npatterns where the period of the repeat has a user specified *size* from\n1 to 32 nucleotides.  A possible repeat is found if *lookcount*\ncharacters are repeated at a separation of *size*.</html:p><html:p>Example: Suppose size is 7 and lookcount is 3. Then the sequence<html:pre>ACGTGTCCGTA \n                 ^^^   ^^^</html:pre>could be part of a possible repeat of the pattern CGTGTC\nbecause the first 3 characters CGT are repeated at a separation of 7.</html:p><html:p>Once a possible pattern is found, the program uses dynamic programming\nto compute a similarity score of the pattern versus the sequence in\nthe area where the pattern was found.  The dynamic programming uses\nweights for single indels rather than gap functions.  This is so that\nthe program quickly identifies the repeats rather than producing an\noptimal alignment score.</html:p><html:p>If the similarity score exceeds a threshold, then a consensus pattern is\ncomputed.  This consensus is aligned with the sequence and the\nalignment is displayed.</html:p></html:div>",
    "description": "Search repeats in DNA sequence",
    "documentation_links": [],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": "1",
                "command": false,
                "comment": "The data file must conform to the GenBank format.",
                "ctrl": null,
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \"+str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "seq",
                "paramfile": null,
                "precond": null,
                "prompt": "Sequence File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [
                        "DNA"
                    ],
                    "card": null,
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "GENBANK"
                    ]
                }
            },
            {
                "argpos": "2",
                "command": false,
                "comment": null,
                "ctrl": {
                    "perl": "$value >= 0",
                    "python": "value >= 0"
                },
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \"+str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "alpha",
                "paramfile": null,
                "precond": null,
                "prompt": "Match bonus (input as positive) (Alpha)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "3",
                "command": false,
                "comment": null,
                "ctrl": {
                    "perl": "$value > 0",
                    "python": "value > 0"
                },
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \"+str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "beta",
                "paramfile": null,
                "precond": null,
                "prompt": "Mismatch penalty (input as positive) (Beta)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "4",
                "command": false,
                "comment": null,
                "ctrl": {
                    "perl": "$value >= 0",
                    "python": "value >= 0"
                },
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \" + str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "delta",
                "paramfile": null,
                "precond": null,
                "prompt": "Indel penalty (input as positive) (Delta)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "5",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \" + str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "reportmax",
                "paramfile": null,
                "precond": null,
                "prompt": "Threshold score to report an alignment (Reportmax)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "6",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \" + str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "Size",
                "paramfile": null,
                "precond": null,
                "prompt": "Pattern size (Size)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "7",
                "command": false,
                "comment": "A possible repeat is found if *lookcount* characters are repeated at a separation of *size*. Recommended to use values between 3 and 8",
                "ctrl": null,
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \" + str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "lookcount",
                "paramfile": null,
                "precond": null,
                "prompt": "Number of characters to match to trigger dynamic programming (Lookcount)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "8",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "($value)? \" 1 \":\" 0\"",
                    "python": "(\" 0\" , \" 1 \")[ value ]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "noshortperiods",
                "paramfile": null,
                "precond": null,
                "prompt": "Patterns with shorter periods are excluded ? (Noshortperiods)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Boolean",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "repeats",
    "outputs": {
        "children": [],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "A method for fast database search for all k-nucleotide repeats, by Gary Benson and Michael S. Waterman, Nucleic Acids Research (1994) Vol. 22, No. 22, pp 4828-4836.",
            "url": null
        }
    ],
    "source_links": [],
    "title": "repeats",
    "type": "program",
    "version": "1.1"
}