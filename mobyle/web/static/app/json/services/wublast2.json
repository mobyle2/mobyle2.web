{
    "authors": "Gish. W",
    "classifications": [
        {
            "classification": "database:search:homology",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": null,
    "description": "Wash-U. BLAST, with gaps",
    "documentation_links": [],
    "env": [],
    "homepage_links": [
        "http://blast.wustl.edu/"
    ],
    "inputs": {
        "children": [
            {
                "argpos": "1",
                "command": true,
                "comment": "The five BLAST programs described here perform the following tasks:- blastp compares an amino acid query sequence against a protein sequence database;- blastn compares a nucleotide query sequence against a nucleotide sequence database;- blastx compares the six-frame conceptual translation products of a nucleotide query sequence (both strands) against a protein sequence database;- tblastn compares a protein query sequence against a nucleotide sequence database dynamically translated in all six reading frames (both strands).- tblastx compares the six-frame translations of a nucleotide query sequence against the six-frame translations of a nucleotide sequence database.",
                "ctrl": null,
                "format": {
                    "perl": "\"$value\"",
                    "python": "str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "wublast2",
                "paramfile": null,
                "precond": null,
                "prompt": "Blast program",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Choose a protein db for blastp or blastx.",
                        "ctrl": null,
                        "format": {
                            "perl": "\" $value\"",
                            "python": "\" \"+str(value)"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "protein_db",
                        "paramfile": null,
                        "precond": {
                            "perl": "$wublast2 =~ /^blast[px]$/",
                            "python": "wublast2 in [ \"blastp\", \"blastx\" ]"
                        },
                        "prompt": "Protein db",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Choose a nucleotide db for blastn, tblastn or tblastx",
                        "ctrl": null,
                        "format": {
                            "perl": "\" $value\"",
                            "python": "\" \"+str(value)"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "nucleotid_db",
                        "paramfile": null,
                        "precond": {
                            "perl": "$wublast2 =~ /^(blastn|tblast[nx])$/)",
                            "python": "wublast2 in [ \"blastn\", \"tblastn\", \"tblastx\" ]"
                        },
                        "prompt": "Nucleotid db",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "db",
                "precond": null,
                "prompt": "Database"
            },
            {
                "children": [
                    {
                        "argpos": "3",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\" $query_seq\"",
                            "python": "\" \" + str(value)"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "query_seq",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Query",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Sequence",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": [
                                "FASTA"
                            ]
                        }
                    },
                    {
                        "argpos": "5",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -nosegs\" : \"\"",
                            "python": "( \"\" , \" -nosegs\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "nosegs",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Do not segment the query sequence on hyphen (-) characters (-nosegs)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "query",
                "precond": null,
                "prompt": "Query Sequence"
            },
            {
                "argpos": "5",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "(defined $value and $value ne $vdef) ? \" -$value\" : \"\"",
                    "python": "( \"\" , \" -\" + str(value) )[ value is not None and value != vdef]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "compat",
                "paramfile": null,
                "precond": null,
                "prompt": "BLAST version",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Default: 9 for proteins and 10 for nucleics.",
                        "ctrl": {
                            "perl": "$value >= 1 and $value < 2147483647",
                            "python": "value >= 1 and value < 2147483647"
                        },
                        "format": {
                            "perl": "(defined $value) ? \"Q=$value\" : \"\"",
                            "python": "( \"\" , \" Q=\" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "open_a_gap",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Open gap penalty (Q)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Default: 2 for proteins; 10 for nucleics.",
                        "ctrl": {
                            "perl": "$value >= 0 and $value < 2147483647",
                            "python": "value >= 0 and value < 2147483647"
                        },
                        "format": {
                            "perl": "(defined $value) ? \" R=$value\" : \"\"",
                            "python": "(\"\" , \" R=\" + str(value))[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "extend_a_gap",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Extending a gap penalty (R)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "children": [
                            {
                                "argpos": null,
                                "command": false,
                                "comment": "Several PAM (point accepted mutations per 100 residues) amino acid scoring matrices are provided in the BLAST software distribution, including the PAM40, PAM120, and PAM250. While the BLOSUM62 matrix is a good general purpose scoring matrix and is the default matrix used by the BLAST programs, if one is restricted to using only PAM scoring matrices, then the PAM120 is recommended for general protein similarity searches (Altschul, 1991). The pam(1 program can be used to produce PAM matrices of any desired iteration from 2 to 511. Each matrix is most sensitive at finding similarities at its particular PAM distance. For more thorough searches, particularly when the mutational distance between potential homologs is unknown and the significance of their similarity may be only marginal, Altschul (1991, 1992) recommends performing at least three searches, one each with the PAM40, PAM120 and PAM250 matrices.",
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value and $value ne $vdef) ? \" -matrix $value\" : \"\"",
                                    "python": "( \"\" , \" -matrix \" + str(value) )[ value is not None and value != vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "matrix",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Similarity matrix (-matrix)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Choice",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": null,
                        "name": "scoring_blast",
                        "precond": {
                            "perl": "$wublast2 ne \"blastn\"",
                            "python": "wublast2 != \"blastn\""
                        },
                        "prompt": "Protein penalty (not for blastn)"
                    },
                    {
                        "children": [
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value and $value != $vdef) ? \" N=$value\" : \"\"",
                                    "python": "( \"\" , \" N=\" + str(value) )[ value is not None and value != vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "mismatch",
                                "paramfile": null,
                                "precond": {
                                    "perl": "$wublast2 eq blastn",
                                    "python": "wublast2 == \"blastn\""
                                },
                                "prompt": "Penalty for a nucleotid mismatch (N)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value and $value != $vdef) ? \" M=$value\" : \"\"",
                                    "python": "( \"\" , \" M=\" + str(value) )[ value is not None and value != vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "match",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Reward for a nucleotid match (M)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": null,
                        "name": "scoring_blastn",
                        "precond": {
                            "perl": "$wublast2 eq \"blastn\"",
                            "python": "wublast2 == \"blastn\""
                        },
                        "prompt": "Blastn penalty"
                    }
                ],
                "comment": null,
                "name": "scoring_opt",
                "precond": null,
                "prompt": "Scoring options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Mask letters in the query sequence without altering the sequence itself, during neighborhood word generation.",
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "filter",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Filter or Masking query sequence",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This option activates filtering or masking of segments of the query sequence based on a potentially wide variety of criteria. The usual intent of filtering is to mask regions that are non-specific for protein identification using sequence similarity. For instance, it may be desired to mask acidic or basic segments that would otherwise yield overwhelming amounts of uninteresting, non-specific matches against a wide array of protein families from a comprehensive database search. The BLAST programs have internally-coded knowledge of the specific command line options needed to invoke the SEG and XNU programs as query sequence filters, but these two filter programs are not included in the BLAST software distribution and must be independently installed.The SEG program (Wootton and Federhen, 1993) masks low compositional complexity regions, while XNU (Claverie and States, 1993) masks regions containing short-periodicity internal repeats. The BLAST programs can pipe the filtered output from one program into another. For instance, XNU+SEG or SEG+XNU can be specified as the filtermethod to have each program filter the query sequence in succession. Note that neither SEG nor XNU is suitable for filtering untranslated nucleotide sequences for use by blastn",
                        "ctrl": null,
                        "format": {
                            "perl": "\" -$filter $value\"",
                            "python": "\" -\" + str(filter) + \" \" + str(value)"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "other_filters",
                        "paramfile": null,
                        "precond": {
                            "perl": "defined($filter)",
                            "python": "filter is not None"
                        },
                        "prompt": "Filtering or Masking options",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -maskextra\" : \"\"",
                            "python": "( \"\" , \" -maskextra\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "maskextra",
                        "paramfile": null,
                        "precond": {
                            "perl": "$filter eq \"wordmask\"",
                            "python": "filter == \"wordmask\""
                        },
                        "prompt": "Extend masking additional distance into flanking regions (-maskextra)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -$value\" : \"\"",
                            "python": "( \"\" , \" -\" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "lc",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Filter lower-case letters in query",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "filter_opt",
                "precond": null,
                "prompt": "Filtering and masking options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The parameter Expect (E) establishes a statistical significance threshold for reporting database sequence matches. E is interpreted as the upper bound on the expected frequency of chance occurrence of an HSP (or set of HSPs) within the context of the entire database search. Any database sequence whose matching satisfies E is subject to being reported in the program output. If the query sequence and database sequences follow the random sequence model of Karlin and Altschul (1990), and if sufficiently sensitive BLAST algorithm parameters are used, then E may be thought of as the number of matches one expects to observe by chance alone during the database search. The default value for E is 10, while the permitted range for this Real valued parameter is 0 < E <= 1000.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" E=$value\" : \"\"",
                            "python": "( \"\" , \" E=\" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Expect",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Expected value (E)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -hspmax $value\" : \"\"",
                            "python": "( \"\" , \" -hspmax \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "hspmax",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximal number of HSPs saved or reported per subject sequence (-hspmax)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "E2 is interpreted as the expected number of HSPs that will be found when comparing two sequences that each have the same length -- either 300 amino acids or 1000 nucleotides, whichever is appropriate for the particular program being used.The default value for E2 is typically about 0.15 but may vary from version to version of each program.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" E2=$value\" : \"\"",
                            "python": "(\"\" , \" E2=\" + str(value))[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "E2",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Expected number of HSPs that will be found when comparing two sequences that each have the same length (E2)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The parameter Cutoff (S) represents the score at which a single HSP would by itself satisfy the significance threshold E. Higher scores -- higher values for S -- correspond to increasing statistical significance (lower probability of chance occurrence). Unless S is explicitly set on the command line, its default value is calculated from the value of E. If both S and E are set on the command line, the one which is the most restrictive is used. When neither parameter is specified on the command line, the default value for E is used to calculate S.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" S=$value\" : \"\"",
                            "python": "( \"\" , \" S=\" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Cutoff",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Cutoff score: threshold for report (S)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "S2 may be thought of as the score expected for the MSP between two sequences that each have the same length -- either 300 amino acids or 1000 nucleotides, whichever is appropriate for the particular program being used.The default value for S2 will be calculated from E2 and, like the relationship between E and S, is dependent on the residue composition of the query sequence and the scoring system employed, as conveyed by the Karlin-Altschul K and Lambda statistics.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" S2=$value\" : \"\"",
                            "python": "( \"\" , \" S2=\" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "S2",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Cutoff score which defines HSPs (S2)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The task of finding HSPs begins with identifying short words of length W in the query sequence that either match or satisfy some positive-valued threshold score T when aligned with a word of the same length in a database sequence. T is referred to as the neighborhood word score threshold (Altschul et al., 1990). These initial neighborhood word hits act as seeds for initiating searches to find longer HSPs containing them. The word hits are extended in both directions along each sequence for as far as the cumulative alignment score can be increased. Extension of the word hits in each direction are halted when: the cumulative alignment score falls off by the quantity X from its maximum achieved value; the cumulative score goes to zero or below, due to the accumulation of one or more negative-scoring residue alignments; or the end of either sequence is reached.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" W=$value\" : \"\"",
                            "python": "( \"\" , \" W=\" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "W",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Length of words identified in the query sequence (W)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" T=$value\" : \"\"",
                            "python": "( \"\" , \" T=\" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "T",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Neighborhood word score threshold (T)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Restrict blast neighborhood word generation to a specific segment of the query sequence that begins at 'nwstart' and continues for 'nwlen' residues or until the end of the query sequence is reached. HSP alignments may extend outside the region of neighborhood word generation but hte alignments can only be initiated by word hits occurring within the region. Through the use of these options, a very long query sequence can be searched piecemeal, using short, overlapping segments each time. The amount of overlap from one neighborhood region to the next need only be the blast wordlength W minus 1, in order to be assured of detecting all HSPs.However, to provide greater freedom for statistical interpretation of multiple HSP findings (eg. matches against exons) more extensive overlapping is recommanded, with the extent to be chosen based on the expected gene density and length of introns.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -nwstart $value\" : \"\"",
                            "python": "( \"\" , \" -nwstart \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "nwstart",
                        "paramfile": null,
                        "precond": {
                            "perl": "$wublast2 =~ /^blast[px]$/",
                            "python": "wublast2 in [ \"blastp\", \"blastx\" ]"
                        },
                        "prompt": "Start generating neighborhood words here in query (blastp/blastx) (-nwstart)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -nwlen $value\" : \"\"",
                            "python": "( \"\" , \" -nwlen \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "nwlen",
                        "paramfile": null,
                        "precond": {
                            "perl": "$wublast2 =~ /^blast[px]$/",
                            "python": "wublast2 in [ \"blastp\", \"blastx\" ]"
                        },
                        "prompt": "Generate neighborhood words over this distance from 'nwstart' in query (blastp/blastx) (-nwlen)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" X=$value\" : \"\"",
                            "python": "( \"\" , \" X=\" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "X",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Word hit extension drop-off score (X)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Invoke a 2-hit BLAST algorithm similar to that of Altschul et al. (1997), with maximum  wordhit separation distance, as measured from the end of each wordhit. Altschul et al. (1997) use the equivalent of hitdist=40 in their software by default (except NCBI-BLASTN, where 2-hit BLAST is not available). In WU-BLASTN, setting 'hitdist' and 'wink' (see below) is akin to using double-length words generated on W-mer boundaries.For best sensitivity, 2-hit BLAST should generally not be used.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -hitdist $value\" : \"\"",
                            "python": "( \"\" , \" -hitdist \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "hitdist",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximum word separation distance for 2-hit BLAST algorithm (-hitdist)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Generate word hits at every wink-th ('W increment') position along the query, where the default wink=1 produces neighborhood words at every position.For good sensitivity, this option should not be used. The benefit of using 'wink' is in finding identical or nearly identical sequences rapidly. When used in conjunction with the 'hitdist' option to obtain the highest speed, care should be taken that desired matches are not precluded by these parameters.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -wink $value\" : \"\"",
                            "python": "( \"\" , \" -wink \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "wink",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Generate word hits at every wink-th position (-wink)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This option turns off both the determination of the number of HSPs that ar consistent with each other in a gapped alignment and an adjustment that is made to the Sum and poisson statistics to account for the consistency of combined HSPs.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -consistency\" : \"\"",
                            "python": "( \"\" , \" -consistency\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "consistency",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Turn off HSP consistency rules for statistics (-consistency)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -hspsepqmax $value\" : \"\"",
                            "python": "( \"\" , \" -hspsepqmax \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "hspsepqmax",
                        "paramfile": null,
                        "precond": {
                            "perl": "not $consistency",
                            "python": "not consistency"
                        },
                        "prompt": "Maximal separation allowed between HSPs along query (-hspsepqmax)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -hspsepsmax $value\" : \"\"",
                            "python": "( \"\" , \" -hspsepsmax \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "hspsepsmax",
                        "paramfile": null,
                        "precond": {
                            "perl": "not $consistency",
                            "python": "not consistency"
                        },
                        "prompt": "Maximal separation allowed between HSPs along subject (-hspsepsmax)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -$value\" : \"\"",
                            "python": "( \"\" , \" -\" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "span",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Discard HSPs spanned on (-span*)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -nogap\" : \"\"",
                            "python": "( \"\" , \" -nogap\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "nogap",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Do not create gapped alignments (-nogap)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -gapall\" : \"\"",
                            "python": "( \"\" , \" -gapall\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gapall",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Generate a gapped alignment for every ungapped HSP found (-gapall)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "children": [
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value and $value != $vdef) ? \" -gapE $value\" : \"\"",
                                    "python": "( \"\" , \" -gapE \" + str(value) )[ value is not None and value != vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "gapE",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Expectation threshold of sets of ungapped HSPs for subsequent use in seeding gapped alignments (-gapE)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value) ? \" -gapE2 $value\" : \"\"",
                                    "python": "( \"\" , \" -gapE2 \" + str(value) )[ value is not None ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "gapE2",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Expectation threshold for saving individual gapped alignments (-gapE2)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value) ? \" -gapS2 $value\" : \"\"",
                                    "python": "( \"\" , \" -gapS2 \" + str(value) )[ value is not None ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "gapS2",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Cutoff score for saving individual gapped alignments (-gapS2)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": "Default values are 32 for protein comparisons and 16 for blastn.",
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value) ? \" -gapW $value\" : \"\"",
                                    "python": "( \"\" , \" -gapW \" + str(value) )[ value is not None ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "gapW",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Set the window width within which gapped alignments are generated (-gapW)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value) ? \" gapX=$value\" : \"\"",
                                    "python": "(\"\" , \" gapX=\" + str(value))[ value is not None ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "gapX",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Set the maximum drop-off score during banded gapped alignment (gapX)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value) ? \" -gapsepqmax $value\" : \"\"",
                                    "python": "( \"\" , \" -gapsepqmax \" + str(value) )[ value is not None ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "gapsepqmax",
                                "paramfile": null,
                                "precond": {
                                    "perl": "not $nogap  and not $consistency",
                                    "python": "not nogap  and not consistency"
                                },
                                "prompt": "Maximal permitted distance on the QUERY sequence between two consistent gapped alignments (-gapsepqmax)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value) ? \" -gapsepsmax $value\" : \"\"",
                                    "python": "( \"\" , \" -gapsepsmax \" + str(value) )[ value is not None ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "gapsepsmax",
                                "paramfile": null,
                                "precond": {
                                    "perl": "not $nogap  and not  $consistency",
                                    "python": "not nogap  and not consistency"
                                },
                                "prompt": "Maximal permitted distance on the subject sequence between two consistent gapped alignments (-gapsepsmax)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": null,
                        "name": "gap_selectivite",
                        "precond": {
                            "perl": "not $nogap  and not $gapall",
                            "python": "not nogap  and not gapall"
                        },
                        "prompt": "Selectivity options for gapped alignments"
                    }
                ],
                "comment": null,
                "name": "selectivite",
                "precond": null,
                "prompt": "Selectivity Options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -gcode $value\" : \"\"",
                            "python": "( \"\" , \" -gcode \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gcode",
                        "paramfile": null,
                        "precond": {
                            "perl": "$wublast2 =~ /^t?blastx$/",
                            "python": "wublast2 in [ \"blastx\" , \"tblastx\" ]"
                        },
                        "prompt": "Genetic code to translate the query (blastx,tblastx) (-gcode)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" $value\" : \"\"",
                            "python": "( \"\" , \" \" + str(value) )[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "strand",
                        "paramfile": null,
                        "precond": {
                            "perl": "$wublast2 =~ /^blast[nx]$/",
                            "python": "wublast2 in [ \"blastn\", \"blastx\" ]"
                        },
                        "prompt": "Which strands (for nucleotid query)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"-dbgcode $value\" : \"\"",
                            "python": "( \"\" , \"-dbgcode \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "dbgcode",
                        "paramfile": null,
                        "precond": {
                            "perl": "$wublast2 =~ /^tblast[nx]$/",
                            "python": "wublast2  in [ \"tblastx\", \"tblastn\" ]"
                        },
                        "prompt": "Genetic code for database translation (tblastx,tblastn) (-dbgcode)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\"",
                            "python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "dbstrand",
                        "paramfile": null,
                        "precond": {
                            "perl": "$wublast2 =~ /^tblast[nx]$/",
                            "python": "wublast2 in [ \"tblastn\" , \"tblastx\" ]"
                        },
                        "prompt": "Which strands of the database sequences (tblastn,tblastx) (-db)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "translation_opt",
                "precond": {
                    "perl": "$wublast2 ne blastn",
                    "python": "wublast2 != \"blastn\""
                },
                "prompt": "Translation Option"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -$value\" : \"\"",
                            "python": "( \"\" , \" -\" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "stat",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Use statistics",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This option consumes marginally more cpu time.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -stats\" : \"\"",
                            "python": "( \"\" , \" -stats\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "wordstats",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Collect word-hit statistics (-stats)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -ctxfactor $value\" : \"\"",
                            "python": "( \"\" , \" -ctxfactor \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "ctxfactor",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Base statistics on this number of independent contexts or reading frames (-ctxfactor)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "<text lang=\"en\" />",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -olf $value\" : \"\"",
                            "python": "( \"\" , \" -olf \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "olf",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximal fractional length of overlap for HSP consistency of two ungapped alignment (-olf)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -golf $value\" : \"\"",
                            "python": "( \"\" , \" -golf \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "golf",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximal fractional length of overlap for HSP consistency of two gapped alignments (-golf)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -olmax $value\" : \"\"",
                            "python": "( \"\" , \" -olmax \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "olmax",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximal absolute length of overlap for HSP consistency  of two ungapped alignment (default unlimited) (-olmax)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -golmax $value\" : \"\"",
                            "python": "( \"\" , \" -golmax \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "golmax",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximal absolute length of overlap for HSP consistency  of two gapped alignment (default unlimited) (-golmax)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This option defines the common ratio of the terms in a geometric progression used in normalizing probabilities across all numbers of Poisson events (typically the number of 'consistent' HSPs). A Poisson probability for N segments is eighted by the reciprocal of the Nth term in the progression, where the first term has a value of (1-rate), the second term is (1-rate)*rate, the third term is (1-rate)*rate*rate, and so on.The default rate is 0.5, such that the probability assigned to a single HSP is discounted by a factor of 2, the Poisson probability of 2 HSPs is discounted by a factor of 4, for 3 HSPs the discount factor is 8, and so on. The rate essentially defines a penalty imposed on the gap between each HSP, where the default penalty is equivalent to 1 bit of information.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -gapdecayrate $value\" : \"\"",
                            "python": "( \"\" , \" -gapdecayrate \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gapdecayrate",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Gap decay rate (-gapdecayrate)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "children": [
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value) ? \" K=$value\" : \"\"",
                                    "python": "( \"\" , \" K=\" + str(value) )[ value is not None ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "K",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "K parameter for ungapped alignment scores (K)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value) ? \" L=$value\" : \"\"",
                                    "python": "( \"\" , \" L=\" + str(value) )[ value is not None ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "L",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Lambda parameter for ungapped alignment scores (L)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value) ? \" H=$value\" : \"\"",
                                    "python": "( \"\" , \" H=\" + str(value) )[ value is not None ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "H",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "H parameter for ungapped alignment scores (H)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value) ? \" gapK=$value\" : \"\"",
                                    "python": "( \"\" , \" gapK=\" + str(value) )[ value is not None ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "gapK",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "K parameter for gapped alignment scores (gapK)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value) ? \" gapL=$value\" : \"\"",
                                    "python": "( \"\" , \" gapL=\" + str(value) )[ value is not None ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "gapL",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Lambda parameter for gapped alignment scores (gapL)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value) ? \" gapH=$value\" : \"\"",
                                    "python": "( \"\" , \" gapH=\" + str(value) )[ value is not None ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "gapH",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "H parameter for gapped alignment scores (gapH)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": null,
                        "name": "kastats",
                        "precond": {
                            "perl": "$stat =~ /^(kap|sump)$/",
                            "python": "stat in [ \"kap\", \"sump\" ]"
                        },
                        "prompt": "Parameters for Karlin-Altschul statistics"
                    }
                ],
                "comment": "Parameters to use when evaluating the significance of gapped and ungapped alignment scores. Useful when precomputed values are unavailable for the chosen scoring matrix and gap penalty combination in the programs internal tables.",
                "name": "statistics",
                "precond": null,
                "prompt": "Statistic options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" H=1\" : \"\"",
                            "python": "( \"\" , \" H=1\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Histogram",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Histogram (H)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Maximum number of database sequences for which one-line descriptions will be reported (V).",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" V=$value\" : \"\"",
                            "python": "( \"\" , \" V=\" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Descriptions",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "How many short descriptions? (V)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Maximum number of database sequences for which high-scoring segment pairs will be reported (B).",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" B=$value\" : \"\"",
                            "python": "( \"\" , \" B=\" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Alignments",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "How many alignments? (B)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -$value\" : \"\"",
                            "python": "( \"\" , \" -\" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "sortby",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Sort order for reporting database sequences",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -postsw\" : \"\"",
                            "python": "( \"\" , \" -postsw\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "postsw",
                        "paramfile": null,
                        "precond": {
                            "perl": "$wublast2 eq \"blastp\"",
                            "python": "wublast2 == \"blastp\""
                        },
                        "prompt": "Perform full Smith-Waterman before output (blastp only) (-postsw)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "499",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\" -o blast.txt\"",
                            "python": "\" -o blast.txt\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "output_file",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Output file name",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "499",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\" -cpus 1\"",
                            "python": "\" -cpus 1\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "cpunum",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "CPU number to use",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "500",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\" && html4blast -g -o blast.html blast.txt\"",
                            "python": "(\"\" , \" && html4blast -g -o blast.html blast.txt\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "output_format",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Html output format",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -echofilter\" : \"\"",
                            "python": "( \"\" , \" -echofilter\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "echofilter",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Display filter sequences in output (-echofilter)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -prune\" : \"\"",
                            "python": "( \"\" , \" -prune\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "prune",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Do not prune insignificant HSPs from the output lists (-prune)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -topcomboN $value\" : \"\"",
                            "python": "( \"\" , \" -topcomboN \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "topcomboN",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Report this number of consistent (colinear) groups of HSPs (-topcomboN)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -topcomboE $value\" : \"\"",
                            "python": "( \"\" , \" -topcomboE \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "topcomboE",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Only show HSP combos within this factor of the best combo (-topcomboE)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -gi\" : \"\"",
                            "python": "( \"\" , \" -gi\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gi",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Display gi identifiers, when available (-gi)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -noseqs\" : \"\"",
                            "python": "( \"\" , \" -noseqs\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "noseqs",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Do not display sequence alignments (-noseqs)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "affichage",
                "precond": null,
                "prompt": "Report options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "wublast2",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"blast.txt\"",
                    "python": "\"blast.txt\""
                },
                "hidden": false,
                "main": false,
                "name": "tmp_outfile",
                "output_type": "file",
                "precond": null,
                "prompt": "Blast report",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "BlastTextReport",
                        "superclass": "Report"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"blast.html\"",
                    "python": "\"blast.html\""
                },
                "hidden": false,
                "main": false,
                "name": "htmlfile",
                "output_type": "file",
                "precond": null,
                "prompt": "Blast html report",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "BlastHtmlReport",
                        "superclass": "Report"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"*.gif\"",
                    "python": "\"*.gif\""
                },
                "hidden": true,
                "main": false,
                "name": "imgfile",
                "output_type": "file",
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Picture",
                        "superclass": "Binary"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"blast.xml\"",
                    "python": "\"blast.xml\""
                },
                "hidden": false,
                "main": false,
                "name": "xmloutput",
                "output_type": "file",
                "precond": null,
                "prompt": "Blast xml report",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "BlastXmlReport",
                        "superclass": "Report"
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "Gish, Warren (1994-1997). unpublished.",
            "url": null
        },
        {
            "doi": null,
            "label": "Gish, W, and DJ States (1993). Identification of protein coding regions by database similarity search. Nature Genetics 3:266-72.",
            "url": null
        },
        {
            "doi": null,
            "label": "Altschul, SF, and W Gish (1996). Local alignment statistics. ed. R. Doolittle. Methods in Enzymology 266:460-80.",
            "url": null
        },
        {
            "doi": null,
            "label": "Korf, I, and W Gish (2000). MPBLAST: improved BLAST performance with multiplexed queries. Bioinformatics in press.",
            "url": null
        },
        {
            "doi": null,
            "label": "Altschul, Stephen F., Warren Gish, Webb Miller, Eugene W. Myers, and David J. Lipman (1990). Basic local alignment search tool. J. Mol. Biol. 215:403-10.",
            "url": null
        }
    ],
    "source_links": [],
    "title": "WUBLAST2",
    "type": "program",
    "version": "2.0"
}