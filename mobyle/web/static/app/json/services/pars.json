{
    "authors": null,
    "classifications": [
        {
            "classification": "phylogeny:parsimony",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": "PARS is a general parsimony program which carries out the Wagner parsimony method with multiple states. Wagner parsimony allows changes among all states. The criterion is to find the tree which requires the minimum number of changes.",
    "description": "Discrete character parsimony",
    "documentation_links": [
        "http://bioweb2.pasteur.fr/docs/phylip/doc/pars.html"
    ],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": "0",
                "command": true,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"pars < pars.params\"",
                    "python": "\"pars < pars.params\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "pars",
                "paramfile": null,
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "-10",
                "command": false,
                "comment": "Warnning: if you want to perform a bootstrap (seqboot method) before your pars analysis your data must be in sequential format.",
                "ctrl": null,
                "format": {
                    "perl": "\"ln -s $infile infile && \"",
                    "python": "\"ln -s \" + str( infile ) +\" infile && \""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "infile",
                "paramfile": null,
                "precond": {
                    "perl": "$infile ne \"infile\"",
                    "python": "infile != \"infile\""
                },
                "prompt": "Input File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "PhylipDiscreteCharMatrix",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "90",
                "command": false,
                "comment": "if you intend to perform pars alone, your data must be in Phylip format interleaved or sequential. But\n    \t\tif you want to perform a bootsrap (seqboot) before the pars analysis, the data must be in Phylip sequential format.",
                "ctrl": {
                    "perl": "( defined $seqboot_or_jumble and ( $seqboot_or_jumble  >= 0 and $seqboot_or_jumble  < 5 ) )? (value eq 'sequential') : 1",
                    "python": "(value == 'sequential') if ( ( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5) ) else True"
                },
                "format": null,
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "input_format",
                "paramfile": "pars.params",
                "precond": null,
                "prompt": "Input File Format",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "PARS is a general parsimony program which carries out the Wagner parsimony method with multiple states. Wagner parsimony allows changes among all states. The criterion is to find the tree which requires the minimum number of changes. The Wagner method was originated by Eck and Dayhoff (1966) and by Kluge and Farris (1969). Here are its assumptions:1. Ancestral states are unknown.2. Different characters evolve independently.3. Different lineages evolve independently.4. Changes to all other states are equally probable (Wagner).5. These changes are a priori improbable over the evolutionary time spans involved in the differentiation of the group in question.6. Other kinds of evolutionary event such as retention of polymorphism are far less probable than these state changes.7. Rates of evolution in different lineages are sufficiently low that two changes in a long segment of the tree are far less probable than one change in a short segment.PARS can handle both bifurcating and multifurcating trees. In doing its search for most parsimonious trees, it adds species not only by creating new forks in the middle of existing branches, but it also tries putting them at the end of new branches which are added to existing forks. Thus it searches among both bifurcating and multifurcating trees. If a branch in a tree does not have any characters which might change in that branch in the most parsimonious tree, it does not save\n              that tree. Thus in any tree that results, a branch exists only if some character has a most parsimonious reconstruction that would involve change in that branch.",
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "search_opt",
                        "paramfile": "pars.params",
                        "precond": null,
                        "prompt": "Search option (S)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"V\\\\n$value\\\\n\" : \"\"",
                            "python": "(\"\", \"V\\n\"+str(value)+\"\\n\")[value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "save_trees",
                        "paramfile": "pars.params",
                        "precond": null,
                        "prompt": "Number of trees to save? (V)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "pars_opt",
                "precond": null,
                "prompt": "Pars options"
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "The weights follow the format described in the main documentation file, with integer weights from 0 to 35 allowed by using the characters 0, 1, 2, ..., 9 and A, B, ... Z.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"W\\\\n\" : \"\"",
                            "python": "(\"\" , \"W\\n\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "weights",
                        "paramfile": "pars.params",
                        "precond": null,
                        "prompt": "Weighted sites (W)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "-9",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\"ln -s $weight_file weights && \"",
                            "python": "\"ln -s \" + str( weight_file ) + \" weights && \""
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "weight_file",
                        "paramfile": null,
                        "precond": {
                            "perl": "$weights",
                            "python": "weights"
                        },
                        "prompt": "Weight file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "PhylipWeight",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "weight_opt",
                "precond": null,
                "prompt": "Weight options"
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "To give your tree to the program, you must normally put it in the alignment file, after the sequences, preceded by a line indicating how many trees you give.Here, this will be automatically appended: just give a treefile and the number of trees in it.",
                        "ctrl": {
                            "perl": "not ( $user_tree and $jumble )",
                            "python": "not ( user_tree and jumble )"
                        },
                        "format": {
                            "perl": "($value) ? \"U\\\\n\" : \"\"",
                            "python": "(\"\", \"U\\n\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "user_tree",
                        "paramfile": "pars.params",
                        "precond": null,
                        "prompt": "Use user tree (default: no, search for best tree)? (U)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "-1",
                        "command": false,
                        "comment": "Give a tree whenever the infile does not already contain the tree.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"cat $tree_file >> intree && \" : \"\"",
                            "python": "(\"\", \" cat \"+ str( tree_file ) + \" >> intree && \" )[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "tree_file",
                        "paramfile": null,
                        "precond": {
                            "perl": "$user_tree",
                            "python": "user_tree"
                        },
                        "prompt": "User Tree file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Tree",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": [
                                "NEWICK"
                            ]
                        }
                    },
                    {
                        "argpos": "-2",
                        "command": false,
                        "comment": "Give this information whenever the infile does not already contain the tree.",
                        "ctrl": null,
                        "format": {
                            "perl": "\"echo $value >> intree && \"",
                            "python": "\"echo \" + str( value ) + \" >> intree && \""
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "tree_nb",
                        "paramfile": null,
                        "precond": {
                            "perl": "defined $tree_file",
                            "python": "tree_file is not None"
                        },
                        "prompt": "How many tree(s) in the User Tree file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "user_tree_opt",
                "precond": null,
                "prompt": "User tree options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The resampling methods available are:The bootstrap.Bootstrapping was invented by Bradley Efron in 1979, and its use in phylogeny estimation was introduced by me (Felsenstein, 1985b; see also Penny and Hendy, 1985). \n          It involves creating a new data set by sampling N characters randomly with replacement, so that the resulting data set has the same size as the original,\n          but some characters have been left out and others are duplicated. The random variation of the results from analyzing these bootstrapped data sets can be\n          shown statistically to be typical of the variation that you would get from collecting new data sets.\n          The method assumes that the characters evolve independently, an assumption that may not be realistic for many kinds of data.Delete-half-jackknifing.This alternative to the bootstrap involves sampling a random half of the characters, and including them in the data but dropping the others.\n           The resulting data sets are half the size of the original, and no characters are duplicated.\n           The random variation from doing this should be very similar to that obtained from the bootstrap. \n           The method is advocated by Wu (1986). It was mentioned by me in my bootstrapping paper (Felsenstein, 1985b), and has been available\n           for many years in this program as an option. \n           Note that, for the present, block-jackknifing is not available, because I cannot figure out how to do it straightforwardly when the block size is not a divisor of the number of characters.Permuting species within characters.This method of resampling (well, OK, it may not be best to call it resampling) was introduced by Archie (1989) and Faith (1990; see also Faith and Cranston, 1991).\n          It involves permuting the columns of the data matrix separately.\n          This produces data matrices that have the same number and kinds of characters but no taxonomic structure.\n          It is used for different purposes than the bootstrap, as it tests not the variation around an estimated tree but the\n          hypothesis that there is no taxonomic structure in the data: if a statistic such as number of steps is significantly smaller in the actual data than it is in replicates that are permuted, \n          then we can argue that there is some taxonomic structure in the data (though perhaps it might be just the presence of aa pair of sibling species).Permuting characters.This simply permutes the order of the characters, the same reordering being applied to all species.\n          For many methods of tree inference this will make no difference to the outcome (unless one has rates of evolution correlated among adjacent sites).\n          It is included as a possible step in carrying out a permutation test of homogeneity of characters (such as the Incongruence Length Difference test).Permuting characters separately for each species.This is a method introduced by Steel, Lockhart, and Penny (1993) to permute data so as to destroy all phylogenetic structure, while keeping the base composition of each species the same as before.\n          It shuffles the character order separately for each species.Jumblethe tree construction programs the exact details of the search of different trees depend on the order of input of species. \n          In these programs J option enables you to tell the program to use a random number generator to choose the input order of species.",
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "seqboot_or_jumble",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "I want to",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The seqboot and jumble seed option should be an integer between 1 and 32767, and should of form 4n+1, which means that it must give a remainder of 1 when divided by 4. \n               This can be judged by looking at the last two digits of the number. Each different seed leads to a different sequence of addition of species. \n               By simply changing the random number seed and re-running the programs one can look for other, and better trees. \n               If the seed entered is not odd, the program will not proceed.",
                        "ctrl": {
                            "perl": "$value > 0 and (($value % 2) != 0)",
                            "python": "value > 0 and (( value % 2 ) != 0 )"
                        },
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "seed",
                        "paramfile": null,
                        "precond": {
                            "perl": "defined $seqboot_or_jumble",
                            "python": "seqboot_or_jumble is not None"
                        },
                        "prompt": "Random number seed (must be odd)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "-5",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"seqboot <seqboot.params && mv outfile seqboot.outfile && rm infile  && ln -s seqboot.outfile infile && \" : \"\"",
                            "python": "\"seqboot <seqboot.params && mv outfile seqboot.outfile && rm infile  && ln -s seqboot.outfile infile && \""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "seqboot",
                        "paramfile": null,
                        "precond": {
                            "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble  >= 0 and $ seqboot_or_jumble < 5 )",
                            "python": "( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5)"
                        },
                        "prompt": null,
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "qw ( D\\\\n D\\\\nJ\\\\n D\\\\nJ\\\\nJ\\\\n D\\\\nJ\\\\nJ\\\\nJ\\\\n D\\\\nJ\\\\nJ\\\\nJ\\\\nJ\\\\n )[$seqboot_or_jumble]",
                            "python": "( 'D\\n' , 'D\\nJ\\n' , 'D\\nJ\\nJ\\n' , 'D\\nJ\\nJ\\nJ\\n' , 'D\\nJ\\nJ\\nJ\\nJ\\n' , )[ int( seqboot_or_jumble ) ]"
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "seqboot_method",
                        "paramfile": "seqboot.params",
                        "precond": {
                            "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble >= 0 and $seqboot_or_jumble < 5 )",
                            "python": "( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5)"
                        },
                        "prompt": null,
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1000",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\"$seed\\\\n\"",
                            "python": "str( seed ) + \"\\n\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "seqboot_seed",
                        "paramfile": "seqboot.params",
                        "precond": {
                            "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble  >= 0 and $ seqboot_or_jumble < 5 )",
                            "python": "( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble >= 0 ) and int( seqboot_or_jumble ) < 5)"
                        },
                        "prompt": null,
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "20",
                        "command": false,
                        "comment": "This option is mandatory if you select a seqboot method. This value indicate how many set of data you will generate.\n            This option could generate huge data and should be used with discernment.  \n            If you provide 10 \"sequences\" of 1000 char lenght each (a file of ~10Kb) and select 1000 replicates wou will generate 10.000 sequences of 1000 char lenght (a file of ~10Mb which could lead to some problems to view or download the results)",
                        "ctrl": {
                            "perl": "$value <= 1000",
                            "python": "value <= 1000"
                        },
                        "format": {
                            "perl": "\"R\\\\n$value\\\\n\"",
                            "python": "\"R\\n\" + str( value ) + \"\\n\""
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "seqboot_replicates",
                        "paramfile": "seqboot.params",
                        "precond": {
                            "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble  >= 0 and $ seqboot_or_jumble < 5 )",
                            "python": "( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5)"
                        },
                        "prompt": "How many replicates",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "100",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\"y\\\\n\"",
                            "python": "\"y\\n\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "bootconfirm",
                        "paramfile": "seqboot.params",
                        "precond": {
                            "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble  >= 0 and $ seqboot_or_jumble < 5 )",
                            "python": "( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5)"
                        },
                        "prompt": null,
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "-1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\"0\\\\n\"",
                            "python": "\"0\\n\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "bootterminal_type",
                        "paramfile": "seqboot.params",
                        "precond": {
                            "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble  >= 0 and $ seqboot_or_jumble < 5 )",
                            "python": "( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5)"
                        },
                        "prompt": null,
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\"J\\\\n$seed\\\\n$jumble_times\\\\n\"",
                            "python": "'J\\n' + str( seed ) + \"\\n\" + str( jumble_times ) +\"\\n\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "jumble",
                        "paramfile": "pars.params",
                        "precond": {
                            "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble  eq \"5\" )",
                            "python": "( seqboot_or_jumble is not None ) and ( seqboot_or_jumble == \"5\" )"
                        },
                        "prompt": null,
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The Seqboot or Jumble options also causes the program to ask you how many times you want to restart the jumble process.\n            If you answer 10, the program will try ten different orders of species in constructing the trees, and the results printed out will reflect this entire search process (that is, the best trees found among all 10 runs will be printed out, not the best trees from each individual run).",
                        "ctrl": {
                            "perl": "( (seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5)) ? ($jumble_times * $seqboot_replicates) <= 100000 : ( $value < 1000000 )",
                            "python": "(jumble_times * seqboot_replicates) <= 100000 if ( ( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5) ) else (value < 1000000 )"
                        },
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "jumble_times",
                        "paramfile": null,
                        "precond": {
                            "perl": "defined $seqboot_or_jumble",
                            "python": "seqboot_or_jumble is not None"
                        },
                        "prompt": "Number of times to jumble",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "20",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\"M\\nD\\n\" + str( seqboot_replicates ) + \"\\n\" + str( seed ) +\"\\n\" + str( jumble_times ) +\"\\n\"",
                            "python": "\"M\\nD\\n\" + str( seqboot_replicates ) + \"\\n\" + str( seed ) +\"\\n\" + str( jumble_times ) +\"\\n\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "multiple_dataset",
                        "paramfile": "pars.params",
                        "precond": {
                            "perl": "defined $seqboot_or_jumble and $seqboot_or_jumble ne \"5\"",
                            "python": "seqboot_or_jumble is not None and seqboot_or_jumble != \"5\""
                        },
                        "prompt": null,
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "30",
                        "command": false,
                        "comment": "this option make sense only if you have multiple data set ( seqboot )",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" && cp infile pars.infile && cp pars.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" : \"\"",
                            "python": "( \"\" , \" && cp infile pars.infile && cp pars.outtree intree && consense <consense.params && mv outtree consense.outtree && mv outfile consense.outfile\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "consense",
                        "paramfile": null,
                        "precond": {
                            "perl": "( defined $seqboot_or_jumble and seqboot_or_jumble ne \"5\" ) and $print_treefile",
                            "python": "( seqboot_or_jumble is not None ) and ( seqboot_or_jumble != \"5\" )"
                        },
                        "prompt": "Compute a consensus tree ( seqboot )",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "By selecting this option, the bootstrap will be performed on your sequence file. So you don't need to perform a separated seqboot before.Don't give an already bootstrapped file to the program, this won't work!",
                "name": "jumble_bootstrap",
                "precond": null,
                "prompt": "Bootstrap and Jumble options"
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Tells the program to print a semi-graphical picture of the tree in the outfile.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \"3\\\\n\"",
                            "python": "(\"3\\n\", \"\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "print_tree",
                        "paramfile": "pars.params",
                        "precond": null,
                        "prompt": "Print out tree (3)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"4\\\\n\" : \"\"",
                            "python": "(\"\", \"4\\n\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "print_step",
                        "paramfile": "pars.params",
                        "precond": null,
                        "prompt": "Print out steps in each character (4)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"5\\\\n\" : \"\"",
                            "python": "(\"\", \"5\\n\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "print_states",
                        "paramfile": "pars.params",
                        "precond": null,
                        "prompt": "Print states at all nodes of tree (5)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "Tells the program to save the tree in a treefile (a standard representation of trees where the tree is specified by a nested pairs of parentheses, enclosing names and separated by commas).",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \"6\\\\n\"",
                            "python": "(\"6\\n\", \"\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "print_treefile",
                        "paramfile": "pars.params",
                        "precond": null,
                        "prompt": "Write out trees onto tree file (6)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"1\\\\n\" : \"\"",
                            "python": "(\"\", \"1\\n\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "printdata",
                        "paramfile": "pars.params",
                        "precond": null,
                        "prompt": "Print out the data at start of run (1)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output",
                "precond": null,
                "prompt": "Output options"
            },
            {
                "children": [
                    {
                        "argpos": "3",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"T\\\\n$threshold\\\\n\" : \"\"",
                            "python": "(\"\", \"T\\n\" + str(threshold) + \"\\n\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "use_threshold",
                        "paramfile": "pars.params",
                        "precond": null,
                        "prompt": "Use Threshold parsimony (T)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$threshold > 1",
                            "python": "threshold > 1"
                        },
                        "format": {
                            "perl": "\"\"",
                            "python": "\"\""
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "threshold",
                        "paramfile": "pars.params",
                        "precond": {
                            "perl": "$use_threshold",
                            "python": "use_threshold"
                        },
                        "prompt": "Threshold parsimony value",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "parsimony_opt",
                "precond": null,
                "prompt": "Parsimony options"
            },
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "The O (Outgroup) option specifies which species is to have the root of the tree be on the line leading to it.For example, if the outgroup is a species \"Mouse\" then the root of the tree will be placed in the middle of the branch which is connected to this species, with Mouse branching off on one side of the root and the lineage leading to the rest of the tree on the other.This option is toggle on by choosing the number of the outgroup (the species being taken in the numerical order that they occur in the input file).Outgroup-rooting will not be attempted  if it is a user-defined tree, despite your invoking the option.When it is used, the tree as printed out is still listed as being an unrooted tree, though the outgroup is connected to the bottommost node so that it is easy to visually convert the tree into rooted form.",
                        "ctrl": {
                            "perl": "$value > 0",
                            "python": "value > 0"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"o\\\\n$value\\\\n\" : \"\"",
                            "python": "(\"\", \"o\\n\" + str(value) + \"\\n\")[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "outgroup",
                        "paramfile": "pars.params",
                        "precond": null,
                        "prompt": "Outgroup root species (O)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "other_options",
                "precond": null,
                "prompt": "Other options"
            },
            {
                "argpos": "1000",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"y\\\\n\"",
                    "python": "\"y\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "confirm",
                "paramfile": "pars.params",
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "-1",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"0\\\\n\"",
                    "python": "\"0\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "terminal_type",
                "paramfile": "pars.params",
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "1000",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"Y\\\\n\"",
                    "python": "\"Y\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "consense_confirm",
                "paramfile": "consense.params",
                "precond": {
                    "perl": "$consense",
                    "python": "consense"
                },
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "-2",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"T\\\\n\"",
                    "python": "\"T\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "consense_terminal_type",
                "paramfile": "consense.params",
                "precond": {
                    "perl": "$consense",
                    "python": "consense"
                },
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "pars",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"pars.outfile\"",
                    "python": "\"pars.outfile\""
                },
                "hidden": false,
                "main": false,
                "name": "outfile",
                "output_type": "file",
                "precond": null,
                "prompt": "Pars output file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"pars.outtree\"",
                    "python": "\"pars.outtree\""
                },
                "hidden": false,
                "main": false,
                "name": "treefile",
                "output_type": "file",
                "precond": {
                    "perl": "$print_treefile",
                    "python": "print_treefile"
                },
                "prompt": "Pars output tree",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Tree",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "NEWICK"
                    ]
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"seqboot.outfile\"",
                    "python": "\"seqboot.outfile\""
                },
                "hidden": false,
                "main": false,
                "name": "seqboot_out",
                "output_type": "file",
                "precond": {
                    "perl": "( defined $seqboot_or_jumble ) and ( $seqboot_or_jumble  >= 0 and $ seqboot_or_jumble < 5 )",
                    "python": "( seqboot_or_jumble is not None ) and ( int( seqboot_or_jumble ) >= 0 and int( seqboot_or_jumble ) < 5)"
                },
                "prompt": "seqboot outfile",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "SetOfPhylipDiscreteCharMatrix",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"consense.outfile\"",
                    "python": "\"consense.outfile\""
                },
                "hidden": false,
                "main": false,
                "name": "consense_outfile",
                "output_type": "file",
                "precond": {
                    "perl": "$consense",
                    "python": "consense"
                },
                "prompt": "Consense output file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"consense.outtree\"",
                    "python": "\"consense.outtree\""
                },
                "hidden": false,
                "main": false,
                "name": "consense_treefile",
                "output_type": "file",
                "precond": {
                    "perl": "$consense",
                    "python": "consense"
                },
                "prompt": "Consense output tree",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Tree",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "NEWICK"
                    ]
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [],
    "source_links": [],
    "title": "pars",
    "type": "program",
    "version": null
}