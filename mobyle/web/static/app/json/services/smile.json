{
    "authors": "L. Marsan, J. Allali",
    "classifications": [
        {
            "classification": "sequence:nucleic:pattern",
            "type": "mobyle1"
        },
        {
            "classification": "sequence:protein:pattern",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": "smile is a program that was primarily made to extract promoter sequences from sequences. The interest of this program is to infer simultaneously several motifs (calledboxes) that respects distance constraints. The user has to select criterias. In a first step of extraction, all signals respecting these criterias are found.  In a second step, they are all statistically evaluated,  aiming  to  detect  the ones that are exceptionally represented in the original sequences.",
    "description": "Inference of structured signals in multiple sequences",
    "documentation_links": [],
    "env": [],
    "homepage_links": [
        "http://www-igm.univ-mlv.fr/~marsan/smile_english.html"
    ],
    "inputs": {
        "children": [
            {
                "argpos": null,
                "command": true,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"smile smile.params\"",
                    "python": "\"smile smile.params\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "smile",
                "paramfile": null,
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "1",
                "command": false,
                "comment": "This file must contain at least two sequences, as you cannot detect motifs which are common to several sequences in one sequence!",
                "ctrl": null,
                "format": {
                    "perl": "\"FASTA file\\t\\t\\t$value\\\\n\"",
                    "python": "\"FASTA file\\t\\t\\t\" + str(value) + \"\\n\""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "seq",
                "paramfile": "smile.params",
                "precond": null,
                "prompt": "Sequences File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "FASTA"
                    ]
                }
            },
            {
                "argpos": "2",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"Alphabet file\\t\\t\\t",
                    "python": "\"Alphabet file\\t\\t\\t"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "alphabet",
                "paramfile": "smile.params",
                "precond": null,
                "prompt": "Alphabet",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "3",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"Composition in *\\t\\t$value\\\\n\"",
                    "python": "\"Composition in *\\t\\t\" + str(value)+\"\\n\""
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "how_many_N",
                "paramfile": "smile.params",
                "precond": {
                    "perl": "$alphabet ne \"dna.alphabet\"",
                    "python": "alphabet != \"dna.alphabet\""
                },
                "prompt": "Maximum number of N in a motif for degenerated DNA or protein alphabet.",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "3",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"Composition in AG\\t\\t$value\\\\n\"",
                    "python": "\"Composition in AG\\t\\t\" + str(value)+\"\\n\""
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "how_many_R",
                "paramfile": "smile.params",
                "precond": {
                    "perl": "$alphabet eq \"dnadeg.alphabet\"",
                    "python": "alphabet == \"dnadeg.alphabet\""
                },
                "prompt": "Maximum number of purine (R) in a motif for degenerated DNA",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "3",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"Composition in CT\\t\\t$value\\\\n\"",
                    "python": "\"Composition in CT\\t\\t\" + str(value)+\"\\n\""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "how_many_Y",
                "paramfile": "smile.params",
                "precond": {
                    "perl": "$alphabet eq \"dnadeg.alphabet\"",
                    "python": "alphabet == \"dnadeg.alphabet\""
                },
                "prompt": "Maximum number of pyrimidine (Y) in a motif for degenerated DNA",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "10",
                "command": false,
                "comment": "The  percentage of sequences where at least one occurrence of a motif must appear to make it valid. 100 means that a motif must have occurrences in every sequences.",
                "ctrl": null,
                "format": {
                    "perl": "\"Quorum\\t\\t\\t\\t$value\\\\n\"",
                    "python": "\"Quorum\\t\\t\\t\\t\" + str(value)+\"\\n\""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "quorum",
                "paramfile": "smile.params",
                "precond": null,
                "prompt": "Minimum percentage of sequences containing a motif (quorum)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "11",
                "command": false,
                "comment": "The minimal length of the whole motif, i.e. the sum of minimal lengths of each  box. Warning:  the  length  of  the gaps between boxes mustn't me taken into account. The total minimal length may differ of the sum of boxs's minimal length:  you  can,  for instance, infer motifs made of two boxes, with min length of boxes equals to 4 and a total min length equals to 10.",
                "ctrl": null,
                "format": {
                    "perl": "\"Total min length\\t\\t$value\\\\n\"",
                    "python": "\"Total min length\\t\\t\" + str(value)+\"\\n\""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "minlen",
                "paramfile": "smile.params",
                "precond": null,
                "prompt": "Total min length",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "12",
                "command": false,
                "comment": "Same explanation as \"Total min length\". Excepted that a 0 length means \"infinity\"",
                "ctrl": null,
                "format": {
                    "perl": "(defined $value)? \"Total max length\\t\\t$value\\\\n\" : \"\"",
                    "python": "( \"\" , \"Total max length\\t\\t\" + str(value)+\"\\n\" )[ value is not None ]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "maxlen",
                "paramfile": "smile.params",
                "precond": null,
                "prompt": "Total max length",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "13",
                "command": false,
                "comment": "Total maximum number of substitutions for the motif.",
                "ctrl": {
                    "perl": "defined $subst and $subst <= $minlen",
                    "python": "subst is not None and subst <= minlen"
                },
                "format": {
                    "perl": "\"Total substitutions\\t\\t$value\\\\n\"",
                    "python": "\"Total substitutions\\t\\t\" + str(value)+\"\\n\""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "subst",
                "paramfile": "smile.params",
                "precond": null,
                "prompt": "Total substitutions",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "20",
                "command": false,
                "comment": "The  number of boxes that compose the motifs to infer. Imposed 1 for xml.",
                "ctrl": null,
                "format": {
                    "perl": "\"Boxes\\t\\t\\t\\t\\1\\\\n\"",
                    "python": "\"Boxes\\t\\t\\t\\t1\\n\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "boxes",
                "paramfile": "smile.params",
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "100",
                "command": false,
                "comment": "The number of shufflings of the original sequences to realize for the evaluation  of the statistical significance of the motifs found.",
                "ctrl": null,
                "format": {
                    "perl": "(defined $value)?  \"Shufflings\\t\\t\\t$value\\\\n\":\"\"",
                    "python": "( \"\" , \"Shufflings\\t\\t\\t\"+ str(value)+\"\\n\")[value is not None]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "shuffling",
                "paramfile": "smile.params",
                "precond": null,
                "prompt": "Number of shufflings",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "100",
                "command": false,
                "comment": "Length of the words to conserve during shufflings (usually 2).",
                "ctrl": null,
                "format": {
                    "perl": "(defined $value)?  \"Size k-mer\\t\\t\\t$value\\\\n\":\"\"",
                    "python": "(\"\" , \"Size k-mer\\t\\t\\t\"+ str(value)+\"\\n\")[value is not None]"
                },
                "hidden": false,
                "main": false,
                "mandatory": false,
                "name": "kmer",
                "paramfile": "smile.params",
                "precond": null,
                "prompt": "Length of the words to conserve during shufflings",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Integer",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "smile",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"smile.result\"",
                    "python": "\"smile.result\""
                },
                "hidden": false,
                "main": false,
                "name": "result",
                "output_type": "file",
                "precond": null,
                "prompt": "Result file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"smile.result.shuffle\"",
                    "python": "\"smile.result.shuffle\""
                },
                "hidden": false,
                "main": false,
                "name": "shufflefiles",
                "output_type": "file",
                "precond": null,
                "prompt": "Shuffle result file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Text",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "Marsan L, Sagot MF (2001). Algorithms for extracting structured motifs using a suffix-tree with application to promoter and regulatory site consensus identification. J. of Computational Biology, 7:345-360.",
            "url": null
        }
    ],
    "source_links": [
        "http://www-igm.univ-mlv.fr/~marsan/smile_english.html"
    ],
    "title": "SMILE",
    "type": "program",
    "version": "1.47"
}