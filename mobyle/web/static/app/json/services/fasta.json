{
    "authors": "W. Pearson",
    "classifications": [
        {
            "classification": "database:search:homology",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": null,
    "description": "Sequence database search",
    "documentation_links": [],
    "env": [],
    "homepage_links": [
        "http://fasta.bioch.virginia.edu/fasta_www2/fasta_list2.shtml"
    ],
    "inputs": {
        "children": [
            {
                "argpos": "0",
                "command": true,
                "comment": "- fasta: scan a protein or DNA sequence library for similar sequences- tfasta: compare a protein sequence to a DNA sequence librarSy, translating the DNA sequence library `on-the-fly' to the 3 forward and the 3 reverse frames without frameshifts.- fastx/fasty: compare a DNA sequence to a protein sequence database, comparing the translated DNA sequence in three frames, with frameshifts. fasty2 allows frameshifts inside codons.- tfastx/tfasty: compare a protein sequence vs a translated DNA db, with frameshifts. tfasty allows frameshifts inside codons.- fastf/tfastf: compare an ordered peptide mixture (obtained for example by Edman degradation of a CNBr cleavage) against a protein or translated DNA database.- fasts/tfasts: compare a set of short peptide fragments (obtained from a mass-spec analysis of a protein) against a protein or translated DNA database.",
                "ctrl": null,
                "format": {
                    "perl": "\"$value -q\"",
                    "python": "str(value) + \" -q\""
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "fasta",
                "paramfile": null,
                "precond": null,
                "prompt": "Fasta program",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "2",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \"+str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "query",
                "paramfile": null,
                "precond": null,
                "prompt": "Query sequence File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [
                        "Protein",
                        "DNA"
                    ],
                    "card": null,
                    "datatype": {
                        "class": "Sequence",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "FASTA"
                    ]
                }
            },
            {
                "argpos": "1",
                "command": false,
                "comment": null,
                "ctrl": {
                    "perl": "($fasta =~ /^fast(f|s)/ and $seqtype eq \"DNA\") or ($fasta =~ /^fast(x|y)/ and $seqtype eq \"protein\")",
                    "python": "(seqtype == \"protein\" and fasta in [\"fasta\", \"fastf\", \"fasts\", \"tfasta\", \"tfastx\", \"tfasty\", \"tfastf\", \"tfasts\"]) or (seqtype == \"DNA\" and fasta in [\"fasta\", \"fastx\", \"fasty\"] )"
                },
                "format": {
                    "perl": "(defined $value and $fasta =~ /^fasta/ and $value eq \"DNA\") or $fasta =~ /^fast(x|y)/) ? \" -n\" : \"\"",
                    "python": "( \"\" , \" -n\" )[ value is not None and value == \"DNA\" and fasta == 'fasta']"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "seqtype",
                "paramfile": null,
                "precond": null,
                "prompt": "Is it a DNA or protein sequence (-n)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Choose a protein db for fasta, fastx, fatsf, fasty or fasts.Please note that Swissprot usage by and for commercial entities requires a license agreement.",
                        "ctrl": null,
                        "format": {
                            "perl": "\"",
                            "python": "\""
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "protein_db",
                        "paramfile": null,
                        "precond": {
                            "perl": "($seqtype eq \"protein\" and $fasta =~ /^fasta/) or $fasta =~ /^fast(x|y|s|f)/",
                            "python": "(seqtype == \"protein\" and fasta == \"fasta\") or fasta in [\"fastx\", \"fasty\", \"fastf\", \"fasts\"]"
                        },
                        "prompt": "Protein Database",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Choose a nucleotide db for fasta, tfasta, tfastx, tfasty, tfastf or tfasts",
                        "ctrl": null,
                        "format": {
                            "perl": "\"",
                            "python": "\""
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "nucleotid_db",
                        "paramfile": null,
                        "precond": {
                            "perl": "($seqtype eq \"DNA\" and $fasta =~ /^fasta/ ) or $fasta =~ /^tfast/",
                            "python": "(seqtype == \"DNA\" and fasta == \"fasta\") or fasta in [ \"tfasta\", \"tfastx\", \"tfasty\", \"tfastf\", \"tfasts\"]"
                        },
                        "prompt": "Nucleotid Database",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Break long library sequences into blocks of N residues.  Useful for bacterial genomes, which have only one sequence entry.  -N 2000 works well for well for bacterial genomes.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -N $value\" : \"\"",
                            "python": "( \"\" , \" -N \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "break_long",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Break long library sequences into blocks (-N)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "db",
                "precond": null,
                "prompt": "Database"
            },
            {
                "children": [
                    {
                        "argpos": "4",
                        "command": false,
                        "comment": "ktup sets the sensitivity and speed of the search. If ktup=2, similar regions in the two sequences being compared are found by looking at pairs of aligned residues; if ktup=1, single aligned amino acids are examined. ktup can be set to 2 or 1 for protein sequences, or from 1 to 6 for DNA sequences. The default if ktup is not specified is 2 for proteins and 6 for DNA. 1ktup=1 should be used for oligonucleotides (DNA query length < 20).",
                        "ctrl": {
                            "perl": "($seqtype eq \"protein\" and ($value == 1 or $value == 2 )) or ($seqtype eq \"DNA\" and ($value == 1 or $value == 2 or $value == 3 or $value == 4 or $value == 5 or $value == 6 )))",
                            "python": "(seqtype == \"protein\" and value in [1,2]) or (seqtype == \"DNA\" and value in range(1,7,1))"
                        },
                        "format": {
                            "perl": "(defined $value)? \" $value\":\"\"",
                            "python": "(\"\" , \" \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "ktup",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Sensitivity and speed of the search",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The threshold value is normally calculated based on sequence length.",
                        "ctrl": {
                            "perl": "$fasta =~ /^fasta/ or $fasta =~ /^fastx",
                            "python": "fasta in [\"fasta\", \"fastx\"]"
                        },
                        "format": {
                            "perl": "(defined $value)? \" -c $value\":\"\"",
                            "python": "(\"\" , \" -c \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "optcut",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Threshold for band optimization (FASTA, FASTX). (-c)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The default for fasta with proteins is -12 and -16 for DNAThe default for fastx/fasty/tfastz/tfasty is -15.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -f $value\":\"\"",
                            "python": "(\"\" , \" -f \" + str(value))[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gapinit",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Penalty for opening a gap (-f)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The default for fasta is -2 for proteins and -4 for DNAThe default for fastx/fasty/tfastz/tfasty is -3.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -g $value\":\"\"",
                            "python": "(\"\" , \" -g \" + str(value))[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gapext",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Penalty for gap extension (-g)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Expectation value limit for displaying scores and alignments. Defaults  are 10.0 for FASTA  protein searches, 5.0 for translated DNA/protein comparisons, and 2.0 for DNA/DNA searches.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -E $value\":\"\"",
                            "python": "(\"\" , \" -E \" + str(value))[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "high_expect",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Maximal expectation value threshold for displaying scores and alignments (-E)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Expectation value lower limit for score and alignment display.  If value is 1e-6  prevents library sequences with E()-values lower than 1e-6 from being displayed. This allows the use to focus on more distant relationships.This allow one to skip over close relationships in searches for more distant relationships.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -F $value\":\"\"",
                            "python": "(\"\" , \" -F  \" + str(value))[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "low_expect",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Minimal expectation value threshold for displaying scores and alignments (-F)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "selectivity_opt",
                "precond": null,
                "prompt": "Selectivity options"
            },
            {
                "children": [
                    {
                        "children": [
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": {
                                    "perl": "$value >= 0",
                                    "python": "value >= 0"
                                },
                                "format": null,
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "nucleotid_match",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Maximum positive value for a nucleotid match (-r)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": "'+5/-4' are the default values for nucleotid match/mismatch, but '+3/-2' can perform better in some cases.",
                                "ctrl": {
                                    "perl": "$value < 0",
                                    "python": "value < 0"
                                },
                                "format": {
                                    "perl": "(defined $value and defined nucleotid_match and ($value != $vdef and $nucleotid_match != 5)) ? \" -r \\\"$nucleotid_match/$value\\\"\" : \"\"",
                                    "python": "( \"\" , ' -r \"' + str(nucleotid_match) + '/' + str(value)+ '\"' )[ value is not None and nucleotid_match is not None and (nucleotid_match != 5 and value != vdef) ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "nucleotid_mismatch",
                                "paramfile": null,
                                "precond": {
                                    "perl": "defined $nucleotid_match",
                                    "python": "nucleotid_match is not None"
                                },
                                "prompt": "Maximum negative penalty value for a nucleotid mismatch (-r)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": null,
                        "name": "scoring_nucleic",
                        "precond": {
                            "perl": "$fasta eq \"fasta\" and seqtype eq \"DNA\"",
                            "python": "fasta == \"fasta\" and seqtype == \"DNA\""
                        },
                        "prompt": "Nucleic penalty"
                    },
                    {
                        "children": [
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value and $value ne $vdef) ? \" -s $value\" : \"\"",
                                    "python": "( \"\" , \" -s  \" + str(value) )[ value is not None and value != vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "matrix",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Scoring matrix file (-s)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Choice",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": "Particularly useful for fast[xy], where termination codons are encoded as 'X'.",
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value) ? \" -x $value\" : \"\"",
                                    "python": "( \"\" , \" -x  \" + str(value) )[ value is not None ]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "X_penalty",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Penalty for a match to 'X' (independently of the PAM matrix) (-x)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Integer",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": null,
                        "name": "scoring_protein",
                        "precond": {
                            "perl": "seqtype ne \"DNA\"",
                            "python": "seqtype != \"DNA\""
                        },
                        "prompt": "Protein penalty"
                    }
                ],
                "comment": null,
                "name": "score_opt",
                "precond": null,
                "prompt": "Scoring options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -h $value\":\"\"",
                            "python": "(\"\" , \" -h  \" + str(value))[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "frameshift",
                        "paramfile": null,
                        "precond": {
                            "perl": "($fasta =~ /fast(x|y)/)",
                            "python": "fasta in [\"fastx\", \"fasty\", \"tfastx\", \"tfasty\"]"
                        },
                        "prompt": "Penalty for frameshift between two codons (fast[xy]/tfast[xy]) (-h)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -j $value\":\"\"",
                            "python": "(\"\" , \" -j  \" + str(value))[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "frameshift_within",
                        "paramfile": null,
                        "precond": {
                            "perl": "($fasta =~ /fasty/)",
                            "python": "fasta in [\"fasty\", \"tfasty\"]"
                        },
                        "prompt": "Penalty for frameshift within a codon (fasty/tfasty) (-j)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -3\":\"\"",
                            "python": "(\"\" , \" -3\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "threeframe",
                        "paramfile": null,
                        "precond": {
                            "perl": "$fasta =~ /^tfast(a|x|y)/",
                            "python": "fasta in [\"tfasta\", \"tfastx\", \"tfasty\"]"
                        },
                        "prompt": "Search only the three forward frames (-3)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -i\" : \"\"",
                            "python": "( \"\" , \" -i\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "invert",
                        "paramfile": null,
                        "precond": {
                            "perl": "$fasta =~ /fast(x|y)/",
                            "python": "fasta in [\"fastx\", \"tfastx\", \"fasty\", \"tfasty\"]"
                        },
                        "prompt": "Reverse complement the query sequence (-i)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -t $value\" : \"\"",
                            "python": "( \"\" , \" -t  \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "genetic_code",
                        "paramfile": null,
                        "precond": {
                            "perl": "$fasta =~ /^tfast/ or $fasta =~ /fast[xy]/",
                            "python": "fasta in [ \"tfasta\", \"tfastx\", \"tfasty\", \"tfastf\", \"tfasts\", \"fastx\", \"fasty\" ]"
                        },
                        "prompt": "Use genetic code for translation (tfasta/tfast[xy]/fast[xy]) (-t)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "frame_transl_opt",
                "precond": null,
                "prompt": "Frameshift and translation options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Set the band-width used for optimization. -y 16 is the default for protein when ktup=2 and for all DNA alignments. -y 32 is used for protein and ktup=1. For proteins, optimization slows comparison 2-fold and is highly recommended.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -y $value\":\"\"",
                            "python": "(\"\" , \" -y  \" + str(value))[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "band",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Band-width used for optimization (-y)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Force Smith-Waterman alignment for output. Smith-Waterman is the default for protein sequences and FASTX, but not for TFASTA or DNA comparisons with FASTA.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -A\":\"\"",
                            "python": "(\"\" , \" -A\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "swalig",
                        "paramfile": null,
                        "precond": {
                            "perl": "$fasta =~ /^fasta/ and $seqtype eq \"DNA\"",
                            "python": "fasta in [ \"tfasta\", \"fasta\" ] and seqtype == \"DNA\""
                        },
                        "prompt": "Force Smith-Waterman alignment for DNA (-A)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Turn off default optimization of all scores greater than OPTCUT. Shirt results by 'initn' scores reduces the accuracy of statistical estimates. This was  the behavior of fasta1 versions.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -o\":\"\"",
                            "python": "(\"\" , \" -o\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "noopt",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Turn fasta band optimization off during initial phase (-o)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "In general, 1 and 2 are the best methods.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $random and defined $value and $value > 0) ? \" -z 1$value\" : ($value ne $vdef) ? \" -z  $value\" : \"\"",
                            "python": "( (( \"\", \" -z  \" + str(value) )  [ value is not None and value != vdef]) , \" -z 1\" + str(value) )[value is not None and value > 0 and random is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "stat",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Specify statistical calculation. (-z)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This doubles the time required for a search, but allows accurate statistics to be estimated for libraries comprised of a single protein family.",
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "random",
                        "paramfile": null,
                        "precond": {
                            "perl": "$stat > 0",
                            "python": "stat > 0"
                        },
                        "prompt": "Estimate statistical parameters from shuffled copies of each library sequence (-z)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "optimize_opt",
                "precond": null,
                "prompt": "Optimization options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -H\":\"\"",
                            "python": "(\"\" , \" -H\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "histogram",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Turn off histogram display (-H)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value <= $high_expect",
                            "python": "value <= high_expect"
                        },
                        "format": {
                            "perl": "(defined $value and $value <= $high_expect)? \" -b $value\":\"\"",
                            "python": "(\"\"  , \" -b \"  + str(value))[ value is not None and value <= high_expect]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "scores",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of similarity scores to be shown (-b)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value <= $high_expect",
                            "python": "value <= high_expect"
                        },
                        "format": {
                            "perl": "(defined $value and $value <= $high_expect)? \" -d $value\":\"\"",
                            "python": "(\"\" , \" -d  \" + str(value))[ value is not None and value <= high_expect]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "alns",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of alignments to be shown (-d)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -m 6\" : \"\"",
                            "python": "( \"\"  , \" -m 6\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "html_output",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "HTML output (-m)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "(MARKX) =0,1,2,3,4. Alternate display of matches and mismatches in alignments.MARKX=0 uses ':','.',' ', for identities, conservative replacements, and non-conservative replacements, respectively.MARKX=1 uses ' ','x', and 'X'.MARKX=2 does not show the second sequence, but uses the second alignment line to display matches with a '.' for identity, or with the mismatched residue for mismatches. MARKX=2 is useful for aligning large numbers of similar sequences.MARKX=3 writes out a file of library sequences in FASTA format. MARKX=3 should always be used with the 'SHOWALL' (-a) option, but this does not completely ensure that all of the sequences output will be aligned.MARKX=4 displays a graph of the alignment of the library sequence with respect to the query sequence, so that one can identify the regions of the query sequence that are conserved.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef )? \" -m $value\" : \"\"",
                            "python": "( \"\"  , \" -m  \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "markx",
                        "paramfile": null,
                        "precond": {
                            "perl": "not $html_output",
                            "python": "not html_output"
                        },
                        "prompt": "Alternate display of matches and mismatches in alignments (-m)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -1\":\"\"",
                            "python": "(\"\" , \" -1\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "init1",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Sequences ranked by the z-score based on the init1 score (-1)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -B\" : \"\"",
                            "python": "( \"\" , \" -B\" )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "z_score_out",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Show normalize score as (-B)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": {
                            "perl": "$value <= 200",
                            "python": "value <= 200"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -w $value\":\"\"",
                            "python": "(\"\" , \" -w  \" + str(value))[ value is not None and value != vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "linlen",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Output line length for sequence alignments (-w)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Causes fasta/lfasta/plfasta to start numbering the aligned sequences starting with offset1 and offset2, rather than 1 and 1. This is particularly useful for showing alignments of promoter regions.",
                        "ctrl": {
                            "perl": "$value ~= /\\d+(,\\d+){1}/ and $value",
                            "python": "len (value.split(',')) == 2 and value.split(',')[0] != '' and value.split(',')[1] != ''"
                        },
                        "format": {
                            "perl": "(defined $value)? \" -X \\\"$value\\\"\":\"\"",
                            "python": "(\"\" , ' -X \"' +  str(value) + '\"')[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "offsets",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Start numbering the aligned sequences at position x1 x2 (2 numbers separated by comma) (-X)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -L\":\"\"",
                            "python": "(\"\" , \" -L\")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "info",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Display more information about the library sequence in the alignment (-L)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "affichage",
                "precond": null,
                "prompt": "Report options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Treat lower-case characters in the query or library sequence as 'low-complexity' residues. These characters are treated as 'X' during the initial scan, but are treated as normal residues during the final alignment. Sinces statistical significance is calculated from similarity score calculated during library search, low complexity regions will not produce statistical significant matches.If a significant alignment contains low complexity regions the final score may be higher than the score obtained during the search.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -S\" : \"\"",
                            "python": "( \"\" , \" -S\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "filter",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Lower case filtering (-S)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "other_opt",
                "precond": null,
                "prompt": "Other options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "fasta",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"fasta.out\"",
                    "python": "\"fasta.out\""
                },
                "hidden": false,
                "main": false,
                "name": "outfile",
                "output_type": "stdout",
                "precond": null,
                "prompt": "Fasta report",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "FastaTextReport",
                        "superclass": "Report"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"fasta.html\"",
                    "python": "\"fasta.html\""
                },
                "hidden": false,
                "main": false,
                "name": "html_outfile",
                "output_type": "file",
                "precond": {
                    "perl": "$html_output",
                    "python": "html_output"
                },
                "prompt": "Html output file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "FastaHtmlReport",
                        "superclass": "Report"
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "Pearson, W. R. (1999) Flexible sequence similarity searching with the FASTA3 program package. Methods in Molecular Biology",
            "url": null
        },
        {
            "doi": null,
            "label": "W. R. Pearson and D. J. Lipman (1988), Improved Tools for Biological Sequence Analysis, PNAS 85:2444-2448",
            "url": null
        },
        {
            "doi": null,
            "label": "W. R. Pearson (1998) Empirical statistical estimates for sequence similarity searches. In J. Mol. Biol. 276:71-84",
            "url": null
        },
        {
            "doi": null,
            "label": "Pearson, W. R. (1996) Effective protein sequence comparison. In Meth. Enz., R. F. Doolittle, ed. (San Diego: Academic Press) 266:227-258",
            "url": null
        }
    ],
    "source_links": [
        "http://faculty.virginia.edu/wrpearson/fasta/"
    ],
    "title": "FASTA",
    "type": "program",
    "version": "3.4(t25d6)"
}