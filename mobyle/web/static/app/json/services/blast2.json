{
    "authors": null,
    "classifications": [
        {
            "classification": "database:search:homology",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": null,
    "description": "NCBI BLAST, with gaps",
    "documentation_links": [
        "http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16",
        "http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html"
    ],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": "1",
                "command": true,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"blastall\"",
                    "python": "\"blastall\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "blast_init",
                "paramfile": null,
                "precond": null,
                "prompt": "Blast initiation",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "2",
                "command": false,
                "comment": "- Blastp compares an amino acid query sequence against a protein sequence database;- Blastn compares a nucleotide query sequence against a nucleotide sequence database;- Blastx compares the six-frame conceptual translation products of a nucleotide query sequence (both strands) against a protein sequence database;- tBlastn compares a protein query sequence against a nucleotide sequence database dynamically translated in all six reading frames (both strands).- tBlastx compares the six-frame translations of a nucleotide query sequence against the six-frame translations of a nucleotide sequence database.- psitBlastn compares a protein query sequence against a nucleotide sequence database dynamically translated in all six reading frames (both strands) using a position specific matrix created by PSI-BLAST.",
                "ctrl": null,
                "format": {
                    "perl": "\" -p $value\"",
                    "python": "\" -p \"+ str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "blast2",
                "paramfile": null,
                "precond": null,
                "prompt": "Blast program (-p)",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Choice",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Choose a protein db for blastp or blastx.Please note that Swissprot usage by and for commercial entities requires a license agreement.",
                        "ctrl": null,
                        "format": {
                            "perl": "\" -d $value\"",
                            "python": "\" -d \"+ str(value)"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "protein_db",
                        "paramfile": null,
                        "precond": {
                            "perl": "$blast2 =~ /^blast[px]$/",
                            "python": "blast2 in [ \"blastx\" , \"blastp\" ]"
                        },
                        "prompt": "Protein db (-d)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Choose a nucleotide db for blastn, tblastn or tblastx",
                        "ctrl": null,
                        "format": {
                            "perl": "\" -d $value\"",
                            "python": "\" -d \"+ str(value)"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "nucleotid_db",
                        "paramfile": null,
                        "precond": {
                            "perl": "$blast2 =~ /^(blastn|tblast[nx]|psitblastn)$/",
                            "python": "blast2 in [ \"blastn\" , \"tblastx\", \"tblastn\" , \"psitblastn\" ]"
                        },
                        "prompt": "Nucleotid db (-d)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "db",
                "precond": null,
                "prompt": "Database"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Read (first, query) sequence or set from file",
                        "ctrl": null,
                        "format": {
                            "perl": "\" -i $query\"",
                            "python": "\" -i \"+ str(query_seq)"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "query_seq",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Query (-i)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": "1,n",
                            "datatype": {
                                "class": "Sequence",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": [
                                "FASTA"
                            ]
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Location on query sequence",
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "start_region",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Start of required region in query sequence (-L)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Location on query sequence",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -L \\\"$start_region $value\\\"\" : \" -L \\\"$start_region\\\"\"",
                            "python": "(' -L \"%s\"' % (str(start_region)), ' -L \"%s %s\"' % (str(start_region), str(value)))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "end_region",
                        "paramfile": null,
                        "precond": {
                            "perl": "defined $start_region",
                            "python": "start_region is not None"
                        },
                        "prompt": "End of required region in query sequence (-L)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -B $value\" : \"\"",
                            "python": "(\"\" , \" -B \"+str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "concat",
                        "paramfile": null,
                        "precond": {
                            "perl": "$blast2 =~ /^t?blastn$/",
                            "python": "blast2 in [ \"blastn\" , \"tblastn\" ]"
                        },
                        "prompt": "Number of concatenated queries (blastn or tblastn) (-B)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "query",
                "precond": null,
                "prompt": "Query Sequence"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "-1 invokes default behavior: non-affine\n              if greedy, 5 if using dynamic programming",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -G $value\" : \"\"",
                            "python": "(\"\" , \" -G \"+str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "open_a_gap",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Cost to open a gap (-G)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Default: 2 for blastn; 1 for blastp, blastx and tblastnLimited values for gap existence and extension are supported for these programs. Some supported and suggested values are:Existence Extension10 -- 110 -- 211 -- 18 -- 29 -- 2",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -E $value\" : \"\"",
                            "python": "(\"\" , \" -E \"+str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "extend_a_gap",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Cost to extend a gap (-E)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "children": [
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value and $value ne $vdef) ? \" -M $value\" : \"\"",
                                    "python": "(\"\" , \" -M \"+str(value))[value is not None and value != vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "matrix",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Similarity matrix (-M)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Choice",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": null,
                        "name": "scoring_blast",
                        "precond": {
                            "perl": "$blast2 ne \"blastn\"",
                            "python": "blast2 != \"blastn\""
                        },
                        "prompt": "Protein penalty (not for blastn)"
                    },
                    {
                        "children": [
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value and $value != $vdef) ? \" -q $value\" : \"\"",
                                    "python": "(\"\" , \" -q \"+str(value))[value is not None and value != vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "mismatch",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Penalty for a nucleotide mismatch (-q)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": null,
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value and $value != $vdef) ? \" -r $value\" : \"\"",
                                    "python": "(\"\" , \" -r \"+str(value))[value is not None and value != vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "match",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Reward for a nucleotide match (-r)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Float",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": null,
                        "name": "scoring_blastn",
                        "precond": {
                            "perl": "$blast2 eq \"blastn\"",
                            "python": "blast2 == \"blastn\""
                        },
                        "prompt": "Blastn penalty"
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -w $value\" : \"\"",
                            "python": "(\"\", \" -w \"+str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "frameshift",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Frame shift penalty (-w)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "scoring_opt",
                "precond": null,
                "prompt": "Scoring options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \" -F F\"",
                            "python": "(\" -F F\" , \"\")[value]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "filter",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Filter or Masking query sequence (DUST with blastn, SEG with others) (-F)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "A coiled-coiled filter, based on the work of Lupas et al. (Science, vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al., J Gen Virol, vol. 76, pp. 2923-32 (1995))",
                        "ctrl": null,
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "other_filters",
                        "paramfile": null,
                        "precond": {
                            "perl": "$filter and not $other_masking",
                            "python": "filter and not other_masking"
                        },
                        "prompt": "Filtering options (Filter must be true)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "A coiled-coiled filter, based on the work of Lupas et al. (Science, vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al., J Gen Virol, vol. 76, pp. 2923-32 (1995)).It is possible to specify that the masking should only be done during the process of building the initial words .If the -U option (to mask any lower-case sequence in the input FASTA file) is used and one does not wish any other filtering, but does wish to mask when building the lookup tables then one should specify: -F 'm'",
                        "ctrl": {
                            "perl": "($value eq 'null' or $value eq 'v1' or $value eq 'v2' or $value eq 'v3']) or ($value eq 'v4' and $lower_case)",
                            "python": "value in ['null', 'v1', 'v2', 'v3'] or (value == 'v4' and lower_case)"
                        },
                        "format": null,
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "other_masking",
                        "paramfile": null,
                        "precond": {
                            "perl": "$filter and not $other_filters",
                            "python": "filter and not other_filters"
                        },
                        "prompt": "Masking options (Filter must be true)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This option specifies that any lower-case letters in the input FASTA file should be masked.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" -U T\" : \"\"",
                            "python": "(\"\", \" -U T\")[value]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "lower_case",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Use lower case filtering (-U)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "BLAST 2.0 uses the dust low-complexity filter for blastn and seg for the other programs.If one uses '-F T' then normal filtering by seg or dust (for blastn) occurs (likewise '-F F' means no filtering whatsoever).",
                "name": "filter_opt",
                "precond": null,
                "prompt": "Filtering and masking options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The statistical significance threshold for reporting matches against database sequences; the default value is 10, such that 10 matches are expected to be found merely by chance, according to the stochastic model of Karlin and Altschul (1990). If the statistical significance ascribed to a match is greater than the EXPECT threshold, the match will not be reported. Lower EXPECT thresholds are more stringent, leading to fewer chance matches being reported. Fractional values are\n              acceptable.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -e $value\" : \"\"",
                            "python": "(\"\" , \" -e \"+str(value))[value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Expect",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Expected value (-e)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Use words of size N.Zero invokes default behaviorDefault values:- 11 for blastn- 3 for others",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -W $value\" : \"\"",
                            "python": "(\"\" , \" -W \"+str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "word_size",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Word Size (-W)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Generally defaults to 0 (for  single-hit  extensions),  but  defaults to 40 when using discontiguous\n              templates.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -A $value\" : \"\"",
                            "python": "(\"\" , \" -A \"+str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "dist_hits",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Multiple Hits window size (-A)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Blast seeks first short word pairs whose aligned score reaches at least this value.Default values:- 0 for blastn- 11 for blastp- 12 for blastx- 13 for tblastn and tblastx",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -f $value\" : \"\"",
                            "python": "(\"\" , \" -f \" + str(value))[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "extend_hit",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Threshold for extending hits (-f)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This is the value that control the path graph region explored by Blast during a gapped extension (Xg in the NAR paper) (default for blastp is 15).Default values:- 30 for blastn- 0 for tblastx- 15 for others",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -X $value\" : \"\"",
                            "python": "(\"\" , \" -X \"+str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "dropoff_extent",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "X dropoff value for gapped alignment (-X)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "- 0.0: default behavior:- 20 for blastn- 7 for others",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef ) ? \" -y $value\" : \"\"",
                            "python": "(\"\" , \" -y \"+str(value))[value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "dropoff_extent_ungapped",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "X dropoff value for ungapped extention (-y)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Default values:- 100 for blastn- 0 for tblastx- 25 for others",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -Z $value\" : \"\"",
                            "python": "(\"\" , \" -Z \"+str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "dropoff_final",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "X dropoff value for final gapped alignment (-Z)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Use zero for the real size",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -Y $value\" : \"\"",
                            "python": "(\"\" , \" -Y \"+str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "eff_len",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Effective length of the search space (-Y)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "If this option is used, a value of 100 is recommended.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \" -K $value\" : \"\"",
                            "python": "(\"\" , \" -K \"+str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "keep_hits",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of best hits from a region to keep (-K)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"\" : \" -g F \"",
                            "python": "(\" -g F \" , \"\")[value]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gapped_alig",
                        "paramfile": null,
                        "precond": {
                            "perl": "$blast2 ne \"tblastx\"",
                            "python": "blast2 != \"tblastx\""
                        },
                        "prompt": "Perform or not gapped alignment (not available with tblastx) (-g)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value ne \"0\") ? \" -P $value\" : \"\"",
                            "python": "(\"\" , \" -P \"+str(value))[value != \"0\"]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "mode",
                        "paramfile": null,
                        "precond": {
                            "perl": "$blast2 ne \"blastn\"",
                            "python": "blast2 != \"blastn\""
                        },
                        "prompt": "Single-hit or multiple-hit mode (-P)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": "The programs blastn and blastp offer fully gapped alignments. blastx and tblastn have 'in-frame' gapped alignments and use sum statistics to link alignments from different frames. tblastx provides only ungapped alignments.",
                "name": "selectivity_opt",
                "precond": null,
                "prompt": "Selectivity options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -Q $value\" : \"\"",
                            "python": "(\"\" , \" -Q \"+str(value))[value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gc_query",
                        "paramfile": null,
                        "precond": {
                            "perl": "$blast2 =~ /^t?blastx$/",
                            "python": "blast2 in [ \"blastx\" , \"tblastx\" ]"
                        },
                        "prompt": "Genetic code used for query translation (-Q)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value ne $vdef) ? \" -D $value\" : \"\"",
                            "python": "(\"\" , \" -D \"+str(value))[value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gc_db",
                        "paramfile": null,
                        "precond": {
                            "perl": "$blast2 =~ /^tblast[nx]$/",
                            "python": "blast2 in [ \"tblastn\", \"tblastx\" ]"
                        },
                        "prompt": "Genetic code used for database translation (-D)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -S $value\" : \"\"",
                            "python": "(\"\" , \" -S \"+str(value))[value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "strand",
                        "paramfile": null,
                        "precond": {
                            "perl": "$blast2 =~ /^(blastn|t?blastx)$/",
                            "python": "blast2 in [ \"blastn\" ,\"blastx\" , \"tblastx\" ]"
                        },
                        "prompt": "Query strands to search against database (-S)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "translation_opt",
                "precond": null,
                "prompt": "Translation options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Maximum number of database sequences for which one-line descriptions will be reported.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -v $value\" : \"\"",
                            "python": "(\"\" , \" -v \"+str(value))[value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Descriptions",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of one-line descriptions to show (-v)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Maximum number of database sequences for which high-scoring segment pairs will be reported (-b).",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -b $value\" : \"\"",
                            "python": "(\"\" , \" -b \"+str(value))[value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "Alignments",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of database sequences to show alignments (-b)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -m $value\" : \"\"",
                            "python": "(\"\" , \" -m \"+str(value))[value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "view_alignments",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Alignment view options (-m)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\" -o blast2.txt\"",
                            "python": "\" -o blast2.txt\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "txtoutput",
                        "paramfile": null,
                        "precond": {
                            "perl": "$view_alignments ne \"7\"",
                            "python": "view_alignments != \"7\""
                        },
                        "prompt": "Text output file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\" -o blast2.xml\"",
                            "python": "\" -o blast2.xml\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "xmloutput",
                        "paramfile": null,
                        "precond": {
                            "perl": "$view_alignments eq \"7\"",
                            "python": "view_alignments == \"7\""
                        },
                        "prompt": "Xml output file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "11",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \" && html4blast -g -o blast2.html blast2.txt\" : \"\"",
                            "python": "(\"\" , \" && html4blast -g -o blast2.html blast2.txt\")[value]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "htmloutput",
                        "paramfile": null,
                        "precond": {
                            "perl": "$view_alignments !~ /^[78]$/",
                            "python": "view_alignments not in [ \"7\" , \"8\" ]"
                        },
                        "prompt": "Html output",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "affichage",
                "precond": null,
                "prompt": "Report options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "blast2",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"blast2.txt\"",
                    "python": "\"blast2.txt\""
                },
                "hidden": false,
                "main": false,
                "name": "txtfile",
                "output_type": "file",
                "precond": {
                    "perl": "$view_alignments ne \"7\"",
                    "python": "view_alignments != \"7\""
                },
                "prompt": "Blast text report",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "BlastTextReport",
                        "superclass": "Report"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"blast2.xml\"",
                    "python": "\"blast2.xml\""
                },
                "hidden": false,
                "main": false,
                "name": "xmlfile",
                "output_type": "file",
                "precond": {
                    "perl": "$view_alignments eq \"7\"",
                    "python": "view_alignments == \"7\""
                },
                "prompt": "Blast xml report",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "BlastXmlReport",
                        "superclass": "Report"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"blast2.html\"",
                    "python": "\"blast2.html\""
                },
                "hidden": false,
                "main": false,
                "name": "htmlfile",
                "output_type": "file",
                "precond": {
                    "perl": "$view_alignments !~ /^[78]$/",
                    "python": "view_alignments not in [ \"7\" , \"8\" ]"
                },
                "prompt": "Blast html report",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "BlastHtmlReport",
                        "superclass": "Report"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"*.gif\"",
                    "python": "\"*.gif\""
                },
                "hidden": true,
                "main": false,
                "name": "imgfile",
                "output_type": "file",
                "precond": {
                    "perl": "$view_alignments !~ /^[78]$/",
                    "python": "view_alignments not in [\"7\", \"8\"]"
                },
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Picture",
                        "superclass": "Binary"
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer, Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402.",
            "url": null
        }
    ],
    "source_links": [],
    "title": "BLAST2",
    "type": "program",
    "version": null
}