{
    "authors": null,
    "classifications": [
        {
            "classification": "genetics:detection",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": "kcolumn.pl"
    },
    "comment": null,
    "description": "Copy Number Variation (CNV) detection from signal intensity data (Illumina file)",
    "documentation_links": [],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": "The input signal intensity file is a text file that contains information for one marker per\n                         line, and all fields in each line are tab-delimitedThe first line of the file specifies the meaning for each tab-delimited column. \n        For example, there are six fields in each line in the file, corresponding to SNP name, chromosome, \n        position, genotype, Log R Ratio (LRR) and B Allele Frequency (BAF), respectively.The CNV calling only requires the SNP Name, LRR and BAF values. Note that the relative position\n        of LRR and BAF is different from the previous file; again the header line tells the program that the \n        second column represents BAF values, yet the third column is LRR values.",
                        "ctrl": null,
                        "format": {
                            "perl": "\" $value\"",
                            "python": "\" \" + str(value)"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "infile",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Input  signal intensity file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "SignalIntensity",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\" split $value -heading 3 --name_by_header -tab -out $filename\"",
                            "python": "\" split \" + str(value) + \" -heading 3 --name_by_header -tab --out \"+ str(infile)"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "split",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Number of tab-delimited column (field) per individual genotyping in intensity file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "preprocess",
                "precond": null,
                "prompt": "Preprocessing of Illumina intensity file for Copy Number Variation (CNV) detection"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "--test: test a signal intensity file to generate CNV calls.--joint: New in July 2008: generate CNV calls for a father-mother-off-\n               spring trio via a one-step procedure. It is considerably slower\n               than the --trio argument, but generates more accurate CNV calls\n               with reduced false negative rates in simulation studies.--summary:   generate summary statistics on signal quality for each input\n               file. Usually the summary is provided when calling CNVs and can\n               be written to a log file via the --log argument; however, some-\n               times users forget to use --log, such that the signal quality\n               information is lost. The --summary argument can calculate the\n               signal quality again quickly without calling CNVs.",
                        "ctrl": {
                            "perl": "(defined $value and not defined $rawcnv) or (not defined $value and defined $rawcnv)",
                            "python": "(value is not None and rawcnv is None) or (value is None and rawcnv is not None)"
                        },
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" && detect_cnv.pl $value \" : \"\"",
                            "python": "( \"\" , \" && detect_cnv.pl \" + str(value) )[ value is not None and value !=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "type",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Analyse type without cnv calls file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "10",
                        "command": false,
                        "comment": "--trio:  generate CNV calls for a father-mother-offspring trio, given a\n               CNV file containing calls generated on each individual separately, a HMM model file, a PFB file, and the three signal\n               intensity files.--quartet:    jointly generate CNV calls for a father-mother-offspring1-offp-\n               spring2 quartet, given a CNV file containing calls generated on\n               each individual separately, a HMM model file, a PFB file, and\n               the four signal intensity files.--cctest: perform a case-control test on the frequency of having CNVs for\n               each marker within CNVs. A separate phenotype file must be\n               specified via the --phenofile argument for this to work. The\n               actual test is a two-sided Fisher exact test. The --onesided\n               argument can be specified for performing one-sided test, and\n               the --type_filter argument can be specified so that only \"dup\"\n               or \"del\" is compared between cases and controls.--exclude_heterosomic: exclude CNV calls from chromosomes showing evidence of heterosomic abberations from a given file containing CNV calls. An\n               purely empirical method is applied in this procedure, although\n               I recommended always manually examine the patterns of BAF to\n               determine whether heterosomic abberation is present in a particular sample, if the sample size is relatively small (<100).",
                        "ctrl": {
                            "perl": "(defined $value and defined $cnvfile and not defined $type) or (not defined $value and defined $type)",
                            "python": "(value is not None and cnvfile is not None and type is None) or (value is None and type is not None)"
                        },
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" && detect_cnv.pl $value \" : \"\"",
                            "python": "( \"\" , \" && detect_cnv.pl \" + str(value) )[ value is not None and value !=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "rawcnv",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Analyse type with cnv calls file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "18",
                        "command": false,
                        "comment": "Specify an output file prefix.",
                        "ctrl": null,
                        "format": {
                            "perl": "\" $infile.*\"",
                            "python": "\" \" + infile + \".*\""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "infile_name",
                        "paramfile": null,
                        "precond": {
                            "perl": "$type eq '--test' or $type eq '--joint' or $type eq '--validate' or $type eq '--summary' or $rawcnv eq '--trio' or $rawcnv eq '--quartet' or $rawcnv eq '--cctest' or $rawcnv eq '--exclude_heterosomic'",
                            "python": "type =='--test' or type =='--joint' or type =='--validate' or type =='--summary' or rawcnv =='--trio' or rawcnv =='--quartet' or rawcnv =='--cctest' or rawcnv =='--exclude_heterosomic'"
                        },
                        "prompt": "Input file name",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "12",
                        "command": false,
                        "comment": "A file containing CNV calls, that could be generated by the\n               -test operation of this program: trio, quartet, exclude_heterosomic, cctest",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"--cnv $value \" : \"\"",
                            "python": "( \"\" , \" --cnv \" + str(value) )[ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "cnvfile",
                        "paramfile": null,
                        "precond": {
                            "perl": "defined $rawcnv",
                            "python": "rawcnv is not None"
                        },
                        "prompt": "CNV calls file (cnv)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Cnv",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "12",
                        "command": false,
                        "comment": "Specify an output file prefix. By default the output filename\n               starts with \"gengen\".",
                        "ctrl": null,
                        "format": {
                            "perl": "\" --out $infile_rawcnv\"",
                            "python": "\" --out \" + infile + \"_rawcnv \""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "out_cnv_filename",
                        "paramfile": null,
                        "precond": {
                            "perl": "$type eq '--test' and $infile",
                            "python": "type == '--test' and infile"
                        },
                        "prompt": "Output CNV file name",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "11",
                        "command": false,
                        "comment": "Specify a HMM model file containing elements necessary for\n               specifying the hidden Markov model for CNV calling: test, validate, joint, trio, quartet",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"--hmm",
                            "python": "( \"\" , \" --hmm"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "hmmmodel",
                        "paramfile": null,
                        "precond": {
                            "perl": "($type is not None or $rawcnv is not None) and ($type and $rawcnv and $rawcnv ne '--cctest' and $rawcnv ne '--exclude_heterosomic'",
                            "python": "(type is not None or rawcnv is not None) and (type != '--summary' and (rawcnv !='--cctest' and rawcnv !='--exclude_heterosomic'))"
                        },
                        "prompt": "HMM model (hmm)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "11",
                        "command": false,
                        "comment": "A population frequency of B allele file containing chromosome\n               coordinates of each SNP, as well as the frequency of B allele\n               in a large reference population for this SNP: test, validate, joint, summary, trio, quartet, cctest",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"--pfb",
                            "python": "( \"\" , \" --pfb"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "pfb",
                        "paramfile": null,
                        "precond": {
                            "perl": "($type is not None or $rawcnv is not None) and ($rawcnv ne '--exclude_heterosomic')",
                            "python": "(type is not None or rawcnv is not None) and (rawcnv !='--exclude_heterosomic')"
                        },
                        "prompt": "Population frequency for B allelel file (pfb)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "12",
                        "command": false,
                        "comment": "A file that contains the GC percentage in the 1Mb region around\n               each marker for the GC-model based signal adjustment: test, joint, validate, trio, quartet",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"--gcmodel",
                            "python": "( \"\" , \" --gcmodel"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "gcmodel",
                        "paramfile": null,
                        "precond": {
                            "perl": "$type eq '--test' or $rawcnv eq '--trio' or $rawcnv eq '--quartet' or  $type eq '--joint' or  $type eq '--validate'",
                            "python": "(type == '--test' or type =='--joint' or type =='--validate') or (rawcnv =='--trio' or rawcnv =='--quartet')"
                        },
                        "prompt": "A file containing GC model for wave adjustment (gcmodel)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "analyse",
                "precond": null,
                "prompt": "Penncnv analyses"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value  and $value ne $vdef) ? \" && visualize_cnv.pl --format $value \" : \"\"",
                            "python": "( \"\" , \" && visualize_cnv.pl --format %s \" % str(value) )[ value is not None and value !=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "outputformat",
                        "paramfile": null,
                        "precond": {
                            "perl": "($type is not None or $rawcnv is not None)",
                            "python": "(type is not None or rawcnv is not None)"
                        },
                        "prompt": "Output format",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "21",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\" --out $infile.$outputformatcnv $infile.rawcnv \"",
                            "python": "\" --out \" + infile + \"_\" + outputformat + \"cnv \" + infile + \"_rawcnv \""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "bed_cnv_infile",
                        "paramfile": null,
                        "precond": {
                            "perl": "$type eq '--test' and $infile and $outputformat ne 'output'",
                            "python": "type == '--test' and infile and outputformat != 'output'"
                        },
                        "prompt": "Output file name for visualize_cnv (.rawcnv)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "21",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "\" --out $infile.$outputformat detect_cnv.out \"",
                            "python": "\" --out \" +  infile + \"_\" + outputformat + \" detect_cnv.out \""
                        },
                        "hidden": true,
                        "main": false,
                        "mandatory": false,
                        "name": "bed_infile",
                        "paramfile": null,
                        "precond": {
                            "perl": "($type is not None or $rawcnv is not None) and $type eq '--test' and $outputformat ne 'output'",
                            "python": "(type is not None or rawcnv is not None) and type != '--test' and outputformat != 'output'"
                        },
                        "prompt": "Output file name for visualize_cnv (.out)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "cnvoutput",
                "precond": null,
                "prompt": "CNV output format"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The minimum number of SNPs that a CNV call must contain to be\n               in output: test, joint, validate, trio, quartet",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"--minsnp $value \" : \"\"",
                            "python": "( \"\" , \" --minsnp \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "minsnp",
                        "paramfile": null,
                        "precond": {
                            "perl": "$type eq '--test' or  $rawcnv eq '--trio' or $rawcnv eq '--quartet' or  $type eq '--joint' or  $type eq '--validate'",
                            "python": "type =='--test' or rawcnv =='--trio' or rawcnv =='--quartet' or type =='--joint' or type =='--validate'"
                        },
                        "prompt": "Minimum number of SNPs within CNV (minsnp)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The minimum length of base pairs that a CNV call must contain\n               to be in output: test, joint, validate, trio, quartet",
                        "ctrl": {
                            "perl": "$minlength =~ m/^\\d+(k|m)?$/i",
                            "python": "minlength > 0"
                        },
                        "format": {
                            "perl": "(defined $value) ? \"--minlength $value \" : \"\"",
                            "python": "( \"\" , \" --minlength \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "minlength",
                        "paramfile": null,
                        "precond": {
                            "perl": "$type eq '--test' or $rawcnv eq '--trio' or $rawcnv eq '--quartet' or $type eq '--joint' or  $type eq '--validate'",
                            "python": "type =='--test' or rawcnv =='--trio' or rawcnv =='--quartet' or type =='--joint' or type =='--validate'"
                        },
                        "prompt": "Minimum length of bp within CNV (minlength)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Minimum confidence score for a CNV call to\n               be in output. This is an experimental feature, and the\n               actual definition of \"confidence score\" may change in\n               the future: test, validate",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"--minconf $value \" : \"\"",
                            "python": "( \"\" , \" --minconf \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "minconf",
                        "paramfile": null,
                        "precond": {
                            "perl": "$type eq '--test' or  $type eq '--validate'",
                            "python": "type =='--test' or type =='--validate'"
                        },
                        "prompt": "Minimum confidence score of CNV (minconf)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Calculate a confidence score for each CNV call. This is an\n               experimental feature, and the actual definition of \"confidence\n               score\" may change in the future: test, validate",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"--confidence\" : \"\"",
                            "python": "( \"\" , \" --confidence \" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "confidence",
                        "paramfile": null,
                        "precond": {
                            "perl": "$type eq '--test' or  $type eq '--validate'",
                            "python": "type =='--test' or type =='--validate'"
                        },
                        "prompt": "Calculate confidence for each CNV (confidence)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Process chromosome X specifically. By default only autosomes\n               will be processed by this program: test, joint, validate, trio, quartet.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"--chrx\" : \"\"",
                            "python": "( \"\" , \" --chrx \" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "chrx",
                        "paramfile": null,
                        "precond": {
                            "perl": "$type eq '--test' or  $rawcnv eq '--trio' or  $rawcnv eq '--quartet' or  $type eq '--joint' or  $type eq '--validate'",
                            "python": "type =='--test' or rawcnv =='--trio' or rawcnv =='--quartet' or type =='--joint' or type =='--validate'"
                        },
                        "prompt": "Use chromosomeX-specific treatment (chrx)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "12",
                        "command": false,
                        "comment": "A 2-column file containing filename and sex (male/female) for\n               sex chromosome calling with chromosomeX-specific (chrx) argument. The first tab-\n               delimited column should be the input signal file name, while\n               the second tab-delimited column should be male or female.\n               Alternatively, abbreviations including m (male), f (female), 1\n               (male) or 2 (female) are also fine.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"--sex $value \" : \"\"",
                            "python": "( \"\" , \" --sex \" + str(value) )[ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "sexfile",
                        "paramfile": null,
                        "precond": {
                            "perl": "$chrx and not $bafxhet",
                            "python": "chrx and not bafxhet"
                        },
                        "prompt": "Filename and sex (male/female) for chromosomeX (sex)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Sex",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This argument specifies the BAF heterozygosity rate in chrX to\n               predict the sex for a sample. Note that this rate is based on\n               BAF values so it is not genotype heterozygosity rate and indeed\n               quite different/smaller than that genotype heterozygosity rate.\n               By default if >10% chrX markers have BAF values around 0.5, the\n               sample is predicted as female. This threshold however does not\n               work for Affymetrix genome-wide arrays (instead a 5% threshold\n               is better used). For chrX CNV calling, rather than relying on\n               PennCNV prediction of gender, it is always best to explicitely\n               specify the sample sex using the -sexfile argument.",
                        "ctrl": {
                            "perl": "$bafxhet_threshold > 0 and $bafxhet_threshold < 1",
                            "python": "bafxhet > 0 and bafxhet_threshold < 1"
                        },
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"--bafxhet $value\" : \"\"",
                            "python": "( \"\" , \" --bafxhet \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "bafxhet",
                        "paramfile": null,
                        "precond": {
                            "perl": "$chrx and not $sexfile",
                            "python": "chrx and not sexfile"
                        },
                        "prompt": "Minimum BAF heterozygosity rate to predict female gender when file is not supplied (bafxhet)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "cnvcontrol",
                "precond": null,
                "prompt": "CNV output control"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Specify the start SNP of a pre-specified region used in --validate operation",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"--startsnp $value\" : \"\"",
                            "python": "( \"\" , \" --startsnp \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "startsnp",
                        "paramfile": null,
                        "precond": {
                            "perl": "not candlist",
                            "python": "not candlist"
                        },
                        "prompt": "Start SNP of a pre-specified region (startsnp)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Specify the end SNP of a pre-specified region used in --validate operation",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"--endsnp $value\" : \"\"",
                            "python": "( \"\" , \" --endsnp \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "endsnp",
                        "paramfile": null,
                        "precond": {
                            "perl": "not candlist",
                            "python": "not candlist"
                        },
                        "prompt": "End SNP of a pre-specified region (endsnp)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Specify the prior deletion allele frequency of a pre-specified\n               region used in --validate operation (this frequency can be\n               estimated from CNV calls by --test operation)",
                        "ctrl": {
                            "perl": "$delfreq < 1 and $delfreq >=0 and (delfrep+dupfreq) <1",
                            "python": "delfreq < 1 and delfreq >=0"
                        },
                        "format": {
                            "perl": "(defined $value) ? \"--delfreq $value\" : \"\"",
                            "python": "( \"\" , \" --delfreq \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "delfreq",
                        "paramfile": null,
                        "precond": {
                            "perl": "not candlist",
                            "python": "not candlist"
                        },
                        "prompt": "Prior deletion frequency of a pre-specified region (delfreq)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Specify the prior duplication allele frequency of a pre-specified region used \n            in --validate operation (this frequency can be estimated from CNV calls by --test operation)",
                        "ctrl": {
                            "perl": "$dupfreq < 1 and $dupfreq >=0",
                            "python": "dupfreq < 1 and dupfreq >=0"
                        },
                        "format": {
                            "perl": "(defined $value) ? \"--dupfreq $value\" : \"\"",
                            "python": "( \"\" , \" --dupfreq \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "dupfreq",
                        "paramfile": null,
                        "precond": {
                            "perl": "not candlist",
                            "python": "not candlist"
                        },
                        "prompt": "Prior duplication frequency of a pre-specified region (dupfreq)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Background CNV probability for any loci, with default value as\n               0.0001. This argument is useful in validation calling. When\n               -delfreq/-dupfreq is not specified, the background frequency is\n               used to calculate the prior probability of different copy number states.",
                        "ctrl": {
                            "perl": "$backfreq > 0 and $backfreq < 0.5",
                            "python": "backfreq > 0 and backfreq < 0.5"
                        },
                        "format": {
                            "perl": "(defined $value) ? \"--backfreq $value\" : \"\"",
                            "python": "( \"\" , \" --backfreq \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "backfreq",
                        "paramfile": null,
                        "precond": {
                            "perl": "not $delfreq and not $dupfreq",
                            "python": "not delfreq and not dupfreq"
                        },
                        "prompt": "Background CNV probability for any loci (backfreq)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"--candlist $value \" : \"\"",
                            "python": "( \"\" , \" --candlist \" + str(value) )[ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "candlist",
                        "paramfile": null,
                        "precond": {
                            "perl": "not $startsnp and not $endsnp and not $delfreq and not $dupfreq",
                            "python": "not startsnp and not endsnp and not delfreq and not dupfreq"
                        },
                        "prompt": "A file containing all candidate CNV regions to be validated (candlist)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "CandidateRegion",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "validateCalling",
                "precond": {
                    "perl": "$type eq '--validate'",
                    "python": "type == '--validate'"
                },
                "prompt": "Specific Validation-calling arguments (validate)"
            },
            {
                "children": [
                    {
                        "argpos": "12",
                        "command": false,
                        "comment": "A file containing phenotype informatoin for each individual, so\n               that --cctest can be used to compare the frequency between\n               cases and controls. Each line has two tab-delimited fields:\n               file name and the phenotype. By default, \"control\" means\n               control subjects, and other words means cases; however, the\n               user can use --control_label argument to change the phenotype\n               label for controls.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"--phenofile $value \" : \"\"",
                            "python": "( \"\" , \" --phenofile \" + str(value) )[ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "phenofile",
                        "paramfile": null,
                        "precond": {
                            "perl": "$rawcnv eq '--cctest'",
                            "python": "rawcnv == '--cctest'"
                        },
                        "prompt": "A file containing phenotype information for each input file (phenofile)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Phenotype",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Specify the text label for control subjects in the phenotype\n               file specified by the --phenofile argument. Normally the \"control\" is used to specify \n               controls, and all other individuals\n               are treated as cases. However, some times users may use 1 to\n               denote controls and 2 to denote cases; in such situations the\n               \"--control_label 1\" should be used for the --cctest operation.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value) ? \"--control_label $value \" : \"\"",
                            "python": "( \"\" , \" --control_label \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "control_label",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "The phenotype label for control subjects in the phenotype file (control_label)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value) ? \"--onesided\" : \"\"",
                            "python": "( \"\" , \" --onesided \" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "onesided",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Performed one-sided test (onesided)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Specify the particular types of CNVs to be used in the --cctest\n               operation. By default both duplications and deletions are\n               treated as a single group of CNVs and be used to compare cases\n               and controls.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value  and $value ne $vdef) ? \"--type_filter $value \" : \"\"",
                            "python": "( \"\" , \" --type_filter \" + str(value) )[ value is not None and value !=vdef ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "type_filter",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Used together to specify types of CNVs to be tested (type_filter)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "cctestCalling",
                "precond": {
                    "perl": "$rawcnv eq '--cctest'",
                    "python": "rawcnv == '--cctest'"
                },
                "prompt": "Specific Case-control comparison arguments (cctest)"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The prior probability of 6 hidden states a given CNV call in\n               father or mother.  This is used for joint calling of trios or\n               quartets. It is specified as six numbers separated by a comma that sum up to 1.\n               The empirically derived default values actually work well: trio, quartet.",
                        "ctrl": {
                            "perl": "$value ~= /\\d+(,\\d+){5}/",
                            "python": "len(value.split(',')) == 6"
                        },
                        "format": {
                            "perl": "(defined $value) ? \"--fmprior $value \" : \"\"",
                            "python": "( \"\" , \" --fmprior \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "fmprior",
                        "paramfile": null,
                        "precond": {
                            "perl": "$rawcnv eq '--trio' or  $rawcnv eq '--quartet'",
                            "python": "rawcnv =='--trio' or rawcnv =='--quartet'"
                        },
                        "prompt": "Prior belief on CN state for regions with CNV calls. Six numbers separated by a comma (fmprior)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Specify the probability that a given CNV is a de novo event for\n               family-based CNV calling. The default is 0.0001. trio, quartet",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value  and $value != $vdef) ? \"--denovo_rate $value\" : \"\"",
                            "python": "( \"\" , \" --denovo_rate \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "denovo_rate",
                        "paramfile": null,
                        "precond": {
                            "perl": "$rawcnv eq '--trio' or  $rawcnv eq '--quartet'",
                            "python": "rawcnv =='--trio' or rawcnv =='--quartet'"
                        },
                        "prompt": "Prior belief on genome-wide de novo event rate (denovo_rate)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Float",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This option is turned on by default. It adjust the log R Ratio\n               values of the entire genome by a constant so that the median is\n               zero: test, trio, quartet, joint, validate.",
                        "ctrl": null,
                        "format": {
                            "perl": "(not $value) ? \"--nomedianadjust\" : \"\"",
                            "python": "( \"\" , \" --nomedianadjust \" )[ not value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "medianadjust",
                        "paramfile": null,
                        "precond": {
                            "perl": "$type eq '--test' or $rawcnv eq '--trio' or $rawcnv eq '--quartet' or $type eq '--joint' or  $type eq '--validate'",
                            "python": "type =='--test' or rawcnv =='--trio' or rawcnv =='--quartet' or type =='--joint' or type =='--validate'"
                        },
                        "prompt": "Adjust genome-wide LRR such that median equal 0 (nomedianadjust)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This option is turned ON by default (new July 2008): it adjust\n               the BAF values genome-wide such that the median value is 0.5.",
                        "ctrl": null,
                        "format": {
                            "perl": "(not $value) ? \"--nobafadjust\" : \"\"",
                            "python": "( \"\" , \" --nobafadjust \" )[ not value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "bafadjust",
                        "paramfile": null,
                        "precond": {
                            "perl": "$type eq '--test' or $rawcnv eq '--trio' or $rawcnv eq '--quartet' or  $type eq '--joint' or  $type eq '--validate'",
                            "python": "type =='--test' or rawcnv =='--trio' or rawcnv =='--quartet' or type =='--joint' or type =='--validate'"
                        },
                        "prompt": "Adjust genome-wide BAF such that median equal 0.5 (nobafadjust)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This option is turned ON by default: it adjust the SD values in\n               HMM model such that the model fits the signal quality of the\n               testing sample to reduce false positive calls",
                        "ctrl": null,
                        "format": {
                            "perl": "(not $value) ? \"--nosdadjust\" : \"\"",
                            "python": "( \"\" , \" --nosdadjust \" )[ not value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "sdadjust",
                        "paramfile": null,
                        "precond": {
                            "perl": "$type eq '--test' or $rawcnv eq '--trio' or $rawcnv eq '--quartet' or $type eq '--joint' or  $type eq '--validate'",
                            "python": "type =='--test' or rawcnv =='--trio' or rawcnv =='--quartet' or type =='--joint' or type =='--validate'"
                        },
                        "prompt": "Adjust SD of hidden Markov model based on input signal (nosdadjust)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "This argument is turned ON by default. It requires the\n               input/output buffer to flush immediately (that is, no\n               input/output is buffered). When PennCNV is running remotely\n               (for example, through a SSH connection) or when the output is\n               redirected, this argument cause the program to report progress\n               in real-time.  When running PennCNV in parallel with many processes \n               accessing disks simultaneously, this option should be\n               turned off to decrease system overhead.",
                        "ctrl": null,
                        "format": {
                            "perl": "(not $value) ? \"--noflush\" : \"\"",
                            "python": "( \"\" , \" --noflush \" )[ not value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "flush",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Flush input/output buffer (noflush)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "miscOpt",
                "precond": null,
                "prompt": "Misc options"
            },
            {
                "argpos": "17",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" --out detect_cnv.out \"",
                    "python": "\" --out detect_cnv.out \""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "outfile_name",
                "paramfile": null,
                "precond": {
                    "perl": "($type is not None or $rawcnv is not None) and $type ne '--test'",
                    "python": "(type is not None or rawcnv is not None) and type != '--test'"
                },
                "prompt": "Outfile for detect_cnv and Input file for visualize_cnv",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Filename",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "detect_cnv",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"$infile.*\"",
                    "python": "infile + \".*\""
                },
                "hidden": true,
                "main": false,
                "name": "output_split_file",
                "output_type": "file",
                "precond": {
                    "perl": "defined $infile",
                    "python": "infile is not None"
                },
                "prompt": "Split files",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Split",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "comment": null,
                        "filenames": {
                            "perl": "\"$infile_rawcnv\"",
                            "python": "infile + \"_rawcnv\""
                        },
                        "hidden": false,
                        "main": false,
                        "name": "output_cnv_file",
                        "output_type": "file",
                        "precond": {
                            "perl": "$type eq '--test' and $infile",
                            "python": "type == '--test' and infile"
                        },
                        "prompt": "CNV file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Cnv",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "analyse",
                "precond": null,
                "prompt": "Penncnv analyses"
            },
            {
                "children": [
                    {
                        "comment": null,
                        "filenames": {
                            "perl": "\"$infile.$outputformatcnv\"",
                            "python": "infile + \"_\" + outputformat + \"cnv\""
                        },
                        "hidden": false,
                        "main": false,
                        "name": "bed_cnv_file",
                        "output_type": "file",
                        "precond": {
                            "perl": "$type eq '--test' and $infile and $outputformat ne 'output'",
                            "python": "type == '--test' and infile and outputformat != 'output'"
                        },
                        "prompt": "CNV calls file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Cnv",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "comment": null,
                        "filenames": {
                            "perl": "\"$infile.$outputformat\"",
                            "python": "infile + \"_\" + outputformat"
                        },
                        "hidden": false,
                        "main": false,
                        "name": "bed_file",
                        "output_type": "file",
                        "precond": {
                            "perl": "($type is not None or $rawcnv is not None) and $type ne '--test' and $outputformat ne 'output'",
                            "python": "(type is not None or rawcnv is not None) and type != '--test' and outputformat != 'output'"
                        },
                        "prompt": "Output file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Cnv",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "cnvoutput",
                "precond": null,
                "prompt": "CNV output format"
            },
            {
                "comment": null,
                "filenames": {
                    "perl": "\"detect_cnv.out\"",
                    "python": "\"detect_cnv.out\""
                },
                "hidden": false,
                "main": false,
                "name": "output_file",
                "output_type": "stdout",
                "precond": {
                    "perl": "$type ne '--test'",
                    "python": "type != '--test'"
                },
                "prompt": "Output file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "Cnv",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [],
    "source_links": [],
    "title": "detect_cnv",
    "type": "program",
    "version": null
}