{
    "authors": null,
    "classifications": [
        {
            "classification": "alignment:multiple:display",
            "type": "mobyle1"
        },
        {
            "classification": "structure:2D_structure",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": "RNAalifold"
    },
    "comment": "RNAalifold reads aligned RNA sequences from file and  calculates \n        their minimum free energy (mfe) structure, partition function (pf) and base pairing probability matrix. \n        Currently, the input alignment  has  to  be  in  CLUSTAL  format.  \n        It returns  the  mfe  structure in bracket notation, its energy, \n        the free energy of the thermodynamic ensemble and the frequency of the mfe structure \n        in  the  ensemble  to outfile.  It  also  produces  Postscript files with plots of the resulting \n        secondary structure graph (\"alirna.ps\") and a \"dot plot\" of the  base  pairing  matrix  (\"alidot.ps\"). \n        The file \"alifold.out\" will contain a list of likely pairs sorted by credibility.CAVEATS: Since gaps are not removed for the evaluation of energies, \n        it may be of advantage to remove any columns with more than, say, \n        75% gaps from the alignment before folding with RNAalifold.Sequences are not weighted. If possible, do not mix very similar and dissimilar sequences. \n\t\tDuplicate sequences, for example, can distort the prediction.",
    "description": "Calculate secondary structures for a set of aligned RNAs",
    "documentation_links": [
        "http://www.tbi.univie.ac.at/RNA/RNAalifold.html"
    ],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": "1000",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\" $value\"",
                    "python": "\" \"+str( value )"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "seq",
                "paramfile": null,
                "precond": null,
                "prompt": "Aligned RNA Sequences File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [
                        "Nucleic"
                    ],
                    "card": null,
                    "datatype": {
                        "class": "Alignment",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": [
                        "CLUSTAL"
                    ]
                }
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Set  the  weight  of  the  covariance  term in the energy function to factor. Default is 1.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -cv $value\" : \"\"",
                            "python": "( \"\" , \" -cv \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "covariance",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Weight of the covariance (-cv)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Set the penalty for non-compatible sequences in the covariance  term  of  the energy function to factor. Default is 1.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -nc $value\" : \"\"",
                            "python": "( \"\" , \" -nc \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "non_compatible",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Penalty for non-compatible sequences in the covariance (-nc)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Score pairs with endgaps same as gap-gap pairs.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -E\" : \"\"",
                            "python": "( \"\" , \" -E\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "endgaps",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Score pairs with endgaps (-E)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Calculate  the  partition function and base pairing probability matrix in addition to the mfe structure. Default is calculation  of  mfe  structure only.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -p\" : \"\"",
                            "python": "( \"\" , \" -p\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "partition",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Calculate the partition function and base pairing probability matrix (-p)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value != $vdef)? \" -T $value\" : \"\"",
                            "python": "( \"\" , \" -T \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "temperature",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Rescale energy parameters to a temperature of temp C. (-T)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -4\" : \"\"",
                            "python": "( \"\" , \" -4\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "tetraloops",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Do not include special stabilizing energies for certain tetraloops (-4)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "How to treat 'dangling end' energies for bases adjacent to helices in free ends and multiloops: Normally only unpaired bases can participate in at most one dangling end.\n             With -d2 this check is ignored, this is the default for partition function folding (-p). \n             -d ignores dangling ends altogether. Note that by default pf and mfe folding treat dangling ends differently, \n             use -d2 (or -d) in addition to -p to ensure that both algorithms use the same energy model. \n             The -d2 options is available for RNAfold, RNAeval, and RNAinverse only.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef)? \" $value\" : \"\"",
                            "python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "dangling",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "How to treat dangling end energies for bases adjacent to helices in free ends and multiloops (-d)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "control",
                "precond": null,
                "prompt": "Control options"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Assume circular (instead of linear) RNA molecules.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -circ\" : \"\"",
                            "python": "( \"\" , \" -circ\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "circ",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Circular RNA molecules (-circ)?",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Produce structures without lonely pairs (helices of length 1).  For  partition  function  folding  this  only disallows pairs that can only occur isolated. Other pairs may still occasionally occur as helices  of  length 1.",
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -noLP\" : \"\"",
                            "python": "( \"\" , \" -noLP\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "noLP",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Avoid structures without lonely pairs (helices of length 1) (-noLP)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -noGU\" : \"\"",
                            "python": "( \"\" , \" -noGU\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "noGU",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Do not allow GU pairs (-noGU)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -noCloseGU\" : \"\"",
                            "python": "( \"\" , \" -noCloseGU\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "noCloseGU",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Do not allow GU pairs at the end of helices (-noCloseGU)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Allow other pairs in addition to the usual AU,GC,and GU pairs. pairs is a comma seperated list of additionally allowed pairs. If a the first character is a '-' then AB will imply that AB and BA are allowed pairs. e.g. RNAfold -nsp -GA will allow GA and AG pairs. Nonstandard pairs are given 0 stacking energy.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -nsp $value\" : \"\"",
                            "python": "( \"\"  , \" -nsp \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "nsp",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Non standard pairs (comma seperated list) (-nsp)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "String",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Read energy parameters from paramfile, instead of using the default parameter set. A sample parameterfile should accompany your distribution. See the RNAlib documentation for details on the file format.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -P $value\" : \"\"",
                            "python": "( \"\" , \" -P \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "parameter",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Energy parameter file (-P)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "EnergyParameterFile",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "use specified Ribosum Matrix instead of normal energy model. Matrices to use\n              should be 6x6 matrices, the order of the terms is AU, CG, GC, GU, UA, UG.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -P $value\" : \"\"",
                            "python": "( \"\" , \" -P \" + str(value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "ribosum_matrix",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "use specified Ribosum Matrix instead of normal energy model.",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "ribosum_matrix",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "use  Ribosum  scoring  matrix. The matrix is chosen according to the minimal\n              and maximal pairwise identities of the sequences in the  file.   When  using\n              Ribosum  scores,  best  benchmark results were achieved with options -cv 0.6\n              -nc 0.5 (see above).",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -r $value\" : \"\"",
                            "python": "( \"\" , \" -r \")[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "use_ribosum_matrix",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "use  Ribosum  scoring  matrix.",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "The programm reads first the sequence then the a string containg constraints on the structure encoded with the symbols:| (the corresponding base has to be paired x (the base is unpaired)< (base i is paired with a base j>i)> (base i is paired with a base j<i)matching brackets ( ) (base i pairs base j)Pf folding ignores constraints of type '|' '<' and '>', but disallow all pairs conflicting with a constraint of type 'x' or '( )'. This is usually sufficient to enforce the constraint.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -C < $value\" : \"\"",
                            "python": "( \"\" , \" -C <\" + str( value) )[ value is not None ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "constraints",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Calculate structures subject to constraints (-C)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Constraint",
                                "superclass": "AbstractText"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "input",
                "precond": null,
                "prompt": "Input parameters"
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -mis\" : \"\"",
                            "python": "( \"\" , \" -mis\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "informative",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Print most informative sequence instead of simple consensus (-mis)?",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Produce a colored version of the consensus strcture plot \"alirna.ps\" (default black and white).",
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -color\" : \"\"",
                            "python": "( \"\" , \" -color\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "color",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Produce a colored version of the consensus strcture plot (-color)?",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Produce a colored and structure annotated alignment in PostScript  format  in the file \"aln.ps\".",
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -aln\" : \"\"",
                            "python": "( \"\" , \" -aln\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "aln",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Produce a colored and structure annotated alignment in PostScript format (-aln) ?",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "output_options",
                "precond": null,
                "prompt": "Output options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "rnaalifold",
    "outputs": {
        "children": [
            {
                "comment": null,
                "filenames": {
                    "perl": "\"*.ps\"",
                    "python": "\"*.ps\""
                },
                "hidden": false,
                "main": false,
                "name": "psfiles",
                "output_type": "file",
                "precond": null,
                "prompt": "Postscript file",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "PostScript",
                        "superclass": "Binary"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "comment": "The  file  \"alifold.out\"  will  contain a list of likely pairs sorted by\n       credibility, suitable for viewing  with \"AliDot.pl\"",
                "filenames": {
                    "perl": "\"alifold.out\"",
                    "python": "\"alifold.out\""
                },
                "hidden": false,
                "main": false,
                "name": "alifold_out",
                "output_type": "file",
                "precond": {
                    "perl": "$partition",
                    "python": "partition"
                },
                "prompt": "list of likely pairs",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "vienna_likely_pairs",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "D.H. Mathews, J. Sabina, M. Zuker and H. Turner \"Expanded Sequence Dependence of Thermodynamic Parameters Provides Robust Prediction of RNA Secondary Structure\" JMB, 288, pp 911-940, 1999",
            "url": null
        },
        {
            "doi": null,
            "label": "vo L. Hofacker, Martin Fekete, and Peter F. Stadler \"Secondary Structure Prediction for Aligned RNA Sequences\" J.Mol.Biol. 319: 1059-1066 (2002).",
            "url": null
        }
    ],
    "source_links": [],
    "title": "RNAalifold",
    "type": "program",
    "version": null
}