{
    "authors": "Hofacker, Fontana, Hofacker, Stadler",
    "classifications": [
        {
            "classification": "sequence:nucleic:2D_structure",
            "type": "mobyle1"
        },
        {
            "classification": "structure:2D_structure",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": null
    },
    "comment": "RNAdistance reads  RNA  secondary structures  from stdin and  calculates one or more measures  for their dissimilarity, based  on  tree  or  string  editing  (alignment).  In  addition  it calculates a \"base pair distance\" given by the number of base pairs present in one structure, but not the other. For structures of different length base pair distance is not recommended.",
    "description": "Calculate distances between RNA secondary structures",
    "documentation_links": [],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "argpos": null,
                "command": true,
                "comment": null,
                "ctrl": null,
                "format": {
                    "perl": "\"RNAdistance \"",
                    "python": "\"RNAdistance \""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "rnadistance",
                "paramfile": null,
                "precond": null,
                "prompt": null,
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "argpos": "1000",
                "command": false,
                "comment": "The program accepts structures in bracket format, where matching brackets symbolize base pairs and unpaired bases are represented by a dot '.', or coarse grained representations where hairpins, interior loops, bulges, multiloops, stacks and external bases are represented by (H), (I), (B), (M), (S), and (E), respectively. These can be optionally weighted. Full structures can be represented in the same fashion using the identifiers (U) and (P) for unpaired and paired bases, respectively. Examples:.((..(((...)))..((..)))). full structure (usual format);(U)((U2)((U3)P3)(U2)((U2)P2)P2) HIT structure;((H)(H)M) or ((((H)S)((H)S)M)S) coarse grained structure;(((((H3)S3)((H2)S2)M4)S2)E2) weighted coarse grained.",
                "ctrl": null,
                "format": {
                    "perl": "\" < $value\"",
                    "python": "\" < \" +str(value)"
                },
                "hidden": false,
                "main": false,
                "mandatory": true,
                "name": "struct",
                "paramfile": null,
                "precond": null,
                "prompt": "RNA structures File",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "RNAStructure",
                        "superclass": "AbstractText"
                    },
                    "edam_types": [],
                    "formats": []
                }
            },
            {
                "children": [
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Use the full, HIT, weighted coarse, or coarse representation to calculate the distance. Capital letters indicate string alignment otherwise tree editing is used. Any combination of distances can be specified.  -DP  selects  the  base pair distance. The default if \"f\".",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef)? \" -D$value\" : \"\"",
                            "python": "( \"\" , \" -D\" +str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "distance",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Representation for distance calculation (-D)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "p: compare  the  structures pairwise (p), that is first with 2nd, third with 4th etc. This is the default.m: calculate the distance matrix between all structures. The output is formatted as a lower triangle matrix.f: compare each structure to the first one.c: compare continuously, that is i-th with (i+1)th structure.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value and $value ne $vdef)? \" -X$value\" : \"\"",
                            "python": "( \"\" , \" -X\" +str(value) )[ value is not None and value != vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "compare",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Which comparisons (-X)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Choice",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "children": [
                            {
                                "argpos": null,
                                "command": false,
                                "comment": "AnalyseDists reads a distance matrix (given as lower triangle matrix) from stdin and writes a split decomposition and a cluster analysis of this distance matrix to stdout.",
                                "ctrl": null,
                                "format": {
                                    "perl": "($value)? \" | AnalyseDists\" : \"\"",
                                    "python": "(\"\", \" | AnalyseDists\")[value]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "do_analyse",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "Do this analysis (AnalyseDists program)?",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Boolean",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            },
                            {
                                "argpos": "2001",
                                "command": false,
                                "comment": null,
                                "ctrl": null,
                                "format": {
                                    "perl": "(defined $value and $value ne $vdef)? \" -X$value\" : \"\"",
                                    "python": "(\"\", \" -X\"+str(value))[ value is not None and value != vdef]"
                                },
                                "hidden": false,
                                "main": false,
                                "mandatory": false,
                                "name": "Method",
                                "paramfile": null,
                                "precond": null,
                                "prompt": "AnalyseDist methods to be used (-X)",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "Choice",
                                        "superclass": null
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": "Only when  comparison between all structures is requested (-Xm). This uses AnalyseDists distributed with the Vienna package.",
                        "name": "matrix_options",
                        "precond": {
                            "perl": "$compare eq \"m\"",
                            "python": "compare == \"m\""
                        },
                        "prompt": "Analyse the distance matrix"
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "perl": "($value)? \" -S\" : \"\"",
                            "python": "( \"\" , \" -S\" )[ value ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "shapiro",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Use the Bruce Shapiro's cost matrix for comparing coarse structures (-S)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": null,
                        "command": false,
                        "comment": "Print an 'alignment' with gaps of the structures, to show matching substructures. The aligned structures are written to file, if specified. Otherwise output is written to stdout, unless the -Xm option is set in which case 'backtrack.file' is used.",
                        "ctrl": null,
                        "format": {
                            "perl": "(defined $value)? \" -B $value\" : \"\"",
                            "python": "( \"\" , \" -B \" +str(value) )[ value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "alignment_name",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Structure alignment file (-B)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "others_options",
                "precond": null,
                "prompt": "Other options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "rnadistance",
    "outputs": {
        "children": [
            {
                "children": [
                    {
                        "children": [
                            {
                                "comment": null,
                                "filenames": {
                                    "perl": "\"*.ps\"",
                                    "python": "\"*.ps\""
                                },
                                "hidden": false,
                                "main": false,
                                "name": "psfiles",
                                "output_type": "file",
                                "precond": {
                                    "perl": "$compare eq \"m\" and $Method ne \"s\"",
                                    "python": "compare == \"m\" and Method != \"s\""
                                },
                                "prompt": "Postcript output file",
                                "simple": null,
                                "type": {
                                    "biomoby_datatypes": [],
                                    "biotypes": [],
                                    "card": null,
                                    "datatype": {
                                        "class": "PostScript",
                                        "superclass": "Binary"
                                    },
                                    "edam_types": [],
                                    "formats": []
                                }
                            }
                        ],
                        "comment": "Only when  comparison between all structures is requested (-Xm). This uses AnalyseDists distributed with the Vienna package.",
                        "name": "matrix_options",
                        "precond": {
                            "perl": "$compare eq \"m\"",
                            "python": "compare == \"m\""
                        },
                        "prompt": "Analyse the distance matrix"
                    },
                    {
                        "comment": null,
                        "filenames": {
                            "perl": "$alignment_name",
                            "python": "str(alignment_name)"
                        },
                        "hidden": false,
                        "main": false,
                        "name": "ali_outfile",
                        "output_type": "file",
                        "precond": {
                            "perl": "$alignment_name",
                            "python": "alignment_name is not None"
                        },
                        "prompt": "Alignment output file",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "RnadistanceReport",
                                "superclass": "Report"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "others_options",
                "precond": null,
                "prompt": "Other options"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [
        {
            "doi": null,
            "label": "Shapiro B A, (1988) An algorithm for comparing multiple RNA secondary structures, CABIOS 4, 381-393 Shapiro B A, Zhang K (1990) Comparing multiple RNA secondary structures using tree comparison, CABIOS 6, 309-318",
            "url": null
        },
        {
            "doi": null,
            "label": "Fontana W, Konings D A M, Stadler P F, Schuster P, (1993) Statistics of RNA secondary structures, Biopolymers 33, 1389-1404 I.L. Hofacker, W. Fontana, P.F. Stadler, S. Bonhoeffer, M. Tacker, P. Schuster (1994) Fast Folding and Comparison of RNA Secondary Structures. Monatshefte f. Chemie 125, 167-188",
            "url": null
        }
    ],
    "source_links": [],
    "title": "RNAdistance",
    "type": "program",
    "version": null
}