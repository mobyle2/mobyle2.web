{
    "authors": null,
    "classifications": [
        {
            "classification": "sequence:nucleic:composition",
            "type": "mobyle1"
        },
        {
            "classification": "sequence:protein:composition",
            "type": "mobyle1"
        }
    ],
    "command": {
        "path": null,
        "value": "compseq"
    },
    "comment": null,
    "description": "Calculate the composition of unique words in sequences",
    "documentation_links": [
        "http://bioweb2.pasteur.fr/docs/EMBOSS/compseq.html",
        "http://emboss.sourceforge.net/docs/themes"
    ],
    "env": [],
    "homepage_links": [],
    "inputs": {
        "children": [
            {
                "children": [
                    {
                        "argpos": "1",
                        "command": false,
                        "comment": null,
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -sequence=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "e_sequence",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "sequence option",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": "1,n",
                            "datatype": {
                                "class": "Sequence",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": [
                                "EMBL",
                                "FASTA",
                                "GCG",
                                "GENBANK",
                                "NBRF",
                                "PIR",
                                "RAW",
                                "SWISSPROT",
                                "GFF"
                            ]
                        }
                    },
                    {
                        "argpos": "2",
                        "command": false,
                        "comment": "This is a file previously produced by 'compseq' that can be used to set the expected frequencies of words in this analysis. \n  The word size in the current run must be the same as the one in  this results file. Obviously, you should use a file produced from  protein sequences if you are counting protein sequence word  frequencies, and you must use one made from nucleotide frequencies  if you are analysing a nucleotide sequence.",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -infile=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_infile",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Program compseq output file (optional)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "CompseqReport",
                                "superclass": "Report"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "e_input",
                "precond": null,
                "prompt": "Input section"
            },
            {
                "children": [
                    {
                        "argpos": "3",
                        "command": false,
                        "comment": "This is the size of word (n-mer) to count. \n Thus if you want to count codon frequencies for a nucleotide  sequence, you should enter 3 here.",
                        "ctrl": {
                            "python": "value >= 1"
                        },
                        "format": {
                            "python": "(\"\", \" -word=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": true,
                        "name": "e_word",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Word size to consider (e.g. 2=dimer) (value greater than or equal to 1)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "e_required",
                "precond": null,
                "prompt": "Required section"
            },
            {
                "children": [
                    {
                        "argpos": "4",
                        "command": false,
                        "comment": "The normal behaviour of 'compseq' is to count the frequencies of all words that occur by moving a window of length  'word' up by one each time. \n  This option allows you to move the window up by the length of the  word each time, skipping over the intervening words. \n  You can count only those words that occur in a single frame of the  word by setting this value to a number other than zero. \n  If you set it to 1 it will only count the words in frame 1, 2 will  only count the words in frame 2 and so on.",
                        "ctrl": {
                            "python": "value >= 0"
                        },
                        "format": {
                            "python": "(\"\", \" -frame=\" + str(value))[value is not None and value!=vdef]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_frame",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Frame of word to look at (0=all frames) (value greater than or equal to 0)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Integer",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "5",
                        "command": false,
                        "comment": "The amino acid code B represents Asparagine or Aspartic acid and the code Z represents Glutamine or Glutamic acid. \n  These are not commonly used codes and you may wish not to count  words containing them, just noting them in the count of 'Other'  words.",
                        "ctrl": null,
                        "format": {
                            "python": "(\" -noignorebz\", \"\")[ bool(value) ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_ignorebz",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Ignore the amino acids b and z and just count them as 'other'",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "6",
                        "command": false,
                        "comment": "Set this to be true if you also wish to also count words in the reverse complement of a nucleic sequence.",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -reverse\")[ bool(value) ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_reverse",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Count words in the forward and reverse sense",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "7",
                        "command": false,
                        "comment": "If this is set true then the expected frequencies of words are calculated from the observed frequency of single bases or  residues in the sequences. \n  If you are reporting a word size of 1 (single bases or residues)  then there is no point in using this option because the calculated  expected frequency will be equal to the observed frequency. \n  Calculating the expected frequencies like this will give an  approximation of the expected frequencies that you might get by  using an input file of frequencies produced by a previous run of  this program. If an input file of expected word frequencies has  been specified then the values from that file will be used instead  of this calculation of expected frequency from the sequence, even  if 'calcfreq' is set to be true.",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\", \" -calcfreq\")[ bool(value) ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_calcfreq",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Calculate expected frequency from sequence",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "e_additional",
                "precond": null,
                "prompt": "Additional section"
            },
            {
                "children": [
                    {
                        "argpos": "8",
                        "command": false,
                        "comment": "This is the results file.",
                        "ctrl": null,
                        "format": {
                            "python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_outfile",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Name of the output file (e_outfile)",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Filename",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    },
                    {
                        "argpos": "9",
                        "command": false,
                        "comment": "You can make the output results file much smaller if you do not display the words with a zero count.",
                        "ctrl": null,
                        "format": {
                            "python": "(\" -nozerocount\", \"\")[ bool(value) ]"
                        },
                        "hidden": false,
                        "main": false,
                        "mandatory": false,
                        "name": "e_zerocount",
                        "paramfile": null,
                        "precond": null,
                        "prompt": "Display the words that have a frequency of zero",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "Boolean",
                                "superclass": null
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "e_output",
                "precond": null,
                "prompt": "Output section"
            },
            {
                "argpos": "10",
                "command": false,
                "comment": null,
                "ctrl": null,
                "format": {
                    "python": "\" -auto -stdout\""
                },
                "hidden": true,
                "main": false,
                "mandatory": false,
                "name": "auto",
                "paramfile": null,
                "precond": null,
                "prompt": "Turn off any prompting",
                "simple": null,
                "type": {
                    "biomoby_datatypes": [],
                    "biotypes": [],
                    "card": null,
                    "datatype": {
                        "class": "String",
                        "superclass": null
                    },
                    "edam_types": [],
                    "formats": []
                }
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "name": "compseq",
    "outputs": {
        "children": [
            {
                "children": [
                    {
                        "comment": null,
                        "filenames": {
                            "python": "e_outfile"
                        },
                        "hidden": false,
                        "main": false,
                        "name": "e_outfile_out",
                        "output_type": "file",
                        "precond": null,
                        "prompt": "outfile_out option",
                        "simple": null,
                        "type": {
                            "biomoby_datatypes": [],
                            "biotypes": [],
                            "card": null,
                            "datatype": {
                                "class": "CompseqReport",
                                "superclass": "Report"
                            },
                            "edam_types": [],
                            "formats": []
                        }
                    }
                ],
                "comment": null,
                "name": "e_output",
                "precond": null,
                "prompt": "Output section"
            }
        ],
        "comment": null,
        "name": null,
        "precond": null,
        "prompt": null
    },
    "package": null,
    "references": [],
    "source_links": [],
    "title": "compseq",
    "type": "program",
    "version": null
}